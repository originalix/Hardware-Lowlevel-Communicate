// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"3loJC":[function(require,module,exports) {
var global = arguments[3];
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SECURE = false;
var HMR_ENV_HASH = "42036d7a98ade5a7";
module.bundle.HMR_BUNDLE_ID = "0e44517fe70e0048";
"use strict";
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, chrome, browser, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: {|[string]: mixed|};
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
interface ExtensionContext {
  runtime: {|
    reload(): void,
    getURL(url: string): string;
    getManifest(): {manifest_version: number, ...};
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
declare var chrome: ExtensionContext;
declare var browser: ExtensionContext;
declare var __parcel__import__: (string) => Promise<void>;
declare var __parcel__importScripts__: (string) => Promise<void>;
declare var globalThis: typeof self;
declare var ServiceWorkerGlobalScope: Object;
*/ var OVERLAY_ID = "__parcel__error__overlay__";
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData[moduleName],
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function(fn) {
            this._acceptCallbacks.push(fn || function() {});
        },
        dispose: function(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData[moduleName] = undefined;
}
module.bundle.Module = Module;
module.bundle.hotData = {};
var checkedAssets /*: {|[string]: boolean|} */ , assetsToDispose /*: Array<[ParcelRequire, string]> */ , assetsToAccept /*: Array<[ParcelRequire, string]> */ ;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf("http") === 0 ? location.hostname : "localhost");
}
function getPort() {
    return HMR_PORT || location.port;
}
// eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== "undefined") {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == "https:" && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? "wss" : "ws";
    var ws = new WebSocket(protocol + "://" + hostname + (port ? ":" + port : "") + "/");
    // Web extension context
    var extCtx = typeof chrome === "undefined" ? typeof browser === "undefined" ? null : browser : chrome;
    // Safari doesn't support sourceURL in error stacks.
    // eval may also be disabled via CSP, so do a quick check.
    var supportsSourceURL = false;
    try {
        (0, eval)('throw new Error("test"); //# sourceURL=test.js');
    } catch (err) {
        supportsSourceURL = err.stack.includes("test.js");
    }
    // $FlowFixMe
    ws.onmessage = async function(event /*: {data: string, ...} */ ) {
        checkedAssets = {} /*: {|[string]: boolean|} */ ;
        assetsToAccept = [];
        assetsToDispose = [];
        var data /*: HMRMessage */  = JSON.parse(event.data);
        if (data.type === "update") {
            // Remove error overlay if there is one
            if (typeof document !== "undefined") removeErrorOverlay();
            let assets = data.assets.filter((asset)=>asset.envHash === HMR_ENV_HASH);
            // Handle HMR Update
            let handled = assets.every((asset)=>{
                return asset.type === "css" || asset.type === "js" && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
            });
            if (handled) {
                console.clear();
                // Dispatch custom event so other runtimes (e.g React Refresh) are aware.
                if (typeof window !== "undefined" && typeof CustomEvent !== "undefined") window.dispatchEvent(new CustomEvent("parcelhmraccept"));
                await hmrApplyUpdates(assets);
                // Dispose all old assets.
                let processedAssets = {} /*: {|[string]: boolean|} */ ;
                for(let i = 0; i < assetsToDispose.length; i++){
                    let id = assetsToDispose[i][1];
                    if (!processedAssets[id]) {
                        hmrDispose(assetsToDispose[i][0], id);
                        processedAssets[id] = true;
                    }
                }
                // Run accept callbacks. This will also re-execute other disposed assets in topological order.
                processedAssets = {};
                for(let i = 0; i < assetsToAccept.length; i++){
                    let id = assetsToAccept[i][1];
                    if (!processedAssets[id]) {
                        hmrAccept(assetsToAccept[i][0], id);
                        processedAssets[id] = true;
                    }
                }
            } else fullReload();
        }
        if (data.type === "error") {
            // Log parcel errors to console
            for (let ansiDiagnostic of data.diagnostics.ansi){
                let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                console.error("\uD83D\uDEA8 [parcel]: " + ansiDiagnostic.message + "\n" + stack + "\n\n" + ansiDiagnostic.hints.join("\n"));
            }
            if (typeof document !== "undefined") {
                // Render the fancy html overlay
                removeErrorOverlay();
                var overlay = createErrorOverlay(data.diagnostics.html);
                // $FlowFixMe
                document.body.appendChild(overlay);
            }
        }
    };
    ws.onerror = function(e) {
        console.error(e.message);
    };
    ws.onclose = function() {
        console.warn("[parcel] \uD83D\uDEA8 Connection to the HMR server was lost");
    };
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log("[parcel] ✨ Error resolved");
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement("div");
    overlay.id = OVERLAY_ID;
    let errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    for (let diagnostic of diagnostics){
        let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame)=>{
            return `${p}
<a href="/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}" style="text-decoration: underline; color: #888" onclick="fetch(this.href); return false">${frame.location}</a>
${frame.code}`;
        }, "") : diagnostic.stack;
        errorHTML += `
      <div>
        <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">
          🚨 ${diagnostic.message}
        </div>
        <pre>${stack}</pre>
        <div>
          ${diagnostic.hints.map((hint)=>"<div>\uD83D\uDCA1 " + hint + "</div>").join("")}
        </div>
        ${diagnostic.documentation ? `<div>📝 <a style="color: violet" href="${diagnostic.documentation}" target="_blank">Learn more</a></div>` : ""}
      </div>
    `;
    }
    errorHTML += "</div>";
    overlay.innerHTML = errorHTML;
    return overlay;
}
function fullReload() {
    if ("reload" in location) location.reload();
    else if (extCtx && extCtx.runtime && extCtx.runtime.reload) extCtx.runtime.reload();
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var href = link.getAttribute("href");
    if (!href) return;
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute("href", // $FlowFixMe
    href.split("?")[0] + "?" + Date.now());
    // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href /*: string */  = links[i].getAttribute("href");
            var hostname = getHostname();
            var servedFromHMRServer = hostname === "localhost" ? new RegExp("^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):" + getPort()).test(href) : href.indexOf(hostname + ":" + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrDownload(asset) {
    if (asset.type === "js") {
        if (typeof document !== "undefined") {
            let script = document.createElement("script");
            script.src = asset.url + "?t=" + Date.now();
            if (asset.outputFormat === "esmodule") script.type = "module";
            return new Promise((resolve, reject)=>{
                var _document$head;
                script.onload = ()=>resolve(script);
                script.onerror = reject;
                (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(script);
            });
        } else if (typeof importScripts === "function") {
            // Worker scripts
            if (asset.outputFormat === "esmodule") return import(asset.url + "?t=" + Date.now());
            else return new Promise((resolve, reject)=>{
                try {
                    importScripts(asset.url + "?t=" + Date.now());
                    resolve();
                } catch (err) {
                    reject(err);
                }
            });
        }
    }
}
async function hmrApplyUpdates(assets) {
    global.parcelHotUpdate = Object.create(null);
    let scriptsToRemove;
    try {
        // If sourceURL comments aren't supported in eval, we need to load
        // the update from the dev server over HTTP so that stack traces
        // are correct in errors/logs. This is much slower than eval, so
        // we only do it if needed (currently just Safari).
        // https://bugs.webkit.org/show_bug.cgi?id=137297
        // This path is also taken if a CSP disallows eval.
        if (!supportsSourceURL) {
            let promises = assets.map((asset)=>{
                var _hmrDownload;
                return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch((err)=>{
                    // Web extension bugfix for Chromium
                    // https://bugs.chromium.org/p/chromium/issues/detail?id=1255412#c12
                    if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3) {
                        if (typeof ServiceWorkerGlobalScope != "undefined" && global instanceof ServiceWorkerGlobalScope) {
                            extCtx.runtime.reload();
                            return;
                        }
                        asset.url = extCtx.runtime.getURL("/__parcel_hmr_proxy__?url=" + encodeURIComponent(asset.url + "?t=" + Date.now()));
                        return hmrDownload(asset);
                    }
                    throw err;
                });
            });
            scriptsToRemove = await Promise.all(promises);
        }
        assets.forEach(function(asset) {
            hmrApply(module.bundle.root, asset);
        });
    } finally{
        delete global.parcelHotUpdate;
        if (scriptsToRemove) scriptsToRemove.forEach((script)=>{
            if (script) {
                var _document$head2;
                (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(script);
            }
        });
    }
}
function hmrApply(bundle /*: ParcelRequire */ , asset /*:  HMRAsset */ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === "css") reloadCSS();
    else if (asset.type === "js") {
        let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
        if (deps) {
            if (modules[asset.id]) {
                // Remove dependencies that are removed and will become orphaned.
                // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.
                let oldDeps = modules[asset.id][1];
                for(let dep in oldDeps)if (!deps[dep] || deps[dep] !== oldDeps[dep]) {
                    let id = oldDeps[dep];
                    let parents = getParents(module.bundle.root, id);
                    if (parents.length === 1) hmrDelete(module.bundle.root, id);
                }
            }
            if (supportsSourceURL) // Global eval. We would use `new Function` here but browser
            // support for source maps is better with eval.
            (0, eval)(asset.output);
            // $FlowFixMe
            let fn = global.parcelHotUpdate[asset.id];
            modules[asset.id] = [
                fn,
                deps
            ];
        } else if (bundle.parent) hmrApply(bundle.parent, asset);
    }
}
function hmrDelete(bundle, id) {
    let modules = bundle.modules;
    if (!modules) return;
    if (modules[id]) {
        // Collect dependencies that will become orphaned when this module is deleted.
        let deps = modules[id][1];
        let orphans = [];
        for(let dep in deps){
            let parents = getParents(module.bundle.root, deps[dep]);
            if (parents.length === 1) orphans.push(deps[dep]);
        }
        // Delete the module. This must be done before deleting dependencies in case of circular dependencies.
        delete modules[id];
        delete bundle.cache[id];
        // Now delete the orphans.
        orphans.forEach((id)=>{
            hmrDelete(module.bundle.root, id);
        });
    } else if (bundle.parent) hmrDelete(bundle.parent, id);
}
function hmrAcceptCheck(bundle /*: ParcelRequire */ , id /*: string */ , depsByBundle /*: ?{ [string]: { [string]: string } }*/ ) {
    if (hmrAcceptCheckOne(bundle, id, depsByBundle)) return true;
    // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.
    let parents = getParents(module.bundle.root, id);
    let accepted = false;
    while(parents.length > 0){
        let v = parents.shift();
        let a = hmrAcceptCheckOne(v[0], v[1], null);
        if (a) // If this parent accepts, stop traversing upward, but still consider siblings.
        accepted = true;
        else {
            // Otherwise, queue the parents in the next level upward.
            let p = getParents(module.bundle.root, v[1]);
            if (p.length === 0) {
                // If there are no parents, then we've reached an entry without accepting. Reload.
                accepted = false;
                break;
            }
            parents.push(...p);
        }
    }
    return accepted;
}
function hmrAcceptCheckOne(bundle /*: ParcelRequire */ , id /*: string */ , depsByBundle /*: ?{ [string]: { [string]: string } }*/ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return true;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToDispose.push([
        bundle,
        id
    ]);
    if (!cached || cached.hot && cached.hot._acceptCallbacks.length) {
        assetsToAccept.push([
            bundle,
            id
        ]);
        return true;
    }
}
function hmrDispose(bundle /*: ParcelRequire */ , id /*: string */ ) {
    var cached = bundle.cache[id];
    bundle.hotData[id] = {};
    if (cached && cached.hot) cached.hot.data = bundle.hotData[id];
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData[id]);
    });
    delete bundle.cache[id];
}
function hmrAccept(bundle /*: ParcelRequire */ , id /*: string */ ) {
    // Execute the module.
    bundle(id);
    // Run the accept callbacks in the new version of the module.
    var cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) {
            assetsToAlsoAccept.forEach(function(a) {
                hmrDispose(a[0], a[1]);
            });
            // $FlowFixMe[method-unbinding]
            assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
        }
    });
}

},{}],"jvaAX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _hdCommonConnectSdk = require("@onekeyfe/hd-common-connect-sdk");
var _hdCommonConnectSdkDefault = parcelHelpers.interopDefault(_hdCommonConnectSdk);
function checkSDK() {
    console.log("===> hello world: ", (0, _hdCommonConnectSdkDefault.default));
    console.log((0, _hdCommonConnectSdkDefault.default));
}
let bridge;
function setupWKWebViewJavascriptBridge(callback) {
    if (window.WKWebViewJavascriptBridge) return callback(WKWebViewJavascriptBridge);
    if (window.WKWVJBCallbacks) return window.WKWVJBCallbacks.push(callback);
    window.WKWVJBCallbacks = [
        callback
    ];
    window.webkit.messageHandlers.iOS_Native_InjectJavascript.postMessage(null);
}
setupWKWebViewJavascriptBridge(function(_bridge) {
    bridge = _bridge;
    /* Initialize your app here */ registerBridgeHandler(_bridge);
    bridge.registerHandler("testJavascriptHandler", function(data, responseCallback) {
        console.log("iOS called testJavascriptHandler with", data);
        responseCallback({
            "Javascript Says": "Right back atcha!"
        });
    });
});
let isInitialized = false;
function getHardwareSDKInstance() {
    return new Promise(async (resolve, reject)=>{
        if (!bridge) throw new Error("bridge is not connected");
        if (isInitialized) {
            console.log("already initialized, skip");
            resolve((0, _hdCommonConnectSdkDefault.default));
            return;
        }
        const settings = {
            env: "lowlevel",
            debug: true
        };
        const plugin = createLowlevelPlugin();
        try {
            await (0, _hdCommonConnectSdkDefault.default).init(settings, undefined, plugin);
            console.log("HardwareSDK init success");
            isInitialized = true;
            resolve((0, _hdCommonConnectSdkDefault.default));
        // HardwareSDK.on("LOG_EVENT", (messages) => {
        // 	if (messages && Array.isArray(messages.payload)) {
        // 		console.log(messages.payload.join(' '));
        // 	}
        // });
        } catch (e) {
            reject(e);
        }
    });
}
function createLowlevelPlugin() {
    const plugin = {
        enumerate: ()=>{
            return new Promise((resolve)=>{
                bridge.callHandler("enumerate", {}, (response)=>{
                    console.log("===> call enumerate response: ", response);
                    resolve(response);
                });
            });
        },
        send: (uuid, data)=>{
            return new Promise((resolve)=>{
                bridge.callHandler("send", {
                    uuid,
                    data
                }, (response)=>{
                    console.log("call send response: ", response);
                    resolve(response);
                });
            });
        },
        receive: ()=>{
            return new Promise((resolve)=>{
                bridge.callHandler("receive", {}, (response)=>{
                    console.log("call receive response: ", response);
                    resolve(response);
                });
            });
        },
        connect: (uuid)=>{
            return new Promise((resolve)=>{
                bridge.callHandler("connect", {
                    uuid
                }, (response)=>{
                    console.log("call pre connect response: ", response);
                });
                bridge.registerHandler("connectFinished", ()=>{
                    resolve();
                });
            });
        },
        disconnect: (uuid)=>{
            return new Promise((resolve)=>{
                bridge.callHandler("disconnect", {
                    uuid
                }, (response)=>{
                    console.log("call connect response: ", response);
                    resolve(response);
                });
            });
        },
        init: ()=>{
            console.log("call init");
            return Promise.resolve();
        },
        version: "OneKey-1.0"
    };
    return plugin;
}
function registerBridgeHandler(bridge) {
    bridge.registerHandler("init", async (data, callback)=>{
        try {
            await getHardwareSDKInstance();
            callback({
                success: true
            });
        } catch (e) {
            console.error(e);
            callback({
                success: false,
                error: e.message
            });
        }
    });
    bridge.registerHandler("searchDevice", async (data, callback)=>{
        try {
            const SDK = await getHardwareSDKInstance();
            const response = await SDK.searchDevices();
            callback(response);
        } catch (e) {
            console.error(e);
            callback({
                success: false,
                error: e.message
            });
        }
    });
    bridge.registerHandler("getFeatures", async (data, callback)=>{
        try {
            const SDK = await getHardwareSDKInstance();
            const response = await SDK.getFeatures(data.connectId);
            callback(response);
        } catch (e) {
            console.error(e);
            callback({
                success: false,
                error: e.message
            });
        }
    });
}

},{"@onekeyfe/hd-common-connect-sdk":"7Wwlj","@parcel/transformer-js/src/esmodule-helpers.js":"j7FRh"}],"7Wwlj":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var HardwareSdk = require("e660733b590255ff");
var hdShared = require("3822dbb815d74457");
var HttpTransport = require("11717475ac9f0ac0");
var WebusbTransport = require("23e38e736e4cad15");
var LowlevelTransport = require("e5fcd47894ef291");
function _interopDefaultLegacy(e) {
    return e && typeof e === "object" && "default" in e ? e : {
        "default": e
    };
}
var HardwareSdk__default = /*#__PURE__*/ _interopDefaultLegacy(HardwareSdk);
var HttpTransport__default = /*#__PURE__*/ _interopDefaultLegacy(HttpTransport);
var WebusbTransport__default = /*#__PURE__*/ _interopDefaultLegacy(WebusbTransport);
var LowlevelTransport__default = /*#__PURE__*/ _interopDefaultLegacy(LowlevelTransport);
/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
var events = {
    exports: {}
};
var R = typeof Reflect === "object" ? Reflect : null;
var ReflectApply = R && typeof R.apply === "function" ? R.apply : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
};
var ReflectOwnKeys;
if (R && typeof R.ownKeys === "function") ReflectOwnKeys = R.ownKeys;
else if (Object.getOwnPropertySymbols) ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
};
else ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
};
function ProcessEmitWarning(warning) {
    if (console && console.warn) console.warn(warning);
}
var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
    return value !== value;
};
function EventEmitter() {
    EventEmitter.init.call(this);
}
events.exports = EventEmitter;
events.exports.once = once;
// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;
EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;
// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;
function checkListener(listener) {
    if (typeof listener !== "function") throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
}
Object.defineProperty(EventEmitter, "defaultMaxListeners", {
    enumerable: true,
    get: function() {
        return defaultMaxListeners;
    },
    set: function(arg) {
        if (typeof arg !== "number" || arg < 0 || NumberIsNaN(arg)) throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + ".");
        defaultMaxListeners = arg;
    }
});
EventEmitter.init = function() {
    if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
        this._events = Object.create(null);
        this._eventsCount = 0;
    }
    this._maxListeners = this._maxListeners || undefined;
};
// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
    if (typeof n !== "number" || n < 0 || NumberIsNaN(n)) throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + ".");
    this._maxListeners = n;
    return this;
};
function _getMaxListeners(that) {
    if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
    return that._maxListeners;
}
EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
    return _getMaxListeners(this);
};
EventEmitter.prototype.emit = function emit(type) {
    var args = [];
    for(var i = 1; i < arguments.length; i++)args.push(arguments[i]);
    var doError = type === "error";
    var events = this._events;
    if (events !== undefined) doError = doError && events.error === undefined;
    else if (!doError) return false;
    // If there is no 'error' event listener then throw.
    if (doError) {
        var er;
        if (args.length > 0) er = args[0];
        if (er instanceof Error) // Note: The comments on the `throw` lines are intentional, they show
        // up in Node's output if this results in an unhandled exception.
        throw er; // Unhandled 'error' event
        // At least give some kind of context to the user
        var err = new Error("Unhandled error." + (er ? " (" + er.message + ")" : ""));
        err.context = er;
        throw err; // Unhandled 'error' event
    }
    var handler = events[type];
    if (handler === undefined) return false;
    if (typeof handler === "function") ReflectApply(handler, this, args);
    else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for(var i = 0; i < len; ++i)ReflectApply(listeners[i], this, args);
    }
    return true;
};
function _addListener(target, type, listener, prepend) {
    var m;
    var events;
    var existing;
    checkListener(listener);
    events = target._events;
    if (events === undefined) {
        events = target._events = Object.create(null);
        target._eventsCount = 0;
    } else {
        // To avoid recursion in the case that type === "newListener"! Before
        // adding it to the listeners, first emit "newListener".
        if (events.newListener !== undefined) {
            target.emit("newListener", type, listener.listener ? listener.listener : listener);
            // Re-assign `events` because a newListener handler could have caused the
            // this._events to be assigned to a new object
            events = target._events;
        }
        existing = events[type];
    }
    if (existing === undefined) {
        // Optimize the case of one listener. Don't need the extra array object.
        existing = events[type] = listener;
        ++target._eventsCount;
    } else {
        if (typeof existing === "function") // Adding the second element, need to change to array.
        existing = events[type] = prepend ? [
            listener,
            existing
        ] : [
            existing,
            listener
        ];
        else if (prepend) existing.unshift(listener);
        else existing.push(listener);
        // Check for listener leak
        m = _getMaxListeners(target);
        if (m > 0 && existing.length > m && !existing.warned) {
            existing.warned = true;
            // No error code for this since it is a Warning
            // eslint-disable-next-line no-restricted-syntax
            var w = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + String(type) + " listeners " + "added. Use emitter.setMaxListeners() to " + "increase limit");
            w.name = "MaxListenersExceededWarning";
            w.emitter = target;
            w.type = type;
            w.count = existing.length;
            ProcessEmitWarning(w);
        }
    }
    return target;
}
EventEmitter.prototype.addListener = function addListener(type, listener) {
    return _addListener(this, type, listener, false);
};
EventEmitter.prototype.on = EventEmitter.prototype.addListener;
EventEmitter.prototype.prependListener = function prependListener(type, listener) {
    return _addListener(this, type, listener, true);
};
function onceWrapper() {
    if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        if (arguments.length === 0) return this.listener.call(this.target);
        return this.listener.apply(this.target, arguments);
    }
}
function _onceWrap(target, type, listener) {
    var state = {
        fired: false,
        wrapFn: undefined,
        target: target,
        type: type,
        listener: listener
    };
    var wrapped = onceWrapper.bind(state);
    wrapped.listener = listener;
    state.wrapFn = wrapped;
    return wrapped;
}
EventEmitter.prototype.once = function once(type, listener) {
    checkListener(listener);
    this.on(type, _onceWrap(this, type, listener));
    return this;
};
EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
    checkListener(listener);
    this.prependListener(type, _onceWrap(this, type, listener));
    return this;
};
// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener = function removeListener(type, listener) {
    var list, events, position, i, originalListener;
    checkListener(listener);
    events = this._events;
    if (events === undefined) return this;
    list = events[type];
    if (list === undefined) return this;
    if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0) this._events = Object.create(null);
        else {
            delete events[type];
            if (events.removeListener) this.emit("removeListener", type, list.listener || listener);
        }
    } else if (typeof list !== "function") {
        position = -1;
        for(i = list.length - 1; i >= 0; i--)if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
        }
        if (position < 0) return this;
        if (position === 0) list.shift();
        else spliceOne(list, position);
        if (list.length === 1) events[type] = list[0];
        if (events.removeListener !== undefined) this.emit("removeListener", type, originalListener || listener);
    }
    return this;
};
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
    var listeners, events, i;
    events = this._events;
    if (events === undefined) return this;
    // not listening for removeListener, no need to emit
    if (events.removeListener === undefined) {
        if (arguments.length === 0) {
            this._events = Object.create(null);
            this._eventsCount = 0;
        } else if (events[type] !== undefined) {
            if (--this._eventsCount === 0) this._events = Object.create(null);
            else delete events[type];
        }
        return this;
    }
    // emit removeListener for all listeners on all events
    if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for(i = 0; i < keys.length; ++i){
            key = keys[i];
            if (key === "removeListener") continue;
            this.removeAllListeners(key);
        }
        this.removeAllListeners("removeListener");
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
    }
    listeners = events[type];
    if (typeof listeners === "function") this.removeListener(type, listeners);
    else if (listeners !== undefined) // LIFO order
    for(i = listeners.length - 1; i >= 0; i--)this.removeListener(type, listeners[i]);
    return this;
};
function _listeners(target, type, unwrap) {
    var events = target._events;
    if (events === undefined) return [];
    var evlistener = events[type];
    if (evlistener === undefined) return [];
    if (typeof evlistener === "function") return unwrap ? [
        evlistener.listener || evlistener
    ] : [
        evlistener
    ];
    return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}
EventEmitter.prototype.listeners = function listeners(type) {
    return _listeners(this, type, true);
};
EventEmitter.prototype.rawListeners = function rawListeners(type) {
    return _listeners(this, type, false);
};
EventEmitter.listenerCount = function(emitter, type) {
    if (typeof emitter.listenerCount === "function") return emitter.listenerCount(type);
    else return listenerCount.call(emitter, type);
};
EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
    var events = this._events;
    if (events !== undefined) {
        var evlistener = events[type];
        if (typeof evlistener === "function") return 1;
        else if (evlistener !== undefined) return evlistener.length;
    }
    return 0;
}
EventEmitter.prototype.eventNames = function eventNames() {
    return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};
function arrayClone(arr, n) {
    var copy = new Array(n);
    for(var i = 0; i < n; ++i)copy[i] = arr[i];
    return copy;
}
function spliceOne(list, index) {
    for(; index + 1 < list.length; index++)list[index] = list[index + 1];
    list.pop();
}
function unwrapListeners(arr) {
    var ret = new Array(arr.length);
    for(var i = 0; i < ret.length; ++i)ret[i] = arr[i].listener || arr[i];
    return ret;
}
function once(emitter, name) {
    return new Promise(function(resolve, reject) {
        function errorListener(err) {
            emitter.removeListener(name, resolver);
            reject(err);
        }
        function resolver() {
            if (typeof emitter.removeListener === "function") emitter.removeListener("error", errorListener);
            resolve([].slice.call(arguments));
        }
        eventTargetAgnosticAddListener(emitter, name, resolver, {
            once: true
        });
        if (name !== "error") addErrorHandlerIfEventEmitter(emitter, errorListener, {
            once: true
        });
    });
}
function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
    if (typeof emitter.on === "function") eventTargetAgnosticAddListener(emitter, "error", handler, flags);
}
function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
    if (typeof emitter.on === "function") {
        if (flags.once) emitter.once(name, listener);
        else emitter.on(name, listener);
    } else if (typeof emitter.addEventListener === "function") // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
        // IE does not have builtin `{ once: true }` support so we
        // have to do it manually.
        if (flags.once) emitter.removeEventListener(name, wrapListener);
        listener(arg);
    });
    else throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
}
var eventEmitter = new events.exports();
var Log = HardwareSdk.getLogger(HardwareSdk.LoggerNames.HdCommonConnectSdk);
var _core;
var _settings = HardwareSdk.parseConnectSettings();
var _messageID = 0;
var messagePromises = {};
var dispose = function() {
    eventEmitter.removeAllListeners();
    _settings = HardwareSdk.parseConnectSettings();
};
var uiResponse = function(response) {
    if (!_core) throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.NotInitialized);
    var type = response.type, payload = response.payload;
    _core.handleMessage({
        event: HardwareSdk.UI_EVENT,
        type: type,
        payload: payload
    });
};
var cancel = function(connectId) {
    if (_core === undefined) return;
    _core.handleMessage({
        event: HardwareSdk.IFRAME.CANCEL,
        type: HardwareSdk.IFRAME.CANCEL,
        payload: {
            connectId: connectId
        }
    });
};
function handleMessage(message) {
    var event = message.event;
    if (!_core) return;
    if (event !== HardwareSdk.LOG_EVENT) Log.debug("hd-common-connect-sdk handleMessage", message);
    switch(event){
        case HardwareSdk.UI_EVENT:
            // pass UI event up
            eventEmitter.emit(message.event, message);
            eventEmitter.emit(message.type, message.payload);
            break;
        case HardwareSdk.LOG_EVENT:
        case HardwareSdk.FIRMWARE_EVENT:
            eventEmitter.emit(message.event, message);
            break;
        case HardwareSdk.DEVICE_EVENT:
            if ([
                HardwareSdk.DEVICE.CONNECT,
                HardwareSdk.DEVICE.DISCONNECT,
                HardwareSdk.DEVICE.FEATURES,
                HardwareSdk.DEVICE.SUPPORT_FEATURES
            ].includes(message.type)) eventEmitter.emit(message.type, message.payload);
            break;
        default:
            Log.log("No need to be captured message", message.event);
    }
}
function postMessage(message, usePromise) {
    if (usePromise === void 0) usePromise = true;
    return __awaiter(this, void 0, void 0, function() {
        var response;
        return __generator(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (!_core) throw hdShared.ERRORS.TypedError("postMessage: _core not found");
                    if (!usePromise) return [
                        3 /*break*/ ,
                        2
                    ];
                    _messageID++;
                    messagePromises[_messageID] = hdShared.createDeferred();
                    return [
                        4 /*yield*/ ,
                        _core.handleMessage(__assign(__assign({}, message), {
                            id: "".concat(_messageID)
                        }))
                    ];
                case 1:
                    response = _a.sent();
                    // return promise;
                    return [
                        2 /*return*/ ,
                        response
                    ];
                case 2:
                    _core.handleMessage(message);
                    return [
                        2 /*return*/ 
                    ];
            }
        });
    });
}
var init = function(settings, _, plugin) {
    return __awaiter(void 0, void 0, void 0, function() {
        var Transport, error_1;
        var _a;
        return __generator(this, function(_b) {
            switch(_b.label){
                case 0:
                    _settings = __assign(__assign(__assign({}, _settings), settings), {
                        env: (_a = settings.env) !== null && _a !== void 0 ? _a : "node"
                    });
                    HardwareSdk.enableLog(!!settings.debug);
                    Log.debug("init");
                    _b.label = 1;
                case 1:
                    _b.trys.push([
                        1,
                        3,
                        ,
                        4
                    ]);
                    console.log(_settings.env);
                    Transport = void 0;
                    switch(_settings.env){
                        case "webusb":
                            Transport = WebusbTransport__default["default"];
                            break;
                        case "lowlevel":
                            Transport = LowlevelTransport__default["default"];
                            break;
                        default:
                            Transport = HttpTransport__default["default"];
                    }
                    return [
                        4 /*yield*/ ,
                        HardwareSdk.initCore(_settings, Transport, plugin)
                    ];
                case 2:
                    _core = _b.sent();
                    _core === null || _core === void 0 || _core.on(HardwareSdk.CORE_EVENT, handleMessage);
                    HardwareSdk.setLoggerPostMessage(handleMessage);
                    return [
                        2 /*return*/ ,
                        true
                    ];
                case 3:
                    error_1 = _b.sent();
                    Log.error(HardwareSdk.createErrorMessage(error_1));
                    return [
                        2 /*return*/ ,
                        false
                    ];
                case 4:
                    return [
                        2 /*return*/ 
                    ];
            }
        });
    });
};
var call = function(params) {
    return __awaiter(void 0, void 0, void 0, function() {
        var response, error_2;
        return __generator(this, function(_a) {
            switch(_a.label){
                case 0:
                    Log.debug("call: ", params);
                    _a.label = 1;
                case 1:
                    _a.trys.push([
                        1,
                        3,
                        ,
                        4
                    ]);
                    return [
                        4 /*yield*/ ,
                        postMessage({
                            event: HardwareSdk.IFRAME.CALL,
                            type: HardwareSdk.IFRAME.CALL,
                            payload: params
                        })
                    ];
                case 2:
                    response = _a.sent();
                    if (response) {
                        Log.debug("response: ", response);
                        return [
                            2 /*return*/ ,
                            response
                        ];
                    }
                    return [
                        2 /*return*/ ,
                        HardwareSdk.createErrorMessage(hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.CallMethodNotResponse))
                    ];
                case 3:
                    error_2 = _a.sent();
                    Log.error("__call error: ", error_2);
                    return [
                        2 /*return*/ ,
                        HardwareSdk.createErrorMessage(error_2)
                    ];
                case 4:
                    return [
                        2 /*return*/ 
                    ];
            }
        });
    });
};
var updateSettings = function() {
    return Promise.resolve(true);
};
var HardwareCommonConnectSdk = HardwareSdk__default["default"]({
    eventEmitter: eventEmitter,
    init: init,
    call: call,
    cancel: cancel,
    dispose: dispose,
    uiResponse: uiResponse,
    updateSettings: updateSettings
});
exports["default"] = HardwareCommonConnectSdk;
exports.messagePromises = messagePromises;

},{"e660733b590255ff":"2h9hh","3822dbb815d74457":"avzkU","11717475ac9f0ac0":"aGoic","23e38e736e4cad15":"3DGXq","e5fcd47894ef291":"dQk5R"}],"2h9hh":[function(require,module,exports) {
var global = arguments[3];
var Buffer = require("73edeffe60a8e68b").Buffer;
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var semver = require("1139e48f07fc2969");
var hdShared = require("fdb5764d4d0876f4");
var axios = require("69e4186655659d9f");
var ByteBuffer = require("fa714668eef2e075");
var BigNumber = require("b3fd151d6b0f5809");
var utils = require("92e338de2728c632");
var blake2s = require("64e524ea58cdfdf2");
var hdTransport = require("9f5c1708ede1ba06");
var sha256 = require("3838adddd7db5b5e");
var JSZip = require("be07e9afeed78ad8");
var lodash = require("75461cd0f2a64932");
var sha3 = require("ded9cefc8e5c4c3e");
var rippleKeypairs = require("84f125717592932a");
var blake2b = require("c6555bb0c3dc343f");
var buffer = require("73edeffe60a8e68b");
function _interopDefaultLegacy(e) {
    return e && typeof e === "object" && "default" in e ? e : {
        "default": e
    };
}
var semver__default = /*#__PURE__*/ _interopDefaultLegacy(semver);
var axios__default = /*#__PURE__*/ _interopDefaultLegacy(axios);
var ByteBuffer__default = /*#__PURE__*/ _interopDefaultLegacy(ByteBuffer);
var BigNumber__default = /*#__PURE__*/ _interopDefaultLegacy(BigNumber);
var JSZip__default = /*#__PURE__*/ _interopDefaultLegacy(JSZip);
const inject = ({ call, cancel, dispose, eventEmitter, init, updateSettings, uiResponse })=>{
    const api = Object.assign({
        on: (type, fn)=>{
            eventEmitter.on(type, fn);
        },
        emit: ()=>{},
        off: (type, fn)=>{
            eventEmitter.removeListener(type, fn);
        },
        removeAllListeners: (type)=>{
            eventEmitter.removeAllListeners(type);
        },
        init,
        call,
        dispose,
        uiResponse,
        cancel,
        updateSettings
    }, createCoreApi(call));
    return api;
};
const createCoreApi = (call)=>({
        getLogs: ()=>call({
                method: "getLogs"
            }),
        searchDevices: ()=>call({
                method: "searchDevices"
            }),
        getFeatures: (connectId)=>call({
                connectId,
                method: "getFeatures"
            }),
        checkFirmwareRelease: (connectId)=>call({
                connectId,
                method: "checkFirmwareRelease"
            }),
        checkBLEFirmwareRelease: (connectId)=>call({
                connectId,
                method: "checkBLEFirmwareRelease"
            }),
        checkTransportRelease: ()=>call({
                method: "checkTransportRelease"
            }),
        checkBridgeStatus: ()=>call({
                method: "checkBridgeStatus"
            }),
        checkBridgeRelease: (connectId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                method: "checkBridgeRelease"
            })),
        checkBootloaderRelease: (connectId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                method: "checkBootloaderRelease"
            })),
        cipherKeyValue: (connectId, deviceId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                deviceId,
                method: "cipherKeyValue"
            })),
        deviceBackup: (connectId)=>call({
                connectId,
                method: "deviceBackup"
            }),
        deviceChangePin: (connectId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                method: "deviceChangePin"
            })),
        deviceFlags: (connectId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                method: "deviceFlags"
            })),
        deviceRebootToBoardloader: (connectId)=>call({
                connectId,
                method: "deviceRebootToBoardloader"
            }),
        deviceRebootToBootloader: (connectId)=>call({
                connectId,
                method: "deviceRebootToBootloader"
            }),
        deviceRecovery: (connectId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                method: "deviceRecovery"
            })),
        deviceReset: (connectId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                method: "deviceReset"
            })),
        deviceSettings: (connectId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                method: "deviceSettings"
            })),
        deviceUpdateReboot: (connectId)=>call({
                connectId,
                method: "deviceUpdateReboot"
            }),
        deviceUploadResource: (connectId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                method: "deviceUploadResource"
            })),
        deviceSupportFeatures: (connectId)=>call({
                connectId,
                method: "deviceSupportFeatures"
            }),
        deviceVerify: (connectId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                method: "deviceVerify"
            })),
        deviceWipe: (connectId)=>call({
                connectId,
                method: "deviceWipe"
            }),
        deviceFullyUploadResource: (connectId)=>call({
                connectId,
                method: "deviceFullyUploadResource"
            }),
        deviceUpdateBootloader: (connectId)=>call({
                connectId,
                method: "deviceUpdateBootloader"
            }),
        getPassphraseState: (connectId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                method: "getPassphraseState"
            })),
        evmGetAddress: (connectId, deviceId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                deviceId,
                method: "evmGetAddress"
            })),
        evmGetPublicKey: (connectId, deviceId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                deviceId,
                method: "evmGetPublicKey"
            })),
        evmSignMessage: (connectId, deviceId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                deviceId,
                method: "evmSignMessage"
            })),
        evmSignMessageEIP712: (connectId, deviceId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                deviceId,
                method: "evmSignMessageEIP712"
            })),
        evmSignTransaction: (connectId, deviceId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                deviceId,
                method: "evmSignTransaction"
            })),
        evmSignTypedData: (connectId, deviceId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                deviceId,
                method: "evmSignTypedData"
            })),
        evmVerifyMessage: (connectId, deviceId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                deviceId,
                method: "evmVerifyMessage"
            })),
        btcGetAddress: (connectId, deviceId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                deviceId,
                method: "btcGetAddress"
            })),
        btcGetPublicKey: (connectId, deviceId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                deviceId,
                method: "btcGetPublicKey"
            })),
        btcSignMessage: (connectId, deviceId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                deviceId,
                method: "btcSignMessage"
            })),
        btcSignTransaction: (connectId, deviceId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                deviceId,
                method: "btcSignTransaction"
            })),
        btcVerifyMessage: (connectId, deviceId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                deviceId,
                method: "btcVerifyMessage"
            })),
        starcoinGetAddress: (connectId, deviceId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                deviceId,
                method: "starcoinGetAddress"
            })),
        starcoinGetPublicKey: (connectId, deviceId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                deviceId,
                method: "starcoinGetPublicKey"
            })),
        starcoinSignMessage: (connectId, deviceId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                deviceId,
                method: "starcoinSignMessage"
            })),
        starcoinSignTransaction: (connectId, deviceId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                deviceId,
                method: "starcoinSignTransaction"
            })),
        starcoinVerifyMessage: (connectId, deviceId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                deviceId,
                method: "starcoinVerifyMessage"
            })),
        nemGetAddress: (connectId, deviceId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                deviceId,
                method: "nemGetAddress"
            })),
        nemSignTransaction: (connectId, deviceId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                deviceId,
                method: "nemSignTransaction"
            })),
        solGetAddress: (connectId, deviceId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                deviceId,
                method: "solGetAddress"
            })),
        solSignTransaction: (connectId, deviceId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                deviceId,
                method: "solSignTransaction"
            })),
        stellarGetAddress: (connectId, deviceId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                deviceId,
                method: "stellarGetAddress"
            })),
        stellarSignTransaction: (connectId, deviceId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                deviceId,
                method: "stellarSignTransaction"
            })),
        firmwareUpdate: (connectId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                method: "firmwareUpdate"
            })),
        firmwareUpdateV2: (connectId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                method: "firmwareUpdateV2"
            })),
        requestWebUsbDevice: ()=>call({
                method: "requestWebUsbDevice"
            }),
        tronGetAddress: (connectId, deviceId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                deviceId,
                method: "tronGetAddress"
            })),
        tronSignMessage: (connectId, deviceId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                deviceId,
                method: "tronSignMessage"
            })),
        tronSignTransaction: (connectId, deviceId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                deviceId,
                method: "tronSignTransaction"
            })),
        confluxGetAddress: (connectId, deviceId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                deviceId,
                method: "confluxGetAddress"
            })),
        confluxSignMessage: (connectId, deviceId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                deviceId,
                method: "confluxSignMessage"
            })),
        confluxSignMessageCIP23: (connectId, deviceId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                deviceId,
                method: "confluxSignMessageCIP23"
            })),
        confluxSignTransaction: (connectId, deviceId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                deviceId,
                method: "confluxSignTransaction"
            })),
        nearGetAddress: (connectId, deviceId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                deviceId,
                method: "nearGetAddress"
            })),
        nearSignTransaction: (connectId, deviceId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                deviceId,
                method: "nearSignTransaction"
            })),
        aptosGetAddress: (connectId, deviceId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                deviceId,
                method: "aptosGetAddress"
            })),
        aptosGetPublicKey: (connectId, deviceId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                deviceId,
                method: "aptosGetPublicKey"
            })),
        aptosSignMessage: (connectId, deviceId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                deviceId,
                method: "aptosSignMessage"
            })),
        aptosSignTransaction: (connectId, deviceId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                deviceId,
                method: "aptosSignTransaction"
            })),
        algoGetAddress: (connectId, deviceId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                deviceId,
                method: "algoGetAddress"
            })),
        algoSignTransaction: (connectId, deviceId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                deviceId,
                method: "algoSignTransaction"
            })),
        cosmosGetAddress: (connectId, deviceId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                deviceId,
                method: "cosmosGetAddress"
            })),
        cosmosGetPublicKey: (connectId, deviceId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                deviceId,
                method: "cosmosGetPublicKey"
            })),
        cosmosSignTransaction: (connectId, deviceId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                deviceId,
                method: "cosmosSignTransaction"
            })),
        xrpGetAddress: (connectId, deviceId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                deviceId,
                method: "xrpGetAddress"
            })),
        xrpSignTransaction: (connectId, deviceId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                deviceId,
                method: "xrpSignTransaction"
            })),
        suiGetAddress: (connectId, deviceId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                deviceId,
                method: "suiGetAddress"
            })),
        suiGetPublicKey: (connectId, deviceId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                deviceId,
                method: "suiGetPublicKey"
            })),
        suiSignTransaction: (connectId, deviceId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                deviceId,
                method: "suiSignTransaction"
            })),
        cardanoGetAddress: (connectId, deviceId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                deviceId,
                method: "cardanoGetAddress"
            })),
        cardanoGetPublicKey: (connectId, deviceId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                deviceId,
                method: "cardanoGetPublicKey"
            })),
        cardanoSignTransaction: (connectId, deviceId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                deviceId,
                method: "cardanoSignTransaction"
            })),
        cardanoSignMessage: (connectId, deviceId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                deviceId,
                method: "cardanoSignMessage"
            })),
        filecoinGetAddress: (connectId, deviceId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                deviceId,
                method: "filecoinGetAddress"
            })),
        filecoinSignTransaction: (connectId, deviceId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                deviceId,
                method: "filecoinSignTransaction"
            })),
        polkadotGetAddress: (connectId, deviceId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                deviceId,
                method: "polkadotGetAddress"
            })),
        polkadotSignTransaction: (connectId, deviceId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                deviceId,
                method: "polkadotSignTransaction"
            })),
        kaspaGetAddress: (connectId, deviceId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                deviceId,
                method: "kaspaGetAddress"
            })),
        kaspaSignTransaction: (connectId, deviceId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                deviceId,
                method: "kaspaSignTransaction"
            })),
        nexaGetAddress: (connectId, deviceId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                deviceId,
                method: "nexaGetAddress"
            })),
        nexaSignTransaction: (connectId, deviceId, params)=>call(Object.assign(Object.assign({}, params), {
                connectId,
                deviceId,
                method: "nexaSignTransaction"
            }))
    });
const lowLevelInject = ({ call, cancel, dispose, eventEmitter, init, uiResponse, updateSettings, addHardwareGlobalEventListener })=>{
    const api = Object.assign({
        addHardwareGlobalEventListener,
        removeAllListeners: (type)=>{
            eventEmitter.removeAllListeners(type);
        },
        init,
        call,
        dispose,
        uiResponse,
        cancel,
        updateSettings,
        emit: ()=>{}
    }, createCoreApi(call));
    return api;
};
var events = {
    exports: {}
};
var R = typeof Reflect === "object" ? Reflect : null;
var ReflectApply = R && typeof R.apply === "function" ? R.apply : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
};
var ReflectOwnKeys;
if (R && typeof R.ownKeys === "function") ReflectOwnKeys = R.ownKeys;
else if (Object.getOwnPropertySymbols) ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
};
else ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
};
function ProcessEmitWarning(warning) {
    if (console && console.warn) console.warn(warning);
}
var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
    return value !== value;
};
function EventEmitter() {
    EventEmitter.init.call(this);
}
events.exports = EventEmitter;
events.exports.once = once;
// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;
EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;
// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;
function checkListener(listener) {
    if (typeof listener !== "function") throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
}
Object.defineProperty(EventEmitter, "defaultMaxListeners", {
    enumerable: true,
    get: function() {
        return defaultMaxListeners;
    },
    set: function(arg) {
        if (typeof arg !== "number" || arg < 0 || NumberIsNaN(arg)) throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + ".");
        defaultMaxListeners = arg;
    }
});
EventEmitter.init = function() {
    if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
        this._events = Object.create(null);
        this._eventsCount = 0;
    }
    this._maxListeners = this._maxListeners || undefined;
};
// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
    if (typeof n !== "number" || n < 0 || NumberIsNaN(n)) throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + ".");
    this._maxListeners = n;
    return this;
};
function _getMaxListeners(that) {
    if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
    return that._maxListeners;
}
EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
    return _getMaxListeners(this);
};
EventEmitter.prototype.emit = function emit(type) {
    var args = [];
    for(var i = 1; i < arguments.length; i++)args.push(arguments[i]);
    var doError = type === "error";
    var events = this._events;
    if (events !== undefined) doError = doError && events.error === undefined;
    else if (!doError) return false;
    // If there is no 'error' event listener then throw.
    if (doError) {
        var er;
        if (args.length > 0) er = args[0];
        if (er instanceof Error) // Note: The comments on the `throw` lines are intentional, they show
        // up in Node's output if this results in an unhandled exception.
        throw er; // Unhandled 'error' event
        // At least give some kind of context to the user
        var err = new Error("Unhandled error." + (er ? " (" + er.message + ")" : ""));
        err.context = er;
        throw err; // Unhandled 'error' event
    }
    var handler = events[type];
    if (handler === undefined) return false;
    if (typeof handler === "function") ReflectApply(handler, this, args);
    else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for(var i = 0; i < len; ++i)ReflectApply(listeners[i], this, args);
    }
    return true;
};
function _addListener(target, type, listener, prepend) {
    var m;
    var events;
    var existing;
    checkListener(listener);
    events = target._events;
    if (events === undefined) {
        events = target._events = Object.create(null);
        target._eventsCount = 0;
    } else {
        // To avoid recursion in the case that type === "newListener"! Before
        // adding it to the listeners, first emit "newListener".
        if (events.newListener !== undefined) {
            target.emit("newListener", type, listener.listener ? listener.listener : listener);
            // Re-assign `events` because a newListener handler could have caused the
            // this._events to be assigned to a new object
            events = target._events;
        }
        existing = events[type];
    }
    if (existing === undefined) {
        // Optimize the case of one listener. Don't need the extra array object.
        existing = events[type] = listener;
        ++target._eventsCount;
    } else {
        if (typeof existing === "function") // Adding the second element, need to change to array.
        existing = events[type] = prepend ? [
            listener,
            existing
        ] : [
            existing,
            listener
        ];
        else if (prepend) existing.unshift(listener);
        else existing.push(listener);
        // Check for listener leak
        m = _getMaxListeners(target);
        if (m > 0 && existing.length > m && !existing.warned) {
            existing.warned = true;
            // No error code for this since it is a Warning
            // eslint-disable-next-line no-restricted-syntax
            var w = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + String(type) + " listeners " + "added. Use emitter.setMaxListeners() to " + "increase limit");
            w.name = "MaxListenersExceededWarning";
            w.emitter = target;
            w.type = type;
            w.count = existing.length;
            ProcessEmitWarning(w);
        }
    }
    return target;
}
EventEmitter.prototype.addListener = function addListener(type, listener) {
    return _addListener(this, type, listener, false);
};
EventEmitter.prototype.on = EventEmitter.prototype.addListener;
EventEmitter.prototype.prependListener = function prependListener(type, listener) {
    return _addListener(this, type, listener, true);
};
function onceWrapper() {
    if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        if (arguments.length === 0) return this.listener.call(this.target);
        return this.listener.apply(this.target, arguments);
    }
}
function _onceWrap(target, type, listener) {
    var state = {
        fired: false,
        wrapFn: undefined,
        target: target,
        type: type,
        listener: listener
    };
    var wrapped = onceWrapper.bind(state);
    wrapped.listener = listener;
    state.wrapFn = wrapped;
    return wrapped;
}
EventEmitter.prototype.once = function once(type, listener) {
    checkListener(listener);
    this.on(type, _onceWrap(this, type, listener));
    return this;
};
EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
    checkListener(listener);
    this.prependListener(type, _onceWrap(this, type, listener));
    return this;
};
// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener = function removeListener(type, listener) {
    var list, events, position, i, originalListener;
    checkListener(listener);
    events = this._events;
    if (events === undefined) return this;
    list = events[type];
    if (list === undefined) return this;
    if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0) this._events = Object.create(null);
        else {
            delete events[type];
            if (events.removeListener) this.emit("removeListener", type, list.listener || listener);
        }
    } else if (typeof list !== "function") {
        position = -1;
        for(i = list.length - 1; i >= 0; i--)if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
        }
        if (position < 0) return this;
        if (position === 0) list.shift();
        else spliceOne(list, position);
        if (list.length === 1) events[type] = list[0];
        if (events.removeListener !== undefined) this.emit("removeListener", type, originalListener || listener);
    }
    return this;
};
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
    var listeners, events, i;
    events = this._events;
    if (events === undefined) return this;
    // not listening for removeListener, no need to emit
    if (events.removeListener === undefined) {
        if (arguments.length === 0) {
            this._events = Object.create(null);
            this._eventsCount = 0;
        } else if (events[type] !== undefined) {
            if (--this._eventsCount === 0) this._events = Object.create(null);
            else delete events[type];
        }
        return this;
    }
    // emit removeListener for all listeners on all events
    if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for(i = 0; i < keys.length; ++i){
            key = keys[i];
            if (key === "removeListener") continue;
            this.removeAllListeners(key);
        }
        this.removeAllListeners("removeListener");
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
    }
    listeners = events[type];
    if (typeof listeners === "function") this.removeListener(type, listeners);
    else if (listeners !== undefined) // LIFO order
    for(i = listeners.length - 1; i >= 0; i--)this.removeListener(type, listeners[i]);
    return this;
};
function _listeners(target, type, unwrap) {
    var events = target._events;
    if (events === undefined) return [];
    var evlistener = events[type];
    if (evlistener === undefined) return [];
    if (typeof evlistener === "function") return unwrap ? [
        evlistener.listener || evlistener
    ] : [
        evlistener
    ];
    return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}
EventEmitter.prototype.listeners = function listeners(type) {
    return _listeners(this, type, true);
};
EventEmitter.prototype.rawListeners = function rawListeners(type) {
    return _listeners(this, type, false);
};
EventEmitter.listenerCount = function(emitter, type) {
    if (typeof emitter.listenerCount === "function") return emitter.listenerCount(type);
    else return listenerCount.call(emitter, type);
};
EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
    var events = this._events;
    if (events !== undefined) {
        var evlistener = events[type];
        if (typeof evlistener === "function") return 1;
        else if (evlistener !== undefined) return evlistener.length;
    }
    return 0;
}
EventEmitter.prototype.eventNames = function eventNames() {
    return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};
function arrayClone(arr, n) {
    var copy = new Array(n);
    for(var i = 0; i < n; ++i)copy[i] = arr[i];
    return copy;
}
function spliceOne(list, index) {
    for(; index + 1 < list.length; index++)list[index] = list[index + 1];
    list.pop();
}
function unwrapListeners(arr) {
    var ret = new Array(arr.length);
    for(var i = 0; i < ret.length; ++i)ret[i] = arr[i].listener || arr[i];
    return ret;
}
function once(emitter, name) {
    return new Promise(function(resolve, reject) {
        function errorListener(err) {
            emitter.removeListener(name, resolver);
            reject(err);
        }
        function resolver() {
            if (typeof emitter.removeListener === "function") emitter.removeListener("error", errorListener);
            resolve([].slice.call(arguments));
        }
        eventTargetAgnosticAddListener(emitter, name, resolver, {
            once: true
        });
        if (name !== "error") addErrorHandlerIfEventEmitter(emitter, errorListener, {
            once: true
        });
    });
}
function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
    if (typeof emitter.on === "function") eventTargetAgnosticAddListener(emitter, "error", handler, flags);
}
function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
    if (typeof emitter.on === "function") {
        if (flags.once) emitter.once(name, listener);
        else emitter.on(name, listener);
    } else if (typeof emitter.addEventListener === "function") // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
        // IE does not have builtin `{ once: true }` support so we
        // have to do it manually.
        if (flags.once) emitter.removeEventListener(name, wrapListener);
        listener(arg);
    });
    else throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
}
const eventEmitter = new events.exports();
const topLevelInject = ()=>{
    let lowLevelApi;
    const call = (params)=>{
        if (!lowLevelApi) return Promise.resolve(undefined);
        return lowLevelApi.call(params);
    };
    const api = Object.assign(Object.assign({
        on: (type, fn)=>{
            eventEmitter.on(type, fn);
        },
        emit: (eventName, ...args)=>{
            eventEmitter.emit(eventName, ...args);
        },
        off: (type, fn)=>{
            eventEmitter.emit(type, fn);
        },
        init: (settings, hardwareLowLeverApi)=>{
            var _a;
            lowLevelApi = hardwareLowLeverApi;
            return (_a = lowLevelApi === null || lowLevelApi === void 0 ? void 0 : lowLevelApi.init(settings)) !== null && _a !== void 0 ? _a : Promise.resolve(false);
        },
        call
    }, createCoreApi(call)), {
        removeAllListeners: (type)=>{
            eventEmitter.removeAllListeners(type);
            lowLevelApi === null || lowLevelApi === void 0 || lowLevelApi.removeAllListeners(type);
        },
        dispose: ()=>lowLevelApi === null || lowLevelApi === void 0 ? void 0 : lowLevelApi.dispose(),
        uiResponse: (response)=>lowLevelApi === null || lowLevelApi === void 0 ? void 0 : lowLevelApi.uiResponse(response),
        cancel: (connectId)=>lowLevelApi === null || lowLevelApi === void 0 ? void 0 : lowLevelApi.cancel(connectId),
        updateSettings: (settings)=>{
            var _a;
            return (_a = lowLevelApi === null || lowLevelApi === void 0 ? void 0 : lowLevelApi.updateSettings(settings)) !== null && _a !== void 0 ? _a : Promise.resolve(false);
        }
    });
    return api;
};
/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
const HD_HARDENED = 0x80000000;
const toHardened = (n)=>(n | HD_HARDENED) >>> 0;
const fromHardened = (n)=>(n & ~HD_HARDENED) >>> 0;
const PATH_NOT_VALID = hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.CallMethodInvalidParameter, "Not a valid path");
const PATH_NEGATIVE_VALUES = hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.CallMethodInvalidParameter, "Path cannot contain negative values");
const getHDPath = (path)=>{
    const parts = path.toLowerCase().split("/");
    if (parts[0] !== "m") throw PATH_NOT_VALID;
    return parts.filter((p)=>p !== "m" && p !== "").map((p)=>{
        let hardened = false;
        if (p.substr(p.length - 1) === "'") {
            hardened = true;
            p = p.substr(0, p.length - 1);
        }
        let n = parseInt(p);
        if (Number.isNaN(n)) throw PATH_NOT_VALID;
        else if (n < 0) throw PATH_NEGATIVE_VALUES;
        if (hardened) n = toHardened(n);
        return n;
    });
};
const isMultisigPath = (path)=>Array.isArray(path) && path[0] === toHardened(48);
const isSegwitPath = (path)=>Array.isArray(path) && path[0] === toHardened(49);
const isTaprootPath = (path)=>Array.isArray(path) && (path[0] === toHardened(86) || path[0] === toHardened(10025));
const getScriptType = (path)=>{
    if (!Array.isArray(path) || path.length < 1) return "SPENDADDRESS";
    const p1 = fromHardened(path[0]);
    switch(p1){
        case 48:
            return "SPENDMULTISIG";
        case 49:
            return "SPENDP2SHWITNESS";
        case 84:
            return "SPENDWITNESS";
        case 86:
        case 10025:
            return "SPENDTAPROOT";
        default:
            return "SPENDADDRESS";
    }
};
const getOutputScriptType = (path)=>{
    if (!Array.isArray(path) || path.length < 1) return "PAYTOADDRESS";
    if (path[0] === 49) return "PAYTOP2SHWITNESS";
    const p = fromHardened(path[0]);
    switch(p){
        case 48:
            return "PAYTOMULTISIG";
        case 49:
            return "PAYTOP2SHWITNESS";
        case 84:
            return "PAYTOWITNESS";
        case 86:
        case 10025:
            return "PAYTOTAPROOT";
        default:
            return "PAYTOADDRESS";
    }
};
const serializedPath = (path)=>{
    const pathStr = path.map((p)=>{
        if (p & HD_HARDENED) return `${p & ~HD_HARDENED}'`;
        return p;
    }).join("/");
    return `m/${pathStr}`;
};
const validatePath = (path, length = 0, base = false)=>{
    let valid;
    if (typeof path === "string") valid = getHDPath(path);
    else if (Array.isArray(path)) valid = path.map((p)=>{
        const n = parseInt(p);
        if (Number.isNaN(n)) throw PATH_NOT_VALID;
        else if (n < 0) throw PATH_NEGATIVE_VALUES;
        return n;
    });
    else valid = undefined;
    if (!valid) throw PATH_NOT_VALID;
    if (length > 0 && valid.length < length) throw PATH_NOT_VALID;
    return base ? valid.splice(0, 3) : valid;
};
const DeviceModelToTypes = {
    model_mini: [
        "classic",
        "mini"
    ],
    model_touch: [
        "touch",
        "pro"
    ]
};
const DeviceTypeToModels = {
    classic: [
        "model_mini"
    ],
    mini: [
        "model_mini"
    ],
    touch: [
        "model_touch"
    ],
    pro: [
        "model_touch"
    ]
};
var nested$1 = {
    AlgorandGetAddress: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            show_display: {
                type: "bool",
                id: 3
            }
        }
    },
    AlgorandAddress: {
        fields: {
            address: {
                type: "string",
                id: 1
            }
        }
    },
    AlgorandSignTx: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            raw_tx: {
                rule: "required",
                type: "bytes",
                id: 2
            }
        }
    },
    AlgorandSignedTx: {
        fields: {
            signature: {
                rule: "required",
                type: "bytes",
                id: 1
            }
        }
    },
    AptosGetAddress: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            show_display: {
                type: "bool",
                id: 2
            }
        }
    },
    AptosAddress: {
        fields: {
            address: {
                type: "string",
                id: 1
            }
        }
    },
    AptosSignTx: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            raw_tx: {
                rule: "required",
                type: "bytes",
                id: 2
            }
        }
    },
    AptosSignedTx: {
        fields: {
            public_key: {
                rule: "required",
                type: "bytes",
                id: 1
            },
            signature: {
                rule: "required",
                type: "bytes",
                id: 2
            }
        }
    },
    AptosSignMessage: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            payload: {
                rule: "required",
                type: "AptosMessagePayload",
                id: 2
            }
        },
        nested: {
            AptosMessagePayload: {
                fields: {
                    address: {
                        type: "string",
                        id: 2
                    },
                    chain_id: {
                        type: "string",
                        id: 3
                    },
                    application: {
                        type: "string",
                        id: 4
                    },
                    nonce: {
                        rule: "required",
                        type: "string",
                        id: 5
                    },
                    message: {
                        rule: "required",
                        type: "string",
                        id: 6
                    }
                }
            }
        }
    },
    AptosMessageSignature: {
        fields: {
            signature: {
                rule: "required",
                type: "bytes",
                id: 1
            },
            address: {
                rule: "required",
                type: "string",
                id: 2
            }
        }
    },
    BinanceGetAddress: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            show_display: {
                type: "bool",
                id: 2
            }
        }
    },
    BinanceAddress: {
        fields: {
            address: {
                rule: "required",
                type: "string",
                id: 1
            }
        }
    },
    BinanceGetPublicKey: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            show_display: {
                type: "bool",
                id: 2
            }
        }
    },
    BinancePublicKey: {
        fields: {
            public_key: {
                rule: "required",
                type: "bytes",
                id: 1
            }
        }
    },
    BinanceSignTx: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            msg_count: {
                type: "uint32",
                id: 2
            },
            account_number: {
                type: "sint64",
                id: 3
            },
            chain_id: {
                type: "string",
                id: 4
            },
            memo: {
                type: "string",
                id: 5
            },
            sequence: {
                type: "sint64",
                id: 6
            },
            source: {
                type: "sint64",
                id: 7
            }
        }
    },
    BinanceTxRequest: {
        fields: {}
    },
    BinanceTransferMsg: {
        fields: {
            inputs: {
                rule: "repeated",
                type: "BinanceInputOutput",
                id: 1
            },
            outputs: {
                rule: "repeated",
                type: "BinanceInputOutput",
                id: 2
            }
        },
        nested: {
            BinanceInputOutput: {
                fields: {
                    address: {
                        type: "string",
                        id: 1
                    },
                    coins: {
                        rule: "repeated",
                        type: "BinanceCoin",
                        id: 2
                    }
                }
            },
            BinanceCoin: {
                fields: {
                    amount: {
                        type: "sint64",
                        id: 1
                    },
                    denom: {
                        type: "string",
                        id: 2
                    }
                }
            }
        }
    },
    BinanceOrderMsg: {
        fields: {
            id: {
                type: "string",
                id: 1
            },
            ordertype: {
                type: "BinanceOrderType",
                id: 2
            },
            price: {
                type: "sint64",
                id: 3
            },
            quantity: {
                type: "sint64",
                id: 4
            },
            sender: {
                type: "string",
                id: 5
            },
            side: {
                type: "BinanceOrderSide",
                id: 6
            },
            symbol: {
                type: "string",
                id: 7
            },
            timeinforce: {
                type: "BinanceTimeInForce",
                id: 8
            }
        },
        nested: {
            BinanceOrderType: {
                values: {
                    OT_UNKNOWN: 0,
                    MARKET: 1,
                    LIMIT: 2,
                    OT_RESERVED: 3
                }
            },
            BinanceOrderSide: {
                values: {
                    SIDE_UNKNOWN: 0,
                    BUY: 1,
                    SELL: 2
                }
            },
            BinanceTimeInForce: {
                values: {
                    TIF_UNKNOWN: 0,
                    GTE: 1,
                    TIF_RESERVED: 2,
                    IOC: 3
                }
            }
        }
    },
    BinanceCancelMsg: {
        fields: {
            refid: {
                type: "string",
                id: 1
            },
            sender: {
                type: "string",
                id: 2
            },
            symbol: {
                type: "string",
                id: 3
            }
        }
    },
    BinanceSignedTx: {
        fields: {
            signature: {
                rule: "required",
                type: "bytes",
                id: 1
            },
            public_key: {
                rule: "required",
                type: "bytes",
                id: 2
            }
        }
    },
    InputScriptType: {
        values: {
            SPENDADDRESS: 0,
            SPENDMULTISIG: 1,
            EXTERNAL: 2,
            SPENDWITNESS: 3,
            SPENDP2SHWITNESS: 4,
            SPENDTAPROOT: 5
        }
    },
    OutputScriptType: {
        values: {
            PAYTOADDRESS: 0,
            PAYTOSCRIPTHASH: 1,
            PAYTOMULTISIG: 2,
            PAYTOOPRETURN: 3,
            PAYTOWITNESS: 4,
            PAYTOP2SHWITNESS: 5,
            PAYTOTAPROOT: 6
        }
    },
    DecredStakingSpendType: {
        values: {
            SSGen: 0,
            SSRTX: 1
        }
    },
    AmountUnit: {
        values: {
            BITCOIN: 0,
            MILLIBITCOIN: 1,
            MICROBITCOIN: 2,
            SATOSHI: 3
        }
    },
    MultisigRedeemScriptType: {
        fields: {
            pubkeys: {
                rule: "repeated",
                type: "HDNodePathType",
                id: 1
            },
            signatures: {
                rule: "repeated",
                type: "bytes",
                id: 2
            },
            m: {
                rule: "required",
                type: "uint32",
                id: 3
            },
            nodes: {
                rule: "repeated",
                type: "HDNodeType",
                id: 4
            },
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 5,
                options: {
                    packed: false
                }
            }
        },
        nested: {
            HDNodePathType: {
                fields: {
                    node: {
                        rule: "required",
                        type: "HDNodeType",
                        id: 1
                    },
                    address_n: {
                        rule: "repeated",
                        type: "uint32",
                        id: 2,
                        options: {
                            packed: false
                        }
                    }
                }
            }
        }
    },
    GetPublicKey: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            ecdsa_curve_name: {
                type: "string",
                id: 2
            },
            show_display: {
                type: "bool",
                id: 3
            },
            coin_name: {
                type: "string",
                id: 4,
                options: {
                    "default": "Bitcoin"
                }
            },
            script_type: {
                type: "InputScriptType",
                id: 5,
                options: {
                    "default": "SPENDADDRESS"
                }
            },
            ignore_xpub_magic: {
                type: "bool",
                id: 6
            }
        }
    },
    PublicKey: {
        fields: {
            node: {
                rule: "required",
                type: "HDNodeType",
                id: 1
            },
            xpub: {
                rule: "required",
                type: "string",
                id: 2
            },
            root_fingerprint: {
                type: "uint32",
                id: 3
            }
        }
    },
    GetAddress: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            coin_name: {
                type: "string",
                id: 2,
                options: {
                    "default": "Bitcoin"
                }
            },
            show_display: {
                type: "bool",
                id: 3
            },
            multisig: {
                type: "MultisigRedeemScriptType",
                id: 4
            },
            script_type: {
                type: "InputScriptType",
                id: 5,
                options: {
                    "default": "SPENDADDRESS"
                }
            },
            ignore_xpub_magic: {
                type: "bool",
                id: 6
            }
        }
    },
    Address: {
        fields: {
            address: {
                rule: "required",
                type: "string",
                id: 1
            }
        }
    },
    GetOwnershipId: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            coin_name: {
                type: "string",
                id: 2,
                options: {
                    "default": "Bitcoin"
                }
            },
            multisig: {
                type: "MultisigRedeemScriptType",
                id: 3
            },
            script_type: {
                type: "InputScriptType",
                id: 4,
                options: {
                    "default": "SPENDADDRESS"
                }
            }
        }
    },
    OwnershipId: {
        fields: {
            ownership_id: {
                rule: "required",
                type: "bytes",
                id: 1
            }
        }
    },
    SignMessage: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            message: {
                rule: "required",
                type: "bytes",
                id: 2
            },
            coin_name: {
                type: "string",
                id: 3,
                options: {
                    "default": "Bitcoin"
                }
            },
            script_type: {
                type: "InputScriptType",
                id: 4,
                options: {
                    "default": "SPENDADDRESS"
                }
            },
            no_script_type: {
                type: "bool",
                id: 5
            }
        }
    },
    MessageSignature: {
        fields: {
            address: {
                rule: "required",
                type: "string",
                id: 1
            },
            signature: {
                rule: "required",
                type: "bytes",
                id: 2
            }
        }
    },
    VerifyMessage: {
        fields: {
            address: {
                rule: "required",
                type: "string",
                id: 1
            },
            signature: {
                rule: "required",
                type: "bytes",
                id: 2
            },
            message: {
                rule: "required",
                type: "bytes",
                id: 3
            },
            coin_name: {
                type: "string",
                id: 4,
                options: {
                    "default": "Bitcoin"
                }
            }
        }
    },
    SignTx: {
        fields: {
            outputs_count: {
                rule: "required",
                type: "uint32",
                id: 1
            },
            inputs_count: {
                rule: "required",
                type: "uint32",
                id: 2
            },
            coin_name: {
                type: "string",
                id: 3,
                options: {
                    "default": "Bitcoin"
                }
            },
            version: {
                type: "uint32",
                id: 4,
                options: {
                    "default": 1
                }
            },
            lock_time: {
                type: "uint32",
                id: 5,
                options: {
                    "default": 0
                }
            },
            expiry: {
                type: "uint32",
                id: 6
            },
            overwintered: {
                type: "bool",
                id: 7,
                options: {
                    deprecated: true
                }
            },
            version_group_id: {
                type: "uint32",
                id: 8
            },
            timestamp: {
                type: "uint32",
                id: 9
            },
            branch_id: {
                type: "uint32",
                id: 10
            },
            amount_unit: {
                type: "AmountUnit",
                id: 11,
                options: {
                    "default": "BITCOIN"
                }
            },
            decred_staking_ticket: {
                type: "bool",
                id: 12,
                options: {
                    "default": false
                }
            }
        }
    },
    TxRequest: {
        fields: {
            request_type: {
                type: "RequestType",
                id: 1
            },
            details: {
                type: "TxRequestDetailsType",
                id: 2
            },
            serialized: {
                type: "TxRequestSerializedType",
                id: 3
            }
        },
        nested: {
            RequestType: {
                values: {
                    TXINPUT: 0,
                    TXOUTPUT: 1,
                    TXMETA: 2,
                    TXFINISHED: 3,
                    TXEXTRADATA: 4,
                    TXORIGINPUT: 5,
                    TXORIGOUTPUT: 6
                }
            },
            TxRequestDetailsType: {
                fields: {
                    request_index: {
                        type: "uint32",
                        id: 1
                    },
                    tx_hash: {
                        type: "bytes",
                        id: 2
                    },
                    extra_data_len: {
                        type: "uint32",
                        id: 3
                    },
                    extra_data_offset: {
                        type: "uint32",
                        id: 4
                    }
                }
            },
            TxRequestSerializedType: {
                fields: {
                    signature_index: {
                        type: "uint32",
                        id: 1
                    },
                    signature: {
                        type: "bytes",
                        id: 2
                    },
                    serialized_tx: {
                        type: "bytes",
                        id: 3
                    }
                }
            }
        }
    },
    TxAck: {
        options: {
            deprecated: true
        },
        fields: {
            tx: {
                type: "TransactionType",
                id: 1
            }
        },
        nested: {
            TransactionType: {
                fields: {
                    version: {
                        type: "uint32",
                        id: 1
                    },
                    inputs: {
                        rule: "repeated",
                        type: "TxInputType",
                        id: 2
                    },
                    bin_outputs: {
                        rule: "repeated",
                        type: "TxOutputBinType",
                        id: 3
                    },
                    lock_time: {
                        type: "uint32",
                        id: 4
                    },
                    outputs: {
                        rule: "repeated",
                        type: "TxOutputType",
                        id: 5
                    },
                    inputs_cnt: {
                        type: "uint32",
                        id: 6
                    },
                    outputs_cnt: {
                        type: "uint32",
                        id: 7
                    },
                    extra_data: {
                        type: "bytes",
                        id: 8
                    },
                    extra_data_len: {
                        type: "uint32",
                        id: 9
                    },
                    expiry: {
                        type: "uint32",
                        id: 10
                    },
                    overwintered: {
                        type: "bool",
                        id: 11,
                        options: {
                            deprecated: true
                        }
                    },
                    version_group_id: {
                        type: "uint32",
                        id: 12
                    },
                    timestamp: {
                        type: "uint32",
                        id: 13
                    },
                    branch_id: {
                        type: "uint32",
                        id: 14
                    }
                },
                nested: {
                    TxInputType: {
                        fields: {
                            address_n: {
                                rule: "repeated",
                                type: "uint32",
                                id: 1,
                                options: {
                                    packed: false
                                }
                            },
                            prev_hash: {
                                rule: "required",
                                type: "bytes",
                                id: 2
                            },
                            prev_index: {
                                rule: "required",
                                type: "uint32",
                                id: 3
                            },
                            script_sig: {
                                type: "bytes",
                                id: 4
                            },
                            sequence: {
                                type: "uint32",
                                id: 5,
                                options: {
                                    "default": 4294967295
                                }
                            },
                            script_type: {
                                type: "InputScriptType",
                                id: 6,
                                options: {
                                    "default": "SPENDADDRESS"
                                }
                            },
                            multisig: {
                                type: "MultisigRedeemScriptType",
                                id: 7
                            },
                            amount: {
                                type: "uint64",
                                id: 8
                            },
                            decred_tree: {
                                type: "uint32",
                                id: 9
                            },
                            witness: {
                                type: "bytes",
                                id: 13
                            },
                            ownership_proof: {
                                type: "bytes",
                                id: 14
                            },
                            commitment_data: {
                                type: "bytes",
                                id: 15
                            },
                            orig_hash: {
                                type: "bytes",
                                id: 16
                            },
                            orig_index: {
                                type: "uint32",
                                id: 17
                            },
                            decred_staking_spend: {
                                type: "DecredStakingSpendType",
                                id: 18
                            },
                            script_pubkey: {
                                type: "bytes",
                                id: 19
                            }
                        }
                    },
                    TxOutputBinType: {
                        fields: {
                            amount: {
                                rule: "required",
                                type: "uint64",
                                id: 1
                            },
                            script_pubkey: {
                                rule: "required",
                                type: "bytes",
                                id: 2
                            },
                            decred_script_version: {
                                type: "uint32",
                                id: 3
                            }
                        }
                    },
                    TxOutputType: {
                        fields: {
                            address: {
                                type: "string",
                                id: 1
                            },
                            address_n: {
                                rule: "repeated",
                                type: "uint32",
                                id: 2,
                                options: {
                                    packed: false
                                }
                            },
                            amount: {
                                rule: "required",
                                type: "uint64",
                                id: 3
                            },
                            script_type: {
                                type: "OutputScriptType",
                                id: 4,
                                options: {
                                    "default": "PAYTOADDRESS"
                                }
                            },
                            multisig: {
                                type: "MultisigRedeemScriptType",
                                id: 5
                            },
                            op_return_data: {
                                type: "bytes",
                                id: 6
                            },
                            orig_hash: {
                                type: "bytes",
                                id: 10
                            },
                            orig_index: {
                                type: "uint32",
                                id: 11
                            }
                        }
                    }
                }
            }
        }
    },
    TxInput: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            prev_hash: {
                rule: "required",
                type: "bytes",
                id: 2
            },
            prev_index: {
                rule: "required",
                type: "uint32",
                id: 3
            },
            script_sig: {
                type: "bytes",
                id: 4
            },
            sequence: {
                type: "uint32",
                id: 5,
                options: {
                    "default": 4294967295
                }
            },
            script_type: {
                type: "InputScriptType",
                id: 6,
                options: {
                    "default": "SPENDADDRESS"
                }
            },
            multisig: {
                type: "MultisigRedeemScriptType",
                id: 7
            },
            amount: {
                rule: "required",
                type: "uint64",
                id: 8
            },
            decred_tree: {
                type: "uint32",
                id: 9
            },
            witness: {
                type: "bytes",
                id: 13
            },
            ownership_proof: {
                type: "bytes",
                id: 14
            },
            commitment_data: {
                type: "bytes",
                id: 15
            },
            orig_hash: {
                type: "bytes",
                id: 16
            },
            orig_index: {
                type: "uint32",
                id: 17
            },
            decred_staking_spend: {
                type: "DecredStakingSpendType",
                id: 18
            },
            script_pubkey: {
                type: "bytes",
                id: 19
            }
        }
    },
    TxOutput: {
        fields: {
            address: {
                type: "string",
                id: 1
            },
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 2,
                options: {
                    packed: false
                }
            },
            amount: {
                rule: "required",
                type: "uint64",
                id: 3
            },
            script_type: {
                type: "OutputScriptType",
                id: 4,
                options: {
                    "default": "PAYTOADDRESS"
                }
            },
            multisig: {
                type: "MultisigRedeemScriptType",
                id: 5
            },
            op_return_data: {
                type: "bytes",
                id: 6
            },
            orig_hash: {
                type: "bytes",
                id: 10
            },
            orig_index: {
                type: "uint32",
                id: 11
            }
        }
    },
    PrevTx: {
        fields: {
            version: {
                rule: "required",
                type: "uint32",
                id: 1
            },
            lock_time: {
                rule: "required",
                type: "uint32",
                id: 4
            },
            inputs_count: {
                rule: "required",
                type: "uint32",
                id: 6
            },
            outputs_count: {
                rule: "required",
                type: "uint32",
                id: 7
            },
            extra_data_len: {
                type: "uint32",
                id: 9,
                options: {
                    "default": 0
                }
            },
            expiry: {
                type: "uint32",
                id: 10
            },
            version_group_id: {
                type: "uint32",
                id: 12
            },
            timestamp: {
                type: "uint32",
                id: 13
            },
            branch_id: {
                type: "uint32",
                id: 14
            }
        }
    },
    PrevInput: {
        fields: {
            prev_hash: {
                rule: "required",
                type: "bytes",
                id: 2
            },
            prev_index: {
                rule: "required",
                type: "uint32",
                id: 3
            },
            script_sig: {
                rule: "required",
                type: "bytes",
                id: 4
            },
            sequence: {
                rule: "required",
                type: "uint32",
                id: 5
            },
            decred_tree: {
                type: "uint32",
                id: 9
            }
        }
    },
    PrevOutput: {
        fields: {
            amount: {
                rule: "required",
                type: "uint64",
                id: 1
            },
            script_pubkey: {
                rule: "required",
                type: "bytes",
                id: 2
            },
            decred_script_version: {
                type: "uint32",
                id: 3
            }
        }
    },
    TxAckInput: {
        options: {
            "(wire_type)": 22
        },
        fields: {
            tx: {
                rule: "required",
                type: "TxAckInputWrapper",
                id: 1
            }
        },
        nested: {
            TxAckInputWrapper: {
                fields: {
                    input: {
                        rule: "required",
                        type: "TxInput",
                        id: 2
                    }
                }
            }
        }
    },
    TxAckOutput: {
        options: {
            "(wire_type)": 22
        },
        fields: {
            tx: {
                rule: "required",
                type: "TxAckOutputWrapper",
                id: 1
            }
        },
        nested: {
            TxAckOutputWrapper: {
                fields: {
                    output: {
                        rule: "required",
                        type: "TxOutput",
                        id: 5
                    }
                }
            }
        }
    },
    TxAckPrevMeta: {
        options: {
            "(wire_type)": 22
        },
        fields: {
            tx: {
                rule: "required",
                type: "PrevTx",
                id: 1
            }
        }
    },
    TxAckPrevInput: {
        options: {
            "(wire_type)": 22
        },
        fields: {
            tx: {
                rule: "required",
                type: "TxAckPrevInputWrapper",
                id: 1
            }
        },
        nested: {
            TxAckPrevInputWrapper: {
                fields: {
                    input: {
                        rule: "required",
                        type: "PrevInput",
                        id: 2
                    }
                }
            }
        }
    },
    TxAckPrevOutput: {
        options: {
            "(wire_type)": 22
        },
        fields: {
            tx: {
                rule: "required",
                type: "TxAckPrevOutputWrapper",
                id: 1
            }
        },
        nested: {
            TxAckPrevOutputWrapper: {
                fields: {
                    output: {
                        rule: "required",
                        type: "PrevOutput",
                        id: 3
                    }
                }
            }
        }
    },
    TxAckPrevExtraData: {
        options: {
            "(wire_type)": 22
        },
        fields: {
            tx: {
                rule: "required",
                type: "TxAckPrevExtraDataWrapper",
                id: 1
            }
        },
        nested: {
            TxAckPrevExtraDataWrapper: {
                fields: {
                    extra_data_chunk: {
                        rule: "required",
                        type: "bytes",
                        id: 8
                    }
                }
            }
        }
    },
    GetOwnershipProof: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            coin_name: {
                type: "string",
                id: 2,
                options: {
                    "default": "Bitcoin"
                }
            },
            script_type: {
                type: "InputScriptType",
                id: 3,
                options: {
                    "default": "SPENDWITNESS"
                }
            },
            multisig: {
                type: "MultisigRedeemScriptType",
                id: 4
            },
            user_confirmation: {
                type: "bool",
                id: 5,
                options: {
                    "default": false
                }
            },
            ownership_ids: {
                rule: "repeated",
                type: "bytes",
                id: 6
            },
            commitment_data: {
                type: "bytes",
                id: 7,
                options: {
                    "default": ""
                }
            }
        }
    },
    OwnershipProof: {
        fields: {
            ownership_proof: {
                rule: "required",
                type: "bytes",
                id: 1
            },
            signature: {
                rule: "required",
                type: "bytes",
                id: 2
            }
        }
    },
    AuthorizeCoinJoin: {
        options: {
            "(unstable)": true
        },
        fields: {
            coordinator: {
                rule: "required",
                type: "string",
                id: 1
            },
            max_total_fee: {
                rule: "required",
                type: "uint64",
                id: 2
            },
            fee_per_anonymity: {
                type: "uint32",
                id: 3,
                options: {
                    "default": 0
                }
            },
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 4,
                options: {
                    packed: false
                }
            },
            coin_name: {
                type: "string",
                id: 5,
                options: {
                    "default": "Bitcoin"
                }
            },
            script_type: {
                type: "InputScriptType",
                id: 6,
                options: {
                    "default": "SPENDADDRESS"
                }
            },
            amount_unit: {
                type: "AmountUnit",
                id: 11,
                options: {
                    "default": "BITCOIN"
                }
            }
        }
    },
    GetPublicKeyMultiple: {
        fields: {
            addresses: {
                rule: "repeated",
                type: "BIP32Address",
                id: 1
            },
            ecdsa_curve_name: {
                type: "string",
                id: 2
            },
            show_display: {
                type: "bool",
                id: 3
            },
            coin_name: {
                type: "string",
                id: 4,
                options: {
                    "default": "Bitcoin"
                }
            },
            script_type: {
                type: "InputScriptType",
                id: 5,
                options: {
                    "default": "SPENDADDRESS"
                }
            },
            ignore_xpub_magic: {
                type: "bool",
                id: 6
            }
        },
        nested: {
            BIP32Address: {
                fields: {
                    address_n: {
                        rule: "repeated",
                        type: "uint32",
                        id: 1,
                        options: {
                            packed: false
                        }
                    }
                }
            }
        }
    },
    PublicKeyMultiple: {
        fields: {
            xpubs: {
                rule: "repeated",
                type: "string",
                id: 1
            }
        }
    },
    FirmwareErase: {
        fields: {
            length: {
                type: "uint32",
                id: 1
            }
        }
    },
    FirmwareRequest: {
        fields: {
            offset: {
                type: "uint32",
                id: 1
            },
            length: {
                type: "uint32",
                id: 2
            }
        }
    },
    FirmwareUpload: {
        fields: {
            payload: {
                rule: "required",
                type: "bytes",
                id: 1
            },
            hash: {
                type: "bytes",
                id: 2
            }
        }
    },
    SelfTest: {
        fields: {
            payload: {
                type: "bytes",
                id: 1
            }
        }
    },
    FirmwareErase_ex: {
        fields: {
            length: {
                type: "uint32",
                id: 1
            }
        }
    },
    RebootType: {
        values: {
            Normal: 0,
            Boardloader: 1,
            BootLoader: 2
        }
    },
    Reboot: {
        fields: {
            reboot_type: {
                rule: "required",
                type: "RebootType",
                id: 1
            }
        }
    },
    FirmwareUpdateEmmc: {
        fields: {
            path: {
                rule: "required",
                type: "string",
                id: 1
            },
            reboot_on_success: {
                type: "bool",
                id: 2
            }
        }
    },
    CardanoDerivationType: {
        values: {
            LEDGER: 0,
            ICARUS: 1,
            ICARUS_TREZOR: 2
        }
    },
    CardanoAddressType: {
        values: {
            BASE: 0,
            BASE_SCRIPT_KEY: 1,
            BASE_KEY_SCRIPT: 2,
            BASE_SCRIPT_SCRIPT: 3,
            POINTER: 4,
            POINTER_SCRIPT: 5,
            ENTERPRISE: 6,
            ENTERPRISE_SCRIPT: 7,
            BYRON: 8,
            REWARD: 14,
            REWARD_SCRIPT: 15
        }
    },
    CardanoNativeScriptType: {
        values: {
            PUB_KEY: 0,
            ALL: 1,
            ANY: 2,
            N_OF_K: 3,
            INVALID_BEFORE: 4,
            INVALID_HEREAFTER: 5
        }
    },
    CardanoNativeScriptHashDisplayFormat: {
        values: {
            HIDE: 0,
            BECH32: 1,
            POLICY_ID: 2
        }
    },
    CardanoTxOutputSerializationFormat: {
        values: {
            ARRAY_LEGACY: 0,
            MAP_BABBAGE: 1
        }
    },
    CardanoCertificateType: {
        values: {
            STAKE_REGISTRATION: 0,
            STAKE_DEREGISTRATION: 1,
            STAKE_DELEGATION: 2,
            STAKE_POOL_REGISTRATION: 3
        }
    },
    CardanoPoolRelayType: {
        values: {
            SINGLE_HOST_IP: 0,
            SINGLE_HOST_NAME: 1,
            MULTIPLE_HOST_NAME: 2
        }
    },
    CardanoTxAuxiliaryDataSupplementType: {
        values: {
            NONE: 0,
            GOVERNANCE_REGISTRATION_SIGNATURE: 1
        }
    },
    CardanoGovernanceRegistrationFormat: {
        values: {
            CIP15: 0,
            CIP36: 1
        }
    },
    CardanoTxSigningMode: {
        values: {
            ORDINARY_TRANSACTION: 0,
            POOL_REGISTRATION_AS_OWNER: 1,
            MULTISIG_TRANSACTION: 2,
            PLUTUS_TRANSACTION: 3
        }
    },
    CardanoTxWitnessType: {
        values: {
            BYRON_WITNESS: 0,
            SHELLEY_WITNESS: 1
        }
    },
    CardanoBlockchainPointerType: {
        fields: {
            block_index: {
                rule: "required",
                type: "uint32",
                id: 1
            },
            tx_index: {
                rule: "required",
                type: "uint32",
                id: 2
            },
            certificate_index: {
                rule: "required",
                type: "uint32",
                id: 3
            }
        }
    },
    CardanoNativeScript: {
        fields: {
            type: {
                rule: "required",
                type: "CardanoNativeScriptType",
                id: 1
            },
            scripts: {
                rule: "repeated",
                type: "CardanoNativeScript",
                id: 2
            },
            key_hash: {
                type: "bytes",
                id: 3
            },
            key_path: {
                rule: "repeated",
                type: "uint32",
                id: 4,
                options: {
                    packed: false
                }
            },
            required_signatures_count: {
                type: "uint32",
                id: 5
            },
            invalid_before: {
                type: "uint64",
                id: 6
            },
            invalid_hereafter: {
                type: "uint64",
                id: 7
            }
        }
    },
    CardanoGetNativeScriptHash: {
        fields: {
            script: {
                rule: "required",
                type: "CardanoNativeScript",
                id: 1
            },
            display_format: {
                rule: "required",
                type: "CardanoNativeScriptHashDisplayFormat",
                id: 2
            },
            derivation_type: {
                rule: "required",
                type: "CardanoDerivationType",
                id: 3
            }
        }
    },
    CardanoNativeScriptHash: {
        fields: {
            script_hash: {
                rule: "required",
                type: "bytes",
                id: 1
            }
        }
    },
    CardanoAddressParametersType: {
        fields: {
            address_type: {
                rule: "required",
                type: "CardanoAddressType",
                id: 1
            },
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 2,
                options: {
                    packed: false
                }
            },
            address_n_staking: {
                rule: "repeated",
                type: "uint32",
                id: 3,
                options: {
                    packed: false
                }
            },
            staking_key_hash: {
                type: "bytes",
                id: 4
            },
            certificate_pointer: {
                type: "CardanoBlockchainPointerType",
                id: 5
            },
            script_payment_hash: {
                type: "bytes",
                id: 6
            },
            script_staking_hash: {
                type: "bytes",
                id: 7
            }
        }
    },
    CardanoGetAddress: {
        fields: {
            show_display: {
                type: "bool",
                id: 2,
                options: {
                    "default": false
                }
            },
            protocol_magic: {
                rule: "required",
                type: "uint32",
                id: 3
            },
            network_id: {
                rule: "required",
                type: "uint32",
                id: 4
            },
            address_parameters: {
                rule: "required",
                type: "CardanoAddressParametersType",
                id: 5
            },
            derivation_type: {
                rule: "required",
                type: "CardanoDerivationType",
                id: 6
            }
        }
    },
    CardanoAddress: {
        fields: {
            address: {
                rule: "required",
                type: "string",
                id: 1
            }
        }
    },
    CardanoGetPublicKey: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            show_display: {
                type: "bool",
                id: 2
            },
            derivation_type: {
                rule: "required",
                type: "CardanoDerivationType",
                id: 3
            }
        }
    },
    CardanoPublicKey: {
        fields: {
            xpub: {
                rule: "required",
                type: "string",
                id: 1
            },
            node: {
                rule: "required",
                type: "HDNodeType",
                id: 2
            }
        }
    },
    CardanoSignTxInit: {
        fields: {
            signing_mode: {
                rule: "required",
                type: "CardanoTxSigningMode",
                id: 1
            },
            protocol_magic: {
                rule: "required",
                type: "uint32",
                id: 2
            },
            network_id: {
                rule: "required",
                type: "uint32",
                id: 3
            },
            inputs_count: {
                rule: "required",
                type: "uint32",
                id: 4
            },
            outputs_count: {
                rule: "required",
                type: "uint32",
                id: 5
            },
            fee: {
                rule: "required",
                type: "uint64",
                id: 6
            },
            ttl: {
                type: "uint64",
                id: 7
            },
            certificates_count: {
                rule: "required",
                type: "uint32",
                id: 8
            },
            withdrawals_count: {
                rule: "required",
                type: "uint32",
                id: 9
            },
            has_auxiliary_data: {
                rule: "required",
                type: "bool",
                id: 10
            },
            validity_interval_start: {
                type: "uint64",
                id: 11
            },
            witness_requests_count: {
                rule: "required",
                type: "uint32",
                id: 12
            },
            minting_asset_groups_count: {
                rule: "required",
                type: "uint32",
                id: 13
            },
            derivation_type: {
                rule: "required",
                type: "CardanoDerivationType",
                id: 14
            },
            include_network_id: {
                type: "bool",
                id: 15,
                options: {
                    "default": false
                }
            },
            script_data_hash: {
                type: "bytes",
                id: 16
            },
            collateral_inputs_count: {
                rule: "required",
                type: "uint32",
                id: 17
            },
            required_signers_count: {
                rule: "required",
                type: "uint32",
                id: 18
            },
            has_collateral_return: {
                type: "bool",
                id: 19,
                options: {
                    "default": false
                }
            },
            total_collateral: {
                type: "uint64",
                id: 20
            },
            reference_inputs_count: {
                type: "uint32",
                id: 21,
                options: {
                    "default": 0
                }
            }
        }
    },
    CardanoTxInput: {
        fields: {
            prev_hash: {
                rule: "required",
                type: "bytes",
                id: 1
            },
            prev_index: {
                rule: "required",
                type: "uint32",
                id: 2
            }
        }
    },
    CardanoTxOutput: {
        fields: {
            address: {
                type: "string",
                id: 1
            },
            address_parameters: {
                type: "CardanoAddressParametersType",
                id: 2
            },
            amount: {
                rule: "required",
                type: "uint64",
                id: 3
            },
            asset_groups_count: {
                rule: "required",
                type: "uint32",
                id: 4
            },
            datum_hash: {
                type: "bytes",
                id: 5
            },
            format: {
                type: "CardanoTxOutputSerializationFormat",
                id: 6,
                options: {
                    "default": "ARRAY_LEGACY"
                }
            },
            inline_datum_size: {
                type: "uint32",
                id: 7,
                options: {
                    "default": 0
                }
            },
            reference_script_size: {
                type: "uint32",
                id: 8,
                options: {
                    "default": 0
                }
            }
        }
    },
    CardanoAssetGroup: {
        fields: {
            policy_id: {
                rule: "required",
                type: "bytes",
                id: 1
            },
            tokens_count: {
                rule: "required",
                type: "uint32",
                id: 2
            }
        }
    },
    CardanoToken: {
        fields: {
            asset_name_bytes: {
                rule: "required",
                type: "bytes",
                id: 1
            },
            amount: {
                type: "uint64",
                id: 2
            },
            mint_amount: {
                type: "sint64",
                id: 3
            }
        }
    },
    CardanoTxInlineDatumChunk: {
        fields: {
            data: {
                rule: "required",
                type: "bytes",
                id: 1
            }
        }
    },
    CardanoTxReferenceScriptChunk: {
        fields: {
            data: {
                rule: "required",
                type: "bytes",
                id: 1
            }
        }
    },
    CardanoPoolOwner: {
        fields: {
            staking_key_path: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            staking_key_hash: {
                type: "bytes",
                id: 2
            }
        }
    },
    CardanoPoolRelayParameters: {
        fields: {
            type: {
                rule: "required",
                type: "CardanoPoolRelayType",
                id: 1
            },
            ipv4_address: {
                type: "bytes",
                id: 2
            },
            ipv6_address: {
                type: "bytes",
                id: 3
            },
            host_name: {
                type: "string",
                id: 4
            },
            port: {
                type: "uint32",
                id: 5
            }
        }
    },
    CardanoPoolMetadataType: {
        fields: {
            url: {
                rule: "required",
                type: "string",
                id: 1
            },
            hash: {
                rule: "required",
                type: "bytes",
                id: 2
            }
        }
    },
    CardanoPoolParametersType: {
        fields: {
            pool_id: {
                rule: "required",
                type: "bytes",
                id: 1
            },
            vrf_key_hash: {
                rule: "required",
                type: "bytes",
                id: 2
            },
            pledge: {
                rule: "required",
                type: "uint64",
                id: 3
            },
            cost: {
                rule: "required",
                type: "uint64",
                id: 4
            },
            margin_numerator: {
                rule: "required",
                type: "uint64",
                id: 5
            },
            margin_denominator: {
                rule: "required",
                type: "uint64",
                id: 6
            },
            reward_account: {
                rule: "required",
                type: "string",
                id: 7
            },
            metadata: {
                type: "CardanoPoolMetadataType",
                id: 10
            },
            owners_count: {
                rule: "required",
                type: "uint32",
                id: 11
            },
            relays_count: {
                rule: "required",
                type: "uint32",
                id: 12
            }
        }
    },
    CardanoTxCertificate: {
        fields: {
            type: {
                rule: "required",
                type: "CardanoCertificateType",
                id: 1
            },
            path: {
                rule: "repeated",
                type: "uint32",
                id: 2,
                options: {
                    packed: false
                }
            },
            pool: {
                type: "bytes",
                id: 3
            },
            pool_parameters: {
                type: "CardanoPoolParametersType",
                id: 4
            },
            script_hash: {
                type: "bytes",
                id: 5
            },
            key_hash: {
                type: "bytes",
                id: 6
            }
        }
    },
    CardanoTxWithdrawal: {
        fields: {
            path: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            amount: {
                rule: "required",
                type: "uint64",
                id: 2
            },
            script_hash: {
                type: "bytes",
                id: 3
            },
            key_hash: {
                type: "bytes",
                id: 4
            }
        }
    },
    CardanoGovernanceRegistrationDelegation: {
        fields: {
            voting_public_key: {
                rule: "required",
                type: "bytes",
                id: 1
            },
            weight: {
                rule: "required",
                type: "uint32",
                id: 2
            }
        }
    },
    CardanoGovernanceRegistrationParametersType: {
        fields: {
            voting_public_key: {
                type: "bytes",
                id: 1
            },
            staking_path: {
                rule: "repeated",
                type: "uint32",
                id: 2,
                options: {
                    packed: false
                }
            },
            reward_address_parameters: {
                rule: "required",
                type: "CardanoAddressParametersType",
                id: 3
            },
            nonce: {
                rule: "required",
                type: "uint64",
                id: 4
            },
            format: {
                type: "CardanoGovernanceRegistrationFormat",
                id: 5,
                options: {
                    "default": "CIP15"
                }
            },
            delegations: {
                rule: "repeated",
                type: "CardanoGovernanceRegistrationDelegation",
                id: 6
            },
            voting_purpose: {
                type: "uint64",
                id: 7
            }
        }
    },
    CardanoTxAuxiliaryData: {
        fields: {
            governance_registration_parameters: {
                type: "CardanoGovernanceRegistrationParametersType",
                id: 1
            },
            hash: {
                type: "bytes",
                id: 2
            }
        }
    },
    CardanoTxMint: {
        fields: {
            asset_groups_count: {
                rule: "required",
                type: "uint32",
                id: 1
            }
        }
    },
    CardanoTxCollateralInput: {
        fields: {
            prev_hash: {
                rule: "required",
                type: "bytes",
                id: 1
            },
            prev_index: {
                rule: "required",
                type: "uint32",
                id: 2
            }
        }
    },
    CardanoTxRequiredSigner: {
        fields: {
            key_hash: {
                type: "bytes",
                id: 1
            },
            key_path: {
                rule: "repeated",
                type: "uint32",
                id: 2,
                options: {
                    packed: false
                }
            }
        }
    },
    CardanoTxReferenceInput: {
        fields: {
            prev_hash: {
                rule: "required",
                type: "bytes",
                id: 1
            },
            prev_index: {
                rule: "required",
                type: "uint32",
                id: 2
            }
        }
    },
    CardanoTxItemAck: {
        fields: {}
    },
    CardanoTxAuxiliaryDataSupplement: {
        fields: {
            type: {
                rule: "required",
                type: "CardanoTxAuxiliaryDataSupplementType",
                id: 1
            },
            auxiliary_data_hash: {
                type: "bytes",
                id: 2
            },
            governance_signature: {
                type: "bytes",
                id: 3
            }
        }
    },
    CardanoTxWitnessRequest: {
        fields: {
            path: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            }
        }
    },
    CardanoTxWitnessResponse: {
        fields: {
            type: {
                rule: "required",
                type: "CardanoTxWitnessType",
                id: 1
            },
            pub_key: {
                rule: "required",
                type: "bytes",
                id: 2
            },
            signature: {
                rule: "required",
                type: "bytes",
                id: 3
            },
            chain_code: {
                type: "bytes",
                id: 4
            }
        }
    },
    CardanoTxHostAck: {
        fields: {}
    },
    CardanoTxBodyHash: {
        fields: {
            tx_hash: {
                rule: "required",
                type: "bytes",
                id: 1
            }
        }
    },
    CardanoSignTxFinished: {
        fields: {}
    },
    CardanoSignMessage: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            message: {
                rule: "required",
                type: "bytes",
                id: 2
            },
            derivation_type: {
                rule: "required",
                type: "CardanoDerivationType",
                id: 3
            },
            network_id: {
                rule: "required",
                type: "uint32",
                id: 4
            }
        }
    },
    CardanoMessageSignature: {
        fields: {
            signature: {
                rule: "required",
                type: "bytes",
                id: 1
            },
            key: {
                rule: "required",
                type: "bytes",
                id: 2
            }
        }
    },
    Success: {
        fields: {
            message: {
                type: "string",
                id: 1,
                options: {
                    "default": ""
                }
            }
        }
    },
    Failure: {
        fields: {
            code: {
                type: "FailureType",
                id: 1
            },
            message: {
                type: "string",
                id: 2
            }
        },
        nested: {
            FailureType: {
                values: {
                    Failure_UnexpectedMessage: 1,
                    Failure_ButtonExpected: 2,
                    Failure_DataError: 3,
                    Failure_ActionCancelled: 4,
                    Failure_PinExpected: 5,
                    Failure_PinCancelled: 6,
                    Failure_PinInvalid: 7,
                    Failure_InvalidSignature: 8,
                    Failure_ProcessError: 9,
                    Failure_NotEnoughFunds: 10,
                    Failure_NotInitialized: 11,
                    Failure_PinMismatch: 12,
                    Failure_WipeCodeMismatch: 13,
                    Failure_InvalidSession: 14,
                    Failure_FirmwareError: 99
                }
            }
        }
    },
    ButtonRequest: {
        fields: {
            code: {
                type: "ButtonRequestType",
                id: 1
            },
            pages: {
                type: "uint32",
                id: 2
            }
        },
        nested: {
            ButtonRequestType: {
                values: {
                    ButtonRequest_Other: 1,
                    ButtonRequest_FeeOverThreshold: 2,
                    ButtonRequest_ConfirmOutput: 3,
                    ButtonRequest_ResetDevice: 4,
                    ButtonRequest_ConfirmWord: 5,
                    ButtonRequest_WipeDevice: 6,
                    ButtonRequest_ProtectCall: 7,
                    ButtonRequest_SignTx: 8,
                    ButtonRequest_FirmwareCheck: 9,
                    ButtonRequest_Address: 10,
                    ButtonRequest_PublicKey: 11,
                    ButtonRequest_MnemonicWordCount: 12,
                    ButtonRequest_MnemonicInput: 13,
                    _Deprecated_ButtonRequest_PassphraseType: 14,
                    ButtonRequest_UnknownDerivationPath: 15,
                    ButtonRequest_RecoveryHomepage: 16,
                    ButtonRequest_Success: 17,
                    ButtonRequest_Warning: 18,
                    ButtonRequest_PassphraseEntry: 19,
                    ButtonRequest_PinEntry: 20
                }
            }
        }
    },
    ButtonAck: {
        fields: {}
    },
    PinMatrixRequest: {
        fields: {
            type: {
                type: "PinMatrixRequestType",
                id: 1
            }
        },
        nested: {
            PinMatrixRequestType: {
                values: {
                    PinMatrixRequestType_Current: 1,
                    PinMatrixRequestType_NewFirst: 2,
                    PinMatrixRequestType_NewSecond: 3,
                    PinMatrixRequestType_WipeCodeFirst: 4,
                    PinMatrixRequestType_WipeCodeSecond: 5,
                    PinMatrixRequestType_BackupFirst: 6,
                    PinMatrixRequestType_BackupSecond: 7
                }
            }
        }
    },
    PinMatrixAck: {
        fields: {
            pin: {
                rule: "required",
                type: "string",
                id: 1
            },
            new_pin: {
                type: "string",
                id: 2
            }
        }
    },
    PassphraseRequest: {
        fields: {
            _on_device: {
                type: "bool",
                id: 1,
                options: {
                    deprecated: true
                }
            }
        }
    },
    PassphraseAck: {
        fields: {
            passphrase: {
                type: "string",
                id: 1
            },
            _state: {
                type: "bytes",
                id: 2,
                options: {
                    deprecated: true
                }
            },
            on_device: {
                type: "bool",
                id: 3
            }
        }
    },
    Deprecated_PassphraseStateRequest: {
        options: {
            deprecated: true
        },
        fields: {
            state: {
                type: "bytes",
                id: 1
            }
        }
    },
    Deprecated_PassphraseStateAck: {
        options: {
            deprecated: true
        },
        fields: {}
    },
    HDNodeType: {
        fields: {
            depth: {
                rule: "required",
                type: "uint32",
                id: 1
            },
            fingerprint: {
                rule: "required",
                type: "uint32",
                id: 2
            },
            child_num: {
                rule: "required",
                type: "uint32",
                id: 3
            },
            chain_code: {
                rule: "required",
                type: "bytes",
                id: 4
            },
            private_key: {
                type: "bytes",
                id: 5
            },
            public_key: {
                rule: "required",
                type: "bytes",
                id: 6
            }
        }
    },
    BixinPinInputOnDevice: {
        fields: {}
    },
    ConfluxGetAddress: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            show_display: {
                type: "bool",
                id: 2
            },
            chain_id: {
                type: "uint32",
                id: 3
            }
        }
    },
    ConfluxAddress: {
        fields: {
            address: {
                type: "string",
                id: 1
            }
        }
    },
    ConfluxSignTx: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            nonce: {
                type: "bytes",
                id: 2
            },
            gas_price: {
                type: "bytes",
                id: 3
            },
            gas_limit: {
                type: "bytes",
                id: 4
            },
            to: {
                type: "string",
                id: 5
            },
            value: {
                type: "bytes",
                id: 6
            },
            epoch_height: {
                type: "bytes",
                id: 7
            },
            storage_limit: {
                type: "bytes",
                id: 8
            },
            data_initial_chunk: {
                type: "bytes",
                id: 9
            },
            data_length: {
                type: "uint32",
                id: 10
            },
            chain_id: {
                type: "uint32",
                id: 11
            }
        }
    },
    ConfluxTxRequest: {
        fields: {
            data_length: {
                type: "uint32",
                id: 1
            },
            signature_v: {
                type: "uint32",
                id: 2
            },
            signature_r: {
                type: "bytes",
                id: 3
            },
            signature_s: {
                type: "bytes",
                id: 4
            }
        }
    },
    ConfluxTxAck: {
        fields: {
            data_chunk: {
                type: "bytes",
                id: 1
            }
        }
    },
    ConfluxSignMessage: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            message: {
                type: "bytes",
                id: 2
            }
        }
    },
    ConfluxMessageSignature: {
        fields: {
            signature: {
                type: "bytes",
                id: 2
            },
            address: {
                type: "string",
                id: 3
            }
        }
    },
    ConfluxSignMessageCIP23: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            domain_hash: {
                type: "bytes",
                id: 2
            },
            message_hash: {
                type: "bytes",
                id: 3
            }
        }
    },
    CosmosGetAddress: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            hrp: {
                type: "string",
                id: 2
            },
            show_display: {
                type: "bool",
                id: 3
            }
        }
    },
    CosmosAddress: {
        fields: {
            address: {
                type: "string",
                id: 1
            }
        }
    },
    CosmosSignTx: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            raw_tx: {
                rule: "required",
                type: "bytes",
                id: 2
            }
        }
    },
    CosmosSignedTx: {
        fields: {
            signature: {
                rule: "required",
                type: "bytes",
                id: 1
            }
        }
    },
    CipherKeyValue: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            key: {
                rule: "required",
                type: "string",
                id: 2
            },
            value: {
                rule: "required",
                type: "bytes",
                id: 3
            },
            encrypt: {
                type: "bool",
                id: 4
            },
            ask_on_encrypt: {
                type: "bool",
                id: 5
            },
            ask_on_decrypt: {
                type: "bool",
                id: 6
            },
            iv: {
                type: "bytes",
                id: 7
            }
        }
    },
    CipheredKeyValue: {
        fields: {
            value: {
                rule: "required",
                type: "bytes",
                id: 1
            }
        }
    },
    IdentityType: {
        fields: {
            proto: {
                type: "string",
                id: 1
            },
            user: {
                type: "string",
                id: 2
            },
            host: {
                type: "string",
                id: 3
            },
            port: {
                type: "string",
                id: 4
            },
            path: {
                type: "string",
                id: 5
            },
            index: {
                type: "uint32",
                id: 6,
                options: {
                    "default": 0
                }
            }
        }
    },
    SignIdentity: {
        fields: {
            identity: {
                rule: "required",
                type: "IdentityType",
                id: 1
            },
            challenge_hidden: {
                type: "bytes",
                id: 2,
                options: {
                    "default": ""
                }
            },
            challenge_visual: {
                type: "string",
                id: 3,
                options: {
                    "default": ""
                }
            },
            ecdsa_curve_name: {
                type: "string",
                id: 4
            }
        }
    },
    SignedIdentity: {
        fields: {
            address: {
                type: "string",
                id: 1
            },
            public_key: {
                rule: "required",
                type: "bytes",
                id: 2
            },
            signature: {
                rule: "required",
                type: "bytes",
                id: 3
            }
        }
    },
    GetECDHSessionKey: {
        fields: {
            identity: {
                rule: "required",
                type: "IdentityType",
                id: 1
            },
            peer_public_key: {
                rule: "required",
                type: "bytes",
                id: 2
            },
            ecdsa_curve_name: {
                type: "string",
                id: 3
            }
        }
    },
    ECDHSessionKey: {
        fields: {
            session_key: {
                rule: "required",
                type: "bytes",
                id: 1
            },
            public_key: {
                type: "bytes",
                id: 2
            }
        }
    },
    CosiCommit: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            data: {
                type: "bytes",
                id: 2
            }
        }
    },
    CosiCommitment: {
        fields: {
            commitment: {
                type: "bytes",
                id: 1
            },
            pubkey: {
                type: "bytes",
                id: 2
            }
        }
    },
    CosiSign: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            data: {
                type: "bytes",
                id: 2
            },
            global_commitment: {
                type: "bytes",
                id: 3
            },
            global_pubkey: {
                type: "bytes",
                id: 4
            }
        }
    },
    CosiSignature: {
        fields: {
            signature: {
                rule: "required",
                type: "bytes",
                id: 1
            }
        }
    },
    BatchGetPublickeys: {
        fields: {
            ecdsa_curve_name: {
                type: "string",
                id: 1,
                options: {
                    "default": "ed25519"
                }
            },
            paths: {
                rule: "repeated",
                type: "Path",
                id: 2
            }
        },
        nested: {
            Path: {
                fields: {
                    address_n: {
                        rule: "repeated",
                        type: "uint32",
                        id: 1,
                        options: {
                            packed: false
                        }
                    }
                }
            }
        }
    },
    EcdsaPublicKeys: {
        fields: {
            public_keys: {
                rule: "repeated",
                type: "bytes",
                id: 1
            }
        }
    },
    DebugLinkDecision: {
        fields: {
            yes_no: {
                type: "bool",
                id: 1
            },
            swipe: {
                type: "DebugSwipeDirection",
                id: 2
            },
            input: {
                type: "string",
                id: 3
            },
            x: {
                type: "uint32",
                id: 4
            },
            y: {
                type: "uint32",
                id: 5
            },
            wait: {
                type: "bool",
                id: 6
            },
            hold_ms: {
                type: "uint32",
                id: 7
            }
        },
        nested: {
            DebugSwipeDirection: {
                values: {
                    UP: 0,
                    DOWN: 1,
                    LEFT: 2,
                    RIGHT: 3
                }
            }
        }
    },
    DebugLinkLayout: {
        fields: {
            lines: {
                rule: "repeated",
                type: "string",
                id: 1
            }
        }
    },
    DebugLinkReseedRandom: {
        fields: {
            value: {
                type: "uint32",
                id: 1
            }
        }
    },
    DebugLinkRecordScreen: {
        fields: {
            target_directory: {
                type: "string",
                id: 1
            }
        }
    },
    DebugLinkGetState: {
        fields: {
            wait_word_list: {
                type: "bool",
                id: 1
            },
            wait_word_pos: {
                type: "bool",
                id: 2
            },
            wait_layout: {
                type: "bool",
                id: 3
            }
        }
    },
    DebugLinkState: {
        fields: {
            layout: {
                type: "bytes",
                id: 1
            },
            pin: {
                type: "string",
                id: 2
            },
            matrix: {
                type: "string",
                id: 3
            },
            mnemonic_secret: {
                type: "bytes",
                id: 4
            },
            node: {
                type: "HDNodeType",
                id: 5
            },
            passphrase_protection: {
                type: "bool",
                id: 6
            },
            reset_word: {
                type: "string",
                id: 7
            },
            reset_entropy: {
                type: "bytes",
                id: 8
            },
            recovery_fake_word: {
                type: "string",
                id: 9
            },
            recovery_word_pos: {
                type: "uint32",
                id: 10
            },
            reset_word_pos: {
                type: "uint32",
                id: 11
            },
            mnemonic_type: {
                type: "BackupType",
                id: 12
            },
            layout_lines: {
                rule: "repeated",
                type: "string",
                id: 13
            }
        }
    },
    DebugLinkStop: {
        fields: {}
    },
    DebugLinkLog: {
        fields: {
            level: {
                type: "uint32",
                id: 1
            },
            bucket: {
                type: "string",
                id: 2
            },
            text: {
                type: "string",
                id: 3
            }
        }
    },
    DebugLinkMemoryRead: {
        fields: {
            address: {
                type: "uint32",
                id: 1
            },
            length: {
                type: "uint32",
                id: 2
            }
        }
    },
    DebugLinkMemory: {
        fields: {
            memory: {
                type: "bytes",
                id: 1
            }
        }
    },
    DebugLinkMemoryWrite: {
        fields: {
            address: {
                type: "uint32",
                id: 1
            },
            memory: {
                type: "bytes",
                id: 2
            },
            flash: {
                type: "bool",
                id: 3
            }
        }
    },
    DebugLinkFlashErase: {
        fields: {
            sector: {
                type: "uint32",
                id: 1
            }
        }
    },
    DebugLinkEraseSdCard: {
        fields: {
            format: {
                type: "bool",
                id: 1
            }
        }
    },
    DebugLinkWatchLayout: {
        fields: {
            watch: {
                type: "bool",
                id: 1
            }
        }
    },
    EmmcFixPermission: {
        fields: {}
    },
    EmmcPath: {
        fields: {
            exist: {
                rule: "required",
                type: "bool",
                id: 1
            },
            size: {
                rule: "required",
                type: "uint64",
                id: 2
            },
            year: {
                rule: "required",
                type: "uint32",
                id: 3
            },
            month: {
                rule: "required",
                type: "uint32",
                id: 4
            },
            day: {
                rule: "required",
                type: "uint32",
                id: 5
            },
            hour: {
                rule: "required",
                type: "uint32",
                id: 6
            },
            minute: {
                rule: "required",
                type: "uint32",
                id: 7
            },
            second: {
                rule: "required",
                type: "uint32",
                id: 8
            },
            readonly: {
                rule: "required",
                type: "bool",
                id: 9
            },
            hidden: {
                rule: "required",
                type: "bool",
                id: 10
            },
            system: {
                rule: "required",
                type: "bool",
                id: 11
            },
            archive: {
                rule: "required",
                type: "bool",
                id: 12
            },
            directory: {
                rule: "required",
                type: "bool",
                id: 13
            }
        }
    },
    EmmcPathInfo: {
        fields: {
            path: {
                rule: "required",
                type: "string",
                id: 1
            }
        }
    },
    EmmcFile: {
        fields: {
            path: {
                rule: "required",
                type: "string",
                id: 1
            },
            offset: {
                rule: "required",
                type: "uint32",
                id: 2
            },
            len: {
                rule: "required",
                type: "uint32",
                id: 3
            },
            data: {
                type: "bytes",
                id: 4
            },
            data_hash: {
                type: "uint32",
                id: 5
            },
            processed_byte: {
                type: "uint32",
                id: 6
            }
        }
    },
    EmmcFileRead: {
        fields: {
            file: {
                rule: "required",
                type: "EmmcFile",
                id: 1
            },
            ui_percentage: {
                type: "uint32",
                id: 2
            }
        }
    },
    EmmcFileWrite: {
        fields: {
            file: {
                rule: "required",
                type: "EmmcFile",
                id: 1
            },
            overwrite: {
                rule: "required",
                type: "bool",
                id: 2
            },
            append: {
                rule: "required",
                type: "bool",
                id: 3
            },
            ui_percentage: {
                type: "uint32",
                id: 4
            }
        }
    },
    EmmcFileDelete: {
        fields: {
            path: {
                rule: "required",
                type: "string",
                id: 1
            }
        }
    },
    EmmcDir: {
        fields: {
            path: {
                rule: "required",
                type: "string",
                id: 1
            },
            child_dirs: {
                type: "string",
                id: 2
            },
            child_files: {
                type: "string",
                id: 3
            }
        }
    },
    EmmcDirList: {
        fields: {
            path: {
                rule: "required",
                type: "string",
                id: 1
            }
        }
    },
    EmmcDirMake: {
        fields: {
            path: {
                rule: "required",
                type: "string",
                id: 1
            }
        }
    },
    EmmcDirRemove: {
        fields: {
            path: {
                rule: "required",
                type: "string",
                id: 1
            }
        }
    },
    EosGetPublicKey: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            show_display: {
                type: "bool",
                id: 2
            }
        }
    },
    EosPublicKey: {
        fields: {
            wif_public_key: {
                rule: "required",
                type: "string",
                id: 1
            },
            raw_public_key: {
                rule: "required",
                type: "bytes",
                id: 2
            }
        }
    },
    EosSignTx: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            chain_id: {
                type: "bytes",
                id: 2
            },
            header: {
                type: "EosTxHeader",
                id: 3
            },
            num_actions: {
                type: "uint32",
                id: 4
            }
        },
        nested: {
            EosTxHeader: {
                fields: {
                    expiration: {
                        rule: "required",
                        type: "uint32",
                        id: 1
                    },
                    ref_block_num: {
                        rule: "required",
                        type: "uint32",
                        id: 2
                    },
                    ref_block_prefix: {
                        rule: "required",
                        type: "uint32",
                        id: 3
                    },
                    max_net_usage_words: {
                        rule: "required",
                        type: "uint32",
                        id: 4
                    },
                    max_cpu_usage_ms: {
                        rule: "required",
                        type: "uint32",
                        id: 5
                    },
                    delay_sec: {
                        rule: "required",
                        type: "uint32",
                        id: 6
                    }
                }
            }
        }
    },
    EosTxActionRequest: {
        fields: {
            data_size: {
                type: "uint32",
                id: 1
            }
        }
    },
    EosTxActionAck: {
        fields: {
            common: {
                type: "EosActionCommon",
                id: 1
            },
            transfer: {
                type: "EosActionTransfer",
                id: 2
            },
            delegate: {
                type: "EosActionDelegate",
                id: 3
            },
            undelegate: {
                type: "EosActionUndelegate",
                id: 4
            },
            refund: {
                type: "EosActionRefund",
                id: 5
            },
            buy_ram: {
                type: "EosActionBuyRam",
                id: 6
            },
            buy_ram_bytes: {
                type: "EosActionBuyRamBytes",
                id: 7
            },
            sell_ram: {
                type: "EosActionSellRam",
                id: 8
            },
            vote_producer: {
                type: "EosActionVoteProducer",
                id: 9
            },
            update_auth: {
                type: "EosActionUpdateAuth",
                id: 10
            },
            delete_auth: {
                type: "EosActionDeleteAuth",
                id: 11
            },
            link_auth: {
                type: "EosActionLinkAuth",
                id: 12
            },
            unlink_auth: {
                type: "EosActionUnlinkAuth",
                id: 13
            },
            new_account: {
                type: "EosActionNewAccount",
                id: 14
            },
            unknown: {
                type: "EosActionUnknown",
                id: 15
            }
        },
        nested: {
            EosAsset: {
                fields: {
                    amount: {
                        type: "sint64",
                        id: 1
                    },
                    symbol: {
                        type: "uint64",
                        id: 2
                    }
                }
            },
            EosPermissionLevel: {
                fields: {
                    actor: {
                        type: "uint64",
                        id: 1
                    },
                    permission: {
                        type: "uint64",
                        id: 2
                    }
                }
            },
            EosAuthorizationKey: {
                fields: {
                    type: {
                        rule: "required",
                        type: "uint32",
                        id: 1
                    },
                    key: {
                        type: "bytes",
                        id: 2
                    },
                    address_n: {
                        rule: "repeated",
                        type: "uint32",
                        id: 3,
                        options: {
                            packed: false
                        }
                    },
                    weight: {
                        rule: "required",
                        type: "uint32",
                        id: 4
                    }
                }
            },
            EosAuthorizationAccount: {
                fields: {
                    account: {
                        type: "EosPermissionLevel",
                        id: 1
                    },
                    weight: {
                        type: "uint32",
                        id: 2
                    }
                }
            },
            EosAuthorizationWait: {
                fields: {
                    wait_sec: {
                        type: "uint32",
                        id: 1
                    },
                    weight: {
                        type: "uint32",
                        id: 2
                    }
                }
            },
            EosAuthorization: {
                fields: {
                    threshold: {
                        type: "uint32",
                        id: 1
                    },
                    keys: {
                        rule: "repeated",
                        type: "EosAuthorizationKey",
                        id: 2
                    },
                    accounts: {
                        rule: "repeated",
                        type: "EosAuthorizationAccount",
                        id: 3
                    },
                    waits: {
                        rule: "repeated",
                        type: "EosAuthorizationWait",
                        id: 4
                    }
                }
            },
            EosActionCommon: {
                fields: {
                    account: {
                        type: "uint64",
                        id: 1
                    },
                    name: {
                        type: "uint64",
                        id: 2
                    },
                    authorization: {
                        rule: "repeated",
                        type: "EosPermissionLevel",
                        id: 3
                    }
                }
            },
            EosActionTransfer: {
                fields: {
                    sender: {
                        type: "uint64",
                        id: 1
                    },
                    receiver: {
                        type: "uint64",
                        id: 2
                    },
                    quantity: {
                        type: "EosAsset",
                        id: 3
                    },
                    memo: {
                        type: "string",
                        id: 4
                    }
                }
            },
            EosActionDelegate: {
                fields: {
                    sender: {
                        type: "uint64",
                        id: 1
                    },
                    receiver: {
                        type: "uint64",
                        id: 2
                    },
                    net_quantity: {
                        type: "EosAsset",
                        id: 3
                    },
                    cpu_quantity: {
                        type: "EosAsset",
                        id: 4
                    },
                    transfer: {
                        type: "bool",
                        id: 5
                    }
                }
            },
            EosActionUndelegate: {
                fields: {
                    sender: {
                        type: "uint64",
                        id: 1
                    },
                    receiver: {
                        type: "uint64",
                        id: 2
                    },
                    net_quantity: {
                        type: "EosAsset",
                        id: 3
                    },
                    cpu_quantity: {
                        type: "EosAsset",
                        id: 4
                    }
                }
            },
            EosActionRefund: {
                fields: {
                    owner: {
                        type: "uint64",
                        id: 1
                    }
                }
            },
            EosActionBuyRam: {
                fields: {
                    payer: {
                        type: "uint64",
                        id: 1
                    },
                    receiver: {
                        type: "uint64",
                        id: 2
                    },
                    quantity: {
                        type: "EosAsset",
                        id: 3
                    }
                }
            },
            EosActionBuyRamBytes: {
                fields: {
                    payer: {
                        type: "uint64",
                        id: 1
                    },
                    receiver: {
                        type: "uint64",
                        id: 2
                    },
                    bytes: {
                        type: "uint32",
                        id: 3
                    }
                }
            },
            EosActionSellRam: {
                fields: {
                    account: {
                        type: "uint64",
                        id: 1
                    },
                    bytes: {
                        type: "uint64",
                        id: 2
                    }
                }
            },
            EosActionVoteProducer: {
                fields: {
                    voter: {
                        type: "uint64",
                        id: 1
                    },
                    proxy: {
                        type: "uint64",
                        id: 2
                    },
                    producers: {
                        rule: "repeated",
                        type: "uint64",
                        id: 3,
                        options: {
                            packed: false
                        }
                    }
                }
            },
            EosActionUpdateAuth: {
                fields: {
                    account: {
                        type: "uint64",
                        id: 1
                    },
                    permission: {
                        type: "uint64",
                        id: 2
                    },
                    parent: {
                        type: "uint64",
                        id: 3
                    },
                    auth: {
                        type: "EosAuthorization",
                        id: 4
                    }
                }
            },
            EosActionDeleteAuth: {
                fields: {
                    account: {
                        type: "uint64",
                        id: 1
                    },
                    permission: {
                        type: "uint64",
                        id: 2
                    }
                }
            },
            EosActionLinkAuth: {
                fields: {
                    account: {
                        type: "uint64",
                        id: 1
                    },
                    code: {
                        type: "uint64",
                        id: 2
                    },
                    type: {
                        type: "uint64",
                        id: 3
                    },
                    requirement: {
                        type: "uint64",
                        id: 4
                    }
                }
            },
            EosActionUnlinkAuth: {
                fields: {
                    account: {
                        type: "uint64",
                        id: 1
                    },
                    code: {
                        type: "uint64",
                        id: 2
                    },
                    type: {
                        type: "uint64",
                        id: 3
                    }
                }
            },
            EosActionNewAccount: {
                fields: {
                    creator: {
                        type: "uint64",
                        id: 1
                    },
                    name: {
                        type: "uint64",
                        id: 2
                    },
                    owner: {
                        type: "EosAuthorization",
                        id: 3
                    },
                    active: {
                        type: "EosAuthorization",
                        id: 4
                    }
                }
            },
            EosActionUnknown: {
                fields: {
                    data_size: {
                        rule: "required",
                        type: "uint32",
                        id: 1
                    },
                    data_chunk: {
                        type: "bytes",
                        id: 2
                    }
                }
            }
        }
    },
    EosSignedTx: {
        fields: {
            signature: {
                rule: "required",
                type: "string",
                id: 1
            }
        }
    },
    EthereumDefinitionType: {
        values: {
            NETWORK: 0,
            TOKEN: 1
        }
    },
    EthereumNetworkInfo: {
        fields: {
            chain_id: {
                rule: "required",
                type: "uint64",
                id: 1
            },
            symbol: {
                rule: "required",
                type: "string",
                id: 2
            },
            slip44: {
                rule: "required",
                type: "uint32",
                id: 3
            },
            name: {
                rule: "required",
                type: "string",
                id: 4
            },
            icon: {
                type: "string",
                id: 101
            },
            primary_color: {
                type: "uint64",
                id: 102
            }
        }
    },
    EthereumTokenInfo: {
        fields: {
            address: {
                rule: "required",
                type: "bytes",
                id: 1
            },
            chain_id: {
                rule: "required",
                type: "uint64",
                id: 2
            },
            symbol: {
                rule: "required",
                type: "string",
                id: 3
            },
            decimals: {
                rule: "required",
                type: "uint32",
                id: 4
            },
            name: {
                rule: "required",
                type: "string",
                id: 5
            }
        }
    },
    EthereumDefinitions: {
        fields: {
            encoded_network: {
                type: "bytes",
                id: 1
            },
            encoded_token: {
                type: "bytes",
                id: 2
            }
        }
    },
    EthereumSignTypedDataOneKey: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            primary_type: {
                rule: "required",
                type: "string",
                id: 2
            },
            metamask_v4_compat: {
                type: "bool",
                id: 3,
                options: {
                    "default": true
                }
            },
            chain_id: {
                type: "uint64",
                id: 4
            }
        }
    },
    EthereumTypedDataStructRequestOneKey: {
        fields: {
            name: {
                rule: "required",
                type: "string",
                id: 1
            }
        }
    },
    EthereumTypedDataStructAckOneKey: {
        fields: {
            members: {
                rule: "repeated",
                type: "EthereumStructMemberOneKey",
                id: 1
            }
        },
        nested: {
            EthereumStructMemberOneKey: {
                fields: {
                    type: {
                        rule: "required",
                        type: "EthereumFieldTypeOneKey",
                        id: 1
                    },
                    name: {
                        rule: "required",
                        type: "string",
                        id: 2
                    }
                }
            },
            EthereumFieldTypeOneKey: {
                fields: {
                    data_type: {
                        rule: "required",
                        type: "EthereumDataTypeOneKey",
                        id: 1
                    },
                    size: {
                        type: "uint32",
                        id: 2
                    },
                    entry_type: {
                        type: "EthereumFieldTypeOneKey",
                        id: 3
                    },
                    struct_name: {
                        type: "string",
                        id: 4
                    }
                }
            },
            EthereumDataTypeOneKey: {
                values: {
                    UINT: 1,
                    INT: 2,
                    BYTES: 3,
                    STRING: 4,
                    BOOL: 5,
                    ADDRESS: 6,
                    ARRAY: 7,
                    STRUCT: 8
                }
            }
        }
    },
    EthereumTypedDataValueRequestOneKey: {
        fields: {
            member_path: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            }
        }
    },
    EthereumTypedDataValueAckOneKey: {
        fields: {
            value: {
                rule: "required",
                type: "bytes",
                id: 1
            }
        }
    },
    EthereumSignTypedData: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            primary_type: {
                rule: "required",
                type: "string",
                id: 2
            },
            metamask_v4_compat: {
                type: "bool",
                id: 3,
                options: {
                    "default": true
                }
            },
            definitions: {
                type: "EthereumDefinitions",
                id: 4
            }
        }
    },
    EthereumTypedDataStructRequest: {
        fields: {
            name: {
                rule: "required",
                type: "string",
                id: 1
            }
        }
    },
    EthereumTypedDataStructAck: {
        fields: {
            members: {
                rule: "repeated",
                type: "EthereumStructMember",
                id: 1
            }
        },
        nested: {
            EthereumStructMember: {
                fields: {
                    type: {
                        rule: "required",
                        type: "EthereumFieldType",
                        id: 1
                    },
                    name: {
                        rule: "required",
                        type: "string",
                        id: 2
                    }
                }
            },
            EthereumFieldType: {
                fields: {
                    data_type: {
                        rule: "required",
                        type: "EthereumDataType",
                        id: 1
                    },
                    size: {
                        type: "uint32",
                        id: 2
                    },
                    entry_type: {
                        type: "EthereumFieldType",
                        id: 3
                    },
                    struct_name: {
                        type: "string",
                        id: 4
                    }
                }
            },
            EthereumDataType: {
                values: {
                    UINT: 1,
                    INT: 2,
                    BYTES: 3,
                    STRING: 4,
                    BOOL: 5,
                    ADDRESS: 6,
                    ARRAY: 7,
                    STRUCT: 8
                }
            }
        }
    },
    EthereumTypedDataValueRequest: {
        fields: {
            member_path: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            }
        }
    },
    EthereumTypedDataValueAck: {
        fields: {
            value: {
                rule: "required",
                type: "bytes",
                id: 1
            }
        }
    },
    EthereumGetPublicKeyOneKey: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            show_display: {
                type: "bool",
                id: 2
            },
            chain_id: {
                type: "uint64",
                id: 3
            }
        }
    },
    EthereumPublicKeyOneKey: {
        fields: {
            node: {
                rule: "required",
                type: "HDNodeType",
                id: 1
            },
            xpub: {
                rule: "required",
                type: "string",
                id: 2
            }
        }
    },
    EthereumGetAddressOneKey: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            show_display: {
                type: "bool",
                id: 2
            },
            chain_id: {
                type: "uint64",
                id: 3
            }
        }
    },
    EthereumAddressOneKey: {
        fields: {
            _old_address: {
                type: "bytes",
                id: 1,
                options: {
                    deprecated: true
                }
            },
            address: {
                type: "string",
                id: 2
            }
        }
    },
    EthereumSignTxOneKey: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            nonce: {
                type: "bytes",
                id: 2,
                options: {
                    "default": ""
                }
            },
            gas_price: {
                rule: "required",
                type: "bytes",
                id: 3
            },
            gas_limit: {
                rule: "required",
                type: "bytes",
                id: 4
            },
            to: {
                type: "string",
                id: 11,
                options: {
                    "default": ""
                }
            },
            value: {
                type: "bytes",
                id: 6,
                options: {
                    "default": ""
                }
            },
            data_initial_chunk: {
                type: "bytes",
                id: 7,
                options: {
                    "default": ""
                }
            },
            data_length: {
                type: "uint32",
                id: 8,
                options: {
                    "default": 0
                }
            },
            chain_id: {
                rule: "required",
                type: "uint64",
                id: 9
            },
            tx_type: {
                type: "uint32",
                id: 10
            }
        }
    },
    EthereumSignTxEIP1559OneKey: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            nonce: {
                rule: "required",
                type: "bytes",
                id: 2
            },
            max_gas_fee: {
                rule: "required",
                type: "bytes",
                id: 3
            },
            max_priority_fee: {
                rule: "required",
                type: "bytes",
                id: 4
            },
            gas_limit: {
                rule: "required",
                type: "bytes",
                id: 5
            },
            to: {
                type: "string",
                id: 6,
                options: {
                    "default": ""
                }
            },
            value: {
                rule: "required",
                type: "bytes",
                id: 7
            },
            data_initial_chunk: {
                type: "bytes",
                id: 8,
                options: {
                    "default": ""
                }
            },
            data_length: {
                rule: "required",
                type: "uint32",
                id: 9
            },
            chain_id: {
                rule: "required",
                type: "uint64",
                id: 10
            },
            access_list: {
                rule: "repeated",
                type: "EthereumAccessListOneKey",
                id: 11
            }
        },
        nested: {
            EthereumAccessListOneKey: {
                fields: {
                    address: {
                        rule: "required",
                        type: "string",
                        id: 1
                    },
                    storage_keys: {
                        rule: "repeated",
                        type: "bytes",
                        id: 2
                    }
                }
            }
        }
    },
    EthereumTxRequestOneKey: {
        fields: {
            data_length: {
                type: "uint32",
                id: 1
            },
            signature_v: {
                type: "uint32",
                id: 2
            },
            signature_r: {
                type: "bytes",
                id: 3
            },
            signature_s: {
                type: "bytes",
                id: 4
            }
        }
    },
    EthereumTxAckOneKey: {
        fields: {
            data_chunk: {
                rule: "required",
                type: "bytes",
                id: 1
            }
        }
    },
    EthereumSignMessageOneKey: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            message: {
                rule: "required",
                type: "bytes",
                id: 2
            },
            chain_id: {
                type: "uint64",
                id: 3
            }
        }
    },
    EthereumMessageSignatureOneKey: {
        fields: {
            signature: {
                rule: "required",
                type: "bytes",
                id: 2
            },
            address: {
                rule: "required",
                type: "string",
                id: 3
            }
        }
    },
    EthereumVerifyMessageOneKey: {
        fields: {
            signature: {
                rule: "required",
                type: "bytes",
                id: 2
            },
            message: {
                rule: "required",
                type: "bytes",
                id: 3
            },
            address: {
                rule: "required",
                type: "string",
                id: 4
            },
            chain_id: {
                type: "uint64",
                id: 5
            }
        }
    },
    EthereumSignTypedHashOneKey: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            domain_separator_hash: {
                rule: "required",
                type: "bytes",
                id: 2
            },
            message_hash: {
                type: "bytes",
                id: 3
            },
            chain_id: {
                type: "uint64",
                id: 4
            }
        }
    },
    EthereumTypedDataSignatureOneKey: {
        fields: {
            signature: {
                rule: "required",
                type: "bytes",
                id: 1
            },
            address: {
                rule: "required",
                type: "string",
                id: 2
            }
        }
    },
    EthereumSignMessageEIP712: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            domain_hash: {
                type: "bytes",
                id: 2
            },
            message_hash: {
                type: "bytes",
                id: 3
            }
        }
    },
    EthereumGetPublicKey: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            show_display: {
                type: "bool",
                id: 2
            }
        }
    },
    EthereumPublicKey: {
        fields: {
            node: {
                rule: "required",
                type: "HDNodeType",
                id: 1
            },
            xpub: {
                rule: "required",
                type: "string",
                id: 2
            }
        }
    },
    EthereumGetAddress: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            show_display: {
                type: "bool",
                id: 2
            },
            encoded_network: {
                type: "bytes",
                id: 3
            }
        }
    },
    EthereumAddress: {
        fields: {
            _old_address: {
                type: "bytes",
                id: 1,
                options: {
                    deprecated: true
                }
            },
            address: {
                type: "string",
                id: 2
            }
        }
    },
    EthereumSignTx: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            nonce: {
                type: "bytes",
                id: 2,
                options: {
                    "default": ""
                }
            },
            gas_price: {
                rule: "required",
                type: "bytes",
                id: 3
            },
            gas_limit: {
                rule: "required",
                type: "bytes",
                id: 4
            },
            to: {
                type: "string",
                id: 11,
                options: {
                    "default": ""
                }
            },
            value: {
                type: "bytes",
                id: 6,
                options: {
                    "default": ""
                }
            },
            data_initial_chunk: {
                type: "bytes",
                id: 7,
                options: {
                    "default": ""
                }
            },
            data_length: {
                type: "uint32",
                id: 8,
                options: {
                    "default": 0
                }
            },
            chain_id: {
                rule: "required",
                type: "uint64",
                id: 9
            },
            tx_type: {
                type: "uint32",
                id: 10
            },
            definitions: {
                type: "EthereumDefinitions",
                id: 12
            }
        }
    },
    EthereumSignTxEIP1559: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            nonce: {
                rule: "required",
                type: "bytes",
                id: 2
            },
            max_gas_fee: {
                rule: "required",
                type: "bytes",
                id: 3
            },
            max_priority_fee: {
                rule: "required",
                type: "bytes",
                id: 4
            },
            gas_limit: {
                rule: "required",
                type: "bytes",
                id: 5
            },
            to: {
                type: "string",
                id: 6,
                options: {
                    "default": ""
                }
            },
            value: {
                rule: "required",
                type: "bytes",
                id: 7
            },
            data_initial_chunk: {
                type: "bytes",
                id: 8,
                options: {
                    "default": ""
                }
            },
            data_length: {
                rule: "required",
                type: "uint32",
                id: 9
            },
            chain_id: {
                rule: "required",
                type: "uint64",
                id: 10
            },
            access_list: {
                rule: "repeated",
                type: "EthereumAccessList",
                id: 11
            },
            definitions: {
                type: "EthereumDefinitions",
                id: 12
            }
        },
        nested: {
            EthereumAccessList: {
                fields: {
                    address: {
                        rule: "required",
                        type: "string",
                        id: 1
                    },
                    storage_keys: {
                        rule: "repeated",
                        type: "bytes",
                        id: 2
                    }
                }
            }
        }
    },
    EthereumTxRequest: {
        fields: {
            data_length: {
                type: "uint32",
                id: 1
            },
            signature_v: {
                type: "uint32",
                id: 2
            },
            signature_r: {
                type: "bytes",
                id: 3
            },
            signature_s: {
                type: "bytes",
                id: 4
            }
        }
    },
    EthereumTxAck: {
        fields: {
            data_chunk: {
                rule: "required",
                type: "bytes",
                id: 1
            }
        }
    },
    EthereumSignMessage: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            message: {
                rule: "required",
                type: "bytes",
                id: 2
            },
            encoded_network: {
                type: "bytes",
                id: 3
            }
        }
    },
    EthereumMessageSignature: {
        fields: {
            signature: {
                rule: "required",
                type: "bytes",
                id: 2
            },
            address: {
                rule: "required",
                type: "string",
                id: 3
            }
        }
    },
    EthereumVerifyMessage: {
        fields: {
            signature: {
                rule: "required",
                type: "bytes",
                id: 2
            },
            message: {
                rule: "required",
                type: "bytes",
                id: 3
            },
            address: {
                rule: "required",
                type: "string",
                id: 4
            }
        }
    },
    EthereumSignTypedHash: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            domain_separator_hash: {
                rule: "required",
                type: "bytes",
                id: 2
            },
            message_hash: {
                type: "bytes",
                id: 3
            },
            encoded_network: {
                type: "bytes",
                id: 4
            }
        }
    },
    EthereumTypedDataSignature: {
        fields: {
            signature: {
                rule: "required",
                type: "bytes",
                id: 1
            },
            address: {
                rule: "required",
                type: "string",
                id: 2
            }
        }
    },
    FilecoinGetAddress: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            show_display: {
                type: "bool",
                id: 2
            },
            testnet: {
                type: "bool",
                id: 3
            }
        }
    },
    FilecoinAddress: {
        fields: {
            address: {
                type: "string",
                id: 1
            }
        }
    },
    FilecoinSignTx: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            raw_tx: {
                rule: "required",
                type: "bytes",
                id: 2
            },
            testnet: {
                type: "bool",
                id: 3
            }
        }
    },
    FilecoinSignedTx: {
        fields: {
            signature: {
                rule: "required",
                type: "bytes",
                id: 1
            }
        }
    },
    KaspaGetAddress: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            show_display: {
                type: "bool",
                id: 2
            },
            prefix: {
                type: "string",
                id: 3,
                options: {
                    "default": "kaspa"
                }
            },
            scheme: {
                type: "string",
                id: 4,
                options: {
                    "default": "schnorr"
                }
            }
        }
    },
    KaspaAddress: {
        fields: {
            address: {
                rule: "required",
                type: "string",
                id: 1
            }
        }
    },
    KaspaSignTx: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            raw_message: {
                rule: "required",
                type: "bytes",
                id: 2
            },
            scheme: {
                type: "string",
                id: 3,
                options: {
                    "default": "schnorr"
                }
            },
            prefix: {
                type: "string",
                id: 4,
                options: {
                    "default": "kaspa"
                }
            },
            input_count: {
                type: "uint32",
                id: 5,
                options: {
                    "default": 1
                }
            }
        }
    },
    KaspaTxInputRequest: {
        fields: {
            request_index: {
                rule: "required",
                type: "uint32",
                id: 1
            },
            signature: {
                type: "bytes",
                id: 2
            }
        }
    },
    KaspaTxInputAck: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            raw_message: {
                rule: "required",
                type: "bytes",
                id: 2
            }
        }
    },
    KaspaSignedTx: {
        fields: {
            signature: {
                rule: "required",
                type: "bytes",
                id: 2
            }
        }
    },
    BackupType: {
        values: {
            Bip39: 0,
            Slip39_Basic: 1,
            Slip39_Advanced: 2
        }
    },
    SafetyCheckLevel: {
        values: {
            Strict: 0,
            PromptAlways: 1,
            PromptTemporarily: 2
        }
    },
    Initialize: {
        fields: {
            session_id: {
                type: "bytes",
                id: 1
            },
            _skip_passphrase: {
                type: "bool",
                id: 2,
                options: {
                    deprecated: true
                }
            },
            derive_cardano: {
                type: "bool",
                id: 3
            }
        }
    },
    GetFeatures: {
        fields: {}
    },
    Features: {
        fields: {
            vendor: {
                type: "string",
                id: 1
            },
            major_version: {
                rule: "required",
                type: "uint32",
                id: 2
            },
            minor_version: {
                rule: "required",
                type: "uint32",
                id: 3
            },
            patch_version: {
                rule: "required",
                type: "uint32",
                id: 4
            },
            bootloader_mode: {
                type: "bool",
                id: 5
            },
            device_id: {
                type: "string",
                id: 6
            },
            pin_protection: {
                type: "bool",
                id: 7
            },
            passphrase_protection: {
                type: "bool",
                id: 8
            },
            language: {
                type: "string",
                id: 9
            },
            label: {
                type: "string",
                id: 10
            },
            initialized: {
                type: "bool",
                id: 12
            },
            revision: {
                type: "bytes",
                id: 13
            },
            bootloader_hash: {
                type: "bytes",
                id: 14
            },
            imported: {
                type: "bool",
                id: 15
            },
            unlocked: {
                type: "bool",
                id: 16
            },
            _passphrase_cached: {
                type: "bool",
                id: 17,
                options: {
                    deprecated: true
                }
            },
            firmware_present: {
                type: "bool",
                id: 18
            },
            needs_backup: {
                type: "bool",
                id: 19
            },
            flags: {
                type: "uint32",
                id: 20
            },
            model: {
                type: "string",
                id: 21
            },
            fw_major: {
                type: "uint32",
                id: 22
            },
            fw_minor: {
                type: "uint32",
                id: 23
            },
            fw_patch: {
                type: "uint32",
                id: 24
            },
            fw_vendor: {
                type: "string",
                id: 25
            },
            fw_vendor_keys: {
                type: "bytes",
                id: 26
            },
            unfinished_backup: {
                type: "bool",
                id: 27
            },
            no_backup: {
                type: "bool",
                id: 28
            },
            recovery_mode: {
                type: "bool",
                id: 29
            },
            capabilities: {
                rule: "repeated",
                type: "Capability",
                id: 30,
                options: {
                    packed: false
                }
            },
            backup_type: {
                type: "BackupType",
                id: 31
            },
            sd_card_present: {
                type: "bool",
                id: 32
            },
            sd_protection: {
                type: "bool",
                id: 33
            },
            wipe_code_protection: {
                type: "bool",
                id: 34
            },
            session_id: {
                type: "bytes",
                id: 35
            },
            passphrase_always_on_device: {
                type: "bool",
                id: 36
            },
            safety_checks: {
                type: "SafetyCheckLevel",
                id: 37
            },
            auto_lock_delay_ms: {
                type: "uint32",
                id: 38
            },
            display_rotation: {
                type: "uint32",
                id: 39
            },
            experimental_features: {
                type: "bool",
                id: 40
            },
            offset: {
                type: "uint32",
                id: 500
            },
            ble_name: {
                type: "string",
                id: 501
            },
            ble_ver: {
                type: "string",
                id: 502
            },
            ble_enable: {
                type: "bool",
                id: 503
            },
            se_enable: {
                type: "bool",
                id: 504
            },
            se_ver: {
                type: "string",
                id: 506
            },
            backup_only: {
                type: "bool",
                id: 507
            },
            onekey_version: {
                type: "string",
                id: 508
            },
            onekey_serial: {
                type: "string",
                id: 509
            },
            bootloader_version: {
                type: "string",
                id: 510
            },
            serial_no: {
                type: "string",
                id: 511
            },
            spi_flash: {
                type: "string",
                id: 512
            },
            initstates: {
                type: "uint32",
                id: 513
            },
            NFT_voucher: {
                type: "bytes",
                id: 514
            },
            cpu_info: {
                type: "string",
                id: 515
            },
            pre_firmware: {
                type: "string",
                id: 516
            },
            coin_switch: {
                type: "uint32",
                id: 517
            },
            build_id: {
                type: "string",
                id: 518
            },
            battery_level: {
                type: "uint32",
                id: 520
            }
        },
        nested: {
            Capability: {
                options: {
                    "(has_bitcoin_only_values)": true
                },
                values: {
                    Capability_Bitcoin: 1,
                    Capability_Bitcoin_like: 2,
                    Capability_Binance: 3,
                    Capability_Cardano: 4,
                    Capability_Crypto: 5,
                    Capability_EOS: 6,
                    Capability_Ethereum: 7,
                    Capability_Lisk: 8,
                    Capability_Monero: 9,
                    Capability_NEM: 10,
                    Capability_Ripple: 11,
                    Capability_Stellar: 12,
                    Capability_Tezos: 13,
                    Capability_U2F: 14,
                    Capability_Shamir: 15,
                    Capability_ShamirGroups: 16,
                    Capability_PassphraseEntry: 17
                }
            }
        }
    },
    LockDevice: {
        fields: {}
    },
    EndSession: {
        fields: {}
    },
    ApplySettings: {
        fields: {
            language: {
                type: "string",
                id: 1
            },
            label: {
                type: "string",
                id: 2
            },
            use_passphrase: {
                type: "bool",
                id: 3
            },
            homescreen: {
                type: "bytes",
                id: 4
            },
            _passphrase_source: {
                type: "uint32",
                id: 5,
                options: {
                    deprecated: true
                }
            },
            auto_lock_delay_ms: {
                type: "uint32",
                id: 6
            },
            display_rotation: {
                type: "uint32",
                id: 7
            },
            passphrase_always_on_device: {
                type: "bool",
                id: 8
            },
            safety_checks: {
                type: "SafetyCheckLevel",
                id: 9
            },
            experimental_features: {
                type: "bool",
                id: 10
            },
            use_ble: {
                type: "bool",
                id: 100
            },
            use_se: {
                type: "bool",
                id: 101
            },
            is_bixinapp: {
                type: "bool",
                id: 102
            },
            fastpay_pin: {
                type: "bool",
                id: 103
            },
            fastpay_confirm: {
                type: "bool",
                id: 104
            },
            fastpay_money_limit: {
                type: "uint64",
                id: 105
            },
            fastpay_times: {
                type: "uint32",
                id: 106
            }
        },
        nested: {
            ExportType: {
                values: {
                    SeedEncExportType_NO: 0,
                    SeedEncExportType_YES: 1,
                    MnemonicPlainExportType_YES: 2
                }
            }
        }
    },
    ApplyFlags: {
        fields: {
            flags: {
                rule: "required",
                type: "uint32",
                id: 1
            }
        }
    },
    ChangePin: {
        fields: {
            remove: {
                type: "bool",
                id: 1
            }
        }
    },
    ChangeWipeCode: {
        fields: {
            remove: {
                type: "bool",
                id: 1
            }
        }
    },
    SdProtect: {
        fields: {
            operation: {
                rule: "required",
                type: "SdProtectOperationType",
                id: 1
            }
        },
        nested: {
            SdProtectOperationType: {
                values: {
                    DISABLE: 0,
                    ENABLE: 1,
                    REFRESH: 2
                }
            }
        }
    },
    Ping: {
        fields: {
            message: {
                type: "string",
                id: 1,
                options: {
                    "default": ""
                }
            },
            button_protection: {
                type: "bool",
                id: 2
            }
        }
    },
    Cancel: {
        fields: {}
    },
    GetEntropy: {
        fields: {
            size: {
                rule: "required",
                type: "uint32",
                id: 1
            }
        }
    },
    Entropy: {
        fields: {
            entropy: {
                rule: "required",
                type: "bytes",
                id: 1
            }
        }
    },
    WipeDevice: {
        fields: {}
    },
    LoadDevice: {
        fields: {
            mnemonics: {
                rule: "repeated",
                type: "string",
                id: 1
            },
            pin: {
                type: "string",
                id: 3
            },
            passphrase_protection: {
                type: "bool",
                id: 4
            },
            language: {
                type: "string",
                id: 5,
                options: {
                    "default": "en-US"
                }
            },
            label: {
                type: "string",
                id: 6
            },
            skip_checksum: {
                type: "bool",
                id: 7
            },
            u2f_counter: {
                type: "uint32",
                id: 8
            },
            needs_backup: {
                type: "bool",
                id: 9
            },
            no_backup: {
                type: "bool",
                id: 10
            }
        }
    },
    ResetDevice: {
        fields: {
            display_random: {
                type: "bool",
                id: 1
            },
            strength: {
                type: "uint32",
                id: 2,
                options: {
                    "default": 256
                }
            },
            passphrase_protection: {
                type: "bool",
                id: 3
            },
            pin_protection: {
                type: "bool",
                id: 4
            },
            language: {
                type: "string",
                id: 5,
                options: {
                    "default": "en-US"
                }
            },
            label: {
                type: "string",
                id: 6
            },
            u2f_counter: {
                type: "uint32",
                id: 7
            },
            skip_backup: {
                type: "bool",
                id: 8
            },
            no_backup: {
                type: "bool",
                id: 9
            },
            backup_type: {
                type: "BackupType",
                id: 10,
                options: {
                    "default": "Bip39"
                }
            }
        }
    },
    BackupDevice: {
        fields: {}
    },
    EntropyRequest: {
        fields: {}
    },
    EntropyAck: {
        fields: {
            entropy: {
                rule: "required",
                type: "bytes",
                id: 1
            }
        }
    },
    RecoveryDevice: {
        fields: {
            word_count: {
                type: "uint32",
                id: 1
            },
            passphrase_protection: {
                type: "bool",
                id: 2
            },
            pin_protection: {
                type: "bool",
                id: 3
            },
            language: {
                type: "string",
                id: 4
            },
            label: {
                type: "string",
                id: 5
            },
            enforce_wordlist: {
                type: "bool",
                id: 6
            },
            type: {
                type: "RecoveryDeviceType",
                id: 8
            },
            u2f_counter: {
                type: "uint32",
                id: 9
            },
            dry_run: {
                type: "bool",
                id: 10
            }
        },
        nested: {
            RecoveryDeviceType: {
                values: {
                    RecoveryDeviceType_ScrambledWords: 0,
                    RecoveryDeviceType_Matrix: 1
                }
            }
        }
    },
    WordRequest: {
        fields: {
            type: {
                rule: "required",
                type: "WordRequestType",
                id: 1
            }
        },
        nested: {
            WordRequestType: {
                values: {
                    WordRequestType_Plain: 0,
                    WordRequestType_Matrix9: 1,
                    WordRequestType_Matrix6: 2
                }
            }
        }
    },
    WordAck: {
        fields: {
            word: {
                rule: "required",
                type: "string",
                id: 1
            }
        }
    },
    SetU2FCounter: {
        fields: {
            u2f_counter: {
                rule: "required",
                type: "uint32",
                id: 1
            }
        }
    },
    GetNextU2FCounter: {
        fields: {}
    },
    NextU2FCounter: {
        fields: {
            u2f_counter: {
                rule: "required",
                type: "uint32",
                id: 1
            }
        }
    },
    DoPreauthorized: {
        fields: {}
    },
    PreauthorizedRequest: {
        fields: {}
    },
    CancelAuthorization: {
        fields: {}
    },
    BixinSeedOperate: {
        fields: {
            type: {
                rule: "required",
                type: "SeedRequestType",
                id: 1
            },
            seed_importData: {
                type: "bytes",
                id: 2
            }
        },
        nested: {
            SeedRequestType: {
                values: {
                    SeedRequestType_Gen: 0,
                    SeedRequestType_EncExport: 1,
                    SeedRequestType_EncImport: 2
                }
            }
        }
    },
    BixinMessageSE: {
        fields: {
            inputmessage: {
                rule: "required",
                type: "bytes",
                id: 1
            }
        }
    },
    BixinOutMessageSE: {
        fields: {
            outmessage: {
                type: "bytes",
                id: 1
            }
        }
    },
    DeviceBackToBoot: {
        fields: {}
    },
    BixinBackupRequest: {
        fields: {}
    },
    BixinBackupAck: {
        fields: {
            data: {
                rule: "required",
                type: "bytes",
                id: 1
            }
        }
    },
    BixinRestoreRequest: {
        fields: {
            data: {
                rule: "required",
                type: "bytes",
                id: 1
            },
            language: {
                type: "string",
                id: 2
            },
            label: {
                type: "string",
                id: 3
            },
            passphrase_protection: {
                type: "bool",
                id: 4
            }
        }
    },
    BixinRestoreAck: {
        fields: {
            data: {
                rule: "required",
                type: "bytes",
                id: 1
            }
        }
    },
    BixinVerifyDeviceRequest: {
        fields: {
            data: {
                rule: "required",
                type: "bytes",
                id: 1
            }
        }
    },
    BixinVerifyDeviceAck: {
        fields: {
            cert: {
                rule: "required",
                type: "bytes",
                id: 1
            },
            signature: {
                rule: "required",
                type: "bytes",
                id: 2
            }
        }
    },
    BixinWhiteListRequest: {
        fields: {
            type: {
                rule: "required",
                type: "WL_OperationType",
                id: 1
            },
            addr_in: {
                type: "string",
                id: 2
            }
        },
        nested: {
            WL_OperationType: {
                values: {
                    WL_OperationType_Add: 0,
                    WL_OperationType_Delete: 1,
                    WL_OperationType_Inquire: 2
                }
            }
        }
    },
    BixinWhiteListAck: {
        fields: {
            address: {
                rule: "repeated",
                type: "string",
                id: 1
            }
        }
    },
    BixinLoadDevice: {
        fields: {
            mnemonics: {
                rule: "required",
                type: "string",
                id: 1
            },
            language: {
                type: "string",
                id: 5,
                options: {
                    "default": "en-US"
                }
            },
            label: {
                type: "string",
                id: 6
            },
            skip_checksum: {
                type: "bool",
                id: 7
            }
        }
    },
    BixinBackupDevice: {
        fields: {}
    },
    BixinBackupDeviceAck: {
        fields: {
            mnemonics: {
                rule: "required",
                type: "string",
                id: 1
            }
        }
    },
    DeviceInfoSettings: {
        fields: {
            serial_no: {
                type: "string",
                id: 1
            },
            cpu_info: {
                type: "string",
                id: 2
            },
            pre_firmware: {
                type: "string",
                id: 3
            }
        }
    },
    GetDeviceInfo: {
        fields: {}
    },
    DeviceInfo: {
        fields: {
            serial_no: {
                type: "string",
                id: 1
            },
            spiFlash_info: {
                type: "string",
                id: 2
            },
            SE_info: {
                type: "string",
                id: 3
            },
            NFT_voucher: {
                type: "bytes",
                id: 4
            },
            cpu_info: {
                type: "string",
                id: 5
            },
            pre_firmware: {
                type: "string",
                id: 6
            }
        }
    },
    ReadSEPublicKey: {
        fields: {}
    },
    SEPublicKey: {
        fields: {
            public_key: {
                rule: "required",
                type: "bytes",
                id: 1
            }
        }
    },
    WriteSEPublicCert: {
        fields: {
            public_cert: {
                rule: "required",
                type: "bytes",
                id: 1
            }
        }
    },
    ReadSEPublicCert: {
        fields: {}
    },
    SEPublicCert: {
        fields: {
            public_cert: {
                rule: "required",
                type: "bytes",
                id: 1
            }
        }
    },
    SpiFlashWrite: {
        fields: {
            address: {
                rule: "required",
                type: "uint32",
                id: 1
            },
            data: {
                rule: "required",
                type: "bytes",
                id: 2
            }
        }
    },
    SpiFlashRead: {
        fields: {
            address: {
                rule: "required",
                type: "uint32",
                id: 1
            },
            len: {
                rule: "required",
                type: "uint32",
                id: 2
            }
        }
    },
    SpiFlashData: {
        fields: {
            data: {
                rule: "required",
                type: "bytes",
                id: 1
            }
        }
    },
    SESignMessage: {
        fields: {
            message: {
                rule: "required",
                type: "bytes",
                id: 1
            }
        }
    },
    SEMessageSignature: {
        fields: {
            signature: {
                rule: "required",
                type: "bytes",
                id: 1
            }
        }
    },
    ResourceUpload: {
        fields: {
            extension: {
                rule: "required",
                type: "string",
                id: 1
            },
            data_length: {
                rule: "required",
                type: "uint32",
                id: 2
            },
            res_type: {
                rule: "required",
                type: "ResourceType",
                id: 3
            },
            nft_meta_data: {
                type: "bytes",
                id: 4
            },
            zoom_data_length: {
                rule: "required",
                type: "uint32",
                id: 5
            },
            file_name_no_ext: {
                type: "string",
                id: 6
            }
        },
        nested: {
            ResourceType: {
                values: {
                    WallPaper: 0,
                    Nft: 1
                }
            }
        }
    },
    ZoomRequest: {
        fields: {
            offset: {
                type: "uint32",
                id: 1
            },
            data_length: {
                rule: "required",
                type: "uint32",
                id: 2
            }
        }
    },
    ResourceRequest: {
        fields: {
            offset: {
                type: "uint32",
                id: 1
            },
            data_length: {
                rule: "required",
                type: "uint32",
                id: 2
            }
        }
    },
    ResourceAck: {
        fields: {
            data_chunk: {
                rule: "required",
                type: "bytes",
                id: 1
            },
            hash: {
                type: "bytes",
                id: 2
            }
        }
    },
    ResourceUpdate: {
        fields: {
            file_name: {
                rule: "required",
                type: "string",
                id: 1
            },
            data_length: {
                rule: "required",
                type: "uint32",
                id: 2
            },
            initial_data_chunk: {
                rule: "required",
                type: "bytes",
                id: 3
            },
            hash: {
                type: "bytes",
                id: 4
            }
        }
    },
    NFTWriteInfo: {
        fields: {
            index: {
                rule: "required",
                type: "uint32",
                id: 1
            },
            width: {
                rule: "required",
                type: "uint32",
                id: 2
            },
            height: {
                rule: "required",
                type: "uint32",
                id: 3
            },
            name_zh: {
                type: "string",
                id: 4
            },
            name_en: {
                type: "string",
                id: 5
            }
        }
    },
    NFTWriteData: {
        fields: {
            index: {
                rule: "required",
                type: "uint32",
                id: 1
            },
            data: {
                rule: "required",
                type: "bytes",
                id: 2
            },
            offset: {
                rule: "required",
                type: "uint32",
                id: 3
            }
        }
    },
    RebootToBootloader: {
        fields: {}
    },
    RebootToBoardloader: {
        fields: {}
    },
    ListResDir: {
        fields: {
            path: {
                rule: "required",
                type: "string",
                id: 1
            }
        }
    },
    FileInfoList: {
        fields: {
            files: {
                rule: "repeated",
                type: "FileInfo",
                id: 1
            }
        },
        nested: {
            FileInfo: {
                fields: {
                    name: {
                        rule: "required",
                        type: "string",
                        id: 1
                    },
                    size: {
                        rule: "required",
                        type: "uint64",
                        id: 2
                    }
                }
            }
        }
    },
    DeviceEraseSector: {
        fields: {
            sector: {
                rule: "required",
                type: "uint32",
                id: 1
            }
        }
    },
    MoneroTransactionSourceEntry: {
        fields: {
            outputs: {
                rule: "repeated",
                type: "MoneroOutputEntry",
                id: 1
            },
            real_output: {
                type: "uint64",
                id: 2
            },
            real_out_tx_key: {
                type: "bytes",
                id: 3
            },
            real_out_additional_tx_keys: {
                rule: "repeated",
                type: "bytes",
                id: 4
            },
            real_output_in_tx_index: {
                type: "uint64",
                id: 5
            },
            amount: {
                type: "uint64",
                id: 6
            },
            rct: {
                type: "bool",
                id: 7
            },
            mask: {
                type: "bytes",
                id: 8
            },
            multisig_kLRki: {
                type: "MoneroMultisigKLRki",
                id: 9
            },
            subaddr_minor: {
                type: "uint32",
                id: 10
            }
        },
        nested: {
            MoneroOutputEntry: {
                fields: {
                    idx: {
                        type: "uint64",
                        id: 1
                    },
                    key: {
                        type: "MoneroRctKeyPublic",
                        id: 2
                    }
                },
                nested: {
                    MoneroRctKeyPublic: {
                        fields: {
                            dest: {
                                type: "bytes",
                                id: 1
                            },
                            commitment: {
                                type: "bytes",
                                id: 2
                            }
                        }
                    }
                }
            },
            MoneroMultisigKLRki: {
                fields: {
                    K: {
                        type: "bytes",
                        id: 1
                    },
                    L: {
                        type: "bytes",
                        id: 2
                    },
                    R: {
                        type: "bytes",
                        id: 3
                    },
                    ki: {
                        type: "bytes",
                        id: 4
                    }
                }
            }
        }
    },
    MoneroTransactionDestinationEntry: {
        fields: {
            amount: {
                type: "uint64",
                id: 1
            },
            addr: {
                type: "MoneroAccountPublicAddress",
                id: 2
            },
            is_subaddress: {
                type: "bool",
                id: 3
            },
            original: {
                type: "bytes",
                id: 4
            },
            is_integrated: {
                type: "bool",
                id: 5
            }
        },
        nested: {
            MoneroAccountPublicAddress: {
                fields: {
                    spend_public_key: {
                        type: "bytes",
                        id: 1
                    },
                    view_public_key: {
                        type: "bytes",
                        id: 2
                    }
                }
            }
        }
    },
    MoneroTransactionRsigData: {
        fields: {
            rsig_type: {
                type: "uint32",
                id: 1
            },
            offload_type: {
                type: "uint32",
                id: 2
            },
            grouping: {
                rule: "repeated",
                type: "uint64",
                id: 3,
                options: {
                    packed: false
                }
            },
            mask: {
                type: "bytes",
                id: 4
            },
            rsig: {
                type: "bytes",
                id: 5
            },
            rsig_parts: {
                rule: "repeated",
                type: "bytes",
                id: 6
            },
            bp_version: {
                type: "uint32",
                id: 7
            }
        }
    },
    MoneroGetAddress: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            show_display: {
                type: "bool",
                id: 2
            },
            network_type: {
                type: "uint32",
                id: 3
            },
            account: {
                type: "uint32",
                id: 4
            },
            minor: {
                type: "uint32",
                id: 5
            },
            payment_id: {
                type: "bytes",
                id: 6
            }
        }
    },
    MoneroAddress: {
        fields: {
            address: {
                type: "bytes",
                id: 1
            }
        }
    },
    MoneroGetWatchKey: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            network_type: {
                type: "uint32",
                id: 2
            }
        }
    },
    MoneroWatchKey: {
        fields: {
            watch_key: {
                type: "bytes",
                id: 1
            },
            address: {
                type: "bytes",
                id: 2
            }
        }
    },
    MoneroTransactionInitRequest: {
        fields: {
            version: {
                type: "uint32",
                id: 1
            },
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 2,
                options: {
                    packed: false
                }
            },
            network_type: {
                type: "uint32",
                id: 3
            },
            tsx_data: {
                type: "MoneroTransactionData",
                id: 4
            }
        },
        nested: {
            MoneroTransactionData: {
                fields: {
                    version: {
                        type: "uint32",
                        id: 1
                    },
                    payment_id: {
                        type: "bytes",
                        id: 2
                    },
                    unlock_time: {
                        type: "uint64",
                        id: 3
                    },
                    outputs: {
                        rule: "repeated",
                        type: "MoneroTransactionDestinationEntry",
                        id: 4
                    },
                    change_dts: {
                        type: "MoneroTransactionDestinationEntry",
                        id: 5
                    },
                    num_inputs: {
                        type: "uint32",
                        id: 6
                    },
                    mixin: {
                        type: "uint32",
                        id: 7
                    },
                    fee: {
                        type: "uint64",
                        id: 8
                    },
                    account: {
                        type: "uint32",
                        id: 9
                    },
                    minor_indices: {
                        rule: "repeated",
                        type: "uint32",
                        id: 10,
                        options: {
                            packed: false
                        }
                    },
                    rsig_data: {
                        type: "MoneroTransactionRsigData",
                        id: 11
                    },
                    integrated_indices: {
                        rule: "repeated",
                        type: "uint32",
                        id: 12,
                        options: {
                            packed: false
                        }
                    },
                    client_version: {
                        type: "uint32",
                        id: 13
                    },
                    hard_fork: {
                        type: "uint32",
                        id: 14
                    },
                    monero_version: {
                        type: "bytes",
                        id: 15
                    }
                }
            }
        }
    },
    MoneroTransactionInitAck: {
        fields: {
            hmacs: {
                rule: "repeated",
                type: "bytes",
                id: 1
            },
            rsig_data: {
                type: "MoneroTransactionRsigData",
                id: 2
            }
        }
    },
    MoneroTransactionSetInputRequest: {
        fields: {
            src_entr: {
                type: "MoneroTransactionSourceEntry",
                id: 1
            }
        }
    },
    MoneroTransactionSetInputAck: {
        fields: {
            vini: {
                type: "bytes",
                id: 1
            },
            vini_hmac: {
                type: "bytes",
                id: 2
            },
            pseudo_out: {
                type: "bytes",
                id: 3
            },
            pseudo_out_hmac: {
                type: "bytes",
                id: 4
            },
            pseudo_out_alpha: {
                type: "bytes",
                id: 5
            },
            spend_key: {
                type: "bytes",
                id: 6
            }
        }
    },
    MoneroTransactionInputsPermutationRequest: {
        fields: {
            perm: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            }
        }
    },
    MoneroTransactionInputsPermutationAck: {
        fields: {}
    },
    MoneroTransactionInputViniRequest: {
        fields: {
            src_entr: {
                type: "MoneroTransactionSourceEntry",
                id: 1
            },
            vini: {
                type: "bytes",
                id: 2
            },
            vini_hmac: {
                type: "bytes",
                id: 3
            },
            pseudo_out: {
                type: "bytes",
                id: 4
            },
            pseudo_out_hmac: {
                type: "bytes",
                id: 5
            },
            orig_idx: {
                type: "uint32",
                id: 6
            }
        }
    },
    MoneroTransactionInputViniAck: {
        fields: {}
    },
    MoneroTransactionAllInputsSetRequest: {
        fields: {}
    },
    MoneroTransactionAllInputsSetAck: {
        fields: {
            rsig_data: {
                type: "MoneroTransactionRsigData",
                id: 1
            }
        }
    },
    MoneroTransactionSetOutputRequest: {
        fields: {
            dst_entr: {
                type: "MoneroTransactionDestinationEntry",
                id: 1
            },
            dst_entr_hmac: {
                type: "bytes",
                id: 2
            },
            rsig_data: {
                type: "MoneroTransactionRsigData",
                id: 3
            },
            is_offloaded_bp: {
                type: "bool",
                id: 4
            }
        }
    },
    MoneroTransactionSetOutputAck: {
        fields: {
            tx_out: {
                type: "bytes",
                id: 1
            },
            vouti_hmac: {
                type: "bytes",
                id: 2
            },
            rsig_data: {
                type: "MoneroTransactionRsigData",
                id: 3
            },
            out_pk: {
                type: "bytes",
                id: 4
            },
            ecdh_info: {
                type: "bytes",
                id: 5
            }
        }
    },
    MoneroTransactionAllOutSetRequest: {
        fields: {
            rsig_data: {
                type: "MoneroTransactionRsigData",
                id: 1
            }
        }
    },
    MoneroTransactionAllOutSetAck: {
        fields: {
            extra: {
                type: "bytes",
                id: 1
            },
            tx_prefix_hash: {
                type: "bytes",
                id: 2
            },
            rv: {
                type: "MoneroRingCtSig",
                id: 4
            },
            full_message_hash: {
                type: "bytes",
                id: 5
            }
        },
        nested: {
            MoneroRingCtSig: {
                fields: {
                    txn_fee: {
                        type: "uint64",
                        id: 1
                    },
                    message: {
                        type: "bytes",
                        id: 2
                    },
                    rv_type: {
                        type: "uint32",
                        id: 3
                    }
                }
            }
        }
    },
    MoneroTransactionSignInputRequest: {
        fields: {
            src_entr: {
                type: "MoneroTransactionSourceEntry",
                id: 1
            },
            vini: {
                type: "bytes",
                id: 2
            },
            vini_hmac: {
                type: "bytes",
                id: 3
            },
            pseudo_out: {
                type: "bytes",
                id: 4
            },
            pseudo_out_hmac: {
                type: "bytes",
                id: 5
            },
            pseudo_out_alpha: {
                type: "bytes",
                id: 6
            },
            spend_key: {
                type: "bytes",
                id: 7
            },
            orig_idx: {
                type: "uint32",
                id: 8
            }
        }
    },
    MoneroTransactionSignInputAck: {
        fields: {
            signature: {
                type: "bytes",
                id: 1
            },
            pseudo_out: {
                type: "bytes",
                id: 2
            }
        }
    },
    MoneroTransactionFinalRequest: {
        fields: {}
    },
    MoneroTransactionFinalAck: {
        fields: {
            cout_key: {
                type: "bytes",
                id: 1
            },
            salt: {
                type: "bytes",
                id: 2
            },
            rand_mult: {
                type: "bytes",
                id: 3
            },
            tx_enc_keys: {
                type: "bytes",
                id: 4
            },
            opening_key: {
                type: "bytes",
                id: 5
            }
        }
    },
    MoneroKeyImageExportInitRequest: {
        fields: {
            num: {
                type: "uint64",
                id: 1
            },
            hash: {
                type: "bytes",
                id: 2
            },
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 3,
                options: {
                    packed: false
                }
            },
            network_type: {
                type: "uint32",
                id: 4
            },
            subs: {
                rule: "repeated",
                type: "MoneroSubAddressIndicesList",
                id: 5
            }
        },
        nested: {
            MoneroSubAddressIndicesList: {
                fields: {
                    account: {
                        type: "uint32",
                        id: 1
                    },
                    minor_indices: {
                        rule: "repeated",
                        type: "uint32",
                        id: 2,
                        options: {
                            packed: false
                        }
                    }
                }
            }
        }
    },
    MoneroKeyImageExportInitAck: {
        fields: {}
    },
    MoneroKeyImageSyncStepRequest: {
        fields: {
            tdis: {
                rule: "repeated",
                type: "MoneroTransferDetails",
                id: 1
            }
        },
        nested: {
            MoneroTransferDetails: {
                fields: {
                    out_key: {
                        type: "bytes",
                        id: 1
                    },
                    tx_pub_key: {
                        type: "bytes",
                        id: 2
                    },
                    additional_tx_pub_keys: {
                        rule: "repeated",
                        type: "bytes",
                        id: 3
                    },
                    internal_output_index: {
                        type: "uint64",
                        id: 4
                    },
                    sub_addr_major: {
                        type: "uint32",
                        id: 5
                    },
                    sub_addr_minor: {
                        type: "uint32",
                        id: 6
                    }
                }
            }
        }
    },
    MoneroKeyImageSyncStepAck: {
        fields: {
            kis: {
                rule: "repeated",
                type: "MoneroExportedKeyImage",
                id: 1
            }
        },
        nested: {
            MoneroExportedKeyImage: {
                fields: {
                    iv: {
                        type: "bytes",
                        id: 1
                    },
                    blob: {
                        type: "bytes",
                        id: 3
                    }
                }
            }
        }
    },
    MoneroKeyImageSyncFinalRequest: {
        fields: {}
    },
    MoneroKeyImageSyncFinalAck: {
        fields: {
            enc_key: {
                type: "bytes",
                id: 1
            }
        }
    },
    MoneroGetTxKeyRequest: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            network_type: {
                type: "uint32",
                id: 2
            },
            salt1: {
                type: "bytes",
                id: 3
            },
            salt2: {
                type: "bytes",
                id: 4
            },
            tx_enc_keys: {
                type: "bytes",
                id: 5
            },
            tx_prefix_hash: {
                type: "bytes",
                id: 6
            },
            reason: {
                type: "uint32",
                id: 7
            },
            view_public_key: {
                type: "bytes",
                id: 8
            }
        }
    },
    MoneroGetTxKeyAck: {
        fields: {
            salt: {
                type: "bytes",
                id: 1
            },
            tx_keys: {
                type: "bytes",
                id: 2
            },
            tx_derivations: {
                type: "bytes",
                id: 3
            }
        }
    },
    MoneroLiveRefreshStartRequest: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            network_type: {
                type: "uint32",
                id: 2
            }
        }
    },
    MoneroLiveRefreshStartAck: {
        fields: {}
    },
    MoneroLiveRefreshStepRequest: {
        fields: {
            out_key: {
                type: "bytes",
                id: 1
            },
            recv_deriv: {
                type: "bytes",
                id: 2
            },
            real_out_idx: {
                type: "uint64",
                id: 3
            },
            sub_addr_major: {
                type: "uint32",
                id: 4
            },
            sub_addr_minor: {
                type: "uint32",
                id: 5
            }
        }
    },
    MoneroLiveRefreshStepAck: {
        fields: {
            salt: {
                type: "bytes",
                id: 1
            },
            key_image: {
                type: "bytes",
                id: 2
            }
        }
    },
    MoneroLiveRefreshFinalRequest: {
        fields: {}
    },
    MoneroLiveRefreshFinalAck: {
        fields: {}
    },
    DebugMoneroDiagRequest: {
        fields: {
            ins: {
                type: "uint64",
                id: 1
            },
            p1: {
                type: "uint64",
                id: 2
            },
            p2: {
                type: "uint64",
                id: 3
            },
            pd: {
                rule: "repeated",
                type: "uint64",
                id: 4,
                options: {
                    packed: false
                }
            },
            data1: {
                type: "bytes",
                id: 5
            },
            data2: {
                type: "bytes",
                id: 6
            }
        }
    },
    DebugMoneroDiagAck: {
        fields: {
            ins: {
                type: "uint64",
                id: 1
            },
            p1: {
                type: "uint64",
                id: 2
            },
            p2: {
                type: "uint64",
                id: 3
            },
            pd: {
                rule: "repeated",
                type: "uint64",
                id: 4,
                options: {
                    packed: false
                }
            },
            data1: {
                type: "bytes",
                id: 5
            },
            data2: {
                type: "bytes",
                id: 6
            }
        }
    },
    NearGetAddress: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            show_display: {
                type: "bool",
                id: 2
            }
        }
    },
    NearAddress: {
        fields: {
            address: {
                type: "string",
                id: 1
            }
        }
    },
    NearSignTx: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            raw_tx: {
                rule: "required",
                type: "bytes",
                id: 2
            }
        }
    },
    NearSignedTx: {
        fields: {
            signature: {
                rule: "required",
                type: "bytes",
                id: 1
            }
        }
    },
    NEMGetAddress: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            network: {
                type: "uint32",
                id: 2
            },
            show_display: {
                type: "bool",
                id: 3
            }
        }
    },
    NEMAddress: {
        fields: {
            address: {
                rule: "required",
                type: "string",
                id: 1
            }
        }
    },
    NEMSignTx: {
        fields: {
            transaction: {
                type: "NEMTransactionCommon",
                id: 1
            },
            multisig: {
                type: "NEMTransactionCommon",
                id: 2
            },
            transfer: {
                type: "NEMTransfer",
                id: 3
            },
            cosigning: {
                type: "bool",
                id: 4
            },
            provision_namespace: {
                type: "NEMProvisionNamespace",
                id: 5
            },
            mosaic_creation: {
                type: "NEMMosaicCreation",
                id: 6
            },
            supply_change: {
                type: "NEMMosaicSupplyChange",
                id: 7
            },
            aggregate_modification: {
                type: "NEMAggregateModification",
                id: 8
            },
            importance_transfer: {
                type: "NEMImportanceTransfer",
                id: 9
            }
        },
        nested: {
            NEMTransactionCommon: {
                fields: {
                    address_n: {
                        rule: "repeated",
                        type: "uint32",
                        id: 1,
                        options: {
                            packed: false
                        }
                    },
                    network: {
                        type: "uint32",
                        id: 2
                    },
                    timestamp: {
                        type: "uint32",
                        id: 3
                    },
                    fee: {
                        type: "uint64",
                        id: 4
                    },
                    deadline: {
                        type: "uint32",
                        id: 5
                    },
                    signer: {
                        type: "bytes",
                        id: 6
                    }
                }
            },
            NEMTransfer: {
                fields: {
                    recipient: {
                        type: "string",
                        id: 1
                    },
                    amount: {
                        type: "uint64",
                        id: 2
                    },
                    payload: {
                        type: "bytes",
                        id: 3
                    },
                    public_key: {
                        type: "bytes",
                        id: 4
                    },
                    mosaics: {
                        rule: "repeated",
                        type: "NEMMosaic",
                        id: 5
                    }
                },
                nested: {
                    NEMMosaic: {
                        fields: {
                            namespace: {
                                type: "string",
                                id: 1
                            },
                            mosaic: {
                                type: "string",
                                id: 2
                            },
                            quantity: {
                                type: "uint64",
                                id: 3
                            }
                        }
                    }
                }
            },
            NEMProvisionNamespace: {
                fields: {
                    namespace: {
                        type: "string",
                        id: 1
                    },
                    parent: {
                        type: "string",
                        id: 2
                    },
                    sink: {
                        type: "string",
                        id: 3
                    },
                    fee: {
                        type: "uint64",
                        id: 4
                    }
                }
            },
            NEMMosaicCreation: {
                fields: {
                    definition: {
                        type: "NEMMosaicDefinition",
                        id: 1
                    },
                    sink: {
                        type: "string",
                        id: 2
                    },
                    fee: {
                        type: "uint64",
                        id: 3
                    }
                },
                nested: {
                    NEMMosaicDefinition: {
                        fields: {
                            name: {
                                type: "string",
                                id: 1
                            },
                            ticker: {
                                type: "string",
                                id: 2
                            },
                            namespace: {
                                type: "string",
                                id: 3
                            },
                            mosaic: {
                                type: "string",
                                id: 4
                            },
                            divisibility: {
                                type: "uint32",
                                id: 5
                            },
                            levy: {
                                type: "NEMMosaicLevy",
                                id: 6
                            },
                            fee: {
                                type: "uint64",
                                id: 7
                            },
                            levy_address: {
                                type: "string",
                                id: 8
                            },
                            levy_namespace: {
                                type: "string",
                                id: 9
                            },
                            levy_mosaic: {
                                type: "string",
                                id: 10
                            },
                            supply: {
                                type: "uint64",
                                id: 11
                            },
                            mutable_supply: {
                                type: "bool",
                                id: 12
                            },
                            transferable: {
                                type: "bool",
                                id: 13
                            },
                            description: {
                                type: "string",
                                id: 14
                            },
                            networks: {
                                rule: "repeated",
                                type: "uint32",
                                id: 15,
                                options: {
                                    packed: false
                                }
                            }
                        },
                        nested: {
                            NEMMosaicLevy: {
                                values: {
                                    MosaicLevy_Absolute: 1,
                                    MosaicLevy_Percentile: 2
                                }
                            }
                        }
                    }
                }
            },
            NEMMosaicSupplyChange: {
                fields: {
                    namespace: {
                        type: "string",
                        id: 1
                    },
                    mosaic: {
                        type: "string",
                        id: 2
                    },
                    type: {
                        type: "NEMSupplyChangeType",
                        id: 3
                    },
                    delta: {
                        type: "uint64",
                        id: 4
                    }
                },
                nested: {
                    NEMSupplyChangeType: {
                        values: {
                            SupplyChange_Increase: 1,
                            SupplyChange_Decrease: 2
                        }
                    }
                }
            },
            NEMAggregateModification: {
                fields: {
                    modifications: {
                        rule: "repeated",
                        type: "NEMCosignatoryModification",
                        id: 1
                    },
                    relative_change: {
                        type: "sint32",
                        id: 2
                    }
                },
                nested: {
                    NEMCosignatoryModification: {
                        fields: {
                            type: {
                                type: "NEMModificationType",
                                id: 1
                            },
                            public_key: {
                                type: "bytes",
                                id: 2
                            }
                        },
                        nested: {
                            NEMModificationType: {
                                values: {
                                    CosignatoryModification_Add: 1,
                                    CosignatoryModification_Delete: 2
                                }
                            }
                        }
                    }
                }
            },
            NEMImportanceTransfer: {
                fields: {
                    mode: {
                        type: "NEMImportanceTransferMode",
                        id: 1
                    },
                    public_key: {
                        type: "bytes",
                        id: 2
                    }
                },
                nested: {
                    NEMImportanceTransferMode: {
                        values: {
                            ImportanceTransfer_Activate: 1,
                            ImportanceTransfer_Deactivate: 2
                        }
                    }
                }
            }
        }
    },
    NEMSignedTx: {
        fields: {
            data: {
                rule: "required",
                type: "bytes",
                id: 1
            },
            signature: {
                rule: "required",
                type: "bytes",
                id: 2
            }
        }
    },
    NEMDecryptMessage: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            network: {
                type: "uint32",
                id: 2
            },
            public_key: {
                type: "bytes",
                id: 3
            },
            payload: {
                type: "bytes",
                id: 4
            }
        }
    },
    NEMDecryptedMessage: {
        fields: {
            payload: {
                rule: "required",
                type: "bytes",
                id: 1
            }
        }
    },
    NexaGetAddress: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            show_display: {
                type: "bool",
                id: 2
            },
            prefix: {
                type: "string",
                id: 3,
                options: {
                    "default": "nexa"
                }
            }
        }
    },
    NexaAddress: {
        fields: {
            address: {
                rule: "required",
                type: "string",
                id: 1
            },
            public_key: {
                rule: "required",
                type: "bytes",
                id: 2
            }
        }
    },
    NexaSignTx: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            raw_message: {
                rule: "required",
                type: "bytes",
                id: 2
            },
            prefix: {
                type: "string",
                id: 3,
                options: {
                    "default": "nexa"
                }
            },
            input_count: {
                type: "uint32",
                id: 4,
                options: {
                    "default": 1
                }
            }
        }
    },
    NexaTxInputRequest: {
        fields: {
            request_index: {
                rule: "required",
                type: "uint32",
                id: 1
            },
            signature: {
                type: "bytes",
                id: 2
            }
        }
    },
    NexaTxInputAck: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            raw_message: {
                rule: "required",
                type: "bytes",
                id: 2
            }
        }
    },
    NexaSignedTx: {
        fields: {
            signature: {
                rule: "required",
                type: "bytes",
                id: 1
            }
        }
    },
    PolkadotGetAddress: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            prefix: {
                rule: "required",
                type: "uint32",
                id: 2
            },
            network: {
                rule: "required",
                type: "string",
                id: 3
            },
            show_display: {
                type: "bool",
                id: 4
            }
        }
    },
    PolkadotAddress: {
        fields: {
            address: {
                type: "string",
                id: 1
            },
            public_key: {
                type: "string",
                id: 2
            }
        }
    },
    PolkadotSignTx: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            raw_tx: {
                rule: "required",
                type: "bytes",
                id: 2
            },
            network: {
                rule: "required",
                type: "string",
                id: 3
            }
        }
    },
    PolkadotSignedTx: {
        fields: {
            signature: {
                rule: "required",
                type: "bytes",
                id: 1
            }
        }
    },
    RippleGetAddress: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            show_display: {
                type: "bool",
                id: 2
            }
        }
    },
    RippleAddress: {
        fields: {
            address: {
                rule: "required",
                type: "string",
                id: 1
            }
        }
    },
    RippleSignTx: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            fee: {
                type: "uint64",
                id: 2
            },
            flags: {
                type: "uint32",
                id: 3
            },
            sequence: {
                type: "uint32",
                id: 4
            },
            last_ledger_sequence: {
                type: "uint32",
                id: 5
            },
            payment: {
                type: "RipplePayment",
                id: 6
            }
        },
        nested: {
            RipplePayment: {
                fields: {
                    amount: {
                        rule: "required",
                        type: "uint64",
                        id: 1
                    },
                    destination: {
                        rule: "required",
                        type: "string",
                        id: 2
                    },
                    destination_tag: {
                        type: "uint32",
                        id: 3
                    }
                }
            }
        }
    },
    RippleSignedTx: {
        fields: {
            signature: {
                rule: "required",
                type: "bytes",
                id: 1
            },
            serialized_tx: {
                rule: "required",
                type: "bytes",
                id: 2
            }
        }
    },
    SolanaGetAddress: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            show_display: {
                type: "bool",
                id: 2
            }
        }
    },
    SolanaAddress: {
        fields: {
            address: {
                type: "string",
                id: 1
            }
        }
    },
    SolanaSignTx: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            raw_tx: {
                rule: "required",
                type: "bytes",
                id: 2
            }
        }
    },
    SolanaSignedTx: {
        fields: {
            signature: {
                type: "bytes",
                id: 1
            }
        }
    },
    StarcoinGetAddress: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            show_display: {
                type: "bool",
                id: 2
            }
        }
    },
    StarcoinAddress: {
        fields: {
            address: {
                type: "string",
                id: 1
            }
        }
    },
    StarcoinGetPublicKey: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            show_display: {
                type: "bool",
                id: 2
            }
        }
    },
    StarcoinPublicKey: {
        fields: {
            public_key: {
                rule: "required",
                type: "bytes",
                id: 1
            }
        }
    },
    StarcoinSignTx: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            raw_tx: {
                type: "bytes",
                id: 2
            }
        }
    },
    StarcoinSignedTx: {
        fields: {
            public_key: {
                rule: "required",
                type: "bytes",
                id: 1
            },
            signature: {
                rule: "required",
                type: "bytes",
                id: 2
            }
        }
    },
    StarcoinSignMessage: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            message: {
                type: "bytes",
                id: 2
            }
        }
    },
    StarcoinMessageSignature: {
        fields: {
            public_key: {
                rule: "required",
                type: "bytes",
                id: 1
            },
            signature: {
                rule: "required",
                type: "bytes",
                id: 2
            }
        }
    },
    StarcoinVerifyMessage: {
        fields: {
            public_key: {
                type: "bytes",
                id: 1
            },
            signature: {
                type: "bytes",
                id: 2
            },
            message: {
                type: "bytes",
                id: 3
            }
        }
    },
    StellarAssetType: {
        values: {
            NATIVE: 0,
            ALPHANUM4: 1,
            ALPHANUM12: 2
        }
    },
    StellarAsset: {
        fields: {
            type: {
                rule: "required",
                type: "StellarAssetType",
                id: 1
            },
            code: {
                type: "string",
                id: 2
            },
            issuer: {
                type: "string",
                id: 3
            }
        }
    },
    StellarGetAddress: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            show_display: {
                type: "bool",
                id: 2
            }
        }
    },
    StellarAddress: {
        fields: {
            address: {
                rule: "required",
                type: "string",
                id: 1
            }
        }
    },
    StellarSignTx: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 2,
                options: {
                    packed: false
                }
            },
            network_passphrase: {
                rule: "required",
                type: "string",
                id: 3
            },
            source_account: {
                rule: "required",
                type: "string",
                id: 4
            },
            fee: {
                rule: "required",
                type: "uint32",
                id: 5
            },
            sequence_number: {
                rule: "required",
                type: "uint64",
                id: 6
            },
            timebounds_start: {
                rule: "required",
                type: "uint32",
                id: 8
            },
            timebounds_end: {
                rule: "required",
                type: "uint32",
                id: 9
            },
            memo_type: {
                rule: "required",
                type: "StellarMemoType",
                id: 10
            },
            memo_text: {
                type: "string",
                id: 11
            },
            memo_id: {
                type: "uint64",
                id: 12
            },
            memo_hash: {
                type: "bytes",
                id: 13
            },
            num_operations: {
                rule: "required",
                type: "uint32",
                id: 14
            }
        },
        nested: {
            StellarMemoType: {
                values: {
                    NONE: 0,
                    TEXT: 1,
                    ID: 2,
                    HASH: 3,
                    RETURN: 4
                }
            }
        }
    },
    StellarTxOpRequest: {
        fields: {}
    },
    StellarPaymentOp: {
        fields: {
            source_account: {
                type: "string",
                id: 1
            },
            destination_account: {
                rule: "required",
                type: "string",
                id: 2
            },
            asset: {
                rule: "required",
                type: "StellarAsset",
                id: 3
            },
            amount: {
                rule: "required",
                type: "sint64",
                id: 4
            }
        }
    },
    StellarCreateAccountOp: {
        fields: {
            source_account: {
                type: "string",
                id: 1
            },
            new_account: {
                rule: "required",
                type: "string",
                id: 2
            },
            starting_balance: {
                rule: "required",
                type: "sint64",
                id: 3
            }
        }
    },
    StellarPathPaymentStrictReceiveOp: {
        fields: {
            source_account: {
                type: "string",
                id: 1
            },
            send_asset: {
                rule: "required",
                type: "StellarAsset",
                id: 2
            },
            send_max: {
                rule: "required",
                type: "sint64",
                id: 3
            },
            destination_account: {
                rule: "required",
                type: "string",
                id: 4
            },
            destination_asset: {
                rule: "required",
                type: "StellarAsset",
                id: 5
            },
            destination_amount: {
                rule: "required",
                type: "sint64",
                id: 6
            },
            paths: {
                rule: "repeated",
                type: "StellarAsset",
                id: 7
            }
        }
    },
    StellarPathPaymentStrictSendOp: {
        fields: {
            source_account: {
                type: "string",
                id: 1
            },
            send_asset: {
                rule: "required",
                type: "StellarAsset",
                id: 2
            },
            send_amount: {
                rule: "required",
                type: "sint64",
                id: 3
            },
            destination_account: {
                rule: "required",
                type: "string",
                id: 4
            },
            destination_asset: {
                rule: "required",
                type: "StellarAsset",
                id: 5
            },
            destination_min: {
                rule: "required",
                type: "sint64",
                id: 6
            },
            paths: {
                rule: "repeated",
                type: "StellarAsset",
                id: 7
            }
        }
    },
    StellarManageSellOfferOp: {
        fields: {
            source_account: {
                type: "string",
                id: 1
            },
            selling_asset: {
                rule: "required",
                type: "StellarAsset",
                id: 2
            },
            buying_asset: {
                rule: "required",
                type: "StellarAsset",
                id: 3
            },
            amount: {
                rule: "required",
                type: "sint64",
                id: 4
            },
            price_n: {
                rule: "required",
                type: "uint32",
                id: 5
            },
            price_d: {
                rule: "required",
                type: "uint32",
                id: 6
            },
            offer_id: {
                rule: "required",
                type: "uint64",
                id: 7
            }
        }
    },
    StellarManageBuyOfferOp: {
        fields: {
            source_account: {
                type: "string",
                id: 1
            },
            selling_asset: {
                rule: "required",
                type: "StellarAsset",
                id: 2
            },
            buying_asset: {
                rule: "required",
                type: "StellarAsset",
                id: 3
            },
            amount: {
                rule: "required",
                type: "sint64",
                id: 4
            },
            price_n: {
                rule: "required",
                type: "uint32",
                id: 5
            },
            price_d: {
                rule: "required",
                type: "uint32",
                id: 6
            },
            offer_id: {
                rule: "required",
                type: "uint64",
                id: 7
            }
        }
    },
    StellarCreatePassiveSellOfferOp: {
        fields: {
            source_account: {
                type: "string",
                id: 1
            },
            selling_asset: {
                rule: "required",
                type: "StellarAsset",
                id: 2
            },
            buying_asset: {
                rule: "required",
                type: "StellarAsset",
                id: 3
            },
            amount: {
                rule: "required",
                type: "sint64",
                id: 4
            },
            price_n: {
                rule: "required",
                type: "uint32",
                id: 5
            },
            price_d: {
                rule: "required",
                type: "uint32",
                id: 6
            }
        }
    },
    StellarSetOptionsOp: {
        fields: {
            source_account: {
                type: "string",
                id: 1
            },
            inflation_destination_account: {
                type: "string",
                id: 2
            },
            clear_flags: {
                type: "uint32",
                id: 3
            },
            set_flags: {
                type: "uint32",
                id: 4
            },
            master_weight: {
                type: "uint32",
                id: 5
            },
            low_threshold: {
                type: "uint32",
                id: 6
            },
            medium_threshold: {
                type: "uint32",
                id: 7
            },
            high_threshold: {
                type: "uint32",
                id: 8
            },
            home_domain: {
                type: "string",
                id: 9
            },
            signer_type: {
                type: "StellarSignerType",
                id: 10
            },
            signer_key: {
                type: "bytes",
                id: 11
            },
            signer_weight: {
                type: "uint32",
                id: 12
            }
        },
        nested: {
            StellarSignerType: {
                values: {
                    ACCOUNT: 0,
                    PRE_AUTH: 1,
                    HASH: 2
                }
            }
        }
    },
    StellarChangeTrustOp: {
        fields: {
            source_account: {
                type: "string",
                id: 1
            },
            asset: {
                rule: "required",
                type: "StellarAsset",
                id: 2
            },
            limit: {
                rule: "required",
                type: "uint64",
                id: 3
            }
        }
    },
    StellarAllowTrustOp: {
        fields: {
            source_account: {
                type: "string",
                id: 1
            },
            trusted_account: {
                rule: "required",
                type: "string",
                id: 2
            },
            asset_type: {
                rule: "required",
                type: "StellarAssetType",
                id: 3
            },
            asset_code: {
                type: "string",
                id: 4
            },
            is_authorized: {
                rule: "required",
                type: "bool",
                id: 5
            }
        }
    },
    StellarAccountMergeOp: {
        fields: {
            source_account: {
                type: "string",
                id: 1
            },
            destination_account: {
                rule: "required",
                type: "string",
                id: 2
            }
        }
    },
    StellarManageDataOp: {
        fields: {
            source_account: {
                type: "string",
                id: 1
            },
            key: {
                rule: "required",
                type: "string",
                id: 2
            },
            value: {
                type: "bytes",
                id: 3
            }
        }
    },
    StellarBumpSequenceOp: {
        fields: {
            source_account: {
                type: "string",
                id: 1
            },
            bump_to: {
                rule: "required",
                type: "uint64",
                id: 2
            }
        }
    },
    StellarSignedTx: {
        fields: {
            public_key: {
                rule: "required",
                type: "bytes",
                id: 1
            },
            signature: {
                rule: "required",
                type: "bytes",
                id: 2
            }
        }
    },
    SuiGetAddress: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            show_display: {
                type: "bool",
                id: 2
            }
        }
    },
    SuiAddress: {
        fields: {
            address: {
                type: "string",
                id: 1
            }
        }
    },
    SuiSignTx: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            raw_tx: {
                rule: "required",
                type: "bytes",
                id: 2
            }
        }
    },
    SuiSignedTx: {
        fields: {
            public_key: {
                rule: "required",
                type: "bytes",
                id: 1
            },
            signature: {
                rule: "required",
                type: "bytes",
                id: 2
            }
        }
    },
    TezosGetAddress: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            show_display: {
                type: "bool",
                id: 2
            }
        }
    },
    TezosAddress: {
        fields: {
            address: {
                rule: "required",
                type: "string",
                id: 1
            }
        }
    },
    TezosGetPublicKey: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            show_display: {
                type: "bool",
                id: 2
            }
        }
    },
    TezosPublicKey: {
        fields: {
            public_key: {
                rule: "required",
                type: "string",
                id: 1
            }
        }
    },
    TezosSignTx: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            branch: {
                rule: "required",
                type: "bytes",
                id: 2
            },
            reveal: {
                type: "TezosRevealOp",
                id: 3
            },
            transaction: {
                type: "TezosTransactionOp",
                id: 4
            },
            origination: {
                type: "TezosOriginationOp",
                id: 5
            },
            delegation: {
                type: "TezosDelegationOp",
                id: 6
            },
            proposal: {
                type: "TezosProposalOp",
                id: 7
            },
            ballot: {
                type: "TezosBallotOp",
                id: 8
            }
        },
        nested: {
            TezosContractID: {
                fields: {
                    tag: {
                        rule: "required",
                        type: "TezosContractType",
                        id: 1
                    },
                    hash: {
                        rule: "required",
                        type: "bytes",
                        id: 2
                    }
                },
                nested: {
                    TezosContractType: {
                        values: {
                            Implicit: 0,
                            Originated: 1
                        }
                    }
                }
            },
            TezosRevealOp: {
                fields: {
                    source: {
                        rule: "required",
                        type: "bytes",
                        id: 7
                    },
                    fee: {
                        rule: "required",
                        type: "uint64",
                        id: 2
                    },
                    counter: {
                        rule: "required",
                        type: "uint64",
                        id: 3
                    },
                    gas_limit: {
                        rule: "required",
                        type: "uint64",
                        id: 4
                    },
                    storage_limit: {
                        rule: "required",
                        type: "uint64",
                        id: 5
                    },
                    public_key: {
                        rule: "required",
                        type: "bytes",
                        id: 6
                    }
                }
            },
            TezosTransactionOp: {
                fields: {
                    source: {
                        rule: "required",
                        type: "bytes",
                        id: 9
                    },
                    fee: {
                        rule: "required",
                        type: "uint64",
                        id: 2
                    },
                    counter: {
                        rule: "required",
                        type: "uint64",
                        id: 3
                    },
                    gas_limit: {
                        rule: "required",
                        type: "uint64",
                        id: 4
                    },
                    storage_limit: {
                        rule: "required",
                        type: "uint64",
                        id: 5
                    },
                    amount: {
                        rule: "required",
                        type: "uint64",
                        id: 6
                    },
                    destination: {
                        rule: "required",
                        type: "TezosContractID",
                        id: 7
                    },
                    parameters: {
                        type: "bytes",
                        id: 8
                    },
                    parameters_manager: {
                        type: "TezosParametersManager",
                        id: 10
                    }
                },
                nested: {
                    TezosParametersManager: {
                        fields: {
                            set_delegate: {
                                type: "bytes",
                                id: 1
                            },
                            cancel_delegate: {
                                type: "bool",
                                id: 2
                            },
                            transfer: {
                                type: "TezosManagerTransfer",
                                id: 3
                            }
                        },
                        nested: {
                            TezosManagerTransfer: {
                                fields: {
                                    destination: {
                                        type: "TezosContractID",
                                        id: 1
                                    },
                                    amount: {
                                        type: "uint64",
                                        id: 2
                                    }
                                }
                            }
                        }
                    }
                }
            },
            TezosOriginationOp: {
                fields: {
                    source: {
                        rule: "required",
                        type: "bytes",
                        id: 12
                    },
                    fee: {
                        rule: "required",
                        type: "uint64",
                        id: 2
                    },
                    counter: {
                        rule: "required",
                        type: "uint64",
                        id: 3
                    },
                    gas_limit: {
                        rule: "required",
                        type: "uint64",
                        id: 4
                    },
                    storage_limit: {
                        rule: "required",
                        type: "uint64",
                        id: 5
                    },
                    manager_pubkey: {
                        type: "bytes",
                        id: 6
                    },
                    balance: {
                        rule: "required",
                        type: "uint64",
                        id: 7
                    },
                    spendable: {
                        type: "bool",
                        id: 8
                    },
                    delegatable: {
                        type: "bool",
                        id: 9
                    },
                    delegate: {
                        type: "bytes",
                        id: 10
                    },
                    script: {
                        rule: "required",
                        type: "bytes",
                        id: 11
                    }
                }
            },
            TezosDelegationOp: {
                fields: {
                    source: {
                        rule: "required",
                        type: "bytes",
                        id: 7
                    },
                    fee: {
                        rule: "required",
                        type: "uint64",
                        id: 2
                    },
                    counter: {
                        rule: "required",
                        type: "uint64",
                        id: 3
                    },
                    gas_limit: {
                        rule: "required",
                        type: "uint64",
                        id: 4
                    },
                    storage_limit: {
                        rule: "required",
                        type: "uint64",
                        id: 5
                    },
                    delegate: {
                        rule: "required",
                        type: "bytes",
                        id: 6
                    }
                }
            },
            TezosProposalOp: {
                fields: {
                    source: {
                        type: "bytes",
                        id: 1
                    },
                    period: {
                        type: "uint64",
                        id: 2
                    },
                    proposals: {
                        rule: "repeated",
                        type: "bytes",
                        id: 4
                    }
                }
            },
            TezosBallotOp: {
                fields: {
                    source: {
                        type: "bytes",
                        id: 1
                    },
                    period: {
                        type: "uint64",
                        id: 2
                    },
                    proposal: {
                        type: "bytes",
                        id: 3
                    },
                    ballot: {
                        type: "TezosBallotType",
                        id: 4
                    }
                },
                nested: {
                    TezosBallotType: {
                        values: {
                            Yay: 0,
                            Nay: 1,
                            Pass: 2
                        }
                    }
                }
            }
        }
    },
    TezosSignedTx: {
        fields: {
            signature: {
                rule: "required",
                type: "string",
                id: 1
            },
            sig_op_contents: {
                rule: "required",
                type: "bytes",
                id: 2
            },
            operation_hash: {
                rule: "required",
                type: "string",
                id: 3
            }
        }
    },
    TronGetAddress: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            show_display: {
                type: "bool",
                id: 2
            }
        }
    },
    TronAddress: {
        fields: {
            address: {
                type: "string",
                id: 1
            }
        }
    },
    TronSignTx: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            ref_block_bytes: {
                rule: "required",
                type: "bytes",
                id: 2
            },
            ref_block_hash: {
                rule: "required",
                type: "bytes",
                id: 3
            },
            expiration: {
                rule: "required",
                type: "uint64",
                id: 4
            },
            data: {
                type: "string",
                id: 5
            },
            contract: {
                rule: "required",
                type: "TronContract",
                id: 6
            },
            timestamp: {
                rule: "required",
                type: "uint64",
                id: 7
            },
            fee_limit: {
                type: "uint64",
                id: 8
            }
        },
        nested: {
            TronContract: {
                fields: {
                    transfer_contract: {
                        type: "TronTransferContract",
                        id: 2
                    },
                    freeze_balance_contract: {
                        type: "TronFreezeBalanceContract",
                        id: 11
                    },
                    unfreeze_balance_contract: {
                        type: "TronUnfreezeBalanceContract",
                        id: 12
                    },
                    withdraw_balance_contract: {
                        type: "TronWithdrawBalanceContract",
                        id: 13
                    },
                    trigger_smart_contract: {
                        type: "TronTriggerSmartContract",
                        id: 31
                    },
                    freeze_balance_v2_contract: {
                        type: "TronFreezeBalanceV2Contract",
                        id: 54
                    },
                    unfreeze_balance_v2_contract: {
                        type: "TronUnfreezeBalanceV2Contract",
                        id: 55
                    },
                    withdraw_expire_unfreeze_contract: {
                        type: "TronWithdrawExpireUnfreezeContract",
                        id: 56
                    },
                    delegate_resource_contract: {
                        type: "TronDelegateResourceContract",
                        id: 57
                    },
                    undelegate_resource_contract: {
                        type: "TronUnDelegateResourceContract",
                        id: 58
                    }
                },
                nested: {
                    TronTransferContract: {
                        fields: {
                            to_address: {
                                type: "string",
                                id: 2
                            },
                            amount: {
                                type: "uint64",
                                id: 3
                            }
                        }
                    },
                    TronTriggerSmartContract: {
                        fields: {
                            contract_address: {
                                type: "string",
                                id: 2
                            },
                            call_value: {
                                type: "uint64",
                                id: 3
                            },
                            data: {
                                type: "bytes",
                                id: 4
                            },
                            call_token_value: {
                                type: "uint64",
                                id: 5
                            },
                            asset_id: {
                                type: "uint64",
                                id: 6
                            }
                        }
                    },
                    TronResourceCode: {
                        values: {
                            BANDWIDTH: 0,
                            ENERGY: 1
                        }
                    },
                    TronFreezeBalanceContract: {
                        fields: {
                            frozen_balance: {
                                type: "uint64",
                                id: 1
                            },
                            frozen_duration: {
                                type: "uint64",
                                id: 2
                            },
                            resource: {
                                type: "TronResourceCode",
                                id: 3
                            },
                            receiver_address: {
                                type: "string",
                                id: 4
                            }
                        }
                    },
                    TronUnfreezeBalanceContract: {
                        fields: {
                            resource: {
                                type: "TronResourceCode",
                                id: 1
                            },
                            receiver_address: {
                                type: "string",
                                id: 2
                            }
                        }
                    },
                    TronWithdrawBalanceContract: {
                        fields: {
                            owner_address: {
                                type: "bytes",
                                id: 1
                            }
                        }
                    },
                    TronFreezeBalanceV2Contract: {
                        fields: {
                            frozen_balance: {
                                type: "uint64",
                                id: 2
                            },
                            resource: {
                                type: "TronResourceCode",
                                id: 3
                            }
                        }
                    },
                    TronUnfreezeBalanceV2Contract: {
                        fields: {
                            unfreeze_balance: {
                                type: "uint64",
                                id: 2
                            },
                            resource: {
                                type: "TronResourceCode",
                                id: 3
                            }
                        }
                    },
                    TronWithdrawExpireUnfreezeContract: {
                        fields: {}
                    },
                    TronDelegateResourceContract: {
                        fields: {
                            resource: {
                                type: "TronResourceCode",
                                id: 2
                            },
                            balance: {
                                type: "uint64",
                                id: 3
                            },
                            receiver_address: {
                                type: "string",
                                id: 4
                            },
                            lock: {
                                type: "bool",
                                id: 5
                            }
                        }
                    },
                    TronUnDelegateResourceContract: {
                        fields: {
                            resource: {
                                type: "TronResourceCode",
                                id: 2
                            },
                            balance: {
                                type: "uint64",
                                id: 3
                            },
                            receiver_address: {
                                type: "string",
                                id: 4
                            }
                        }
                    }
                }
            }
        }
    },
    TronSignedTx: {
        fields: {
            signature: {
                rule: "required",
                type: "bytes",
                id: 1
            },
            serialized_tx: {
                type: "bytes",
                id: 2
            }
        }
    },
    TronSignMessage: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            message: {
                rule: "required",
                type: "bytes",
                id: 2
            }
        }
    },
    TronMessageSignature: {
        fields: {
            address: {
                rule: "required",
                type: "bytes",
                id: 1
            },
            signature: {
                rule: "required",
                type: "bytes",
                id: 2
            }
        }
    },
    WebAuthnListResidentCredentials: {
        fields: {}
    },
    WebAuthnAddResidentCredential: {
        fields: {
            credential_id: {
                type: "bytes",
                id: 1
            }
        }
    },
    WebAuthnRemoveResidentCredential: {
        fields: {
            index: {
                type: "uint32",
                id: 1
            }
        }
    },
    WebAuthnCredentials: {
        fields: {
            credentials: {
                rule: "repeated",
                type: "WebAuthnCredential",
                id: 1
            }
        },
        nested: {
            WebAuthnCredential: {
                fields: {
                    index: {
                        type: "uint32",
                        id: 1
                    },
                    id: {
                        type: "bytes",
                        id: 2
                    },
                    rp_id: {
                        type: "string",
                        id: 3
                    },
                    rp_name: {
                        type: "string",
                        id: 4
                    },
                    user_id: {
                        type: "bytes",
                        id: 5
                    },
                    user_name: {
                        type: "string",
                        id: 6
                    },
                    user_display_name: {
                        type: "string",
                        id: 7
                    },
                    creation_time: {
                        type: "uint32",
                        id: 8
                    },
                    hmac_secret: {
                        type: "bool",
                        id: 9
                    },
                    use_sign_count: {
                        type: "bool",
                        id: 10
                    },
                    algorithm: {
                        type: "sint32",
                        id: 11
                    },
                    curve: {
                        type: "sint32",
                        id: 12
                    }
                }
            }
        }
    },
    wire_in: {
        type: "bool",
        id: 50002,
        extend: "google.protobuf.EnumValueOptions"
    },
    wire_out: {
        type: "bool",
        id: 50003,
        extend: "google.protobuf.EnumValueOptions"
    },
    wire_debug_in: {
        type: "bool",
        id: 50004,
        extend: "google.protobuf.EnumValueOptions"
    },
    wire_debug_out: {
        type: "bool",
        id: 50005,
        extend: "google.protobuf.EnumValueOptions"
    },
    wire_tiny: {
        type: "bool",
        id: 50006,
        extend: "google.protobuf.EnumValueOptions"
    },
    wire_bootloader: {
        type: "bool",
        id: 50007,
        extend: "google.protobuf.EnumValueOptions"
    },
    wire_no_fsm: {
        type: "bool",
        id: 50008,
        extend: "google.protobuf.EnumValueOptions"
    },
    facotry: {
        type: "bool",
        id: 50501,
        extend: "google.protobuf.EnumValueOptions"
    },
    bitcoin_only: {
        type: "bool",
        id: 60000,
        extend: "google.protobuf.EnumValueOptions"
    },
    has_bitcoin_only_values: {
        type: "bool",
        id: 51001,
        extend: "google.protobuf.EnumOptions"
    },
    unstable: {
        type: "bool",
        id: 52001,
        extend: "google.protobuf.MessageOptions"
    },
    wire_type: {
        type: "uint32",
        id: 52002,
        extend: "google.protobuf.MessageOptions"
    },
    experimental: {
        type: "bool",
        id: 53001,
        extend: "google.protobuf.FieldOptions"
    },
    include_in_bitcoin_only: {
        type: "bool",
        id: 60000,
        extend: "google.protobuf.FileOptions"
    },
    CommandFlags: {
        values: {
            Default: 0,
            Factory_Only: 1
        }
    },
    MessageType: {
        options: {
            "(has_bitcoin_only_values)": true
        },
        values: {
            MessageType_Initialize: 0,
            MessageType_Ping: 1,
            MessageType_Success: 2,
            MessageType_Failure: 3,
            MessageType_ChangePin: 4,
            MessageType_WipeDevice: 5,
            MessageType_GetEntropy: 9,
            MessageType_Entropy: 10,
            MessageType_LoadDevice: 13,
            MessageType_ResetDevice: 14,
            MessageType_Features: 17,
            MessageType_PinMatrixRequest: 18,
            MessageType_PinMatrixAck: 19,
            MessageType_Cancel: 20,
            MessageType_LockDevice: 24,
            MessageType_ApplySettings: 25,
            MessageType_ButtonRequest: 26,
            MessageType_ButtonAck: 27,
            MessageType_ApplyFlags: 28,
            MessageType_BackupDevice: 34,
            MessageType_EntropyRequest: 35,
            MessageType_EntropyAck: 36,
            MessageType_PassphraseRequest: 41,
            MessageType_PassphraseAck: 42,
            MessageType_RecoveryDevice: 45,
            MessageType_WordRequest: 46,
            MessageType_WordAck: 47,
            MessageType_GetFeatures: 55,
            MessageType_SdProtect: 79,
            MessageType_ChangeWipeCode: 82,
            MessageType_EndSession: 83,
            MessageType_DoPreauthorized: 84,
            MessageType_PreauthorizedRequest: 85,
            MessageType_CancelAuthorization: 86,
            MessageType_RebootToBootloader: 87,
            MessageType_SetU2FCounter: 63,
            MessageType_GetNextU2FCounter: 80,
            MessageType_NextU2FCounter: 81,
            MessageType_Deprecated_PassphraseStateRequest: 77,
            MessageType_Deprecated_PassphraseStateAck: 78,
            MessageType_FirmwareErase: 6,
            MessageType_FirmwareErase_ex: 16,
            MessageType_FirmwareUpload: 7,
            MessageType_FirmwareRequest: 8,
            MessageType_SelfTest: 32,
            MessageType_Reboot: 30000,
            MessageType_FirmwareUpdateEmmc: 30001,
            MessageType_GetPublicKey: 11,
            MessageType_PublicKey: 12,
            MessageType_SignTx: 15,
            MessageType_TxRequest: 21,
            MessageType_TxAck: 22,
            MessageType_GetAddress: 29,
            MessageType_Address: 30,
            MessageType_SignMessage: 38,
            MessageType_VerifyMessage: 39,
            MessageType_MessageSignature: 40,
            MessageType_GetOwnershipId: 43,
            MessageType_OwnershipId: 44,
            MessageType_GetOwnershipProof: 49,
            MessageType_OwnershipProof: 50,
            MessageType_AuthorizeCoinJoin: 51,
            MessageType_CipherKeyValue: 23,
            MessageType_CipheredKeyValue: 48,
            MessageType_SignIdentity: 53,
            MessageType_SignedIdentity: 54,
            MessageType_GetECDHSessionKey: 61,
            MessageType_ECDHSessionKey: 62,
            MessageType_CosiCommit: 71,
            MessageType_CosiCommitment: 72,
            MessageType_CosiSign: 73,
            MessageType_CosiSignature: 74,
            MessageType_BatchGetPublickeys: 10016,
            MessageType_EcdsaPublicKeys: 10017,
            MessageType_DebugLinkDecision: 100,
            MessageType_DebugLinkGetState: 101,
            MessageType_DebugLinkState: 102,
            MessageType_DebugLinkStop: 103,
            MessageType_DebugLinkLog: 104,
            MessageType_DebugLinkMemoryRead: 110,
            MessageType_DebugLinkMemory: 111,
            MessageType_DebugLinkMemoryWrite: 112,
            MessageType_DebugLinkFlashErase: 113,
            MessageType_DebugLinkLayout: 9001,
            MessageType_DebugLinkReseedRandom: 9002,
            MessageType_DebugLinkRecordScreen: 9003,
            MessageType_DebugLinkEraseSdCard: 9005,
            MessageType_DebugLinkWatchLayout: 9006,
            MessageType_EmmcFixPermission: 30100,
            MessageType_EmmcPath: 30101,
            MessageType_EmmcPathInfo: 30102,
            MessageType_EmmcFile: 30103,
            MessageType_EmmcFileRead: 30104,
            MessageType_EmmcFileWrite: 30105,
            MessageType_EmmcFileDelete: 30106,
            MessageType_EmmcDir: 30107,
            MessageType_EmmcDirList: 30108,
            MessageType_EmmcDirMake: 30109,
            MessageType_EmmcDirRemove: 30110,
            MessageType_EthereumGetPublicKey: 450,
            MessageType_EthereumPublicKey: 451,
            MessageType_EthereumGetAddress: 56,
            MessageType_EthereumAddress: 57,
            MessageType_EthereumSignTx: 58,
            MessageType_EthereumSignTxEIP1559: 452,
            MessageType_EthereumTxRequest: 59,
            MessageType_EthereumTxAck: 60,
            MessageType_EthereumSignMessage: 64,
            MessageType_EthereumVerifyMessage: 65,
            MessageType_EthereumMessageSignature: 66,
            MessageType_EthereumSignTypedData: 464,
            MessageType_EthereumTypedDataStructRequest: 465,
            MessageType_EthereumTypedDataStructAck: 466,
            MessageType_EthereumTypedDataValueRequest: 467,
            MessageType_EthereumTypedDataValueAck: 468,
            MessageType_EthereumTypedDataSignature: 469,
            MessageType_EthereumSignTypedHash: 470,
            MessageType_EthereumGetPublicKeyOneKey: 20100,
            MessageType_EthereumPublicKeyOneKey: 20101,
            MessageType_EthereumGetAddressOneKey: 20102,
            MessageType_EthereumAddressOneKey: 20103,
            MessageType_EthereumSignTxOneKey: 20104,
            MessageType_EthereumSignTxEIP1559OneKey: 20105,
            MessageType_EthereumTxRequestOneKey: 20106,
            MessageType_EthereumTxAckOneKey: 20107,
            MessageType_EthereumSignMessageOneKey: 20108,
            MessageType_EthereumVerifyMessageOneKey: 20109,
            MessageType_EthereumMessageSignatureOneKey: 20110,
            MessageType_EthereumSignTypedDataOneKey: 20111,
            MessageType_EthereumTypedDataStructRequestOneKey: 20112,
            MessageType_EthereumTypedDataStructAckOneKey: 20113,
            MessageType_EthereumTypedDataValueRequestOneKey: 20114,
            MessageType_EthereumTypedDataValueAckOneKey: 20115,
            MessageType_EthereumTypedDataSignatureOneKey: 20116,
            MessageType_EthereumSignTypedHashOneKey: 20117,
            MessageType_NEMGetAddress: 67,
            MessageType_NEMAddress: 68,
            MessageType_NEMSignTx: 69,
            MessageType_NEMSignedTx: 70,
            MessageType_NEMDecryptMessage: 75,
            MessageType_NEMDecryptedMessage: 76,
            MessageType_TezosGetAddress: 150,
            MessageType_TezosAddress: 151,
            MessageType_TezosSignTx: 152,
            MessageType_TezosSignedTx: 153,
            MessageType_TezosGetPublicKey: 154,
            MessageType_TezosPublicKey: 155,
            MessageType_StellarSignTx: 202,
            MessageType_StellarTxOpRequest: 203,
            MessageType_StellarGetAddress: 207,
            MessageType_StellarAddress: 208,
            MessageType_StellarCreateAccountOp: 210,
            MessageType_StellarPaymentOp: 211,
            MessageType_StellarPathPaymentStrictReceiveOp: 212,
            MessageType_StellarManageSellOfferOp: 213,
            MessageType_StellarCreatePassiveSellOfferOp: 214,
            MessageType_StellarSetOptionsOp: 215,
            MessageType_StellarChangeTrustOp: 216,
            MessageType_StellarAllowTrustOp: 217,
            MessageType_StellarAccountMergeOp: 218,
            MessageType_StellarManageDataOp: 220,
            MessageType_StellarBumpSequenceOp: 221,
            MessageType_StellarManageBuyOfferOp: 222,
            MessageType_StellarPathPaymentStrictSendOp: 223,
            MessageType_StellarSignedTx: 230,
            MessageType_CardanoGetPublicKey: 305,
            MessageType_CardanoPublicKey: 306,
            MessageType_CardanoGetAddress: 307,
            MessageType_CardanoAddress: 308,
            MessageType_CardanoTxItemAck: 313,
            MessageType_CardanoTxAuxiliaryDataSupplement: 314,
            MessageType_CardanoTxWitnessRequest: 315,
            MessageType_CardanoTxWitnessResponse: 316,
            MessageType_CardanoTxHostAck: 317,
            MessageType_CardanoTxBodyHash: 318,
            MessageType_CardanoSignTxFinished: 319,
            MessageType_CardanoSignTxInit: 320,
            MessageType_CardanoTxInput: 321,
            MessageType_CardanoTxOutput: 322,
            MessageType_CardanoAssetGroup: 323,
            MessageType_CardanoToken: 324,
            MessageType_CardanoTxCertificate: 325,
            MessageType_CardanoTxWithdrawal: 326,
            MessageType_CardanoTxAuxiliaryData: 327,
            MessageType_CardanoPoolOwner: 328,
            MessageType_CardanoPoolRelayParameters: 329,
            MessageType_CardanoGetNativeScriptHash: 330,
            MessageType_CardanoNativeScriptHash: 331,
            MessageType_CardanoTxMint: 332,
            MessageType_CardanoTxCollateralInput: 333,
            MessageType_CardanoTxRequiredSigner: 334,
            MessageType_CardanoTxInlineDatumChunk: 335,
            MessageType_CardanoTxReferenceScriptChunk: 336,
            MessageType_CardanoTxReferenceInput: 337,
            MessageType_CardanoSignMessage: 350,
            MessageType_CardanoMessageSignature: 351,
            MessageType_RippleGetAddress: 400,
            MessageType_RippleAddress: 401,
            MessageType_RippleSignTx: 402,
            MessageType_RippleSignedTx: 403,
            MessageType_MoneroTransactionInitRequest: 501,
            MessageType_MoneroTransactionInitAck: 502,
            MessageType_MoneroTransactionSetInputRequest: 503,
            MessageType_MoneroTransactionSetInputAck: 504,
            MessageType_MoneroTransactionInputsPermutationRequest: 505,
            MessageType_MoneroTransactionInputsPermutationAck: 506,
            MessageType_MoneroTransactionInputViniRequest: 507,
            MessageType_MoneroTransactionInputViniAck: 508,
            MessageType_MoneroTransactionAllInputsSetRequest: 509,
            MessageType_MoneroTransactionAllInputsSetAck: 510,
            MessageType_MoneroTransactionSetOutputRequest: 511,
            MessageType_MoneroTransactionSetOutputAck: 512,
            MessageType_MoneroTransactionAllOutSetRequest: 513,
            MessageType_MoneroTransactionAllOutSetAck: 514,
            MessageType_MoneroTransactionSignInputRequest: 515,
            MessageType_MoneroTransactionSignInputAck: 516,
            MessageType_MoneroTransactionFinalRequest: 517,
            MessageType_MoneroTransactionFinalAck: 518,
            MessageType_MoneroKeyImageExportInitRequest: 530,
            MessageType_MoneroKeyImageExportInitAck: 531,
            MessageType_MoneroKeyImageSyncStepRequest: 532,
            MessageType_MoneroKeyImageSyncStepAck: 533,
            MessageType_MoneroKeyImageSyncFinalRequest: 534,
            MessageType_MoneroKeyImageSyncFinalAck: 535,
            MessageType_MoneroGetAddress: 540,
            MessageType_MoneroAddress: 541,
            MessageType_MoneroGetWatchKey: 542,
            MessageType_MoneroWatchKey: 543,
            MessageType_DebugMoneroDiagRequest: 546,
            MessageType_DebugMoneroDiagAck: 547,
            MessageType_MoneroGetTxKeyRequest: 550,
            MessageType_MoneroGetTxKeyAck: 551,
            MessageType_MoneroLiveRefreshStartRequest: 552,
            MessageType_MoneroLiveRefreshStartAck: 553,
            MessageType_MoneroLiveRefreshStepRequest: 554,
            MessageType_MoneroLiveRefreshStepAck: 555,
            MessageType_MoneroLiveRefreshFinalRequest: 556,
            MessageType_MoneroLiveRefreshFinalAck: 557,
            MessageType_EosGetPublicKey: 600,
            MessageType_EosPublicKey: 601,
            MessageType_EosSignTx: 602,
            MessageType_EosTxActionRequest: 603,
            MessageType_EosTxActionAck: 604,
            MessageType_EosSignedTx: 605,
            MessageType_BinanceGetAddress: 700,
            MessageType_BinanceAddress: 701,
            MessageType_BinanceGetPublicKey: 702,
            MessageType_BinancePublicKey: 703,
            MessageType_BinanceSignTx: 704,
            MessageType_BinanceTxRequest: 705,
            MessageType_BinanceTransferMsg: 706,
            MessageType_BinanceOrderMsg: 707,
            MessageType_BinanceCancelMsg: 708,
            MessageType_BinanceSignedTx: 709,
            MessageType_SolanaGetAddress: 10100,
            MessageType_SolanaAddress: 10101,
            MessageType_SolanaSignTx: 10102,
            MessageType_SolanaSignedTx: 10103,
            MessageType_StarcoinGetAddress: 10300,
            MessageType_StarcoinAddress: 10301,
            MessageType_StarcoinGetPublicKey: 10302,
            MessageType_StarcoinPublicKey: 10303,
            MessageType_StarcoinSignTx: 10304,
            MessageType_StarcoinSignedTx: 10305,
            MessageType_StarcoinSignMessage: 10306,
            MessageType_StarcoinMessageSignature: 10307,
            MessageType_StarcoinVerifyMessage: 10308,
            MessageType_AptosGetAddress: 10600,
            MessageType_AptosAddress: 10601,
            MessageType_AptosSignTx: 10602,
            MessageType_AptosSignedTx: 10603,
            MessageType_AptosSignMessage: 10604,
            MessageType_AptosMessageSignature: 10605,
            MessageType_WebAuthnListResidentCredentials: 800,
            MessageType_WebAuthnCredentials: 801,
            MessageType_WebAuthnAddResidentCredential: 802,
            MessageType_WebAuthnRemoveResidentCredential: 803,
            MessageType_BixinSeedOperate: 901,
            MessageType_BixinMessageSE: 902,
            MessageType_BixinOutMessageSE: 904,
            MessageType_BixinBackupRequest: 905,
            MessageType_BixinBackupAck: 906,
            MessageType_BixinRestoreRequest: 907,
            MessageType_BixinRestoreAck: 908,
            MessageType_BixinVerifyDeviceRequest: 909,
            MessageType_BixinVerifyDeviceAck: 910,
            MessageType_BixinWhiteListRequest: 911,
            MessageType_BixinWhiteListAck: 912,
            MessageType_BixinLoadDevice: 913,
            MessageType_BixinBackupDevice: 914,
            MessageType_BixinBackupDeviceAck: 915,
            MessageType_BixinPinInputOnDevice: 10000,
            MessageType_EthereumSignMessageEIP712: 10200,
            MessageType_GetPublicKeyMultiple: 10210,
            MessageType_PublicKeyMultiple: 10211,
            MessageType_ConfluxGetAddress: 10112,
            MessageType_ConfluxAddress: 10113,
            MessageType_ConfluxSignTx: 10114,
            MessageType_ConfluxTxRequest: 10115,
            MessageType_ConfluxTxAck: 10116,
            MessageType_ConfluxSignMessage: 10117,
            MessageType_ConfluxSignMessageCIP23: 10118,
            MessageType_ConfluxMessageSignature: 10119,
            MessageType_TronGetAddress: 10501,
            MessageType_TronAddress: 10502,
            MessageType_TronSignTx: 10503,
            MessageType_TronSignedTx: 10504,
            MessageType_TronSignMessage: 10505,
            MessageType_TronMessageSignature: 10506,
            MessageType_NearGetAddress: 10701,
            MessageType_NearAddress: 10702,
            MessageType_NearSignTx: 10703,
            MessageType_NearSignedTx: 10704,
            MessageType_CosmosGetAddress: 10800,
            MessageType_CosmosAddress: 10801,
            MessageType_CosmosSignTx: 10802,
            MessageType_CosmosSignedTx: 10803,
            MessageType_AlgorandGetAddress: 10900,
            MessageType_AlgorandAddress: 10901,
            MessageType_AlgorandSignTx: 10902,
            MessageType_AlgorandSignedTx: 10903,
            MessageType_PolkadotGetAddress: 11000,
            MessageType_PolkadotAddress: 11001,
            MessageType_PolkadotSignTx: 11002,
            MessageType_PolkadotSignedTx: 11003,
            MessageType_SuiGetAddress: 11100,
            MessageType_SuiAddress: 11101,
            MessageType_SuiSignTx: 11102,
            MessageType_SuiSignedTx: 11103,
            MessageType_FilecoinGetAddress: 11200,
            MessageType_FilecoinAddress: 11201,
            MessageType_FilecoinSignTx: 11202,
            MessageType_FilecoinSignedTx: 11203,
            MessageType_KaspaGetAddress: 11300,
            MessageType_KaspaAddress: 11301,
            MessageType_KaspaSignTx: 11302,
            MessageType_KaspaSignedTx: 11303,
            MessageType_KaspaTxInputRequest: 11304,
            MessageType_KaspaTxInputAck: 11305,
            MessageType_NexaGetAddress: 11400,
            MessageType_NexaAddress: 11401,
            MessageType_NexaSignTx: 11402,
            MessageType_NexaSignedTx: 11403,
            MessageType_NexaTxInputRequest: 11404,
            MessageType_NexaTxInputAck: 11405,
            MessageType_DeviceBackToBoot: 903,
            MessageType_DeviceInfoSettings: 10001,
            MessageType_GetDeviceInfo: 10002,
            MessageType_DeviceInfo: 10003,
            MessageType_ReadSEPublicKey: 10004,
            MessageType_SEPublicKey: 10005,
            MessageType_WriteSEPublicCert: 10006,
            MessageType_ReadSEPublicCert: 10007,
            MessageType_SEPublicCert: 10008,
            MessageType_SpiFlashWrite: 10009,
            MessageType_SpiFlashRead: 10010,
            MessageType_SpiFlashData: 10011,
            MessageType_SESignMessage: 10012,
            MessageType_SEMessageSignature: 10013,
            MessageType_NFTWriteInfo: 10014,
            MessageType_NFTWriteData: 10015,
            MessageType_ResourceUpload: 10018,
            MessageType_ZoomRequest: 10019,
            MessageType_ResourceRequest: 10020,
            MessageType_ResourceAck: 10021,
            MessageType_ResourceUpdate: 10022,
            MessageType_ListResDir: 10023,
            MessageType_FileInfoList: 10024,
            MessageType_RebootToBoardloader: 10025,
            MessageType_DeviceEraseSector: 10026
        }
    },
    google: {
        nested: {
            protobuf: {
                nested: {
                    FileDescriptorSet: {
                        fields: {
                            file: {
                                rule: "repeated",
                                type: "FileDescriptorProto",
                                id: 1
                            }
                        }
                    },
                    FileDescriptorProto: {
                        fields: {
                            name: {
                                type: "string",
                                id: 1
                            },
                            "package": {
                                type: "string",
                                id: 2
                            },
                            dependency: {
                                rule: "repeated",
                                type: "string",
                                id: 3
                            },
                            public_dependency: {
                                rule: "repeated",
                                type: "int32",
                                id: 10,
                                options: {
                                    packed: false
                                }
                            },
                            weak_dependency: {
                                rule: "repeated",
                                type: "int32",
                                id: 11,
                                options: {
                                    packed: false
                                }
                            },
                            message_type: {
                                rule: "repeated",
                                type: "DescriptorProto",
                                id: 4
                            },
                            enum_type: {
                                rule: "repeated",
                                type: "EnumDescriptorProto",
                                id: 5
                            },
                            service: {
                                rule: "repeated",
                                type: "ServiceDescriptorProto",
                                id: 6
                            },
                            extension: {
                                rule: "repeated",
                                type: "FieldDescriptorProto",
                                id: 7
                            },
                            options: {
                                type: "FileOptions",
                                id: 8
                            },
                            source_code_info: {
                                type: "SourceCodeInfo",
                                id: 9
                            },
                            syntax: {
                                type: "string",
                                id: 12
                            }
                        }
                    },
                    DescriptorProto: {
                        fields: {
                            name: {
                                type: "string",
                                id: 1
                            },
                            field: {
                                rule: "repeated",
                                type: "FieldDescriptorProto",
                                id: 2
                            },
                            extension: {
                                rule: "repeated",
                                type: "FieldDescriptorProto",
                                id: 6
                            },
                            nested_type: {
                                rule: "repeated",
                                type: "DescriptorProto",
                                id: 3
                            },
                            enum_type: {
                                rule: "repeated",
                                type: "EnumDescriptorProto",
                                id: 4
                            },
                            extension_range: {
                                rule: "repeated",
                                type: "ExtensionRange",
                                id: 5
                            },
                            oneof_decl: {
                                rule: "repeated",
                                type: "OneofDescriptorProto",
                                id: 8
                            },
                            options: {
                                type: "MessageOptions",
                                id: 7
                            },
                            reserved_range: {
                                rule: "repeated",
                                type: "ReservedRange",
                                id: 9
                            },
                            reserved_name: {
                                rule: "repeated",
                                type: "string",
                                id: 10
                            }
                        },
                        nested: {
                            ExtensionRange: {
                                fields: {
                                    start: {
                                        type: "int32",
                                        id: 1
                                    },
                                    end: {
                                        type: "int32",
                                        id: 2
                                    }
                                }
                            },
                            ReservedRange: {
                                fields: {
                                    start: {
                                        type: "int32",
                                        id: 1
                                    },
                                    end: {
                                        type: "int32",
                                        id: 2
                                    }
                                }
                            }
                        }
                    },
                    FieldDescriptorProto: {
                        fields: {
                            name: {
                                type: "string",
                                id: 1
                            },
                            number: {
                                type: "int32",
                                id: 3
                            },
                            label: {
                                type: "Label",
                                id: 4
                            },
                            type: {
                                type: "Type",
                                id: 5
                            },
                            type_name: {
                                type: "string",
                                id: 6
                            },
                            extendee: {
                                type: "string",
                                id: 2
                            },
                            default_value: {
                                type: "string",
                                id: 7
                            },
                            oneof_index: {
                                type: "int32",
                                id: 9
                            },
                            json_name: {
                                type: "string",
                                id: 10
                            },
                            options: {
                                type: "FieldOptions",
                                id: 8
                            }
                        },
                        nested: {
                            Type: {
                                values: {
                                    TYPE_DOUBLE: 1,
                                    TYPE_FLOAT: 2,
                                    TYPE_INT64: 3,
                                    TYPE_UINT64: 4,
                                    TYPE_INT32: 5,
                                    TYPE_FIXED64: 6,
                                    TYPE_FIXED32: 7,
                                    TYPE_BOOL: 8,
                                    TYPE_STRING: 9,
                                    TYPE_GROUP: 10,
                                    TYPE_MESSAGE: 11,
                                    TYPE_BYTES: 12,
                                    TYPE_UINT32: 13,
                                    TYPE_ENUM: 14,
                                    TYPE_SFIXED32: 15,
                                    TYPE_SFIXED64: 16,
                                    TYPE_SINT32: 17,
                                    TYPE_SINT64: 18
                                }
                            },
                            Label: {
                                values: {
                                    LABEL_OPTIONAL: 1,
                                    LABEL_REQUIRED: 2,
                                    LABEL_REPEATED: 3
                                }
                            }
                        }
                    },
                    OneofDescriptorProto: {
                        fields: {
                            name: {
                                type: "string",
                                id: 1
                            },
                            options: {
                                type: "OneofOptions",
                                id: 2
                            }
                        }
                    },
                    EnumDescriptorProto: {
                        fields: {
                            name: {
                                type: "string",
                                id: 1
                            },
                            value: {
                                rule: "repeated",
                                type: "EnumValueDescriptorProto",
                                id: 2
                            },
                            options: {
                                type: "EnumOptions",
                                id: 3
                            }
                        }
                    },
                    EnumValueDescriptorProto: {
                        fields: {
                            name: {
                                type: "string",
                                id: 1
                            },
                            number: {
                                type: "int32",
                                id: 2
                            },
                            options: {
                                type: "EnumValueOptions",
                                id: 3
                            }
                        }
                    },
                    ServiceDescriptorProto: {
                        fields: {
                            name: {
                                type: "string",
                                id: 1
                            },
                            method: {
                                rule: "repeated",
                                type: "MethodDescriptorProto",
                                id: 2
                            },
                            options: {
                                type: "ServiceOptions",
                                id: 3
                            }
                        }
                    },
                    MethodDescriptorProto: {
                        fields: {
                            name: {
                                type: "string",
                                id: 1
                            },
                            input_type: {
                                type: "string",
                                id: 2
                            },
                            output_type: {
                                type: "string",
                                id: 3
                            },
                            options: {
                                type: "MethodOptions",
                                id: 4
                            },
                            client_streaming: {
                                type: "bool",
                                id: 5
                            },
                            server_streaming: {
                                type: "bool",
                                id: 6
                            }
                        }
                    },
                    FileOptions: {
                        fields: {
                            java_package: {
                                type: "string",
                                id: 1
                            },
                            java_outer_classname: {
                                type: "string",
                                id: 8
                            },
                            java_multiple_files: {
                                type: "bool",
                                id: 10
                            },
                            java_generate_equals_and_hash: {
                                type: "bool",
                                id: 20,
                                options: {
                                    deprecated: true
                                }
                            },
                            java_string_check_utf8: {
                                type: "bool",
                                id: 27
                            },
                            optimize_for: {
                                type: "OptimizeMode",
                                id: 9,
                                options: {
                                    "default": "SPEED"
                                }
                            },
                            go_package: {
                                type: "string",
                                id: 11
                            },
                            cc_generic_services: {
                                type: "bool",
                                id: 16
                            },
                            java_generic_services: {
                                type: "bool",
                                id: 17
                            },
                            py_generic_services: {
                                type: "bool",
                                id: 18
                            },
                            deprecated: {
                                type: "bool",
                                id: 23
                            },
                            cc_enable_arenas: {
                                type: "bool",
                                id: 31
                            },
                            objc_class_prefix: {
                                type: "string",
                                id: 36
                            },
                            csharp_namespace: {
                                type: "string",
                                id: 37
                            },
                            uninterpreted_option: {
                                rule: "repeated",
                                type: "UninterpretedOption",
                                id: 999
                            }
                        },
                        extensions: [
                            [
                                1000,
                                536870911
                            ]
                        ],
                        reserved: [
                            [
                                38,
                                38
                            ]
                        ],
                        nested: {
                            OptimizeMode: {
                                values: {
                                    SPEED: 1,
                                    CODE_SIZE: 2,
                                    LITE_RUNTIME: 3
                                }
                            }
                        }
                    },
                    MessageOptions: {
                        fields: {
                            message_set_wire_format: {
                                type: "bool",
                                id: 1
                            },
                            no_standard_descriptor_accessor: {
                                type: "bool",
                                id: 2
                            },
                            deprecated: {
                                type: "bool",
                                id: 3
                            },
                            map_entry: {
                                type: "bool",
                                id: 7
                            },
                            uninterpreted_option: {
                                rule: "repeated",
                                type: "UninterpretedOption",
                                id: 999
                            }
                        },
                        extensions: [
                            [
                                1000,
                                536870911
                            ]
                        ],
                        reserved: [
                            [
                                8,
                                8
                            ]
                        ]
                    },
                    FieldOptions: {
                        fields: {
                            ctype: {
                                type: "CType",
                                id: 1,
                                options: {
                                    "default": "STRING"
                                }
                            },
                            packed: {
                                type: "bool",
                                id: 2
                            },
                            jstype: {
                                type: "JSType",
                                id: 6,
                                options: {
                                    "default": "JS_NORMAL"
                                }
                            },
                            lazy: {
                                type: "bool",
                                id: 5
                            },
                            deprecated: {
                                type: "bool",
                                id: 3
                            },
                            weak: {
                                type: "bool",
                                id: 10
                            },
                            uninterpreted_option: {
                                rule: "repeated",
                                type: "UninterpretedOption",
                                id: 999
                            }
                        },
                        extensions: [
                            [
                                1000,
                                536870911
                            ]
                        ],
                        reserved: [
                            [
                                4,
                                4
                            ]
                        ],
                        nested: {
                            CType: {
                                values: {
                                    STRING: 0,
                                    CORD: 1,
                                    STRING_PIECE: 2
                                }
                            },
                            JSType: {
                                values: {
                                    JS_NORMAL: 0,
                                    JS_STRING: 1,
                                    JS_NUMBER: 2
                                }
                            }
                        }
                    },
                    OneofOptions: {
                        fields: {
                            uninterpreted_option: {
                                rule: "repeated",
                                type: "UninterpretedOption",
                                id: 999
                            }
                        },
                        extensions: [
                            [
                                1000,
                                536870911
                            ]
                        ]
                    },
                    EnumOptions: {
                        fields: {
                            allow_alias: {
                                type: "bool",
                                id: 2
                            },
                            deprecated: {
                                type: "bool",
                                id: 3
                            },
                            uninterpreted_option: {
                                rule: "repeated",
                                type: "UninterpretedOption",
                                id: 999
                            }
                        },
                        extensions: [
                            [
                                1000,
                                536870911
                            ]
                        ]
                    },
                    EnumValueOptions: {
                        fields: {
                            deprecated: {
                                type: "bool",
                                id: 1
                            },
                            uninterpreted_option: {
                                rule: "repeated",
                                type: "UninterpretedOption",
                                id: 999
                            }
                        },
                        extensions: [
                            [
                                1000,
                                536870911
                            ]
                        ]
                    },
                    ServiceOptions: {
                        fields: {
                            deprecated: {
                                type: "bool",
                                id: 33
                            },
                            uninterpreted_option: {
                                rule: "repeated",
                                type: "UninterpretedOption",
                                id: 999
                            }
                        },
                        extensions: [
                            [
                                1000,
                                536870911
                            ]
                        ]
                    },
                    MethodOptions: {
                        fields: {
                            deprecated: {
                                type: "bool",
                                id: 33
                            },
                            uninterpreted_option: {
                                rule: "repeated",
                                type: "UninterpretedOption",
                                id: 999
                            }
                        },
                        extensions: [
                            [
                                1000,
                                536870911
                            ]
                        ]
                    },
                    UninterpretedOption: {
                        fields: {
                            name: {
                                rule: "repeated",
                                type: "NamePart",
                                id: 2
                            },
                            identifier_value: {
                                type: "string",
                                id: 3
                            },
                            positive_int_value: {
                                type: "uint64",
                                id: 4
                            },
                            negative_int_value: {
                                type: "int64",
                                id: 5
                            },
                            double_value: {
                                type: "double",
                                id: 6
                            },
                            string_value: {
                                type: "bytes",
                                id: 7
                            },
                            aggregate_value: {
                                type: "string",
                                id: 8
                            }
                        },
                        nested: {
                            NamePart: {
                                fields: {
                                    name_part: {
                                        rule: "required",
                                        type: "string",
                                        id: 1
                                    },
                                    is_extension: {
                                        rule: "required",
                                        type: "bool",
                                        id: 2
                                    }
                                }
                            }
                        }
                    },
                    SourceCodeInfo: {
                        fields: {
                            location: {
                                rule: "repeated",
                                type: "Location",
                                id: 1
                            }
                        },
                        nested: {
                            Location: {
                                fields: {
                                    path: {
                                        rule: "repeated",
                                        type: "int32",
                                        id: 1
                                    },
                                    span: {
                                        rule: "repeated",
                                        type: "int32",
                                        id: 2
                                    },
                                    leading_comments: {
                                        type: "string",
                                        id: 3
                                    },
                                    trailing_comments: {
                                        type: "string",
                                        id: 4
                                    },
                                    leading_detached_comments: {
                                        rule: "repeated",
                                        type: "string",
                                        id: 6
                                    }
                                }
                            }
                        }
                    },
                    GeneratedCodeInfo: {
                        fields: {
                            annotation: {
                                rule: "repeated",
                                type: "Annotation",
                                id: 1
                            }
                        },
                        nested: {
                            Annotation: {
                                fields: {
                                    path: {
                                        rule: "repeated",
                                        type: "int32",
                                        id: 1
                                    },
                                    source_file: {
                                        type: "string",
                                        id: 2
                                    },
                                    begin: {
                                        type: "int32",
                                        id: 3
                                    },
                                    end: {
                                        type: "int32",
                                        id: 4
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
};
var MessagesJSON = {
    nested: nested$1
};
var nested = {
    AlgorandGetAddress: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            show_display: {
                type: "bool",
                id: 3
            }
        }
    },
    AlgorandAddress: {
        fields: {
            address: {
                type: "string",
                id: 1
            }
        }
    },
    AlgorandSignTx: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            raw_tx: {
                rule: "required",
                type: "bytes",
                id: 2
            }
        }
    },
    AlgorandSignedTx: {
        fields: {
            signature: {
                rule: "required",
                type: "bytes",
                id: 1
            }
        }
    },
    AptosGetAddress: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            show_display: {
                type: "bool",
                id: 2
            }
        }
    },
    AptosAddress: {
        fields: {
            address: {
                type: "string",
                id: 1
            }
        }
    },
    AptosSignTx: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            raw_tx: {
                rule: "required",
                type: "bytes",
                id: 2
            }
        }
    },
    AptosSignedTx: {
        fields: {
            public_key: {
                rule: "required",
                type: "bytes",
                id: 1
            },
            signature: {
                rule: "required",
                type: "bytes",
                id: 2
            }
        }
    },
    AptosSignMessage: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            payload: {
                rule: "required",
                type: "AptosMessagePayload",
                id: 2
            }
        },
        nested: {
            AptosMessagePayload: {
                fields: {
                    address: {
                        type: "string",
                        id: 2
                    },
                    chain_id: {
                        type: "string",
                        id: 3
                    },
                    application: {
                        type: "string",
                        id: 4
                    },
                    nonce: {
                        rule: "required",
                        type: "string",
                        id: 5
                    },
                    message: {
                        rule: "required",
                        type: "string",
                        id: 6
                    }
                }
            }
        }
    },
    AptosMessageSignature: {
        fields: {
            signature: {
                rule: "required",
                type: "bytes",
                id: 1
            },
            address: {
                rule: "required",
                type: "string",
                id: 2
            }
        }
    },
    BinanceGetAddress: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            show_display: {
                type: "bool",
                id: 2
            }
        }
    },
    BinanceAddress: {
        fields: {
            address: {
                rule: "required",
                type: "string",
                id: 1
            }
        }
    },
    BinanceGetPublicKey: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            show_display: {
                type: "bool",
                id: 2
            }
        }
    },
    BinancePublicKey: {
        fields: {
            public_key: {
                rule: "required",
                type: "bytes",
                id: 1
            }
        }
    },
    BinanceSignTx: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            msg_count: {
                type: "uint32",
                id: 2
            },
            account_number: {
                type: "sint64",
                id: 3
            },
            chain_id: {
                type: "string",
                id: 4
            },
            memo: {
                type: "string",
                id: 5
            },
            sequence: {
                type: "sint64",
                id: 6
            },
            source: {
                type: "sint64",
                id: 7
            }
        }
    },
    BinanceTxRequest: {
        fields: {}
    },
    BinanceTransferMsg: {
        fields: {
            inputs: {
                rule: "repeated",
                type: "BinanceInputOutput",
                id: 1
            },
            outputs: {
                rule: "repeated",
                type: "BinanceInputOutput",
                id: 2
            }
        },
        nested: {
            BinanceInputOutput: {
                fields: {
                    address: {
                        type: "string",
                        id: 1
                    },
                    coins: {
                        rule: "repeated",
                        type: "BinanceCoin",
                        id: 2
                    }
                }
            },
            BinanceCoin: {
                fields: {
                    amount: {
                        type: "sint64",
                        id: 1
                    },
                    denom: {
                        type: "string",
                        id: 2
                    }
                }
            }
        }
    },
    BinanceOrderMsg: {
        fields: {
            id: {
                type: "string",
                id: 1
            },
            ordertype: {
                type: "BinanceOrderType",
                id: 2
            },
            price: {
                type: "sint64",
                id: 3
            },
            quantity: {
                type: "sint64",
                id: 4
            },
            sender: {
                type: "string",
                id: 5
            },
            side: {
                type: "BinanceOrderSide",
                id: 6
            },
            symbol: {
                type: "string",
                id: 7
            },
            timeinforce: {
                type: "BinanceTimeInForce",
                id: 8
            }
        },
        nested: {
            BinanceOrderType: {
                values: {
                    OT_UNKNOWN: 0,
                    MARKET: 1,
                    LIMIT: 2,
                    OT_RESERVED: 3
                }
            },
            BinanceOrderSide: {
                values: {
                    SIDE_UNKNOWN: 0,
                    BUY: 1,
                    SELL: 2
                }
            },
            BinanceTimeInForce: {
                values: {
                    TIF_UNKNOWN: 0,
                    GTE: 1,
                    TIF_RESERVED: 2,
                    IOC: 3
                }
            }
        }
    },
    BinanceCancelMsg: {
        fields: {
            refid: {
                type: "string",
                id: 1
            },
            sender: {
                type: "string",
                id: 2
            },
            symbol: {
                type: "string",
                id: 3
            }
        }
    },
    BinanceSignedTx: {
        fields: {
            signature: {
                rule: "required",
                type: "bytes",
                id: 1
            },
            public_key: {
                rule: "required",
                type: "bytes",
                id: 2
            }
        }
    },
    InputScriptType: {
        values: {
            SPENDADDRESS: 0,
            SPENDMULTISIG: 1,
            EXTERNAL: 2,
            SPENDWITNESS: 3,
            SPENDP2SHWITNESS: 4,
            SPENDTAPROOT: 5
        }
    },
    OutputScriptType: {
        values: {
            PAYTOADDRESS: 0,
            PAYTOSCRIPTHASH: 1,
            PAYTOMULTISIG: 2,
            PAYTOOPRETURN: 3,
            PAYTOWITNESS: 4,
            PAYTOP2SHWITNESS: 5,
            PAYTOTAPROOT: 6
        }
    },
    DecredStakingSpendType: {
        values: {
            SSGen: 0,
            SSRTX: 1
        }
    },
    AmountUnit: {
        values: {
            BITCOIN: 0,
            MILLIBITCOIN: 1,
            MICROBITCOIN: 2,
            SATOSHI: 3
        }
    },
    MultisigRedeemScriptType: {
        fields: {
            pubkeys: {
                rule: "repeated",
                type: "HDNodePathType",
                id: 1
            },
            signatures: {
                rule: "repeated",
                type: "bytes",
                id: 2
            },
            m: {
                rule: "required",
                type: "uint32",
                id: 3
            },
            nodes: {
                rule: "repeated",
                type: "HDNodeType",
                id: 4
            },
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 5,
                options: {
                    packed: false
                }
            }
        },
        nested: {
            HDNodePathType: {
                fields: {
                    node: {
                        rule: "required",
                        type: "HDNodeType",
                        id: 1
                    },
                    address_n: {
                        rule: "repeated",
                        type: "uint32",
                        id: 2,
                        options: {
                            packed: false
                        }
                    }
                }
            }
        }
    },
    GetPublicKey: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            ecdsa_curve_name: {
                type: "string",
                id: 2
            },
            show_display: {
                type: "bool",
                id: 3
            },
            coin_name: {
                type: "string",
                id: 4,
                options: {
                    "default": "Bitcoin"
                }
            },
            script_type: {
                type: "InputScriptType",
                id: 5,
                options: {
                    "default": "SPENDADDRESS"
                }
            },
            ignore_xpub_magic: {
                type: "bool",
                id: 6
            }
        }
    },
    PublicKey: {
        fields: {
            node: {
                rule: "required",
                type: "HDNodeType",
                id: 1
            },
            xpub: {
                rule: "required",
                type: "string",
                id: 2
            },
            root_fingerprint: {
                type: "uint32",
                id: 3
            }
        }
    },
    GetAddress: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            coin_name: {
                type: "string",
                id: 2,
                options: {
                    "default": "Bitcoin"
                }
            },
            show_display: {
                type: "bool",
                id: 3
            },
            multisig: {
                type: "MultisigRedeemScriptType",
                id: 4
            },
            script_type: {
                type: "InputScriptType",
                id: 5,
                options: {
                    "default": "SPENDADDRESS"
                }
            },
            ignore_xpub_magic: {
                type: "bool",
                id: 6
            }
        }
    },
    Address: {
        fields: {
            address: {
                rule: "required",
                type: "string",
                id: 1
            }
        }
    },
    GetOwnershipId: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            coin_name: {
                type: "string",
                id: 2,
                options: {
                    "default": "Bitcoin"
                }
            },
            multisig: {
                type: "MultisigRedeemScriptType",
                id: 3
            },
            script_type: {
                type: "InputScriptType",
                id: 4,
                options: {
                    "default": "SPENDADDRESS"
                }
            }
        }
    },
    OwnershipId: {
        fields: {
            ownership_id: {
                rule: "required",
                type: "bytes",
                id: 1
            }
        }
    },
    SignMessage: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            message: {
                rule: "required",
                type: "bytes",
                id: 2
            },
            coin_name: {
                type: "string",
                id: 3,
                options: {
                    "default": "Bitcoin"
                }
            },
            script_type: {
                type: "InputScriptType",
                id: 4,
                options: {
                    "default": "SPENDADDRESS"
                }
            },
            no_script_type: {
                type: "bool",
                id: 5
            }
        }
    },
    MessageSignature: {
        fields: {
            address: {
                rule: "required",
                type: "string",
                id: 1
            },
            signature: {
                rule: "required",
                type: "bytes",
                id: 2
            }
        }
    },
    VerifyMessage: {
        fields: {
            address: {
                rule: "required",
                type: "string",
                id: 1
            },
            signature: {
                rule: "required",
                type: "bytes",
                id: 2
            },
            message: {
                rule: "required",
                type: "bytes",
                id: 3
            },
            coin_name: {
                type: "string",
                id: 4,
                options: {
                    "default": "Bitcoin"
                }
            }
        }
    },
    SignTx: {
        fields: {
            outputs_count: {
                rule: "required",
                type: "uint32",
                id: 1
            },
            inputs_count: {
                rule: "required",
                type: "uint32",
                id: 2
            },
            coin_name: {
                type: "string",
                id: 3,
                options: {
                    "default": "Bitcoin"
                }
            },
            version: {
                type: "uint32",
                id: 4,
                options: {
                    "default": 1
                }
            },
            lock_time: {
                type: "uint32",
                id: 5,
                options: {
                    "default": 0
                }
            },
            expiry: {
                type: "uint32",
                id: 6
            },
            overwintered: {
                type: "bool",
                id: 7,
                options: {
                    deprecated: true
                }
            },
            version_group_id: {
                type: "uint32",
                id: 8
            },
            timestamp: {
                type: "uint32",
                id: 9
            },
            branch_id: {
                type: "uint32",
                id: 10
            },
            amount_unit: {
                type: "AmountUnit",
                id: 11,
                options: {
                    "default": "BITCOIN"
                }
            },
            decred_staking_ticket: {
                type: "bool",
                id: 12,
                options: {
                    "default": false
                }
            }
        }
    },
    TxRequest: {
        fields: {
            request_type: {
                type: "RequestType",
                id: 1
            },
            details: {
                type: "TxRequestDetailsType",
                id: 2
            },
            serialized: {
                type: "TxRequestSerializedType",
                id: 3
            }
        },
        nested: {
            RequestType: {
                values: {
                    TXINPUT: 0,
                    TXOUTPUT: 1,
                    TXMETA: 2,
                    TXFINISHED: 3,
                    TXEXTRADATA: 4,
                    TXORIGINPUT: 5,
                    TXORIGOUTPUT: 6
                }
            },
            TxRequestDetailsType: {
                fields: {
                    request_index: {
                        type: "uint32",
                        id: 1
                    },
                    tx_hash: {
                        type: "bytes",
                        id: 2
                    },
                    extra_data_len: {
                        type: "uint32",
                        id: 3
                    },
                    extra_data_offset: {
                        type: "uint32",
                        id: 4
                    }
                }
            },
            TxRequestSerializedType: {
                fields: {
                    signature_index: {
                        type: "uint32",
                        id: 1
                    },
                    signature: {
                        type: "bytes",
                        id: 2
                    },
                    serialized_tx: {
                        type: "bytes",
                        id: 3
                    }
                }
            }
        }
    },
    TxAck: {
        options: {
            deprecated: true
        },
        fields: {
            tx: {
                type: "TransactionType",
                id: 1
            }
        },
        nested: {
            TransactionType: {
                fields: {
                    version: {
                        type: "uint32",
                        id: 1
                    },
                    inputs: {
                        rule: "repeated",
                        type: "TxInputType",
                        id: 2
                    },
                    bin_outputs: {
                        rule: "repeated",
                        type: "TxOutputBinType",
                        id: 3
                    },
                    lock_time: {
                        type: "uint32",
                        id: 4
                    },
                    outputs: {
                        rule: "repeated",
                        type: "TxOutputType",
                        id: 5
                    },
                    inputs_cnt: {
                        type: "uint32",
                        id: 6
                    },
                    outputs_cnt: {
                        type: "uint32",
                        id: 7
                    },
                    extra_data: {
                        type: "bytes",
                        id: 8
                    },
                    extra_data_len: {
                        type: "uint32",
                        id: 9
                    },
                    expiry: {
                        type: "uint32",
                        id: 10
                    },
                    overwintered: {
                        type: "bool",
                        id: 11,
                        options: {
                            deprecated: true
                        }
                    },
                    version_group_id: {
                        type: "uint32",
                        id: 12
                    },
                    timestamp: {
                        type: "uint32",
                        id: 13
                    },
                    branch_id: {
                        type: "uint32",
                        id: 14
                    }
                },
                nested: {
                    TxInputType: {
                        fields: {
                            address_n: {
                                rule: "repeated",
                                type: "uint32",
                                id: 1,
                                options: {
                                    packed: false
                                }
                            },
                            prev_hash: {
                                rule: "required",
                                type: "bytes",
                                id: 2
                            },
                            prev_index: {
                                rule: "required",
                                type: "uint32",
                                id: 3
                            },
                            script_sig: {
                                type: "bytes",
                                id: 4
                            },
                            sequence: {
                                type: "uint32",
                                id: 5,
                                options: {
                                    "default": 4294967295
                                }
                            },
                            script_type: {
                                type: "InputScriptType",
                                id: 6,
                                options: {
                                    "default": "SPENDADDRESS"
                                }
                            },
                            multisig: {
                                type: "MultisigRedeemScriptType",
                                id: 7
                            },
                            amount: {
                                type: "uint64",
                                id: 8
                            },
                            decred_tree: {
                                type: "uint32",
                                id: 9
                            },
                            witness: {
                                type: "bytes",
                                id: 13
                            },
                            ownership_proof: {
                                type: "bytes",
                                id: 14
                            },
                            commitment_data: {
                                type: "bytes",
                                id: 15
                            },
                            orig_hash: {
                                type: "bytes",
                                id: 16
                            },
                            orig_index: {
                                type: "uint32",
                                id: 17
                            },
                            decred_staking_spend: {
                                type: "DecredStakingSpendType",
                                id: 18
                            },
                            script_pubkey: {
                                type: "bytes",
                                id: 19
                            }
                        }
                    },
                    TxOutputBinType: {
                        fields: {
                            amount: {
                                rule: "required",
                                type: "uint64",
                                id: 1
                            },
                            script_pubkey: {
                                rule: "required",
                                type: "bytes",
                                id: 2
                            },
                            decred_script_version: {
                                type: "uint32",
                                id: 3
                            }
                        }
                    },
                    TxOutputType: {
                        fields: {
                            address: {
                                type: "string",
                                id: 1
                            },
                            address_n: {
                                rule: "repeated",
                                type: "uint32",
                                id: 2,
                                options: {
                                    packed: false
                                }
                            },
                            amount: {
                                rule: "required",
                                type: "uint64",
                                id: 3
                            },
                            script_type: {
                                type: "OutputScriptType",
                                id: 4,
                                options: {
                                    "default": "PAYTOADDRESS"
                                }
                            },
                            multisig: {
                                type: "MultisigRedeemScriptType",
                                id: 5
                            },
                            op_return_data: {
                                type: "bytes",
                                id: 6
                            },
                            orig_hash: {
                                type: "bytes",
                                id: 10
                            },
                            orig_index: {
                                type: "uint32",
                                id: 11
                            }
                        }
                    }
                }
            }
        }
    },
    TxInput: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            prev_hash: {
                rule: "required",
                type: "bytes",
                id: 2
            },
            prev_index: {
                rule: "required",
                type: "uint32",
                id: 3
            },
            script_sig: {
                type: "bytes",
                id: 4
            },
            sequence: {
                type: "uint32",
                id: 5,
                options: {
                    "default": 4294967295
                }
            },
            script_type: {
                type: "InputScriptType",
                id: 6,
                options: {
                    "default": "SPENDADDRESS"
                }
            },
            multisig: {
                type: "MultisigRedeemScriptType",
                id: 7
            },
            amount: {
                rule: "required",
                type: "uint64",
                id: 8
            },
            decred_tree: {
                type: "uint32",
                id: 9
            },
            witness: {
                type: "bytes",
                id: 13
            },
            ownership_proof: {
                type: "bytes",
                id: 14
            },
            commitment_data: {
                type: "bytes",
                id: 15
            },
            orig_hash: {
                type: "bytes",
                id: 16
            },
            orig_index: {
                type: "uint32",
                id: 17
            },
            decred_staking_spend: {
                type: "DecredStakingSpendType",
                id: 18
            },
            script_pubkey: {
                type: "bytes",
                id: 19
            }
        }
    },
    TxOutput: {
        fields: {
            address: {
                type: "string",
                id: 1
            },
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 2,
                options: {
                    packed: false
                }
            },
            amount: {
                rule: "required",
                type: "uint64",
                id: 3
            },
            script_type: {
                type: "OutputScriptType",
                id: 4,
                options: {
                    "default": "PAYTOADDRESS"
                }
            },
            multisig: {
                type: "MultisigRedeemScriptType",
                id: 5
            },
            op_return_data: {
                type: "bytes",
                id: 6
            },
            orig_hash: {
                type: "bytes",
                id: 10
            },
            orig_index: {
                type: "uint32",
                id: 11
            }
        }
    },
    PrevTx: {
        fields: {
            version: {
                rule: "required",
                type: "uint32",
                id: 1
            },
            lock_time: {
                rule: "required",
                type: "uint32",
                id: 4
            },
            inputs_count: {
                rule: "required",
                type: "uint32",
                id: 6
            },
            outputs_count: {
                rule: "required",
                type: "uint32",
                id: 7
            },
            extra_data_len: {
                type: "uint32",
                id: 9,
                options: {
                    "default": 0
                }
            },
            expiry: {
                type: "uint32",
                id: 10
            },
            version_group_id: {
                type: "uint32",
                id: 12
            },
            timestamp: {
                type: "uint32",
                id: 13
            },
            branch_id: {
                type: "uint32",
                id: 14
            }
        }
    },
    PrevInput: {
        fields: {
            prev_hash: {
                rule: "required",
                type: "bytes",
                id: 2
            },
            prev_index: {
                rule: "required",
                type: "uint32",
                id: 3
            },
            script_sig: {
                rule: "required",
                type: "bytes",
                id: 4
            },
            sequence: {
                rule: "required",
                type: "uint32",
                id: 5
            },
            decred_tree: {
                type: "uint32",
                id: 9
            }
        }
    },
    PrevOutput: {
        fields: {
            amount: {
                rule: "required",
                type: "uint64",
                id: 1
            },
            script_pubkey: {
                rule: "required",
                type: "bytes",
                id: 2
            },
            decred_script_version: {
                type: "uint32",
                id: 3
            }
        }
    },
    TxAckInput: {
        options: {
            "(wire_type)": 22
        },
        fields: {
            tx: {
                rule: "required",
                type: "TxAckInputWrapper",
                id: 1
            }
        },
        nested: {
            TxAckInputWrapper: {
                fields: {
                    input: {
                        rule: "required",
                        type: "TxInput",
                        id: 2
                    }
                }
            }
        }
    },
    TxAckOutput: {
        options: {
            "(wire_type)": 22
        },
        fields: {
            tx: {
                rule: "required",
                type: "TxAckOutputWrapper",
                id: 1
            }
        },
        nested: {
            TxAckOutputWrapper: {
                fields: {
                    output: {
                        rule: "required",
                        type: "TxOutput",
                        id: 5
                    }
                }
            }
        }
    },
    TxAckPrevMeta: {
        options: {
            "(wire_type)": 22
        },
        fields: {
            tx: {
                rule: "required",
                type: "PrevTx",
                id: 1
            }
        }
    },
    TxAckPrevInput: {
        options: {
            "(wire_type)": 22
        },
        fields: {
            tx: {
                rule: "required",
                type: "TxAckPrevInputWrapper",
                id: 1
            }
        },
        nested: {
            TxAckPrevInputWrapper: {
                fields: {
                    input: {
                        rule: "required",
                        type: "PrevInput",
                        id: 2
                    }
                }
            }
        }
    },
    TxAckPrevOutput: {
        options: {
            "(wire_type)": 22
        },
        fields: {
            tx: {
                rule: "required",
                type: "TxAckPrevOutputWrapper",
                id: 1
            }
        },
        nested: {
            TxAckPrevOutputWrapper: {
                fields: {
                    output: {
                        rule: "required",
                        type: "PrevOutput",
                        id: 3
                    }
                }
            }
        }
    },
    TxAckPrevExtraData: {
        options: {
            "(wire_type)": 22
        },
        fields: {
            tx: {
                rule: "required",
                type: "TxAckPrevExtraDataWrapper",
                id: 1
            }
        },
        nested: {
            TxAckPrevExtraDataWrapper: {
                fields: {
                    extra_data_chunk: {
                        rule: "required",
                        type: "bytes",
                        id: 8
                    }
                }
            }
        }
    },
    GetOwnershipProof: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            coin_name: {
                type: "string",
                id: 2,
                options: {
                    "default": "Bitcoin"
                }
            },
            script_type: {
                type: "InputScriptType",
                id: 3,
                options: {
                    "default": "SPENDWITNESS"
                }
            },
            multisig: {
                type: "MultisigRedeemScriptType",
                id: 4
            },
            user_confirmation: {
                type: "bool",
                id: 5,
                options: {
                    "default": false
                }
            },
            ownership_ids: {
                rule: "repeated",
                type: "bytes",
                id: 6
            },
            commitment_data: {
                type: "bytes",
                id: 7,
                options: {
                    "default": ""
                }
            }
        }
    },
    OwnershipProof: {
        fields: {
            ownership_proof: {
                rule: "required",
                type: "bytes",
                id: 1
            },
            signature: {
                rule: "required",
                type: "bytes",
                id: 2
            }
        }
    },
    AuthorizeCoinJoin: {
        options: {
            "(unstable)": true
        },
        fields: {
            coordinator: {
                rule: "required",
                type: "string",
                id: 1
            },
            max_total_fee: {
                rule: "required",
                type: "uint64",
                id: 2
            },
            fee_per_anonymity: {
                type: "uint32",
                id: 3,
                options: {
                    "default": 0
                }
            },
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 4,
                options: {
                    packed: false
                }
            },
            coin_name: {
                type: "string",
                id: 5,
                options: {
                    "default": "Bitcoin"
                }
            },
            script_type: {
                type: "InputScriptType",
                id: 6,
                options: {
                    "default": "SPENDADDRESS"
                }
            },
            amount_unit: {
                type: "AmountUnit",
                id: 11,
                options: {
                    "default": "BITCOIN"
                }
            }
        }
    },
    GetPublicKeyMultiple: {
        fields: {
            addresses: {
                rule: "repeated",
                type: "BIP32Address",
                id: 1
            },
            ecdsa_curve_name: {
                type: "string",
                id: 2
            },
            show_display: {
                type: "bool",
                id: 3
            },
            coin_name: {
                type: "string",
                id: 4,
                options: {
                    "default": "Bitcoin"
                }
            },
            script_type: {
                type: "InputScriptType",
                id: 5,
                options: {
                    "default": "SPENDADDRESS"
                }
            },
            ignore_xpub_magic: {
                type: "bool",
                id: 6
            }
        },
        nested: {
            BIP32Address: {
                fields: {
                    address_n: {
                        rule: "repeated",
                        type: "uint32",
                        id: 1,
                        options: {
                            packed: false
                        }
                    }
                }
            }
        }
    },
    PublicKeyMultiple: {
        fields: {
            xpubs: {
                rule: "repeated",
                type: "string",
                id: 1
            }
        }
    },
    FirmwareErase: {
        fields: {
            length: {
                type: "uint32",
                id: 1
            }
        }
    },
    FirmwareRequest: {
        fields: {
            offset: {
                type: "uint32",
                id: 1
            },
            length: {
                type: "uint32",
                id: 2
            }
        }
    },
    FirmwareUpload: {
        fields: {
            payload: {
                rule: "required",
                type: "bytes",
                id: 1
            },
            hash: {
                type: "bytes",
                id: 2
            }
        }
    },
    SelfTest: {
        fields: {
            payload: {
                type: "bytes",
                id: 1
            }
        }
    },
    FirmwareErase_ex: {
        fields: {
            length: {
                type: "uint32",
                id: 1
            }
        }
    },
    RebootType: {
        values: {
            Normal: 0,
            Boardloader: 1,
            BootLoader: 2
        }
    },
    Reboot: {
        fields: {
            reboot_type: {
                rule: "required",
                type: "RebootType",
                id: 1
            }
        }
    },
    FirmwareUpdateEmmc: {
        fields: {
            path: {
                rule: "required",
                type: "string",
                id: 1
            },
            reboot_on_success: {
                type: "bool",
                id: 2
            }
        }
    },
    CardanoDerivationType: {
        values: {
            LEDGER: 0,
            ICARUS: 1,
            ICARUS_TREZOR: 2
        }
    },
    CardanoAddressType: {
        values: {
            BASE: 0,
            BASE_SCRIPT_KEY: 1,
            BASE_KEY_SCRIPT: 2,
            BASE_SCRIPT_SCRIPT: 3,
            POINTER: 4,
            POINTER_SCRIPT: 5,
            ENTERPRISE: 6,
            ENTERPRISE_SCRIPT: 7,
            BYRON: 8,
            REWARD: 14,
            REWARD_SCRIPT: 15
        }
    },
    CardanoNativeScriptType: {
        values: {
            PUB_KEY: 0,
            ALL: 1,
            ANY: 2,
            N_OF_K: 3,
            INVALID_BEFORE: 4,
            INVALID_HEREAFTER: 5
        }
    },
    CardanoNativeScriptHashDisplayFormat: {
        values: {
            HIDE: 0,
            BECH32: 1,
            POLICY_ID: 2
        }
    },
    CardanoTxOutputSerializationFormat: {
        values: {
            ARRAY_LEGACY: 0,
            MAP_BABBAGE: 1
        }
    },
    CardanoCertificateType: {
        values: {
            STAKE_REGISTRATION: 0,
            STAKE_DEREGISTRATION: 1,
            STAKE_DELEGATION: 2,
            STAKE_POOL_REGISTRATION: 3
        }
    },
    CardanoPoolRelayType: {
        values: {
            SINGLE_HOST_IP: 0,
            SINGLE_HOST_NAME: 1,
            MULTIPLE_HOST_NAME: 2
        }
    },
    CardanoTxAuxiliaryDataSupplementType: {
        values: {
            NONE: 0,
            GOVERNANCE_REGISTRATION_SIGNATURE: 1
        }
    },
    CardanoGovernanceRegistrationFormat: {
        values: {
            CIP15: 0,
            CIP36: 1
        }
    },
    CardanoTxSigningMode: {
        values: {
            ORDINARY_TRANSACTION: 0,
            POOL_REGISTRATION_AS_OWNER: 1,
            MULTISIG_TRANSACTION: 2,
            PLUTUS_TRANSACTION: 3
        }
    },
    CardanoTxWitnessType: {
        values: {
            BYRON_WITNESS: 0,
            SHELLEY_WITNESS: 1
        }
    },
    CardanoBlockchainPointerType: {
        fields: {
            block_index: {
                rule: "required",
                type: "uint32",
                id: 1
            },
            tx_index: {
                rule: "required",
                type: "uint32",
                id: 2
            },
            certificate_index: {
                rule: "required",
                type: "uint32",
                id: 3
            }
        }
    },
    CardanoNativeScript: {
        fields: {
            type: {
                rule: "required",
                type: "CardanoNativeScriptType",
                id: 1
            },
            scripts: {
                rule: "repeated",
                type: "CardanoNativeScript",
                id: 2
            },
            key_hash: {
                type: "bytes",
                id: 3
            },
            key_path: {
                rule: "repeated",
                type: "uint32",
                id: 4,
                options: {
                    packed: false
                }
            },
            required_signatures_count: {
                type: "uint32",
                id: 5
            },
            invalid_before: {
                type: "uint64",
                id: 6
            },
            invalid_hereafter: {
                type: "uint64",
                id: 7
            }
        }
    },
    CardanoGetNativeScriptHash: {
        fields: {
            script: {
                rule: "required",
                type: "CardanoNativeScript",
                id: 1
            },
            display_format: {
                rule: "required",
                type: "CardanoNativeScriptHashDisplayFormat",
                id: 2
            },
            derivation_type: {
                rule: "required",
                type: "CardanoDerivationType",
                id: 3
            }
        }
    },
    CardanoNativeScriptHash: {
        fields: {
            script_hash: {
                rule: "required",
                type: "bytes",
                id: 1
            }
        }
    },
    CardanoAddressParametersType: {
        fields: {
            address_type: {
                rule: "required",
                type: "CardanoAddressType",
                id: 1
            },
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 2,
                options: {
                    packed: false
                }
            },
            address_n_staking: {
                rule: "repeated",
                type: "uint32",
                id: 3,
                options: {
                    packed: false
                }
            },
            staking_key_hash: {
                type: "bytes",
                id: 4
            },
            certificate_pointer: {
                type: "CardanoBlockchainPointerType",
                id: 5
            },
            script_payment_hash: {
                type: "bytes",
                id: 6
            },
            script_staking_hash: {
                type: "bytes",
                id: 7
            }
        }
    },
    CardanoGetAddress: {
        fields: {
            show_display: {
                type: "bool",
                id: 2,
                options: {
                    "default": false
                }
            },
            protocol_magic: {
                rule: "required",
                type: "uint32",
                id: 3
            },
            network_id: {
                rule: "required",
                type: "uint32",
                id: 4
            },
            address_parameters: {
                rule: "required",
                type: "CardanoAddressParametersType",
                id: 5
            },
            derivation_type: {
                rule: "required",
                type: "CardanoDerivationType",
                id: 6
            }
        }
    },
    CardanoAddress: {
        fields: {
            address: {
                rule: "required",
                type: "string",
                id: 1
            }
        }
    },
    CardanoGetPublicKey: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            show_display: {
                type: "bool",
                id: 2
            },
            derivation_type: {
                rule: "required",
                type: "CardanoDerivationType",
                id: 3
            }
        }
    },
    CardanoPublicKey: {
        fields: {
            xpub: {
                rule: "required",
                type: "string",
                id: 1
            },
            node: {
                rule: "required",
                type: "HDNodeType",
                id: 2
            }
        }
    },
    CardanoSignTxInit: {
        fields: {
            signing_mode: {
                rule: "required",
                type: "CardanoTxSigningMode",
                id: 1
            },
            protocol_magic: {
                rule: "required",
                type: "uint32",
                id: 2
            },
            network_id: {
                rule: "required",
                type: "uint32",
                id: 3
            },
            inputs_count: {
                rule: "required",
                type: "uint32",
                id: 4
            },
            outputs_count: {
                rule: "required",
                type: "uint32",
                id: 5
            },
            fee: {
                rule: "required",
                type: "uint64",
                id: 6
            },
            ttl: {
                type: "uint64",
                id: 7
            },
            certificates_count: {
                rule: "required",
                type: "uint32",
                id: 8
            },
            withdrawals_count: {
                rule: "required",
                type: "uint32",
                id: 9
            },
            has_auxiliary_data: {
                rule: "required",
                type: "bool",
                id: 10
            },
            validity_interval_start: {
                type: "uint64",
                id: 11
            },
            witness_requests_count: {
                rule: "required",
                type: "uint32",
                id: 12
            },
            minting_asset_groups_count: {
                rule: "required",
                type: "uint32",
                id: 13
            },
            derivation_type: {
                rule: "required",
                type: "CardanoDerivationType",
                id: 14
            },
            include_network_id: {
                type: "bool",
                id: 15,
                options: {
                    "default": false
                }
            },
            script_data_hash: {
                type: "bytes",
                id: 16
            },
            collateral_inputs_count: {
                rule: "required",
                type: "uint32",
                id: 17
            },
            required_signers_count: {
                rule: "required",
                type: "uint32",
                id: 18
            },
            has_collateral_return: {
                type: "bool",
                id: 19,
                options: {
                    "default": false
                }
            },
            total_collateral: {
                type: "uint64",
                id: 20
            },
            reference_inputs_count: {
                type: "uint32",
                id: 21,
                options: {
                    "default": 0
                }
            }
        }
    },
    CardanoTxInput: {
        fields: {
            prev_hash: {
                rule: "required",
                type: "bytes",
                id: 1
            },
            prev_index: {
                rule: "required",
                type: "uint32",
                id: 2
            }
        }
    },
    CardanoTxOutput: {
        fields: {
            address: {
                type: "string",
                id: 1
            },
            address_parameters: {
                type: "CardanoAddressParametersType",
                id: 2
            },
            amount: {
                rule: "required",
                type: "uint64",
                id: 3
            },
            asset_groups_count: {
                rule: "required",
                type: "uint32",
                id: 4
            },
            datum_hash: {
                type: "bytes",
                id: 5
            },
            format: {
                type: "CardanoTxOutputSerializationFormat",
                id: 6,
                options: {
                    "default": "ARRAY_LEGACY"
                }
            },
            inline_datum_size: {
                type: "uint32",
                id: 7,
                options: {
                    "default": 0
                }
            },
            reference_script_size: {
                type: "uint32",
                id: 8,
                options: {
                    "default": 0
                }
            }
        }
    },
    CardanoAssetGroup: {
        fields: {
            policy_id: {
                rule: "required",
                type: "bytes",
                id: 1
            },
            tokens_count: {
                rule: "required",
                type: "uint32",
                id: 2
            }
        }
    },
    CardanoToken: {
        fields: {
            asset_name_bytes: {
                rule: "required",
                type: "bytes",
                id: 1
            },
            amount: {
                type: "uint64",
                id: 2
            },
            mint_amount: {
                type: "sint64",
                id: 3
            }
        }
    },
    CardanoTxInlineDatumChunk: {
        fields: {
            data: {
                rule: "required",
                type: "bytes",
                id: 1
            }
        }
    },
    CardanoTxReferenceScriptChunk: {
        fields: {
            data: {
                rule: "required",
                type: "bytes",
                id: 1
            }
        }
    },
    CardanoPoolOwner: {
        fields: {
            staking_key_path: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            staking_key_hash: {
                type: "bytes",
                id: 2
            }
        }
    },
    CardanoPoolRelayParameters: {
        fields: {
            type: {
                rule: "required",
                type: "CardanoPoolRelayType",
                id: 1
            },
            ipv4_address: {
                type: "bytes",
                id: 2
            },
            ipv6_address: {
                type: "bytes",
                id: 3
            },
            host_name: {
                type: "string",
                id: 4
            },
            port: {
                type: "uint32",
                id: 5
            }
        }
    },
    CardanoPoolMetadataType: {
        fields: {
            url: {
                rule: "required",
                type: "string",
                id: 1
            },
            hash: {
                rule: "required",
                type: "bytes",
                id: 2
            }
        }
    },
    CardanoPoolParametersType: {
        fields: {
            pool_id: {
                rule: "required",
                type: "bytes",
                id: 1
            },
            vrf_key_hash: {
                rule: "required",
                type: "bytes",
                id: 2
            },
            pledge: {
                rule: "required",
                type: "uint64",
                id: 3
            },
            cost: {
                rule: "required",
                type: "uint64",
                id: 4
            },
            margin_numerator: {
                rule: "required",
                type: "uint64",
                id: 5
            },
            margin_denominator: {
                rule: "required",
                type: "uint64",
                id: 6
            },
            reward_account: {
                rule: "required",
                type: "string",
                id: 7
            },
            metadata: {
                type: "CardanoPoolMetadataType",
                id: 10
            },
            owners_count: {
                rule: "required",
                type: "uint32",
                id: 11
            },
            relays_count: {
                rule: "required",
                type: "uint32",
                id: 12
            }
        }
    },
    CardanoTxCertificate: {
        fields: {
            type: {
                rule: "required",
                type: "CardanoCertificateType",
                id: 1
            },
            path: {
                rule: "repeated",
                type: "uint32",
                id: 2,
                options: {
                    packed: false
                }
            },
            pool: {
                type: "bytes",
                id: 3
            },
            pool_parameters: {
                type: "CardanoPoolParametersType",
                id: 4
            },
            script_hash: {
                type: "bytes",
                id: 5
            },
            key_hash: {
                type: "bytes",
                id: 6
            }
        }
    },
    CardanoTxWithdrawal: {
        fields: {
            path: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            amount: {
                rule: "required",
                type: "uint64",
                id: 2
            },
            script_hash: {
                type: "bytes",
                id: 3
            },
            key_hash: {
                type: "bytes",
                id: 4
            }
        }
    },
    CardanoGovernanceRegistrationDelegation: {
        fields: {
            voting_public_key: {
                rule: "required",
                type: "bytes",
                id: 1
            },
            weight: {
                rule: "required",
                type: "uint32",
                id: 2
            }
        }
    },
    CardanoGovernanceRegistrationParametersType: {
        fields: {
            voting_public_key: {
                type: "bytes",
                id: 1
            },
            staking_path: {
                rule: "repeated",
                type: "uint32",
                id: 2,
                options: {
                    packed: false
                }
            },
            reward_address_parameters: {
                rule: "required",
                type: "CardanoAddressParametersType",
                id: 3
            },
            nonce: {
                rule: "required",
                type: "uint64",
                id: 4
            },
            format: {
                type: "CardanoGovernanceRegistrationFormat",
                id: 5,
                options: {
                    "default": "CIP15"
                }
            },
            delegations: {
                rule: "repeated",
                type: "CardanoGovernanceRegistrationDelegation",
                id: 6
            },
            voting_purpose: {
                type: "uint64",
                id: 7
            }
        }
    },
    CardanoTxAuxiliaryData: {
        fields: {
            governance_registration_parameters: {
                type: "CardanoGovernanceRegistrationParametersType",
                id: 1
            },
            hash: {
                type: "bytes",
                id: 2
            }
        }
    },
    CardanoTxMint: {
        fields: {
            asset_groups_count: {
                rule: "required",
                type: "uint32",
                id: 1
            }
        }
    },
    CardanoTxCollateralInput: {
        fields: {
            prev_hash: {
                rule: "required",
                type: "bytes",
                id: 1
            },
            prev_index: {
                rule: "required",
                type: "uint32",
                id: 2
            }
        }
    },
    CardanoTxRequiredSigner: {
        fields: {
            key_hash: {
                type: "bytes",
                id: 1
            },
            key_path: {
                rule: "repeated",
                type: "uint32",
                id: 2,
                options: {
                    packed: false
                }
            }
        }
    },
    CardanoTxReferenceInput: {
        fields: {
            prev_hash: {
                rule: "required",
                type: "bytes",
                id: 1
            },
            prev_index: {
                rule: "required",
                type: "uint32",
                id: 2
            }
        }
    },
    CardanoTxItemAck: {
        fields: {}
    },
    CardanoTxAuxiliaryDataSupplement: {
        fields: {
            type: {
                rule: "required",
                type: "CardanoTxAuxiliaryDataSupplementType",
                id: 1
            },
            auxiliary_data_hash: {
                type: "bytes",
                id: 2
            },
            governance_signature: {
                type: "bytes",
                id: 3
            }
        }
    },
    CardanoTxWitnessRequest: {
        fields: {
            path: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            }
        }
    },
    CardanoTxWitnessResponse: {
        fields: {
            type: {
                rule: "required",
                type: "CardanoTxWitnessType",
                id: 1
            },
            pub_key: {
                rule: "required",
                type: "bytes",
                id: 2
            },
            signature: {
                rule: "required",
                type: "bytes",
                id: 3
            },
            chain_code: {
                type: "bytes",
                id: 4
            }
        }
    },
    CardanoTxHostAck: {
        fields: {}
    },
    CardanoTxBodyHash: {
        fields: {
            tx_hash: {
                rule: "required",
                type: "bytes",
                id: 1
            }
        }
    },
    CardanoSignTxFinished: {
        fields: {}
    },
    CardanoSignMessage: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            message: {
                rule: "required",
                type: "bytes",
                id: 2
            },
            derivation_type: {
                rule: "required",
                type: "CardanoDerivationType",
                id: 3
            },
            network_id: {
                rule: "required",
                type: "uint32",
                id: 4
            }
        }
    },
    CardanoMessageSignature: {
        fields: {
            signature: {
                rule: "required",
                type: "bytes",
                id: 1
            },
            key: {
                rule: "required",
                type: "bytes",
                id: 2
            }
        }
    },
    Success: {
        fields: {
            message: {
                type: "string",
                id: 1,
                options: {
                    "default": ""
                }
            }
        }
    },
    Failure: {
        fields: {
            code: {
                type: "FailureType",
                id: 1
            },
            message: {
                type: "string",
                id: 2
            }
        },
        nested: {
            FailureType: {
                values: {
                    Failure_UnexpectedMessage: 1,
                    Failure_ButtonExpected: 2,
                    Failure_DataError: 3,
                    Failure_ActionCancelled: 4,
                    Failure_PinExpected: 5,
                    Failure_PinCancelled: 6,
                    Failure_PinInvalid: 7,
                    Failure_InvalidSignature: 8,
                    Failure_ProcessError: 9,
                    Failure_NotEnoughFunds: 10,
                    Failure_NotInitialized: 11,
                    Failure_PinMismatch: 12,
                    Failure_WipeCodeMismatch: 13,
                    Failure_InvalidSession: 14,
                    Failure_FirmwareError: 99
                }
            }
        }
    },
    ButtonRequest: {
        fields: {
            code: {
                type: "ButtonRequestType",
                id: 1
            },
            pages: {
                type: "uint32",
                id: 2
            }
        },
        nested: {
            ButtonRequestType: {
                values: {
                    ButtonRequest_Other: 1,
                    ButtonRequest_FeeOverThreshold: 2,
                    ButtonRequest_ConfirmOutput: 3,
                    ButtonRequest_ResetDevice: 4,
                    ButtonRequest_ConfirmWord: 5,
                    ButtonRequest_WipeDevice: 6,
                    ButtonRequest_ProtectCall: 7,
                    ButtonRequest_SignTx: 8,
                    ButtonRequest_FirmwareCheck: 9,
                    ButtonRequest_Address: 10,
                    ButtonRequest_PublicKey: 11,
                    ButtonRequest_MnemonicWordCount: 12,
                    ButtonRequest_MnemonicInput: 13,
                    _Deprecated_ButtonRequest_PassphraseType: 14,
                    ButtonRequest_UnknownDerivationPath: 15,
                    ButtonRequest_RecoveryHomepage: 16,
                    ButtonRequest_Success: 17,
                    ButtonRequest_Warning: 18,
                    ButtonRequest_PassphraseEntry: 19,
                    ButtonRequest_PinEntry: 20
                }
            }
        }
    },
    ButtonAck: {
        fields: {}
    },
    PinMatrixRequest: {
        fields: {
            type: {
                type: "PinMatrixRequestType",
                id: 1
            }
        },
        nested: {
            PinMatrixRequestType: {
                values: {
                    PinMatrixRequestType_Current: 1,
                    PinMatrixRequestType_NewFirst: 2,
                    PinMatrixRequestType_NewSecond: 3,
                    PinMatrixRequestType_WipeCodeFirst: 4,
                    PinMatrixRequestType_WipeCodeSecond: 5,
                    PinMatrixRequestType_BackupFirst: 6,
                    PinMatrixRequestType_BackupSecond: 7
                }
            }
        }
    },
    PinMatrixAck: {
        fields: {
            pin: {
                rule: "required",
                type: "string",
                id: 1
            },
            new_pin: {
                type: "string",
                id: 2
            }
        }
    },
    PassphraseRequest: {
        fields: {
            _on_device: {
                type: "bool",
                id: 1,
                options: {
                    deprecated: true
                }
            }
        }
    },
    PassphraseAck: {
        fields: {
            passphrase: {
                type: "string",
                id: 1
            },
            _state: {
                type: "bytes",
                id: 2,
                options: {
                    deprecated: true
                }
            },
            on_device: {
                type: "bool",
                id: 3
            }
        }
    },
    Deprecated_PassphraseStateRequest: {
        options: {
            deprecated: true
        },
        fields: {
            state: {
                type: "bytes",
                id: 1
            }
        }
    },
    Deprecated_PassphraseStateAck: {
        options: {
            deprecated: true
        },
        fields: {}
    },
    HDNodeType: {
        fields: {
            depth: {
                rule: "required",
                type: "uint32",
                id: 1
            },
            fingerprint: {
                rule: "required",
                type: "uint32",
                id: 2
            },
            child_num: {
                rule: "required",
                type: "uint32",
                id: 3
            },
            chain_code: {
                rule: "required",
                type: "bytes",
                id: 4
            },
            private_key: {
                type: "bytes",
                id: 5
            },
            public_key: {
                rule: "required",
                type: "bytes",
                id: 6
            }
        }
    },
    BixinPinInputOnDevice: {
        fields: {}
    },
    ConfluxGetAddress: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            show_display: {
                type: "bool",
                id: 2
            },
            chain_id: {
                type: "uint32",
                id: 3
            }
        }
    },
    ConfluxAddress: {
        fields: {
            address: {
                type: "string",
                id: 1
            }
        }
    },
    ConfluxSignTx: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            nonce: {
                type: "bytes",
                id: 2
            },
            gas_price: {
                type: "bytes",
                id: 3
            },
            gas_limit: {
                type: "bytes",
                id: 4
            },
            to: {
                type: "string",
                id: 5
            },
            value: {
                type: "bytes",
                id: 6
            },
            epoch_height: {
                type: "bytes",
                id: 7
            },
            storage_limit: {
                type: "bytes",
                id: 8
            },
            data_initial_chunk: {
                type: "bytes",
                id: 9
            },
            data_length: {
                type: "uint32",
                id: 10
            },
            chain_id: {
                type: "uint32",
                id: 11
            }
        }
    },
    ConfluxTxRequest: {
        fields: {
            data_length: {
                type: "uint32",
                id: 1
            },
            signature_v: {
                type: "uint32",
                id: 2
            },
            signature_r: {
                type: "bytes",
                id: 3
            },
            signature_s: {
                type: "bytes",
                id: 4
            }
        }
    },
    ConfluxTxAck: {
        fields: {
            data_chunk: {
                type: "bytes",
                id: 1
            }
        }
    },
    ConfluxSignMessage: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            message: {
                type: "bytes",
                id: 2
            }
        }
    },
    ConfluxMessageSignature: {
        fields: {
            signature: {
                type: "bytes",
                id: 2
            },
            address: {
                type: "string",
                id: 3
            }
        }
    },
    ConfluxSignMessageCIP23: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            domain_hash: {
                type: "bytes",
                id: 2
            },
            message_hash: {
                type: "bytes",
                id: 3
            }
        }
    },
    CosmosGetAddress: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            hrp: {
                type: "string",
                id: 2
            },
            show_display: {
                type: "bool",
                id: 3
            }
        }
    },
    CosmosAddress: {
        fields: {
            address: {
                type: "string",
                id: 1
            }
        }
    },
    CosmosSignTx: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            raw_tx: {
                rule: "required",
                type: "bytes",
                id: 2
            }
        }
    },
    CosmosSignedTx: {
        fields: {
            signature: {
                rule: "required",
                type: "bytes",
                id: 1
            }
        }
    },
    CipherKeyValue: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            key: {
                rule: "required",
                type: "string",
                id: 2
            },
            value: {
                rule: "required",
                type: "bytes",
                id: 3
            },
            encrypt: {
                type: "bool",
                id: 4
            },
            ask_on_encrypt: {
                type: "bool",
                id: 5
            },
            ask_on_decrypt: {
                type: "bool",
                id: 6
            },
            iv: {
                type: "bytes",
                id: 7
            }
        }
    },
    CipheredKeyValue: {
        fields: {
            value: {
                rule: "required",
                type: "bytes",
                id: 1
            }
        }
    },
    IdentityType: {
        fields: {
            proto: {
                type: "string",
                id: 1
            },
            user: {
                type: "string",
                id: 2
            },
            host: {
                type: "string",
                id: 3
            },
            port: {
                type: "string",
                id: 4
            },
            path: {
                type: "string",
                id: 5
            },
            index: {
                type: "uint32",
                id: 6,
                options: {
                    "default": 0
                }
            }
        }
    },
    SignIdentity: {
        fields: {
            identity: {
                rule: "required",
                type: "IdentityType",
                id: 1
            },
            challenge_hidden: {
                type: "bytes",
                id: 2,
                options: {
                    "default": ""
                }
            },
            challenge_visual: {
                type: "string",
                id: 3,
                options: {
                    "default": ""
                }
            },
            ecdsa_curve_name: {
                type: "string",
                id: 4
            }
        }
    },
    SignedIdentity: {
        fields: {
            address: {
                type: "string",
                id: 1
            },
            public_key: {
                rule: "required",
                type: "bytes",
                id: 2
            },
            signature: {
                rule: "required",
                type: "bytes",
                id: 3
            }
        }
    },
    GetECDHSessionKey: {
        fields: {
            identity: {
                rule: "required",
                type: "IdentityType",
                id: 1
            },
            peer_public_key: {
                rule: "required",
                type: "bytes",
                id: 2
            },
            ecdsa_curve_name: {
                type: "string",
                id: 3
            }
        }
    },
    ECDHSessionKey: {
        fields: {
            session_key: {
                rule: "required",
                type: "bytes",
                id: 1
            },
            public_key: {
                type: "bytes",
                id: 2
            }
        }
    },
    CosiCommit: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            data: {
                type: "bytes",
                id: 2
            }
        }
    },
    CosiCommitment: {
        fields: {
            commitment: {
                type: "bytes",
                id: 1
            },
            pubkey: {
                type: "bytes",
                id: 2
            }
        }
    },
    CosiSign: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            data: {
                type: "bytes",
                id: 2
            },
            global_commitment: {
                type: "bytes",
                id: 3
            },
            global_pubkey: {
                type: "bytes",
                id: 4
            }
        }
    },
    CosiSignature: {
        fields: {
            signature: {
                rule: "required",
                type: "bytes",
                id: 1
            }
        }
    },
    BatchGetPublickeys: {
        fields: {
            ecdsa_curve_name: {
                type: "string",
                id: 1,
                options: {
                    "default": "ed25519"
                }
            },
            paths: {
                rule: "repeated",
                type: "Path",
                id: 2
            }
        },
        nested: {
            Path: {
                fields: {
                    address_n: {
                        rule: "repeated",
                        type: "uint32",
                        id: 1,
                        options: {
                            packed: false
                        }
                    }
                }
            }
        }
    },
    EcdsaPublicKeys: {
        fields: {
            public_keys: {
                rule: "repeated",
                type: "bytes",
                id: 1
            }
        }
    },
    DebugLinkDecision: {
        fields: {
            yes_no: {
                type: "bool",
                id: 1
            },
            swipe: {
                type: "DebugSwipeDirection",
                id: 2
            },
            input: {
                type: "string",
                id: 3
            },
            x: {
                type: "uint32",
                id: 4
            },
            y: {
                type: "uint32",
                id: 5
            },
            wait: {
                type: "bool",
                id: 6
            },
            hold_ms: {
                type: "uint32",
                id: 7
            }
        },
        nested: {
            DebugSwipeDirection: {
                values: {
                    UP: 0,
                    DOWN: 1,
                    LEFT: 2,
                    RIGHT: 3
                }
            }
        }
    },
    DebugLinkLayout: {
        fields: {
            lines: {
                rule: "repeated",
                type: "string",
                id: 1
            }
        }
    },
    DebugLinkReseedRandom: {
        fields: {
            value: {
                type: "uint32",
                id: 1
            }
        }
    },
    DebugLinkRecordScreen: {
        fields: {
            target_directory: {
                type: "string",
                id: 1
            }
        }
    },
    DebugLinkGetState: {
        fields: {
            wait_word_list: {
                type: "bool",
                id: 1
            },
            wait_word_pos: {
                type: "bool",
                id: 2
            },
            wait_layout: {
                type: "bool",
                id: 3
            }
        }
    },
    DebugLinkState: {
        fields: {
            layout: {
                type: "bytes",
                id: 1
            },
            pin: {
                type: "string",
                id: 2
            },
            matrix: {
                type: "string",
                id: 3
            },
            mnemonic_secret: {
                type: "bytes",
                id: 4
            },
            node: {
                type: "HDNodeType",
                id: 5
            },
            passphrase_protection: {
                type: "bool",
                id: 6
            },
            reset_word: {
                type: "string",
                id: 7
            },
            reset_entropy: {
                type: "bytes",
                id: 8
            },
            recovery_fake_word: {
                type: "string",
                id: 9
            },
            recovery_word_pos: {
                type: "uint32",
                id: 10
            },
            reset_word_pos: {
                type: "uint32",
                id: 11
            },
            mnemonic_type: {
                type: "BackupType",
                id: 12
            },
            layout_lines: {
                rule: "repeated",
                type: "string",
                id: 13
            }
        }
    },
    DebugLinkStop: {
        fields: {}
    },
    DebugLinkLog: {
        fields: {
            level: {
                type: "uint32",
                id: 1
            },
            bucket: {
                type: "string",
                id: 2
            },
            text: {
                type: "string",
                id: 3
            }
        }
    },
    DebugLinkMemoryRead: {
        fields: {
            address: {
                type: "uint32",
                id: 1
            },
            length: {
                type: "uint32",
                id: 2
            }
        }
    },
    DebugLinkMemory: {
        fields: {
            memory: {
                type: "bytes",
                id: 1
            }
        }
    },
    DebugLinkMemoryWrite: {
        fields: {
            address: {
                type: "uint32",
                id: 1
            },
            memory: {
                type: "bytes",
                id: 2
            },
            flash: {
                type: "bool",
                id: 3
            }
        }
    },
    DebugLinkFlashErase: {
        fields: {
            sector: {
                type: "uint32",
                id: 1
            }
        }
    },
    DebugLinkEraseSdCard: {
        fields: {
            format: {
                type: "bool",
                id: 1
            }
        }
    },
    DebugLinkWatchLayout: {
        fields: {
            watch: {
                type: "bool",
                id: 1
            }
        }
    },
    EmmcFixPermission: {
        fields: {}
    },
    EmmcPath: {
        fields: {
            exist: {
                rule: "required",
                type: "bool",
                id: 1
            },
            size: {
                rule: "required",
                type: "uint64",
                id: 2
            },
            year: {
                rule: "required",
                type: "uint32",
                id: 3
            },
            month: {
                rule: "required",
                type: "uint32",
                id: 4
            },
            day: {
                rule: "required",
                type: "uint32",
                id: 5
            },
            hour: {
                rule: "required",
                type: "uint32",
                id: 6
            },
            minute: {
                rule: "required",
                type: "uint32",
                id: 7
            },
            second: {
                rule: "required",
                type: "uint32",
                id: 8
            },
            readonly: {
                rule: "required",
                type: "bool",
                id: 9
            },
            hidden: {
                rule: "required",
                type: "bool",
                id: 10
            },
            system: {
                rule: "required",
                type: "bool",
                id: 11
            },
            archive: {
                rule: "required",
                type: "bool",
                id: 12
            },
            directory: {
                rule: "required",
                type: "bool",
                id: 13
            }
        }
    },
    EmmcPathInfo: {
        fields: {
            path: {
                rule: "required",
                type: "string",
                id: 1
            }
        }
    },
    EmmcFile: {
        fields: {
            path: {
                rule: "required",
                type: "string",
                id: 1
            },
            offset: {
                rule: "required",
                type: "uint32",
                id: 2
            },
            len: {
                rule: "required",
                type: "uint32",
                id: 3
            },
            data: {
                type: "bytes",
                id: 4
            },
            data_hash: {
                type: "uint32",
                id: 5
            },
            processed_byte: {
                type: "uint32",
                id: 6
            }
        }
    },
    EmmcFileRead: {
        fields: {
            file: {
                rule: "required",
                type: "EmmcFile",
                id: 1
            },
            ui_percentage: {
                type: "uint32",
                id: 2
            }
        }
    },
    EmmcFileWrite: {
        fields: {
            file: {
                rule: "required",
                type: "EmmcFile",
                id: 1
            },
            overwrite: {
                rule: "required",
                type: "bool",
                id: 2
            },
            append: {
                rule: "required",
                type: "bool",
                id: 3
            },
            ui_percentage: {
                type: "uint32",
                id: 4
            }
        }
    },
    EmmcFileDelete: {
        fields: {
            path: {
                rule: "required",
                type: "string",
                id: 1
            }
        }
    },
    EmmcDir: {
        fields: {
            path: {
                rule: "required",
                type: "string",
                id: 1
            },
            child_dirs: {
                type: "string",
                id: 2
            },
            child_files: {
                type: "string",
                id: 3
            }
        }
    },
    EmmcDirList: {
        fields: {
            path: {
                rule: "required",
                type: "string",
                id: 1
            }
        }
    },
    EmmcDirMake: {
        fields: {
            path: {
                rule: "required",
                type: "string",
                id: 1
            }
        }
    },
    EmmcDirRemove: {
        fields: {
            path: {
                rule: "required",
                type: "string",
                id: 1
            }
        }
    },
    EosGetPublicKey: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            show_display: {
                type: "bool",
                id: 2
            }
        }
    },
    EosPublicKey: {
        fields: {
            wif_public_key: {
                rule: "required",
                type: "string",
                id: 1
            },
            raw_public_key: {
                rule: "required",
                type: "bytes",
                id: 2
            }
        }
    },
    EosSignTx: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            chain_id: {
                type: "bytes",
                id: 2
            },
            header: {
                type: "EosTxHeader",
                id: 3
            },
            num_actions: {
                type: "uint32",
                id: 4
            }
        },
        nested: {
            EosTxHeader: {
                fields: {
                    expiration: {
                        rule: "required",
                        type: "uint32",
                        id: 1
                    },
                    ref_block_num: {
                        rule: "required",
                        type: "uint32",
                        id: 2
                    },
                    ref_block_prefix: {
                        rule: "required",
                        type: "uint32",
                        id: 3
                    },
                    max_net_usage_words: {
                        rule: "required",
                        type: "uint32",
                        id: 4
                    },
                    max_cpu_usage_ms: {
                        rule: "required",
                        type: "uint32",
                        id: 5
                    },
                    delay_sec: {
                        rule: "required",
                        type: "uint32",
                        id: 6
                    }
                }
            }
        }
    },
    EosTxActionRequest: {
        fields: {
            data_size: {
                type: "uint32",
                id: 1
            }
        }
    },
    EosTxActionAck: {
        fields: {
            common: {
                type: "EosActionCommon",
                id: 1
            },
            transfer: {
                type: "EosActionTransfer",
                id: 2
            },
            delegate: {
                type: "EosActionDelegate",
                id: 3
            },
            undelegate: {
                type: "EosActionUndelegate",
                id: 4
            },
            refund: {
                type: "EosActionRefund",
                id: 5
            },
            buy_ram: {
                type: "EosActionBuyRam",
                id: 6
            },
            buy_ram_bytes: {
                type: "EosActionBuyRamBytes",
                id: 7
            },
            sell_ram: {
                type: "EosActionSellRam",
                id: 8
            },
            vote_producer: {
                type: "EosActionVoteProducer",
                id: 9
            },
            update_auth: {
                type: "EosActionUpdateAuth",
                id: 10
            },
            delete_auth: {
                type: "EosActionDeleteAuth",
                id: 11
            },
            link_auth: {
                type: "EosActionLinkAuth",
                id: 12
            },
            unlink_auth: {
                type: "EosActionUnlinkAuth",
                id: 13
            },
            new_account: {
                type: "EosActionNewAccount",
                id: 14
            },
            unknown: {
                type: "EosActionUnknown",
                id: 15
            }
        },
        nested: {
            EosAsset: {
                fields: {
                    amount: {
                        type: "sint64",
                        id: 1
                    },
                    symbol: {
                        type: "uint64",
                        id: 2
                    }
                }
            },
            EosPermissionLevel: {
                fields: {
                    actor: {
                        type: "uint64",
                        id: 1
                    },
                    permission: {
                        type: "uint64",
                        id: 2
                    }
                }
            },
            EosAuthorizationKey: {
                fields: {
                    type: {
                        rule: "required",
                        type: "uint32",
                        id: 1
                    },
                    key: {
                        type: "bytes",
                        id: 2
                    },
                    address_n: {
                        rule: "repeated",
                        type: "uint32",
                        id: 3,
                        options: {
                            packed: false
                        }
                    },
                    weight: {
                        rule: "required",
                        type: "uint32",
                        id: 4
                    }
                }
            },
            EosAuthorizationAccount: {
                fields: {
                    account: {
                        type: "EosPermissionLevel",
                        id: 1
                    },
                    weight: {
                        type: "uint32",
                        id: 2
                    }
                }
            },
            EosAuthorizationWait: {
                fields: {
                    wait_sec: {
                        type: "uint32",
                        id: 1
                    },
                    weight: {
                        type: "uint32",
                        id: 2
                    }
                }
            },
            EosAuthorization: {
                fields: {
                    threshold: {
                        type: "uint32",
                        id: 1
                    },
                    keys: {
                        rule: "repeated",
                        type: "EosAuthorizationKey",
                        id: 2
                    },
                    accounts: {
                        rule: "repeated",
                        type: "EosAuthorizationAccount",
                        id: 3
                    },
                    waits: {
                        rule: "repeated",
                        type: "EosAuthorizationWait",
                        id: 4
                    }
                }
            },
            EosActionCommon: {
                fields: {
                    account: {
                        type: "uint64",
                        id: 1
                    },
                    name: {
                        type: "uint64",
                        id: 2
                    },
                    authorization: {
                        rule: "repeated",
                        type: "EosPermissionLevel",
                        id: 3
                    }
                }
            },
            EosActionTransfer: {
                fields: {
                    sender: {
                        type: "uint64",
                        id: 1
                    },
                    receiver: {
                        type: "uint64",
                        id: 2
                    },
                    quantity: {
                        type: "EosAsset",
                        id: 3
                    },
                    memo: {
                        type: "string",
                        id: 4
                    }
                }
            },
            EosActionDelegate: {
                fields: {
                    sender: {
                        type: "uint64",
                        id: 1
                    },
                    receiver: {
                        type: "uint64",
                        id: 2
                    },
                    net_quantity: {
                        type: "EosAsset",
                        id: 3
                    },
                    cpu_quantity: {
                        type: "EosAsset",
                        id: 4
                    },
                    transfer: {
                        type: "bool",
                        id: 5
                    }
                }
            },
            EosActionUndelegate: {
                fields: {
                    sender: {
                        type: "uint64",
                        id: 1
                    },
                    receiver: {
                        type: "uint64",
                        id: 2
                    },
                    net_quantity: {
                        type: "EosAsset",
                        id: 3
                    },
                    cpu_quantity: {
                        type: "EosAsset",
                        id: 4
                    }
                }
            },
            EosActionRefund: {
                fields: {
                    owner: {
                        type: "uint64",
                        id: 1
                    }
                }
            },
            EosActionBuyRam: {
                fields: {
                    payer: {
                        type: "uint64",
                        id: 1
                    },
                    receiver: {
                        type: "uint64",
                        id: 2
                    },
                    quantity: {
                        type: "EosAsset",
                        id: 3
                    }
                }
            },
            EosActionBuyRamBytes: {
                fields: {
                    payer: {
                        type: "uint64",
                        id: 1
                    },
                    receiver: {
                        type: "uint64",
                        id: 2
                    },
                    bytes: {
                        type: "uint32",
                        id: 3
                    }
                }
            },
            EosActionSellRam: {
                fields: {
                    account: {
                        type: "uint64",
                        id: 1
                    },
                    bytes: {
                        type: "uint64",
                        id: 2
                    }
                }
            },
            EosActionVoteProducer: {
                fields: {
                    voter: {
                        type: "uint64",
                        id: 1
                    },
                    proxy: {
                        type: "uint64",
                        id: 2
                    },
                    producers: {
                        rule: "repeated",
                        type: "uint64",
                        id: 3,
                        options: {
                            packed: false
                        }
                    }
                }
            },
            EosActionUpdateAuth: {
                fields: {
                    account: {
                        type: "uint64",
                        id: 1
                    },
                    permission: {
                        type: "uint64",
                        id: 2
                    },
                    parent: {
                        type: "uint64",
                        id: 3
                    },
                    auth: {
                        type: "EosAuthorization",
                        id: 4
                    }
                }
            },
            EosActionDeleteAuth: {
                fields: {
                    account: {
                        type: "uint64",
                        id: 1
                    },
                    permission: {
                        type: "uint64",
                        id: 2
                    }
                }
            },
            EosActionLinkAuth: {
                fields: {
                    account: {
                        type: "uint64",
                        id: 1
                    },
                    code: {
                        type: "uint64",
                        id: 2
                    },
                    type: {
                        type: "uint64",
                        id: 3
                    },
                    requirement: {
                        type: "uint64",
                        id: 4
                    }
                }
            },
            EosActionUnlinkAuth: {
                fields: {
                    account: {
                        type: "uint64",
                        id: 1
                    },
                    code: {
                        type: "uint64",
                        id: 2
                    },
                    type: {
                        type: "uint64",
                        id: 3
                    }
                }
            },
            EosActionNewAccount: {
                fields: {
                    creator: {
                        type: "uint64",
                        id: 1
                    },
                    name: {
                        type: "uint64",
                        id: 2
                    },
                    owner: {
                        type: "EosAuthorization",
                        id: 3
                    },
                    active: {
                        type: "EosAuthorization",
                        id: 4
                    }
                }
            },
            EosActionUnknown: {
                fields: {
                    data_size: {
                        rule: "required",
                        type: "uint32",
                        id: 1
                    },
                    data_chunk: {
                        type: "bytes",
                        id: 2
                    }
                }
            }
        }
    },
    EosSignedTx: {
        fields: {
            signature: {
                rule: "required",
                type: "string",
                id: 1
            }
        }
    },
    EthereumSignTypedData: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            primary_type: {
                rule: "required",
                type: "string",
                id: 2
            },
            metamask_v4_compat: {
                type: "bool",
                id: 3,
                options: {
                    "default": true
                }
            },
            chain_id: {
                type: "uint64",
                id: 4
            }
        }
    },
    EthereumTypedDataStructRequest: {
        fields: {
            name: {
                rule: "required",
                type: "string",
                id: 1
            }
        }
    },
    EthereumTypedDataStructAck: {
        fields: {
            members: {
                rule: "repeated",
                type: "EthereumStructMember",
                id: 1
            }
        },
        nested: {
            EthereumStructMember: {
                fields: {
                    type: {
                        rule: "required",
                        type: "EthereumFieldType",
                        id: 1
                    },
                    name: {
                        rule: "required",
                        type: "string",
                        id: 2
                    }
                }
            },
            EthereumFieldType: {
                fields: {
                    data_type: {
                        rule: "required",
                        type: "EthereumDataType",
                        id: 1
                    },
                    size: {
                        type: "uint32",
                        id: 2
                    },
                    entry_type: {
                        type: "EthereumFieldType",
                        id: 3
                    },
                    struct_name: {
                        type: "string",
                        id: 4
                    }
                }
            },
            EthereumDataType: {
                values: {
                    UINT: 1,
                    INT: 2,
                    BYTES: 3,
                    STRING: 4,
                    BOOL: 5,
                    ADDRESS: 6,
                    ARRAY: 7,
                    STRUCT: 8
                }
            }
        }
    },
    EthereumTypedDataValueRequest: {
        fields: {
            member_path: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            }
        }
    },
    EthereumTypedDataValueAck: {
        fields: {
            value: {
                rule: "required",
                type: "bytes",
                id: 1
            }
        }
    },
    EthereumGetPublicKey: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            show_display: {
                type: "bool",
                id: 2
            },
            chain_id: {
                type: "uint64",
                id: 3
            }
        }
    },
    EthereumPublicKey: {
        fields: {
            node: {
                rule: "required",
                type: "HDNodeType",
                id: 1
            },
            xpub: {
                rule: "required",
                type: "string",
                id: 2
            }
        }
    },
    EthereumGetAddress: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            show_display: {
                type: "bool",
                id: 2
            },
            chain_id: {
                type: "uint64",
                id: 3
            }
        }
    },
    EthereumAddress: {
        fields: {
            _old_address: {
                type: "bytes",
                id: 1,
                options: {
                    deprecated: true
                }
            },
            address: {
                type: "string",
                id: 2
            }
        }
    },
    EthereumSignTx: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            nonce: {
                type: "bytes",
                id: 2,
                options: {
                    "default": ""
                }
            },
            gas_price: {
                rule: "required",
                type: "bytes",
                id: 3
            },
            gas_limit: {
                rule: "required",
                type: "bytes",
                id: 4
            },
            to: {
                type: "string",
                id: 11,
                options: {
                    "default": ""
                }
            },
            value: {
                type: "bytes",
                id: 6,
                options: {
                    "default": ""
                }
            },
            data_initial_chunk: {
                type: "bytes",
                id: 7,
                options: {
                    "default": ""
                }
            },
            data_length: {
                type: "uint32",
                id: 8,
                options: {
                    "default": 0
                }
            },
            chain_id: {
                rule: "required",
                type: "uint64",
                id: 9
            },
            tx_type: {
                type: "uint32",
                id: 10
            }
        }
    },
    EthereumSignTxEIP1559: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            nonce: {
                rule: "required",
                type: "bytes",
                id: 2
            },
            max_gas_fee: {
                rule: "required",
                type: "bytes",
                id: 3
            },
            max_priority_fee: {
                rule: "required",
                type: "bytes",
                id: 4
            },
            gas_limit: {
                rule: "required",
                type: "bytes",
                id: 5
            },
            to: {
                type: "string",
                id: 6,
                options: {
                    "default": ""
                }
            },
            value: {
                rule: "required",
                type: "bytes",
                id: 7
            },
            data_initial_chunk: {
                type: "bytes",
                id: 8,
                options: {
                    "default": ""
                }
            },
            data_length: {
                rule: "required",
                type: "uint32",
                id: 9
            },
            chain_id: {
                rule: "required",
                type: "uint64",
                id: 10
            },
            access_list: {
                rule: "repeated",
                type: "EthereumAccessList",
                id: 11
            }
        },
        nested: {
            EthereumAccessList: {
                fields: {
                    address: {
                        rule: "required",
                        type: "string",
                        id: 1
                    },
                    storage_keys: {
                        rule: "repeated",
                        type: "bytes",
                        id: 2
                    }
                }
            }
        }
    },
    EthereumTxRequest: {
        fields: {
            data_length: {
                type: "uint32",
                id: 1
            },
            signature_v: {
                type: "uint32",
                id: 2
            },
            signature_r: {
                type: "bytes",
                id: 3
            },
            signature_s: {
                type: "bytes",
                id: 4
            }
        }
    },
    EthereumTxAck: {
        fields: {
            data_chunk: {
                rule: "required",
                type: "bytes",
                id: 1
            }
        }
    },
    EthereumSignMessage: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            message: {
                rule: "required",
                type: "bytes",
                id: 2
            },
            chain_id: {
                type: "uint64",
                id: 3
            }
        }
    },
    EthereumMessageSignature: {
        fields: {
            signature: {
                rule: "required",
                type: "bytes",
                id: 2
            },
            address: {
                rule: "required",
                type: "string",
                id: 3
            }
        }
    },
    EthereumVerifyMessage: {
        fields: {
            signature: {
                rule: "required",
                type: "bytes",
                id: 2
            },
            message: {
                rule: "required",
                type: "bytes",
                id: 3
            },
            address: {
                rule: "required",
                type: "string",
                id: 4
            },
            chain_id: {
                type: "uint64",
                id: 5
            }
        }
    },
    EthereumSignMessageEIP712: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            domain_hash: {
                type: "bytes",
                id: 2
            },
            message_hash: {
                type: "bytes",
                id: 3
            }
        }
    },
    EthereumSignTypedHash: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            domain_separator_hash: {
                rule: "required",
                type: "bytes",
                id: 2
            },
            message_hash: {
                type: "bytes",
                id: 3
            },
            chain_id: {
                type: "uint64",
                id: 4
            }
        }
    },
    EthereumTypedDataSignature: {
        fields: {
            signature: {
                rule: "required",
                type: "bytes",
                id: 1
            },
            address: {
                rule: "required",
                type: "string",
                id: 2
            }
        }
    },
    FilecoinGetAddress: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            show_display: {
                type: "bool",
                id: 2
            },
            testnet: {
                type: "bool",
                id: 3
            }
        }
    },
    FilecoinAddress: {
        fields: {
            address: {
                type: "string",
                id: 1
            }
        }
    },
    FilecoinSignTx: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            raw_tx: {
                rule: "required",
                type: "bytes",
                id: 2
            },
            testnet: {
                type: "bool",
                id: 3
            }
        }
    },
    FilecoinSignedTx: {
        fields: {
            signature: {
                rule: "required",
                type: "bytes",
                id: 1
            }
        }
    },
    KaspaGetAddress: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            show_display: {
                type: "bool",
                id: 2
            },
            prefix: {
                type: "string",
                id: 3,
                options: {
                    "default": "kaspa"
                }
            },
            scheme: {
                type: "string",
                id: 4,
                options: {
                    "default": "schnorr"
                }
            }
        }
    },
    KaspaAddress: {
        fields: {
            address: {
                rule: "required",
                type: "string",
                id: 1
            }
        }
    },
    KaspaSignTx: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            raw_message: {
                rule: "required",
                type: "bytes",
                id: 2
            },
            scheme: {
                type: "string",
                id: 3,
                options: {
                    "default": "schnorr"
                }
            },
            prefix: {
                type: "string",
                id: 4,
                options: {
                    "default": "kaspa"
                }
            },
            input_count: {
                type: "uint32",
                id: 5,
                options: {
                    "default": 1
                }
            }
        }
    },
    KaspaTxInputRequest: {
        fields: {
            request_index: {
                rule: "required",
                type: "uint32",
                id: 1
            },
            signature: {
                type: "bytes",
                id: 2
            }
        }
    },
    KaspaTxInputAck: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            raw_message: {
                rule: "required",
                type: "bytes",
                id: 2
            }
        }
    },
    KaspaSignedTx: {
        fields: {
            signature: {
                rule: "required",
                type: "bytes",
                id: 2
            }
        }
    },
    BackupType: {
        values: {
            Bip39: 0,
            Slip39_Basic: 1,
            Slip39_Advanced: 2
        }
    },
    SafetyCheckLevel: {
        values: {
            Strict: 0,
            PromptAlways: 1,
            PromptTemporarily: 2
        }
    },
    Initialize: {
        fields: {
            session_id: {
                type: "bytes",
                id: 1
            },
            _skip_passphrase: {
                type: "bool",
                id: 2,
                options: {
                    deprecated: true
                }
            },
            derive_cardano: {
                type: "bool",
                id: 3
            }
        }
    },
    GetFeatures: {
        fields: {}
    },
    Features: {
        fields: {
            vendor: {
                type: "string",
                id: 1
            },
            major_version: {
                rule: "required",
                type: "uint32",
                id: 2
            },
            minor_version: {
                rule: "required",
                type: "uint32",
                id: 3
            },
            patch_version: {
                rule: "required",
                type: "uint32",
                id: 4
            },
            bootloader_mode: {
                type: "bool",
                id: 5
            },
            device_id: {
                type: "string",
                id: 6
            },
            pin_protection: {
                type: "bool",
                id: 7
            },
            passphrase_protection: {
                type: "bool",
                id: 8
            },
            language: {
                type: "string",
                id: 9
            },
            label: {
                type: "string",
                id: 10
            },
            initialized: {
                type: "bool",
                id: 12
            },
            revision: {
                type: "bytes",
                id: 13
            },
            bootloader_hash: {
                type: "bytes",
                id: 14
            },
            imported: {
                type: "bool",
                id: 15
            },
            unlocked: {
                type: "bool",
                id: 16
            },
            _passphrase_cached: {
                type: "bool",
                id: 17,
                options: {
                    deprecated: true
                }
            },
            firmware_present: {
                type: "bool",
                id: 18
            },
            needs_backup: {
                type: "bool",
                id: 19
            },
            flags: {
                type: "uint32",
                id: 20
            },
            model: {
                type: "string",
                id: 21
            },
            fw_major: {
                type: "uint32",
                id: 22
            },
            fw_minor: {
                type: "uint32",
                id: 23
            },
            fw_patch: {
                type: "uint32",
                id: 24
            },
            fw_vendor: {
                type: "string",
                id: 25
            },
            fw_vendor_keys: {
                type: "bytes",
                id: 26
            },
            unfinished_backup: {
                type: "bool",
                id: 27
            },
            no_backup: {
                type: "bool",
                id: 28
            },
            recovery_mode: {
                type: "bool",
                id: 29
            },
            capabilities: {
                rule: "repeated",
                type: "Capability",
                id: 30,
                options: {
                    packed: false
                }
            },
            backup_type: {
                type: "BackupType",
                id: 31
            },
            sd_card_present: {
                type: "bool",
                id: 32
            },
            sd_protection: {
                type: "bool",
                id: 33
            },
            wipe_code_protection: {
                type: "bool",
                id: 34
            },
            session_id: {
                type: "bytes",
                id: 35
            },
            passphrase_always_on_device: {
                type: "bool",
                id: 36
            },
            safety_checks: {
                type: "SafetyCheckLevel",
                id: 37
            },
            auto_lock_delay_ms: {
                type: "uint32",
                id: 38
            },
            display_rotation: {
                type: "uint32",
                id: 39
            },
            experimental_features: {
                type: "bool",
                id: 40
            },
            offset: {
                type: "uint32",
                id: 500
            },
            ble_name: {
                type: "string",
                id: 501
            },
            ble_ver: {
                type: "string",
                id: 502
            },
            ble_enable: {
                type: "bool",
                id: 503
            },
            se_enable: {
                type: "bool",
                id: 504
            },
            se_ver: {
                type: "string",
                id: 506
            },
            backup_only: {
                type: "bool",
                id: 507
            },
            onekey_version: {
                type: "string",
                id: 508
            },
            onekey_serial: {
                type: "string",
                id: 509
            },
            bootloader_version: {
                type: "string",
                id: 510
            },
            serial_no: {
                type: "string",
                id: 511
            },
            spi_flash: {
                type: "string",
                id: 512
            },
            initstates: {
                type: "uint32",
                id: 513
            },
            NFT_voucher: {
                type: "bytes",
                id: 514
            },
            cpu_info: {
                type: "string",
                id: 515
            },
            pre_firmware: {
                type: "string",
                id: 516
            },
            coin_switch: {
                type: "uint32",
                id: 517
            },
            build_id: {
                type: "string",
                id: 518
            },
            battery_level: {
                type: "uint32",
                id: 520
            }
        },
        nested: {
            Capability: {
                options: {
                    "(has_bitcoin_only_values)": true
                },
                values: {
                    Capability_Bitcoin: 1,
                    Capability_Bitcoin_like: 2,
                    Capability_Binance: 3,
                    Capability_Cardano: 4,
                    Capability_Crypto: 5,
                    Capability_EOS: 6,
                    Capability_Ethereum: 7,
                    Capability_Lisk: 8,
                    Capability_Monero: 9,
                    Capability_NEM: 10,
                    Capability_Ripple: 11,
                    Capability_Stellar: 12,
                    Capability_Tezos: 13,
                    Capability_U2F: 14,
                    Capability_Shamir: 15,
                    Capability_ShamirGroups: 16,
                    Capability_PassphraseEntry: 17
                }
            }
        }
    },
    LockDevice: {
        fields: {}
    },
    EndSession: {
        fields: {}
    },
    ApplySettings: {
        fields: {
            language: {
                type: "string",
                id: 1
            },
            label: {
                type: "string",
                id: 2
            },
            use_passphrase: {
                type: "bool",
                id: 3
            },
            homescreen: {
                type: "bytes",
                id: 4
            },
            _passphrase_source: {
                type: "uint32",
                id: 5,
                options: {
                    deprecated: true
                }
            },
            auto_lock_delay_ms: {
                type: "uint32",
                id: 6
            },
            display_rotation: {
                type: "uint32",
                id: 7
            },
            passphrase_always_on_device: {
                type: "bool",
                id: 8
            },
            safety_checks: {
                type: "SafetyCheckLevel",
                id: 9
            },
            experimental_features: {
                type: "bool",
                id: 10
            },
            use_ble: {
                type: "bool",
                id: 100
            },
            use_se: {
                type: "bool",
                id: 101
            },
            is_bixinapp: {
                type: "bool",
                id: 102
            },
            fastpay_pin: {
                type: "bool",
                id: 103
            },
            fastpay_confirm: {
                type: "bool",
                id: 104
            },
            fastpay_money_limit: {
                type: "uint64",
                id: 105
            },
            fastpay_times: {
                type: "uint32",
                id: 106
            }
        },
        nested: {
            ExportType: {
                values: {
                    SeedEncExportType_NO: 0,
                    SeedEncExportType_YES: 1,
                    MnemonicPlainExportType_YES: 2
                }
            }
        }
    },
    ApplyFlags: {
        fields: {
            flags: {
                rule: "required",
                type: "uint32",
                id: 1
            }
        }
    },
    ChangePin: {
        fields: {
            remove: {
                type: "bool",
                id: 1
            }
        }
    },
    ChangeWipeCode: {
        fields: {
            remove: {
                type: "bool",
                id: 1
            }
        }
    },
    SdProtect: {
        fields: {
            operation: {
                rule: "required",
                type: "SdProtectOperationType",
                id: 1
            }
        },
        nested: {
            SdProtectOperationType: {
                values: {
                    DISABLE: 0,
                    ENABLE: 1,
                    REFRESH: 2
                }
            }
        }
    },
    Ping: {
        fields: {
            message: {
                type: "string",
                id: 1,
                options: {
                    "default": ""
                }
            },
            button_protection: {
                type: "bool",
                id: 2
            }
        }
    },
    Cancel: {
        fields: {}
    },
    GetEntropy: {
        fields: {
            size: {
                rule: "required",
                type: "uint32",
                id: 1
            }
        }
    },
    Entropy: {
        fields: {
            entropy: {
                rule: "required",
                type: "bytes",
                id: 1
            }
        }
    },
    WipeDevice: {
        fields: {}
    },
    LoadDevice: {
        fields: {
            mnemonics: {
                rule: "repeated",
                type: "string",
                id: 1
            },
            pin: {
                type: "string",
                id: 3
            },
            passphrase_protection: {
                type: "bool",
                id: 4
            },
            language: {
                type: "string",
                id: 5,
                options: {
                    "default": "en-US"
                }
            },
            label: {
                type: "string",
                id: 6
            },
            skip_checksum: {
                type: "bool",
                id: 7
            },
            u2f_counter: {
                type: "uint32",
                id: 8
            },
            needs_backup: {
                type: "bool",
                id: 9
            },
            no_backup: {
                type: "bool",
                id: 10
            }
        }
    },
    ResetDevice: {
        fields: {
            display_random: {
                type: "bool",
                id: 1
            },
            strength: {
                type: "uint32",
                id: 2,
                options: {
                    "default": 256
                }
            },
            passphrase_protection: {
                type: "bool",
                id: 3
            },
            pin_protection: {
                type: "bool",
                id: 4
            },
            language: {
                type: "string",
                id: 5,
                options: {
                    "default": "en-US"
                }
            },
            label: {
                type: "string",
                id: 6
            },
            u2f_counter: {
                type: "uint32",
                id: 7
            },
            skip_backup: {
                type: "bool",
                id: 8
            },
            no_backup: {
                type: "bool",
                id: 9
            },
            backup_type: {
                type: "BackupType",
                id: 10,
                options: {
                    "default": "Bip39"
                }
            }
        }
    },
    BackupDevice: {
        fields: {}
    },
    EntropyRequest: {
        fields: {}
    },
    EntropyAck: {
        fields: {
            entropy: {
                rule: "required",
                type: "bytes",
                id: 1
            }
        }
    },
    RecoveryDevice: {
        fields: {
            word_count: {
                type: "uint32",
                id: 1
            },
            passphrase_protection: {
                type: "bool",
                id: 2
            },
            pin_protection: {
                type: "bool",
                id: 3
            },
            language: {
                type: "string",
                id: 4
            },
            label: {
                type: "string",
                id: 5
            },
            enforce_wordlist: {
                type: "bool",
                id: 6
            },
            type: {
                type: "RecoveryDeviceType",
                id: 8
            },
            u2f_counter: {
                type: "uint32",
                id: 9
            },
            dry_run: {
                type: "bool",
                id: 10
            }
        },
        nested: {
            RecoveryDeviceType: {
                values: {
                    RecoveryDeviceType_ScrambledWords: 0,
                    RecoveryDeviceType_Matrix: 1
                }
            }
        }
    },
    WordRequest: {
        fields: {
            type: {
                rule: "required",
                type: "WordRequestType",
                id: 1
            }
        },
        nested: {
            WordRequestType: {
                values: {
                    WordRequestType_Plain: 0,
                    WordRequestType_Matrix9: 1,
                    WordRequestType_Matrix6: 2
                }
            }
        }
    },
    WordAck: {
        fields: {
            word: {
                rule: "required",
                type: "string",
                id: 1
            }
        }
    },
    SetU2FCounter: {
        fields: {
            u2f_counter: {
                rule: "required",
                type: "uint32",
                id: 1
            }
        }
    },
    GetNextU2FCounter: {
        fields: {}
    },
    NextU2FCounter: {
        fields: {
            u2f_counter: {
                rule: "required",
                type: "uint32",
                id: 1
            }
        }
    },
    DoPreauthorized: {
        fields: {}
    },
    PreauthorizedRequest: {
        fields: {}
    },
    CancelAuthorization: {
        fields: {}
    },
    BixinSeedOperate: {
        fields: {
            type: {
                rule: "required",
                type: "SeedRequestType",
                id: 1
            },
            seed_importData: {
                type: "bytes",
                id: 2
            }
        },
        nested: {
            SeedRequestType: {
                values: {
                    SeedRequestType_Gen: 0,
                    SeedRequestType_EncExport: 1,
                    SeedRequestType_EncImport: 2
                }
            }
        }
    },
    BixinMessageSE: {
        fields: {
            inputmessage: {
                rule: "required",
                type: "bytes",
                id: 1
            }
        }
    },
    BixinOutMessageSE: {
        fields: {
            outmessage: {
                type: "bytes",
                id: 1
            }
        }
    },
    DeviceBackToBoot: {
        fields: {}
    },
    BixinBackupRequest: {
        fields: {}
    },
    BixinBackupAck: {
        fields: {
            data: {
                rule: "required",
                type: "bytes",
                id: 1
            }
        }
    },
    BixinRestoreRequest: {
        fields: {
            data: {
                rule: "required",
                type: "bytes",
                id: 1
            },
            language: {
                type: "string",
                id: 2
            },
            label: {
                type: "string",
                id: 3
            },
            passphrase_protection: {
                type: "bool",
                id: 4
            }
        }
    },
    BixinRestoreAck: {
        fields: {
            data: {
                rule: "required",
                type: "bytes",
                id: 1
            }
        }
    },
    BixinVerifyDeviceRequest: {
        fields: {
            data: {
                rule: "required",
                type: "bytes",
                id: 1
            }
        }
    },
    BixinVerifyDeviceAck: {
        fields: {
            cert: {
                rule: "required",
                type: "bytes",
                id: 1
            },
            signature: {
                rule: "required",
                type: "bytes",
                id: 2
            }
        }
    },
    BixinWhiteListRequest: {
        fields: {
            type: {
                rule: "required",
                type: "WL_OperationType",
                id: 1
            },
            addr_in: {
                type: "string",
                id: 2
            }
        },
        nested: {
            WL_OperationType: {
                values: {
                    WL_OperationType_Add: 0,
                    WL_OperationType_Delete: 1,
                    WL_OperationType_Inquire: 2
                }
            }
        }
    },
    BixinWhiteListAck: {
        fields: {
            address: {
                rule: "repeated",
                type: "string",
                id: 1
            }
        }
    },
    BixinLoadDevice: {
        fields: {
            mnemonics: {
                rule: "required",
                type: "string",
                id: 1
            },
            language: {
                type: "string",
                id: 5,
                options: {
                    "default": "en-US"
                }
            },
            label: {
                type: "string",
                id: 6
            },
            skip_checksum: {
                type: "bool",
                id: 7
            }
        }
    },
    BixinBackupDevice: {
        fields: {}
    },
    BixinBackupDeviceAck: {
        fields: {
            mnemonics: {
                rule: "required",
                type: "string",
                id: 1
            }
        }
    },
    DeviceInfoSettings: {
        fields: {
            serial_no: {
                type: "string",
                id: 1
            },
            cpu_info: {
                type: "string",
                id: 2
            },
            pre_firmware: {
                type: "string",
                id: 3
            }
        }
    },
    GetDeviceInfo: {
        fields: {}
    },
    DeviceInfo: {
        fields: {
            serial_no: {
                type: "string",
                id: 1
            },
            spiFlash_info: {
                type: "string",
                id: 2
            },
            SE_info: {
                type: "string",
                id: 3
            },
            NFT_voucher: {
                type: "bytes",
                id: 4
            },
            cpu_info: {
                type: "string",
                id: 5
            },
            pre_firmware: {
                type: "string",
                id: 6
            }
        }
    },
    ReadSEPublicKey: {
        fields: {}
    },
    SEPublicKey: {
        fields: {
            public_key: {
                rule: "required",
                type: "bytes",
                id: 1
            }
        }
    },
    WriteSEPublicCert: {
        fields: {
            public_cert: {
                rule: "required",
                type: "bytes",
                id: 1
            }
        }
    },
    ReadSEPublicCert: {
        fields: {}
    },
    SEPublicCert: {
        fields: {
            public_cert: {
                rule: "required",
                type: "bytes",
                id: 1
            }
        }
    },
    SpiFlashWrite: {
        fields: {
            address: {
                rule: "required",
                type: "uint32",
                id: 1
            },
            data: {
                rule: "required",
                type: "bytes",
                id: 2
            }
        }
    },
    SpiFlashRead: {
        fields: {
            address: {
                rule: "required",
                type: "uint32",
                id: 1
            },
            len: {
                rule: "required",
                type: "uint32",
                id: 2
            }
        }
    },
    SpiFlashData: {
        fields: {
            data: {
                rule: "required",
                type: "bytes",
                id: 1
            }
        }
    },
    SESignMessage: {
        fields: {
            message: {
                rule: "required",
                type: "bytes",
                id: 1
            }
        }
    },
    SEMessageSignature: {
        fields: {
            signature: {
                rule: "required",
                type: "bytes",
                id: 1
            }
        }
    },
    ResourceUpload: {
        fields: {
            extension: {
                rule: "required",
                type: "string",
                id: 1
            },
            data_length: {
                rule: "required",
                type: "uint32",
                id: 2
            },
            res_type: {
                rule: "required",
                type: "ResourceType",
                id: 3
            },
            nft_meta_data: {
                type: "bytes",
                id: 4
            },
            zoom_data_length: {
                rule: "required",
                type: "uint32",
                id: 5
            },
            file_name_no_ext: {
                type: "string",
                id: 6
            }
        },
        nested: {
            ResourceType: {
                values: {
                    WallPaper: 0,
                    Nft: 1
                }
            }
        }
    },
    ZoomRequest: {
        fields: {
            offset: {
                type: "uint32",
                id: 1
            },
            data_length: {
                rule: "required",
                type: "uint32",
                id: 2
            }
        }
    },
    ResourceRequest: {
        fields: {
            offset: {
                type: "uint32",
                id: 1
            },
            data_length: {
                rule: "required",
                type: "uint32",
                id: 2
            }
        }
    },
    ResourceAck: {
        fields: {
            data_chunk: {
                rule: "required",
                type: "bytes",
                id: 1
            },
            hash: {
                type: "bytes",
                id: 2
            }
        }
    },
    ResourceUpdate: {
        fields: {
            file_name: {
                rule: "required",
                type: "string",
                id: 1
            },
            data_length: {
                rule: "required",
                type: "uint32",
                id: 2
            },
            initial_data_chunk: {
                rule: "required",
                type: "bytes",
                id: 3
            },
            hash: {
                type: "bytes",
                id: 4
            }
        }
    },
    NFTWriteInfo: {
        fields: {
            index: {
                rule: "required",
                type: "uint32",
                id: 1
            },
            width: {
                rule: "required",
                type: "uint32",
                id: 2
            },
            height: {
                rule: "required",
                type: "uint32",
                id: 3
            },
            name_zh: {
                type: "string",
                id: 4
            },
            name_en: {
                type: "string",
                id: 5
            }
        }
    },
    NFTWriteData: {
        fields: {
            index: {
                rule: "required",
                type: "uint32",
                id: 1
            },
            data: {
                rule: "required",
                type: "bytes",
                id: 2
            },
            offset: {
                rule: "required",
                type: "uint32",
                id: 3
            }
        }
    },
    RebootToBootloader: {
        fields: {}
    },
    RebootToBoardloader: {
        fields: {}
    },
    ListResDir: {
        fields: {
            path: {
                rule: "required",
                type: "string",
                id: 1
            }
        }
    },
    FileInfoList: {
        fields: {
            files: {
                rule: "repeated",
                type: "FileInfo",
                id: 1
            }
        },
        nested: {
            FileInfo: {
                fields: {
                    name: {
                        rule: "required",
                        type: "string",
                        id: 1
                    },
                    size: {
                        rule: "required",
                        type: "uint64",
                        id: 2
                    }
                }
            }
        }
    },
    DeviceEraseSector: {
        fields: {
            sector: {
                rule: "required",
                type: "uint32",
                id: 1
            }
        }
    },
    MoneroTransactionSourceEntry: {
        fields: {
            outputs: {
                rule: "repeated",
                type: "MoneroOutputEntry",
                id: 1
            },
            real_output: {
                type: "uint64",
                id: 2
            },
            real_out_tx_key: {
                type: "bytes",
                id: 3
            },
            real_out_additional_tx_keys: {
                rule: "repeated",
                type: "bytes",
                id: 4
            },
            real_output_in_tx_index: {
                type: "uint64",
                id: 5
            },
            amount: {
                type: "uint64",
                id: 6
            },
            rct: {
                type: "bool",
                id: 7
            },
            mask: {
                type: "bytes",
                id: 8
            },
            multisig_kLRki: {
                type: "MoneroMultisigKLRki",
                id: 9
            },
            subaddr_minor: {
                type: "uint32",
                id: 10
            }
        },
        nested: {
            MoneroOutputEntry: {
                fields: {
                    idx: {
                        type: "uint64",
                        id: 1
                    },
                    key: {
                        type: "MoneroRctKeyPublic",
                        id: 2
                    }
                },
                nested: {
                    MoneroRctKeyPublic: {
                        fields: {
                            dest: {
                                type: "bytes",
                                id: 1
                            },
                            commitment: {
                                type: "bytes",
                                id: 2
                            }
                        }
                    }
                }
            },
            MoneroMultisigKLRki: {
                fields: {
                    K: {
                        type: "bytes",
                        id: 1
                    },
                    L: {
                        type: "bytes",
                        id: 2
                    },
                    R: {
                        type: "bytes",
                        id: 3
                    },
                    ki: {
                        type: "bytes",
                        id: 4
                    }
                }
            }
        }
    },
    MoneroTransactionDestinationEntry: {
        fields: {
            amount: {
                type: "uint64",
                id: 1
            },
            addr: {
                type: "MoneroAccountPublicAddress",
                id: 2
            },
            is_subaddress: {
                type: "bool",
                id: 3
            },
            original: {
                type: "bytes",
                id: 4
            },
            is_integrated: {
                type: "bool",
                id: 5
            }
        },
        nested: {
            MoneroAccountPublicAddress: {
                fields: {
                    spend_public_key: {
                        type: "bytes",
                        id: 1
                    },
                    view_public_key: {
                        type: "bytes",
                        id: 2
                    }
                }
            }
        }
    },
    MoneroTransactionRsigData: {
        fields: {
            rsig_type: {
                type: "uint32",
                id: 1
            },
            offload_type: {
                type: "uint32",
                id: 2
            },
            grouping: {
                rule: "repeated",
                type: "uint64",
                id: 3,
                options: {
                    packed: false
                }
            },
            mask: {
                type: "bytes",
                id: 4
            },
            rsig: {
                type: "bytes",
                id: 5
            },
            rsig_parts: {
                rule: "repeated",
                type: "bytes",
                id: 6
            },
            bp_version: {
                type: "uint32",
                id: 7
            }
        }
    },
    MoneroGetAddress: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            show_display: {
                type: "bool",
                id: 2
            },
            network_type: {
                type: "uint32",
                id: 3
            },
            account: {
                type: "uint32",
                id: 4
            },
            minor: {
                type: "uint32",
                id: 5
            },
            payment_id: {
                type: "bytes",
                id: 6
            }
        }
    },
    MoneroAddress: {
        fields: {
            address: {
                type: "bytes",
                id: 1
            }
        }
    },
    MoneroGetWatchKey: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            network_type: {
                type: "uint32",
                id: 2
            }
        }
    },
    MoneroWatchKey: {
        fields: {
            watch_key: {
                type: "bytes",
                id: 1
            },
            address: {
                type: "bytes",
                id: 2
            }
        }
    },
    MoneroTransactionInitRequest: {
        fields: {
            version: {
                type: "uint32",
                id: 1
            },
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 2,
                options: {
                    packed: false
                }
            },
            network_type: {
                type: "uint32",
                id: 3
            },
            tsx_data: {
                type: "MoneroTransactionData",
                id: 4
            }
        },
        nested: {
            MoneroTransactionData: {
                fields: {
                    version: {
                        type: "uint32",
                        id: 1
                    },
                    payment_id: {
                        type: "bytes",
                        id: 2
                    },
                    unlock_time: {
                        type: "uint64",
                        id: 3
                    },
                    outputs: {
                        rule: "repeated",
                        type: "MoneroTransactionDestinationEntry",
                        id: 4
                    },
                    change_dts: {
                        type: "MoneroTransactionDestinationEntry",
                        id: 5
                    },
                    num_inputs: {
                        type: "uint32",
                        id: 6
                    },
                    mixin: {
                        type: "uint32",
                        id: 7
                    },
                    fee: {
                        type: "uint64",
                        id: 8
                    },
                    account: {
                        type: "uint32",
                        id: 9
                    },
                    minor_indices: {
                        rule: "repeated",
                        type: "uint32",
                        id: 10,
                        options: {
                            packed: false
                        }
                    },
                    rsig_data: {
                        type: "MoneroTransactionRsigData",
                        id: 11
                    },
                    integrated_indices: {
                        rule: "repeated",
                        type: "uint32",
                        id: 12,
                        options: {
                            packed: false
                        }
                    },
                    client_version: {
                        type: "uint32",
                        id: 13
                    },
                    hard_fork: {
                        type: "uint32",
                        id: 14
                    },
                    monero_version: {
                        type: "bytes",
                        id: 15
                    }
                }
            }
        }
    },
    MoneroTransactionInitAck: {
        fields: {
            hmacs: {
                rule: "repeated",
                type: "bytes",
                id: 1
            },
            rsig_data: {
                type: "MoneroTransactionRsigData",
                id: 2
            }
        }
    },
    MoneroTransactionSetInputRequest: {
        fields: {
            src_entr: {
                type: "MoneroTransactionSourceEntry",
                id: 1
            }
        }
    },
    MoneroTransactionSetInputAck: {
        fields: {
            vini: {
                type: "bytes",
                id: 1
            },
            vini_hmac: {
                type: "bytes",
                id: 2
            },
            pseudo_out: {
                type: "bytes",
                id: 3
            },
            pseudo_out_hmac: {
                type: "bytes",
                id: 4
            },
            pseudo_out_alpha: {
                type: "bytes",
                id: 5
            },
            spend_key: {
                type: "bytes",
                id: 6
            }
        }
    },
    MoneroTransactionInputsPermutationRequest: {
        fields: {
            perm: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            }
        }
    },
    MoneroTransactionInputsPermutationAck: {
        fields: {}
    },
    MoneroTransactionInputViniRequest: {
        fields: {
            src_entr: {
                type: "MoneroTransactionSourceEntry",
                id: 1
            },
            vini: {
                type: "bytes",
                id: 2
            },
            vini_hmac: {
                type: "bytes",
                id: 3
            },
            pseudo_out: {
                type: "bytes",
                id: 4
            },
            pseudo_out_hmac: {
                type: "bytes",
                id: 5
            },
            orig_idx: {
                type: "uint32",
                id: 6
            }
        }
    },
    MoneroTransactionInputViniAck: {
        fields: {}
    },
    MoneroTransactionAllInputsSetRequest: {
        fields: {}
    },
    MoneroTransactionAllInputsSetAck: {
        fields: {
            rsig_data: {
                type: "MoneroTransactionRsigData",
                id: 1
            }
        }
    },
    MoneroTransactionSetOutputRequest: {
        fields: {
            dst_entr: {
                type: "MoneroTransactionDestinationEntry",
                id: 1
            },
            dst_entr_hmac: {
                type: "bytes",
                id: 2
            },
            rsig_data: {
                type: "MoneroTransactionRsigData",
                id: 3
            },
            is_offloaded_bp: {
                type: "bool",
                id: 4
            }
        }
    },
    MoneroTransactionSetOutputAck: {
        fields: {
            tx_out: {
                type: "bytes",
                id: 1
            },
            vouti_hmac: {
                type: "bytes",
                id: 2
            },
            rsig_data: {
                type: "MoneroTransactionRsigData",
                id: 3
            },
            out_pk: {
                type: "bytes",
                id: 4
            },
            ecdh_info: {
                type: "bytes",
                id: 5
            }
        }
    },
    MoneroTransactionAllOutSetRequest: {
        fields: {
            rsig_data: {
                type: "MoneroTransactionRsigData",
                id: 1
            }
        }
    },
    MoneroTransactionAllOutSetAck: {
        fields: {
            extra: {
                type: "bytes",
                id: 1
            },
            tx_prefix_hash: {
                type: "bytes",
                id: 2
            },
            rv: {
                type: "MoneroRingCtSig",
                id: 4
            },
            full_message_hash: {
                type: "bytes",
                id: 5
            }
        },
        nested: {
            MoneroRingCtSig: {
                fields: {
                    txn_fee: {
                        type: "uint64",
                        id: 1
                    },
                    message: {
                        type: "bytes",
                        id: 2
                    },
                    rv_type: {
                        type: "uint32",
                        id: 3
                    }
                }
            }
        }
    },
    MoneroTransactionSignInputRequest: {
        fields: {
            src_entr: {
                type: "MoneroTransactionSourceEntry",
                id: 1
            },
            vini: {
                type: "bytes",
                id: 2
            },
            vini_hmac: {
                type: "bytes",
                id: 3
            },
            pseudo_out: {
                type: "bytes",
                id: 4
            },
            pseudo_out_hmac: {
                type: "bytes",
                id: 5
            },
            pseudo_out_alpha: {
                type: "bytes",
                id: 6
            },
            spend_key: {
                type: "bytes",
                id: 7
            },
            orig_idx: {
                type: "uint32",
                id: 8
            }
        }
    },
    MoneroTransactionSignInputAck: {
        fields: {
            signature: {
                type: "bytes",
                id: 1
            },
            pseudo_out: {
                type: "bytes",
                id: 2
            }
        }
    },
    MoneroTransactionFinalRequest: {
        fields: {}
    },
    MoneroTransactionFinalAck: {
        fields: {
            cout_key: {
                type: "bytes",
                id: 1
            },
            salt: {
                type: "bytes",
                id: 2
            },
            rand_mult: {
                type: "bytes",
                id: 3
            },
            tx_enc_keys: {
                type: "bytes",
                id: 4
            },
            opening_key: {
                type: "bytes",
                id: 5
            }
        }
    },
    MoneroKeyImageExportInitRequest: {
        fields: {
            num: {
                type: "uint64",
                id: 1
            },
            hash: {
                type: "bytes",
                id: 2
            },
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 3,
                options: {
                    packed: false
                }
            },
            network_type: {
                type: "uint32",
                id: 4
            },
            subs: {
                rule: "repeated",
                type: "MoneroSubAddressIndicesList",
                id: 5
            }
        },
        nested: {
            MoneroSubAddressIndicesList: {
                fields: {
                    account: {
                        type: "uint32",
                        id: 1
                    },
                    minor_indices: {
                        rule: "repeated",
                        type: "uint32",
                        id: 2,
                        options: {
                            packed: false
                        }
                    }
                }
            }
        }
    },
    MoneroKeyImageExportInitAck: {
        fields: {}
    },
    MoneroKeyImageSyncStepRequest: {
        fields: {
            tdis: {
                rule: "repeated",
                type: "MoneroTransferDetails",
                id: 1
            }
        },
        nested: {
            MoneroTransferDetails: {
                fields: {
                    out_key: {
                        type: "bytes",
                        id: 1
                    },
                    tx_pub_key: {
                        type: "bytes",
                        id: 2
                    },
                    additional_tx_pub_keys: {
                        rule: "repeated",
                        type: "bytes",
                        id: 3
                    },
                    internal_output_index: {
                        type: "uint64",
                        id: 4
                    },
                    sub_addr_major: {
                        type: "uint32",
                        id: 5
                    },
                    sub_addr_minor: {
                        type: "uint32",
                        id: 6
                    }
                }
            }
        }
    },
    MoneroKeyImageSyncStepAck: {
        fields: {
            kis: {
                rule: "repeated",
                type: "MoneroExportedKeyImage",
                id: 1
            }
        },
        nested: {
            MoneroExportedKeyImage: {
                fields: {
                    iv: {
                        type: "bytes",
                        id: 1
                    },
                    blob: {
                        type: "bytes",
                        id: 3
                    }
                }
            }
        }
    },
    MoneroKeyImageSyncFinalRequest: {
        fields: {}
    },
    MoneroKeyImageSyncFinalAck: {
        fields: {
            enc_key: {
                type: "bytes",
                id: 1
            }
        }
    },
    MoneroGetTxKeyRequest: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            network_type: {
                type: "uint32",
                id: 2
            },
            salt1: {
                type: "bytes",
                id: 3
            },
            salt2: {
                type: "bytes",
                id: 4
            },
            tx_enc_keys: {
                type: "bytes",
                id: 5
            },
            tx_prefix_hash: {
                type: "bytes",
                id: 6
            },
            reason: {
                type: "uint32",
                id: 7
            },
            view_public_key: {
                type: "bytes",
                id: 8
            }
        }
    },
    MoneroGetTxKeyAck: {
        fields: {
            salt: {
                type: "bytes",
                id: 1
            },
            tx_keys: {
                type: "bytes",
                id: 2
            },
            tx_derivations: {
                type: "bytes",
                id: 3
            }
        }
    },
    MoneroLiveRefreshStartRequest: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            network_type: {
                type: "uint32",
                id: 2
            }
        }
    },
    MoneroLiveRefreshStartAck: {
        fields: {}
    },
    MoneroLiveRefreshStepRequest: {
        fields: {
            out_key: {
                type: "bytes",
                id: 1
            },
            recv_deriv: {
                type: "bytes",
                id: 2
            },
            real_out_idx: {
                type: "uint64",
                id: 3
            },
            sub_addr_major: {
                type: "uint32",
                id: 4
            },
            sub_addr_minor: {
                type: "uint32",
                id: 5
            }
        }
    },
    MoneroLiveRefreshStepAck: {
        fields: {
            salt: {
                type: "bytes",
                id: 1
            },
            key_image: {
                type: "bytes",
                id: 2
            }
        }
    },
    MoneroLiveRefreshFinalRequest: {
        fields: {}
    },
    MoneroLiveRefreshFinalAck: {
        fields: {}
    },
    DebugMoneroDiagRequest: {
        fields: {
            ins: {
                type: "uint64",
                id: 1
            },
            p1: {
                type: "uint64",
                id: 2
            },
            p2: {
                type: "uint64",
                id: 3
            },
            pd: {
                rule: "repeated",
                type: "uint64",
                id: 4,
                options: {
                    packed: false
                }
            },
            data1: {
                type: "bytes",
                id: 5
            },
            data2: {
                type: "bytes",
                id: 6
            }
        }
    },
    DebugMoneroDiagAck: {
        fields: {
            ins: {
                type: "uint64",
                id: 1
            },
            p1: {
                type: "uint64",
                id: 2
            },
            p2: {
                type: "uint64",
                id: 3
            },
            pd: {
                rule: "repeated",
                type: "uint64",
                id: 4,
                options: {
                    packed: false
                }
            },
            data1: {
                type: "bytes",
                id: 5
            },
            data2: {
                type: "bytes",
                id: 6
            }
        }
    },
    NearGetAddress: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            show_display: {
                type: "bool",
                id: 2
            }
        }
    },
    NearAddress: {
        fields: {
            address: {
                type: "string",
                id: 1
            }
        }
    },
    NearSignTx: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            raw_tx: {
                rule: "required",
                type: "bytes",
                id: 2
            }
        }
    },
    NearSignedTx: {
        fields: {
            signature: {
                rule: "required",
                type: "bytes",
                id: 1
            }
        }
    },
    NEMGetAddress: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            network: {
                type: "uint32",
                id: 2
            },
            show_display: {
                type: "bool",
                id: 3
            }
        }
    },
    NEMAddress: {
        fields: {
            address: {
                rule: "required",
                type: "string",
                id: 1
            }
        }
    },
    NEMSignTx: {
        fields: {
            transaction: {
                type: "NEMTransactionCommon",
                id: 1
            },
            multisig: {
                type: "NEMTransactionCommon",
                id: 2
            },
            transfer: {
                type: "NEMTransfer",
                id: 3
            },
            cosigning: {
                type: "bool",
                id: 4
            },
            provision_namespace: {
                type: "NEMProvisionNamespace",
                id: 5
            },
            mosaic_creation: {
                type: "NEMMosaicCreation",
                id: 6
            },
            supply_change: {
                type: "NEMMosaicSupplyChange",
                id: 7
            },
            aggregate_modification: {
                type: "NEMAggregateModification",
                id: 8
            },
            importance_transfer: {
                type: "NEMImportanceTransfer",
                id: 9
            }
        },
        nested: {
            NEMTransactionCommon: {
                fields: {
                    address_n: {
                        rule: "repeated",
                        type: "uint32",
                        id: 1,
                        options: {
                            packed: false
                        }
                    },
                    network: {
                        type: "uint32",
                        id: 2
                    },
                    timestamp: {
                        type: "uint32",
                        id: 3
                    },
                    fee: {
                        type: "uint64",
                        id: 4
                    },
                    deadline: {
                        type: "uint32",
                        id: 5
                    },
                    signer: {
                        type: "bytes",
                        id: 6
                    }
                }
            },
            NEMTransfer: {
                fields: {
                    recipient: {
                        type: "string",
                        id: 1
                    },
                    amount: {
                        type: "uint64",
                        id: 2
                    },
                    payload: {
                        type: "bytes",
                        id: 3
                    },
                    public_key: {
                        type: "bytes",
                        id: 4
                    },
                    mosaics: {
                        rule: "repeated",
                        type: "NEMMosaic",
                        id: 5
                    }
                },
                nested: {
                    NEMMosaic: {
                        fields: {
                            namespace: {
                                type: "string",
                                id: 1
                            },
                            mosaic: {
                                type: "string",
                                id: 2
                            },
                            quantity: {
                                type: "uint64",
                                id: 3
                            }
                        }
                    }
                }
            },
            NEMProvisionNamespace: {
                fields: {
                    namespace: {
                        type: "string",
                        id: 1
                    },
                    parent: {
                        type: "string",
                        id: 2
                    },
                    sink: {
                        type: "string",
                        id: 3
                    },
                    fee: {
                        type: "uint64",
                        id: 4
                    }
                }
            },
            NEMMosaicCreation: {
                fields: {
                    definition: {
                        type: "NEMMosaicDefinition",
                        id: 1
                    },
                    sink: {
                        type: "string",
                        id: 2
                    },
                    fee: {
                        type: "uint64",
                        id: 3
                    }
                },
                nested: {
                    NEMMosaicDefinition: {
                        fields: {
                            name: {
                                type: "string",
                                id: 1
                            },
                            ticker: {
                                type: "string",
                                id: 2
                            },
                            namespace: {
                                type: "string",
                                id: 3
                            },
                            mosaic: {
                                type: "string",
                                id: 4
                            },
                            divisibility: {
                                type: "uint32",
                                id: 5
                            },
                            levy: {
                                type: "NEMMosaicLevy",
                                id: 6
                            },
                            fee: {
                                type: "uint64",
                                id: 7
                            },
                            levy_address: {
                                type: "string",
                                id: 8
                            },
                            levy_namespace: {
                                type: "string",
                                id: 9
                            },
                            levy_mosaic: {
                                type: "string",
                                id: 10
                            },
                            supply: {
                                type: "uint64",
                                id: 11
                            },
                            mutable_supply: {
                                type: "bool",
                                id: 12
                            },
                            transferable: {
                                type: "bool",
                                id: 13
                            },
                            description: {
                                type: "string",
                                id: 14
                            },
                            networks: {
                                rule: "repeated",
                                type: "uint32",
                                id: 15,
                                options: {
                                    packed: false
                                }
                            }
                        },
                        nested: {
                            NEMMosaicLevy: {
                                values: {
                                    MosaicLevy_Absolute: 1,
                                    MosaicLevy_Percentile: 2
                                }
                            }
                        }
                    }
                }
            },
            NEMMosaicSupplyChange: {
                fields: {
                    namespace: {
                        type: "string",
                        id: 1
                    },
                    mosaic: {
                        type: "string",
                        id: 2
                    },
                    type: {
                        type: "NEMSupplyChangeType",
                        id: 3
                    },
                    delta: {
                        type: "uint64",
                        id: 4
                    }
                },
                nested: {
                    NEMSupplyChangeType: {
                        values: {
                            SupplyChange_Increase: 1,
                            SupplyChange_Decrease: 2
                        }
                    }
                }
            },
            NEMAggregateModification: {
                fields: {
                    modifications: {
                        rule: "repeated",
                        type: "NEMCosignatoryModification",
                        id: 1
                    },
                    relative_change: {
                        type: "sint32",
                        id: 2
                    }
                },
                nested: {
                    NEMCosignatoryModification: {
                        fields: {
                            type: {
                                type: "NEMModificationType",
                                id: 1
                            },
                            public_key: {
                                type: "bytes",
                                id: 2
                            }
                        },
                        nested: {
                            NEMModificationType: {
                                values: {
                                    CosignatoryModification_Add: 1,
                                    CosignatoryModification_Delete: 2
                                }
                            }
                        }
                    }
                }
            },
            NEMImportanceTransfer: {
                fields: {
                    mode: {
                        type: "NEMImportanceTransferMode",
                        id: 1
                    },
                    public_key: {
                        type: "bytes",
                        id: 2
                    }
                },
                nested: {
                    NEMImportanceTransferMode: {
                        values: {
                            ImportanceTransfer_Activate: 1,
                            ImportanceTransfer_Deactivate: 2
                        }
                    }
                }
            }
        }
    },
    NEMSignedTx: {
        fields: {
            data: {
                rule: "required",
                type: "bytes",
                id: 1
            },
            signature: {
                rule: "required",
                type: "bytes",
                id: 2
            }
        }
    },
    NEMDecryptMessage: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            network: {
                type: "uint32",
                id: 2
            },
            public_key: {
                type: "bytes",
                id: 3
            },
            payload: {
                type: "bytes",
                id: 4
            }
        }
    },
    NEMDecryptedMessage: {
        fields: {
            payload: {
                rule: "required",
                type: "bytes",
                id: 1
            }
        }
    },
    NexaGetAddress: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            show_display: {
                type: "bool",
                id: 2
            },
            prefix: {
                type: "string",
                id: 3,
                options: {
                    "default": "nexa"
                }
            }
        }
    },
    NexaAddress: {
        fields: {
            address: {
                rule: "required",
                type: "string",
                id: 1
            },
            public_key: {
                rule: "required",
                type: "bytes",
                id: 2
            }
        }
    },
    NexaSignTx: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            raw_message: {
                rule: "required",
                type: "bytes",
                id: 2
            },
            prefix: {
                type: "string",
                id: 3,
                options: {
                    "default": "nexa"
                }
            },
            input_count: {
                type: "uint32",
                id: 4,
                options: {
                    "default": 1
                }
            }
        }
    },
    NexaTxInputRequest: {
        fields: {
            request_index: {
                rule: "required",
                type: "uint32",
                id: 1
            },
            signature: {
                type: "bytes",
                id: 2
            }
        }
    },
    NexaTxInputAck: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            raw_message: {
                rule: "required",
                type: "bytes",
                id: 2
            }
        }
    },
    NexaSignedTx: {
        fields: {
            signature: {
                rule: "required",
                type: "bytes",
                id: 1
            }
        }
    },
    PolkadotGetAddress: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            prefix: {
                rule: "required",
                type: "uint32",
                id: 2
            },
            network: {
                rule: "required",
                type: "string",
                id: 3
            },
            show_display: {
                type: "bool",
                id: 4
            }
        }
    },
    PolkadotAddress: {
        fields: {
            address: {
                type: "string",
                id: 1
            },
            public_key: {
                type: "string",
                id: 2
            }
        }
    },
    PolkadotSignTx: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            raw_tx: {
                rule: "required",
                type: "bytes",
                id: 2
            },
            network: {
                rule: "required",
                type: "string",
                id: 3
            }
        }
    },
    PolkadotSignedTx: {
        fields: {
            signature: {
                rule: "required",
                type: "bytes",
                id: 1
            }
        }
    },
    RippleGetAddress: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            show_display: {
                type: "bool",
                id: 2
            }
        }
    },
    RippleAddress: {
        fields: {
            address: {
                rule: "required",
                type: "string",
                id: 1
            }
        }
    },
    RippleSignTx: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            fee: {
                type: "uint64",
                id: 2
            },
            flags: {
                type: "uint32",
                id: 3
            },
            sequence: {
                type: "uint32",
                id: 4
            },
            last_ledger_sequence: {
                type: "uint32",
                id: 5
            },
            payment: {
                type: "RipplePayment",
                id: 6
            }
        },
        nested: {
            RipplePayment: {
                fields: {
                    amount: {
                        rule: "required",
                        type: "uint64",
                        id: 1
                    },
                    destination: {
                        rule: "required",
                        type: "string",
                        id: 2
                    },
                    destination_tag: {
                        type: "uint32",
                        id: 3
                    }
                }
            }
        }
    },
    RippleSignedTx: {
        fields: {
            signature: {
                rule: "required",
                type: "bytes",
                id: 1
            },
            serialized_tx: {
                rule: "required",
                type: "bytes",
                id: 2
            }
        }
    },
    SolanaGetAddress: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            show_display: {
                type: "bool",
                id: 2
            }
        }
    },
    SolanaAddress: {
        fields: {
            address: {
                type: "string",
                id: 1
            }
        }
    },
    SolanaSignTx: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            raw_tx: {
                rule: "required",
                type: "bytes",
                id: 2
            }
        }
    },
    SolanaSignedTx: {
        fields: {
            signature: {
                type: "bytes",
                id: 1
            }
        }
    },
    StarcoinGetAddress: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            show_display: {
                type: "bool",
                id: 2
            }
        }
    },
    StarcoinAddress: {
        fields: {
            address: {
                type: "string",
                id: 1
            }
        }
    },
    StarcoinGetPublicKey: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            show_display: {
                type: "bool",
                id: 2
            }
        }
    },
    StarcoinPublicKey: {
        fields: {
            public_key: {
                rule: "required",
                type: "bytes",
                id: 1
            }
        }
    },
    StarcoinSignTx: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            raw_tx: {
                type: "bytes",
                id: 2
            }
        }
    },
    StarcoinSignedTx: {
        fields: {
            public_key: {
                rule: "required",
                type: "bytes",
                id: 1
            },
            signature: {
                rule: "required",
                type: "bytes",
                id: 2
            }
        }
    },
    StarcoinSignMessage: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            message: {
                type: "bytes",
                id: 2
            }
        }
    },
    StarcoinMessageSignature: {
        fields: {
            public_key: {
                rule: "required",
                type: "bytes",
                id: 1
            },
            signature: {
                rule: "required",
                type: "bytes",
                id: 2
            }
        }
    },
    StarcoinVerifyMessage: {
        fields: {
            public_key: {
                type: "bytes",
                id: 1
            },
            signature: {
                type: "bytes",
                id: 2
            },
            message: {
                type: "bytes",
                id: 3
            }
        }
    },
    StellarAssetType: {
        values: {
            NATIVE: 0,
            ALPHANUM4: 1,
            ALPHANUM12: 2
        }
    },
    StellarAsset: {
        fields: {
            type: {
                rule: "required",
                type: "StellarAssetType",
                id: 1
            },
            code: {
                type: "string",
                id: 2
            },
            issuer: {
                type: "string",
                id: 3
            }
        }
    },
    StellarGetAddress: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            show_display: {
                type: "bool",
                id: 2
            }
        }
    },
    StellarAddress: {
        fields: {
            address: {
                rule: "required",
                type: "string",
                id: 1
            }
        }
    },
    StellarSignTx: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 2,
                options: {
                    packed: false
                }
            },
            network_passphrase: {
                rule: "required",
                type: "string",
                id: 3
            },
            source_account: {
                rule: "required",
                type: "string",
                id: 4
            },
            fee: {
                rule: "required",
                type: "uint32",
                id: 5
            },
            sequence_number: {
                rule: "required",
                type: "uint64",
                id: 6
            },
            timebounds_start: {
                rule: "required",
                type: "uint32",
                id: 8
            },
            timebounds_end: {
                rule: "required",
                type: "uint32",
                id: 9
            },
            memo_type: {
                rule: "required",
                type: "StellarMemoType",
                id: 10
            },
            memo_text: {
                type: "string",
                id: 11
            },
            memo_id: {
                type: "uint64",
                id: 12
            },
            memo_hash: {
                type: "bytes",
                id: 13
            },
            num_operations: {
                rule: "required",
                type: "uint32",
                id: 14
            }
        },
        nested: {
            StellarMemoType: {
                values: {
                    NONE: 0,
                    TEXT: 1,
                    ID: 2,
                    HASH: 3,
                    RETURN: 4
                }
            }
        }
    },
    StellarTxOpRequest: {
        fields: {}
    },
    StellarPaymentOp: {
        fields: {
            source_account: {
                type: "string",
                id: 1
            },
            destination_account: {
                rule: "required",
                type: "string",
                id: 2
            },
            asset: {
                rule: "required",
                type: "StellarAsset",
                id: 3
            },
            amount: {
                rule: "required",
                type: "sint64",
                id: 4
            }
        }
    },
    StellarCreateAccountOp: {
        fields: {
            source_account: {
                type: "string",
                id: 1
            },
            new_account: {
                rule: "required",
                type: "string",
                id: 2
            },
            starting_balance: {
                rule: "required",
                type: "sint64",
                id: 3
            }
        }
    },
    StellarPathPaymentStrictReceiveOp: {
        fields: {
            source_account: {
                type: "string",
                id: 1
            },
            send_asset: {
                rule: "required",
                type: "StellarAsset",
                id: 2
            },
            send_max: {
                rule: "required",
                type: "sint64",
                id: 3
            },
            destination_account: {
                rule: "required",
                type: "string",
                id: 4
            },
            destination_asset: {
                rule: "required",
                type: "StellarAsset",
                id: 5
            },
            destination_amount: {
                rule: "required",
                type: "sint64",
                id: 6
            },
            paths: {
                rule: "repeated",
                type: "StellarAsset",
                id: 7
            }
        }
    },
    StellarPathPaymentStrictSendOp: {
        fields: {
            source_account: {
                type: "string",
                id: 1
            },
            send_asset: {
                rule: "required",
                type: "StellarAsset",
                id: 2
            },
            send_amount: {
                rule: "required",
                type: "sint64",
                id: 3
            },
            destination_account: {
                rule: "required",
                type: "string",
                id: 4
            },
            destination_asset: {
                rule: "required",
                type: "StellarAsset",
                id: 5
            },
            destination_min: {
                rule: "required",
                type: "sint64",
                id: 6
            },
            paths: {
                rule: "repeated",
                type: "StellarAsset",
                id: 7
            }
        }
    },
    StellarManageSellOfferOp: {
        fields: {
            source_account: {
                type: "string",
                id: 1
            },
            selling_asset: {
                rule: "required",
                type: "StellarAsset",
                id: 2
            },
            buying_asset: {
                rule: "required",
                type: "StellarAsset",
                id: 3
            },
            amount: {
                rule: "required",
                type: "sint64",
                id: 4
            },
            price_n: {
                rule: "required",
                type: "uint32",
                id: 5
            },
            price_d: {
                rule: "required",
                type: "uint32",
                id: 6
            },
            offer_id: {
                rule: "required",
                type: "uint64",
                id: 7
            }
        }
    },
    StellarManageBuyOfferOp: {
        fields: {
            source_account: {
                type: "string",
                id: 1
            },
            selling_asset: {
                rule: "required",
                type: "StellarAsset",
                id: 2
            },
            buying_asset: {
                rule: "required",
                type: "StellarAsset",
                id: 3
            },
            amount: {
                rule: "required",
                type: "sint64",
                id: 4
            },
            price_n: {
                rule: "required",
                type: "uint32",
                id: 5
            },
            price_d: {
                rule: "required",
                type: "uint32",
                id: 6
            },
            offer_id: {
                rule: "required",
                type: "uint64",
                id: 7
            }
        }
    },
    StellarCreatePassiveSellOfferOp: {
        fields: {
            source_account: {
                type: "string",
                id: 1
            },
            selling_asset: {
                rule: "required",
                type: "StellarAsset",
                id: 2
            },
            buying_asset: {
                rule: "required",
                type: "StellarAsset",
                id: 3
            },
            amount: {
                rule: "required",
                type: "sint64",
                id: 4
            },
            price_n: {
                rule: "required",
                type: "uint32",
                id: 5
            },
            price_d: {
                rule: "required",
                type: "uint32",
                id: 6
            }
        }
    },
    StellarSetOptionsOp: {
        fields: {
            source_account: {
                type: "string",
                id: 1
            },
            inflation_destination_account: {
                type: "string",
                id: 2
            },
            clear_flags: {
                type: "uint32",
                id: 3
            },
            set_flags: {
                type: "uint32",
                id: 4
            },
            master_weight: {
                type: "uint32",
                id: 5
            },
            low_threshold: {
                type: "uint32",
                id: 6
            },
            medium_threshold: {
                type: "uint32",
                id: 7
            },
            high_threshold: {
                type: "uint32",
                id: 8
            },
            home_domain: {
                type: "string",
                id: 9
            },
            signer_type: {
                type: "StellarSignerType",
                id: 10
            },
            signer_key: {
                type: "bytes",
                id: 11
            },
            signer_weight: {
                type: "uint32",
                id: 12
            }
        },
        nested: {
            StellarSignerType: {
                values: {
                    ACCOUNT: 0,
                    PRE_AUTH: 1,
                    HASH: 2
                }
            }
        }
    },
    StellarChangeTrustOp: {
        fields: {
            source_account: {
                type: "string",
                id: 1
            },
            asset: {
                rule: "required",
                type: "StellarAsset",
                id: 2
            },
            limit: {
                rule: "required",
                type: "uint64",
                id: 3
            }
        }
    },
    StellarAllowTrustOp: {
        fields: {
            source_account: {
                type: "string",
                id: 1
            },
            trusted_account: {
                rule: "required",
                type: "string",
                id: 2
            },
            asset_type: {
                rule: "required",
                type: "StellarAssetType",
                id: 3
            },
            asset_code: {
                type: "string",
                id: 4
            },
            is_authorized: {
                rule: "required",
                type: "bool",
                id: 5
            }
        }
    },
    StellarAccountMergeOp: {
        fields: {
            source_account: {
                type: "string",
                id: 1
            },
            destination_account: {
                rule: "required",
                type: "string",
                id: 2
            }
        }
    },
    StellarManageDataOp: {
        fields: {
            source_account: {
                type: "string",
                id: 1
            },
            key: {
                rule: "required",
                type: "string",
                id: 2
            },
            value: {
                type: "bytes",
                id: 3
            }
        }
    },
    StellarBumpSequenceOp: {
        fields: {
            source_account: {
                type: "string",
                id: 1
            },
            bump_to: {
                rule: "required",
                type: "uint64",
                id: 2
            }
        }
    },
    StellarSignedTx: {
        fields: {
            public_key: {
                rule: "required",
                type: "bytes",
                id: 1
            },
            signature: {
                rule: "required",
                type: "bytes",
                id: 2
            }
        }
    },
    SuiGetAddress: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            show_display: {
                type: "bool",
                id: 2
            }
        }
    },
    SuiAddress: {
        fields: {
            address: {
                type: "string",
                id: 1
            }
        }
    },
    SuiSignTx: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            raw_tx: {
                rule: "required",
                type: "bytes",
                id: 2
            }
        }
    },
    SuiSignedTx: {
        fields: {
            public_key: {
                rule: "required",
                type: "bytes",
                id: 1
            },
            signature: {
                rule: "required",
                type: "bytes",
                id: 2
            }
        }
    },
    TezosGetAddress: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            show_display: {
                type: "bool",
                id: 2
            }
        }
    },
    TezosAddress: {
        fields: {
            address: {
                rule: "required",
                type: "string",
                id: 1
            }
        }
    },
    TezosGetPublicKey: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            show_display: {
                type: "bool",
                id: 2
            }
        }
    },
    TezosPublicKey: {
        fields: {
            public_key: {
                rule: "required",
                type: "string",
                id: 1
            }
        }
    },
    TezosSignTx: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            branch: {
                rule: "required",
                type: "bytes",
                id: 2
            },
            reveal: {
                type: "TezosRevealOp",
                id: 3
            },
            transaction: {
                type: "TezosTransactionOp",
                id: 4
            },
            origination: {
                type: "TezosOriginationOp",
                id: 5
            },
            delegation: {
                type: "TezosDelegationOp",
                id: 6
            },
            proposal: {
                type: "TezosProposalOp",
                id: 7
            },
            ballot: {
                type: "TezosBallotOp",
                id: 8
            }
        },
        nested: {
            TezosContractID: {
                fields: {
                    tag: {
                        rule: "required",
                        type: "TezosContractType",
                        id: 1
                    },
                    hash: {
                        rule: "required",
                        type: "bytes",
                        id: 2
                    }
                },
                nested: {
                    TezosContractType: {
                        values: {
                            Implicit: 0,
                            Originated: 1
                        }
                    }
                }
            },
            TezosRevealOp: {
                fields: {
                    source: {
                        rule: "required",
                        type: "bytes",
                        id: 7
                    },
                    fee: {
                        rule: "required",
                        type: "uint64",
                        id: 2
                    },
                    counter: {
                        rule: "required",
                        type: "uint64",
                        id: 3
                    },
                    gas_limit: {
                        rule: "required",
                        type: "uint64",
                        id: 4
                    },
                    storage_limit: {
                        rule: "required",
                        type: "uint64",
                        id: 5
                    },
                    public_key: {
                        rule: "required",
                        type: "bytes",
                        id: 6
                    }
                }
            },
            TezosTransactionOp: {
                fields: {
                    source: {
                        rule: "required",
                        type: "bytes",
                        id: 9
                    },
                    fee: {
                        rule: "required",
                        type: "uint64",
                        id: 2
                    },
                    counter: {
                        rule: "required",
                        type: "uint64",
                        id: 3
                    },
                    gas_limit: {
                        rule: "required",
                        type: "uint64",
                        id: 4
                    },
                    storage_limit: {
                        rule: "required",
                        type: "uint64",
                        id: 5
                    },
                    amount: {
                        rule: "required",
                        type: "uint64",
                        id: 6
                    },
                    destination: {
                        rule: "required",
                        type: "TezosContractID",
                        id: 7
                    },
                    parameters: {
                        type: "bytes",
                        id: 8
                    },
                    parameters_manager: {
                        type: "TezosParametersManager",
                        id: 10
                    }
                },
                nested: {
                    TezosParametersManager: {
                        fields: {
                            set_delegate: {
                                type: "bytes",
                                id: 1
                            },
                            cancel_delegate: {
                                type: "bool",
                                id: 2
                            },
                            transfer: {
                                type: "TezosManagerTransfer",
                                id: 3
                            }
                        },
                        nested: {
                            TezosManagerTransfer: {
                                fields: {
                                    destination: {
                                        type: "TezosContractID",
                                        id: 1
                                    },
                                    amount: {
                                        type: "uint64",
                                        id: 2
                                    }
                                }
                            }
                        }
                    }
                }
            },
            TezosOriginationOp: {
                fields: {
                    source: {
                        rule: "required",
                        type: "bytes",
                        id: 12
                    },
                    fee: {
                        rule: "required",
                        type: "uint64",
                        id: 2
                    },
                    counter: {
                        rule: "required",
                        type: "uint64",
                        id: 3
                    },
                    gas_limit: {
                        rule: "required",
                        type: "uint64",
                        id: 4
                    },
                    storage_limit: {
                        rule: "required",
                        type: "uint64",
                        id: 5
                    },
                    manager_pubkey: {
                        type: "bytes",
                        id: 6
                    },
                    balance: {
                        rule: "required",
                        type: "uint64",
                        id: 7
                    },
                    spendable: {
                        type: "bool",
                        id: 8
                    },
                    delegatable: {
                        type: "bool",
                        id: 9
                    },
                    delegate: {
                        type: "bytes",
                        id: 10
                    },
                    script: {
                        rule: "required",
                        type: "bytes",
                        id: 11
                    }
                }
            },
            TezosDelegationOp: {
                fields: {
                    source: {
                        rule: "required",
                        type: "bytes",
                        id: 7
                    },
                    fee: {
                        rule: "required",
                        type: "uint64",
                        id: 2
                    },
                    counter: {
                        rule: "required",
                        type: "uint64",
                        id: 3
                    },
                    gas_limit: {
                        rule: "required",
                        type: "uint64",
                        id: 4
                    },
                    storage_limit: {
                        rule: "required",
                        type: "uint64",
                        id: 5
                    },
                    delegate: {
                        rule: "required",
                        type: "bytes",
                        id: 6
                    }
                }
            },
            TezosProposalOp: {
                fields: {
                    source: {
                        type: "bytes",
                        id: 1
                    },
                    period: {
                        type: "uint64",
                        id: 2
                    },
                    proposals: {
                        rule: "repeated",
                        type: "bytes",
                        id: 4
                    }
                }
            },
            TezosBallotOp: {
                fields: {
                    source: {
                        type: "bytes",
                        id: 1
                    },
                    period: {
                        type: "uint64",
                        id: 2
                    },
                    proposal: {
                        type: "bytes",
                        id: 3
                    },
                    ballot: {
                        type: "TezosBallotType",
                        id: 4
                    }
                },
                nested: {
                    TezosBallotType: {
                        values: {
                            Yay: 0,
                            Nay: 1,
                            Pass: 2
                        }
                    }
                }
            }
        }
    },
    TezosSignedTx: {
        fields: {
            signature: {
                rule: "required",
                type: "string",
                id: 1
            },
            sig_op_contents: {
                rule: "required",
                type: "bytes",
                id: 2
            },
            operation_hash: {
                rule: "required",
                type: "string",
                id: 3
            }
        }
    },
    TronGetAddress: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            show_display: {
                type: "bool",
                id: 2
            }
        }
    },
    TronAddress: {
        fields: {
            address: {
                type: "string",
                id: 1
            }
        }
    },
    TronSignTx: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            ref_block_bytes: {
                rule: "required",
                type: "bytes",
                id: 2
            },
            ref_block_hash: {
                rule: "required",
                type: "bytes",
                id: 3
            },
            expiration: {
                rule: "required",
                type: "uint64",
                id: 4
            },
            data: {
                type: "string",
                id: 5
            },
            contract: {
                rule: "required",
                type: "TronContract",
                id: 6
            },
            timestamp: {
                rule: "required",
                type: "uint64",
                id: 7
            },
            fee_limit: {
                type: "uint64",
                id: 8
            }
        },
        nested: {
            TronContract: {
                fields: {
                    transfer_contract: {
                        type: "TronTransferContract",
                        id: 2
                    },
                    freeze_balance_contract: {
                        type: "TronFreezeBalanceContract",
                        id: 11
                    },
                    unfreeze_balance_contract: {
                        type: "TronUnfreezeBalanceContract",
                        id: 12
                    },
                    withdraw_balance_contract: {
                        type: "TronWithdrawBalanceContract",
                        id: 13
                    },
                    trigger_smart_contract: {
                        type: "TronTriggerSmartContract",
                        id: 31
                    },
                    freeze_balance_v2_contract: {
                        type: "TronFreezeBalanceV2Contract",
                        id: 54
                    },
                    unfreeze_balance_v2_contract: {
                        type: "TronUnfreezeBalanceV2Contract",
                        id: 55
                    },
                    withdraw_expire_unfreeze_contract: {
                        type: "TronWithdrawExpireUnfreezeContract",
                        id: 56
                    },
                    delegate_resource_contract: {
                        type: "TronDelegateResourceContract",
                        id: 57
                    },
                    undelegate_resource_contract: {
                        type: "TronUnDelegateResourceContract",
                        id: 58
                    }
                },
                nested: {
                    TronTransferContract: {
                        fields: {
                            to_address: {
                                type: "string",
                                id: 2
                            },
                            amount: {
                                type: "uint64",
                                id: 3
                            }
                        }
                    },
                    TronTriggerSmartContract: {
                        fields: {
                            contract_address: {
                                type: "string",
                                id: 2
                            },
                            call_value: {
                                type: "uint64",
                                id: 3
                            },
                            data: {
                                type: "bytes",
                                id: 4
                            },
                            call_token_value: {
                                type: "uint64",
                                id: 5
                            },
                            asset_id: {
                                type: "uint64",
                                id: 6
                            }
                        }
                    },
                    TronResourceCode: {
                        values: {
                            BANDWIDTH: 0,
                            ENERGY: 1
                        }
                    },
                    TronFreezeBalanceContract: {
                        fields: {
                            frozen_balance: {
                                type: "uint64",
                                id: 1
                            },
                            frozen_duration: {
                                type: "uint64",
                                id: 2
                            },
                            resource: {
                                type: "TronResourceCode",
                                id: 3
                            },
                            receiver_address: {
                                type: "string",
                                id: 4
                            }
                        }
                    },
                    TronUnfreezeBalanceContract: {
                        fields: {
                            resource: {
                                type: "TronResourceCode",
                                id: 1
                            },
                            receiver_address: {
                                type: "string",
                                id: 2
                            }
                        }
                    },
                    TronWithdrawBalanceContract: {
                        fields: {
                            owner_address: {
                                type: "bytes",
                                id: 1
                            }
                        }
                    },
                    TronFreezeBalanceV2Contract: {
                        fields: {
                            frozen_balance: {
                                type: "uint64",
                                id: 2
                            },
                            resource: {
                                type: "TronResourceCode",
                                id: 3
                            }
                        }
                    },
                    TronUnfreezeBalanceV2Contract: {
                        fields: {
                            unfreeze_balance: {
                                type: "uint64",
                                id: 2
                            },
                            resource: {
                                type: "TronResourceCode",
                                id: 3
                            }
                        }
                    },
                    TronWithdrawExpireUnfreezeContract: {
                        fields: {}
                    },
                    TronDelegateResourceContract: {
                        fields: {
                            resource: {
                                type: "TronResourceCode",
                                id: 2
                            },
                            balance: {
                                type: "uint64",
                                id: 3
                            },
                            receiver_address: {
                                type: "string",
                                id: 4
                            },
                            lock: {
                                type: "bool",
                                id: 5
                            }
                        }
                    },
                    TronUnDelegateResourceContract: {
                        fields: {
                            resource: {
                                type: "TronResourceCode",
                                id: 2
                            },
                            balance: {
                                type: "uint64",
                                id: 3
                            },
                            receiver_address: {
                                type: "string",
                                id: 4
                            }
                        }
                    }
                }
            }
        }
    },
    TronSignedTx: {
        fields: {
            signature: {
                rule: "required",
                type: "bytes",
                id: 1
            },
            serialized_tx: {
                type: "bytes",
                id: 2
            }
        }
    },
    TronSignMessage: {
        fields: {
            address_n: {
                rule: "repeated",
                type: "uint32",
                id: 1,
                options: {
                    packed: false
                }
            },
            message: {
                rule: "required",
                type: "bytes",
                id: 2
            }
        }
    },
    TronMessageSignature: {
        fields: {
            address: {
                rule: "required",
                type: "bytes",
                id: 1
            },
            signature: {
                rule: "required",
                type: "bytes",
                id: 2
            }
        }
    },
    WebAuthnListResidentCredentials: {
        fields: {}
    },
    WebAuthnAddResidentCredential: {
        fields: {
            credential_id: {
                type: "bytes",
                id: 1
            }
        }
    },
    WebAuthnRemoveResidentCredential: {
        fields: {
            index: {
                type: "uint32",
                id: 1
            }
        }
    },
    WebAuthnCredentials: {
        fields: {
            credentials: {
                rule: "repeated",
                type: "WebAuthnCredential",
                id: 1
            }
        },
        nested: {
            WebAuthnCredential: {
                fields: {
                    index: {
                        type: "uint32",
                        id: 1
                    },
                    id: {
                        type: "bytes",
                        id: 2
                    },
                    rp_id: {
                        type: "string",
                        id: 3
                    },
                    rp_name: {
                        type: "string",
                        id: 4
                    },
                    user_id: {
                        type: "bytes",
                        id: 5
                    },
                    user_name: {
                        type: "string",
                        id: 6
                    },
                    user_display_name: {
                        type: "string",
                        id: 7
                    },
                    creation_time: {
                        type: "uint32",
                        id: 8
                    },
                    hmac_secret: {
                        type: "bool",
                        id: 9
                    },
                    use_sign_count: {
                        type: "bool",
                        id: 10
                    },
                    algorithm: {
                        type: "sint32",
                        id: 11
                    },
                    curve: {
                        type: "sint32",
                        id: 12
                    }
                }
            }
        }
    },
    wire_in: {
        type: "bool",
        id: 50002,
        extend: "google.protobuf.EnumValueOptions"
    },
    wire_out: {
        type: "bool",
        id: 50003,
        extend: "google.protobuf.EnumValueOptions"
    },
    wire_debug_in: {
        type: "bool",
        id: 50004,
        extend: "google.protobuf.EnumValueOptions"
    },
    wire_debug_out: {
        type: "bool",
        id: 50005,
        extend: "google.protobuf.EnumValueOptions"
    },
    wire_tiny: {
        type: "bool",
        id: 50006,
        extend: "google.protobuf.EnumValueOptions"
    },
    wire_bootloader: {
        type: "bool",
        id: 50007,
        extend: "google.protobuf.EnumValueOptions"
    },
    wire_no_fsm: {
        type: "bool",
        id: 50008,
        extend: "google.protobuf.EnumValueOptions"
    },
    facotry: {
        type: "bool",
        id: 50501,
        extend: "google.protobuf.EnumValueOptions"
    },
    bitcoin_only: {
        type: "bool",
        id: 60000,
        extend: "google.protobuf.EnumValueOptions"
    },
    has_bitcoin_only_values: {
        type: "bool",
        id: 51001,
        extend: "google.protobuf.EnumOptions"
    },
    unstable: {
        type: "bool",
        id: 52001,
        extend: "google.protobuf.MessageOptions"
    },
    wire_type: {
        type: "uint32",
        id: 52002,
        extend: "google.protobuf.MessageOptions"
    },
    experimental: {
        type: "bool",
        id: 53001,
        extend: "google.protobuf.FieldOptions"
    },
    include_in_bitcoin_only: {
        type: "bool",
        id: 60000,
        extend: "google.protobuf.FileOptions"
    },
    CommandFlags: {
        values: {
            Default: 0,
            Factory_Only: 1
        }
    },
    MessageType: {
        options: {
            "(has_bitcoin_only_values)": true
        },
        values: {
            MessageType_Initialize: 0,
            MessageType_Ping: 1,
            MessageType_Success: 2,
            MessageType_Failure: 3,
            MessageType_ChangePin: 4,
            MessageType_WipeDevice: 5,
            MessageType_GetEntropy: 9,
            MessageType_Entropy: 10,
            MessageType_LoadDevice: 13,
            MessageType_ResetDevice: 14,
            MessageType_Features: 17,
            MessageType_PinMatrixRequest: 18,
            MessageType_PinMatrixAck: 19,
            MessageType_Cancel: 20,
            MessageType_LockDevice: 24,
            MessageType_ApplySettings: 25,
            MessageType_ButtonRequest: 26,
            MessageType_ButtonAck: 27,
            MessageType_ApplyFlags: 28,
            MessageType_BackupDevice: 34,
            MessageType_EntropyRequest: 35,
            MessageType_EntropyAck: 36,
            MessageType_PassphraseRequest: 41,
            MessageType_PassphraseAck: 42,
            MessageType_RecoveryDevice: 45,
            MessageType_WordRequest: 46,
            MessageType_WordAck: 47,
            MessageType_GetFeatures: 55,
            MessageType_SdProtect: 79,
            MessageType_ChangeWipeCode: 82,
            MessageType_EndSession: 83,
            MessageType_DoPreauthorized: 84,
            MessageType_PreauthorizedRequest: 85,
            MessageType_CancelAuthorization: 86,
            MessageType_RebootToBootloader: 87,
            MessageType_SetU2FCounter: 63,
            MessageType_GetNextU2FCounter: 80,
            MessageType_NextU2FCounter: 81,
            MessageType_Deprecated_PassphraseStateRequest: 77,
            MessageType_Deprecated_PassphraseStateAck: 78,
            MessageType_FirmwareErase: 6,
            MessageType_FirmwareErase_ex: 16,
            MessageType_FirmwareUpload: 7,
            MessageType_FirmwareRequest: 8,
            MessageType_SelfTest: 32,
            MessageType_Reboot: 30000,
            MessageType_FirmwareUpdateEmmc: 30001,
            MessageType_GetPublicKey: 11,
            MessageType_PublicKey: 12,
            MessageType_SignTx: 15,
            MessageType_TxRequest: 21,
            MessageType_TxAck: 22,
            MessageType_GetAddress: 29,
            MessageType_Address: 30,
            MessageType_SignMessage: 38,
            MessageType_VerifyMessage: 39,
            MessageType_MessageSignature: 40,
            MessageType_GetOwnershipId: 43,
            MessageType_OwnershipId: 44,
            MessageType_GetOwnershipProof: 49,
            MessageType_OwnershipProof: 50,
            MessageType_AuthorizeCoinJoin: 51,
            MessageType_CipherKeyValue: 23,
            MessageType_CipheredKeyValue: 48,
            MessageType_SignIdentity: 53,
            MessageType_SignedIdentity: 54,
            MessageType_GetECDHSessionKey: 61,
            MessageType_ECDHSessionKey: 62,
            MessageType_CosiCommit: 71,
            MessageType_CosiCommitment: 72,
            MessageType_CosiSign: 73,
            MessageType_CosiSignature: 74,
            MessageType_BatchGetPublickeys: 10016,
            MessageType_EcdsaPublicKeys: 10017,
            MessageType_DebugLinkDecision: 100,
            MessageType_DebugLinkGetState: 101,
            MessageType_DebugLinkState: 102,
            MessageType_DebugLinkStop: 103,
            MessageType_DebugLinkLog: 104,
            MessageType_DebugLinkMemoryRead: 110,
            MessageType_DebugLinkMemory: 111,
            MessageType_DebugLinkMemoryWrite: 112,
            MessageType_DebugLinkFlashErase: 113,
            MessageType_DebugLinkLayout: 9001,
            MessageType_DebugLinkReseedRandom: 9002,
            MessageType_DebugLinkRecordScreen: 9003,
            MessageType_DebugLinkEraseSdCard: 9005,
            MessageType_DebugLinkWatchLayout: 9006,
            MessageType_EmmcFixPermission: 30100,
            MessageType_EmmcPath: 30101,
            MessageType_EmmcPathInfo: 30102,
            MessageType_EmmcFile: 30103,
            MessageType_EmmcFileRead: 30104,
            MessageType_EmmcFileWrite: 30105,
            MessageType_EmmcFileDelete: 30106,
            MessageType_EmmcDir: 30107,
            MessageType_EmmcDirList: 30108,
            MessageType_EmmcDirMake: 30109,
            MessageType_EmmcDirRemove: 30110,
            MessageType_EthereumGetPublicKey: 450,
            MessageType_EthereumPublicKey: 451,
            MessageType_EthereumGetAddress: 56,
            MessageType_EthereumAddress: 57,
            MessageType_EthereumSignTx: 58,
            MessageType_EthereumSignTxEIP1559: 452,
            MessageType_EthereumTxRequest: 59,
            MessageType_EthereumTxAck: 60,
            MessageType_EthereumSignMessage: 64,
            MessageType_EthereumVerifyMessage: 65,
            MessageType_EthereumMessageSignature: 66,
            MessageType_EthereumSignTypedData: 464,
            MessageType_EthereumTypedDataStructRequest: 465,
            MessageType_EthereumTypedDataStructAck: 466,
            MessageType_EthereumTypedDataValueRequest: 467,
            MessageType_EthereumTypedDataValueAck: 468,
            MessageType_EthereumTypedDataSignature: 469,
            MessageType_EthereumSignTypedHash: 470,
            MessageType_NEMGetAddress: 67,
            MessageType_NEMAddress: 68,
            MessageType_NEMSignTx: 69,
            MessageType_NEMSignedTx: 70,
            MessageType_NEMDecryptMessage: 75,
            MessageType_NEMDecryptedMessage: 76,
            MessageType_TezosGetAddress: 150,
            MessageType_TezosAddress: 151,
            MessageType_TezosSignTx: 152,
            MessageType_TezosSignedTx: 153,
            MessageType_TezosGetPublicKey: 154,
            MessageType_TezosPublicKey: 155,
            MessageType_StellarSignTx: 202,
            MessageType_StellarTxOpRequest: 203,
            MessageType_StellarGetAddress: 207,
            MessageType_StellarAddress: 208,
            MessageType_StellarCreateAccountOp: 210,
            MessageType_StellarPaymentOp: 211,
            MessageType_StellarPathPaymentStrictReceiveOp: 212,
            MessageType_StellarManageSellOfferOp: 213,
            MessageType_StellarCreatePassiveSellOfferOp: 214,
            MessageType_StellarSetOptionsOp: 215,
            MessageType_StellarChangeTrustOp: 216,
            MessageType_StellarAllowTrustOp: 217,
            MessageType_StellarAccountMergeOp: 218,
            MessageType_StellarManageDataOp: 220,
            MessageType_StellarBumpSequenceOp: 221,
            MessageType_StellarManageBuyOfferOp: 222,
            MessageType_StellarPathPaymentStrictSendOp: 223,
            MessageType_StellarSignedTx: 230,
            MessageType_CardanoGetPublicKey: 305,
            MessageType_CardanoPublicKey: 306,
            MessageType_CardanoGetAddress: 307,
            MessageType_CardanoAddress: 308,
            MessageType_CardanoTxItemAck: 313,
            MessageType_CardanoTxAuxiliaryDataSupplement: 314,
            MessageType_CardanoTxWitnessRequest: 315,
            MessageType_CardanoTxWitnessResponse: 316,
            MessageType_CardanoTxHostAck: 317,
            MessageType_CardanoTxBodyHash: 318,
            MessageType_CardanoSignTxFinished: 319,
            MessageType_CardanoSignTxInit: 320,
            MessageType_CardanoTxInput: 321,
            MessageType_CardanoTxOutput: 322,
            MessageType_CardanoAssetGroup: 323,
            MessageType_CardanoToken: 324,
            MessageType_CardanoTxCertificate: 325,
            MessageType_CardanoTxWithdrawal: 326,
            MessageType_CardanoTxAuxiliaryData: 327,
            MessageType_CardanoPoolOwner: 328,
            MessageType_CardanoPoolRelayParameters: 329,
            MessageType_CardanoGetNativeScriptHash: 330,
            MessageType_CardanoNativeScriptHash: 331,
            MessageType_CardanoTxMint: 332,
            MessageType_CardanoTxCollateralInput: 333,
            MessageType_CardanoTxRequiredSigner: 334,
            MessageType_CardanoTxInlineDatumChunk: 335,
            MessageType_CardanoTxReferenceScriptChunk: 336,
            MessageType_CardanoTxReferenceInput: 337,
            MessageType_CardanoSignMessage: 350,
            MessageType_CardanoMessageSignature: 351,
            MessageType_RippleGetAddress: 400,
            MessageType_RippleAddress: 401,
            MessageType_RippleSignTx: 402,
            MessageType_RippleSignedTx: 403,
            MessageType_MoneroTransactionInitRequest: 501,
            MessageType_MoneroTransactionInitAck: 502,
            MessageType_MoneroTransactionSetInputRequest: 503,
            MessageType_MoneroTransactionSetInputAck: 504,
            MessageType_MoneroTransactionInputsPermutationRequest: 505,
            MessageType_MoneroTransactionInputsPermutationAck: 506,
            MessageType_MoneroTransactionInputViniRequest: 507,
            MessageType_MoneroTransactionInputViniAck: 508,
            MessageType_MoneroTransactionAllInputsSetRequest: 509,
            MessageType_MoneroTransactionAllInputsSetAck: 510,
            MessageType_MoneroTransactionSetOutputRequest: 511,
            MessageType_MoneroTransactionSetOutputAck: 512,
            MessageType_MoneroTransactionAllOutSetRequest: 513,
            MessageType_MoneroTransactionAllOutSetAck: 514,
            MessageType_MoneroTransactionSignInputRequest: 515,
            MessageType_MoneroTransactionSignInputAck: 516,
            MessageType_MoneroTransactionFinalRequest: 517,
            MessageType_MoneroTransactionFinalAck: 518,
            MessageType_MoneroKeyImageExportInitRequest: 530,
            MessageType_MoneroKeyImageExportInitAck: 531,
            MessageType_MoneroKeyImageSyncStepRequest: 532,
            MessageType_MoneroKeyImageSyncStepAck: 533,
            MessageType_MoneroKeyImageSyncFinalRequest: 534,
            MessageType_MoneroKeyImageSyncFinalAck: 535,
            MessageType_MoneroGetAddress: 540,
            MessageType_MoneroAddress: 541,
            MessageType_MoneroGetWatchKey: 542,
            MessageType_MoneroWatchKey: 543,
            MessageType_DebugMoneroDiagRequest: 546,
            MessageType_DebugMoneroDiagAck: 547,
            MessageType_MoneroGetTxKeyRequest: 550,
            MessageType_MoneroGetTxKeyAck: 551,
            MessageType_MoneroLiveRefreshStartRequest: 552,
            MessageType_MoneroLiveRefreshStartAck: 553,
            MessageType_MoneroLiveRefreshStepRequest: 554,
            MessageType_MoneroLiveRefreshStepAck: 555,
            MessageType_MoneroLiveRefreshFinalRequest: 556,
            MessageType_MoneroLiveRefreshFinalAck: 557,
            MessageType_EosGetPublicKey: 600,
            MessageType_EosPublicKey: 601,
            MessageType_EosSignTx: 602,
            MessageType_EosTxActionRequest: 603,
            MessageType_EosTxActionAck: 604,
            MessageType_EosSignedTx: 605,
            MessageType_BinanceGetAddress: 700,
            MessageType_BinanceAddress: 701,
            MessageType_BinanceGetPublicKey: 702,
            MessageType_BinancePublicKey: 703,
            MessageType_BinanceSignTx: 704,
            MessageType_BinanceTxRequest: 705,
            MessageType_BinanceTransferMsg: 706,
            MessageType_BinanceOrderMsg: 707,
            MessageType_BinanceCancelMsg: 708,
            MessageType_BinanceSignedTx: 709,
            MessageType_SolanaGetAddress: 10100,
            MessageType_SolanaAddress: 10101,
            MessageType_SolanaSignTx: 10102,
            MessageType_SolanaSignedTx: 10103,
            MessageType_StarcoinGetAddress: 10300,
            MessageType_StarcoinAddress: 10301,
            MessageType_StarcoinGetPublicKey: 10302,
            MessageType_StarcoinPublicKey: 10303,
            MessageType_StarcoinSignTx: 10304,
            MessageType_StarcoinSignedTx: 10305,
            MessageType_StarcoinSignMessage: 10306,
            MessageType_StarcoinMessageSignature: 10307,
            MessageType_StarcoinVerifyMessage: 10308,
            MessageType_AptosGetAddress: 10600,
            MessageType_AptosAddress: 10601,
            MessageType_AptosSignTx: 10602,
            MessageType_AptosSignedTx: 10603,
            MessageType_AptosSignMessage: 10604,
            MessageType_AptosMessageSignature: 10605,
            MessageType_WebAuthnListResidentCredentials: 800,
            MessageType_WebAuthnCredentials: 801,
            MessageType_WebAuthnAddResidentCredential: 802,
            MessageType_WebAuthnRemoveResidentCredential: 803,
            MessageType_BixinSeedOperate: 901,
            MessageType_BixinMessageSE: 902,
            MessageType_BixinOutMessageSE: 904,
            MessageType_BixinBackupRequest: 905,
            MessageType_BixinBackupAck: 906,
            MessageType_BixinRestoreRequest: 907,
            MessageType_BixinRestoreAck: 908,
            MessageType_BixinVerifyDeviceRequest: 909,
            MessageType_BixinVerifyDeviceAck: 910,
            MessageType_BixinWhiteListRequest: 911,
            MessageType_BixinWhiteListAck: 912,
            MessageType_BixinLoadDevice: 913,
            MessageType_BixinBackupDevice: 914,
            MessageType_BixinBackupDeviceAck: 915,
            MessageType_BixinPinInputOnDevice: 10000,
            MessageType_EthereumSignMessageEIP712: 10200,
            MessageType_GetPublicKeyMultiple: 10210,
            MessageType_PublicKeyMultiple: 10211,
            MessageType_ConfluxGetAddress: 10112,
            MessageType_ConfluxAddress: 10113,
            MessageType_ConfluxSignTx: 10114,
            MessageType_ConfluxTxRequest: 10115,
            MessageType_ConfluxTxAck: 10116,
            MessageType_ConfluxSignMessage: 10117,
            MessageType_ConfluxSignMessageCIP23: 10118,
            MessageType_ConfluxMessageSignature: 10119,
            MessageType_TronGetAddress: 10501,
            MessageType_TronAddress: 10502,
            MessageType_TronSignTx: 10503,
            MessageType_TronSignedTx: 10504,
            MessageType_TronSignMessage: 10505,
            MessageType_TronMessageSignature: 10506,
            MessageType_NearGetAddress: 10701,
            MessageType_NearAddress: 10702,
            MessageType_NearSignTx: 10703,
            MessageType_NearSignedTx: 10704,
            MessageType_CosmosGetAddress: 10800,
            MessageType_CosmosAddress: 10801,
            MessageType_CosmosSignTx: 10802,
            MessageType_CosmosSignedTx: 10803,
            MessageType_AlgorandGetAddress: 10900,
            MessageType_AlgorandAddress: 10901,
            MessageType_AlgorandSignTx: 10902,
            MessageType_AlgorandSignedTx: 10903,
            MessageType_PolkadotGetAddress: 11000,
            MessageType_PolkadotAddress: 11001,
            MessageType_PolkadotSignTx: 11002,
            MessageType_PolkadotSignedTx: 11003,
            MessageType_SuiGetAddress: 11100,
            MessageType_SuiAddress: 11101,
            MessageType_SuiSignTx: 11102,
            MessageType_SuiSignedTx: 11103,
            MessageType_FilecoinGetAddress: 11200,
            MessageType_FilecoinAddress: 11201,
            MessageType_FilecoinSignTx: 11202,
            MessageType_FilecoinSignedTx: 11203,
            MessageType_KaspaGetAddress: 11300,
            MessageType_KaspaAddress: 11301,
            MessageType_KaspaSignTx: 11302,
            MessageType_KaspaSignedTx: 11303,
            MessageType_KaspaTxInputRequest: 11304,
            MessageType_KaspaTxInputAck: 11305,
            MessageType_NexaGetAddress: 11400,
            MessageType_NexaAddress: 11401,
            MessageType_NexaSignTx: 11402,
            MessageType_NexaSignedTx: 11403,
            MessageType_NexaTxInputRequest: 11404,
            MessageType_NexaTxInputAck: 11405,
            MessageType_DeviceBackToBoot: 903,
            MessageType_DeviceInfoSettings: 10001,
            MessageType_GetDeviceInfo: 10002,
            MessageType_DeviceInfo: 10003,
            MessageType_ReadSEPublicKey: 10004,
            MessageType_SEPublicKey: 10005,
            MessageType_WriteSEPublicCert: 10006,
            MessageType_ReadSEPublicCert: 10007,
            MessageType_SEPublicCert: 10008,
            MessageType_SpiFlashWrite: 10009,
            MessageType_SpiFlashRead: 10010,
            MessageType_SpiFlashData: 10011,
            MessageType_SESignMessage: 10012,
            MessageType_SEMessageSignature: 10013,
            MessageType_NFTWriteInfo: 10014,
            MessageType_NFTWriteData: 10015,
            MessageType_ResourceUpload: 10018,
            MessageType_ZoomRequest: 10019,
            MessageType_ResourceRequest: 10020,
            MessageType_ResourceAck: 10021,
            MessageType_ResourceUpdate: 10022,
            MessageType_ListResDir: 10023,
            MessageType_FileInfoList: 10024,
            MessageType_RebootToBoardloader: 10025,
            MessageType_DeviceEraseSector: 10026
        }
    },
    google: {
        nested: {
            protobuf: {
                nested: {
                    FileDescriptorSet: {
                        fields: {
                            file: {
                                rule: "repeated",
                                type: "FileDescriptorProto",
                                id: 1
                            }
                        }
                    },
                    FileDescriptorProto: {
                        fields: {
                            name: {
                                type: "string",
                                id: 1
                            },
                            "package": {
                                type: "string",
                                id: 2
                            },
                            dependency: {
                                rule: "repeated",
                                type: "string",
                                id: 3
                            },
                            public_dependency: {
                                rule: "repeated",
                                type: "int32",
                                id: 10,
                                options: {
                                    packed: false
                                }
                            },
                            weak_dependency: {
                                rule: "repeated",
                                type: "int32",
                                id: 11,
                                options: {
                                    packed: false
                                }
                            },
                            message_type: {
                                rule: "repeated",
                                type: "DescriptorProto",
                                id: 4
                            },
                            enum_type: {
                                rule: "repeated",
                                type: "EnumDescriptorProto",
                                id: 5
                            },
                            service: {
                                rule: "repeated",
                                type: "ServiceDescriptorProto",
                                id: 6
                            },
                            extension: {
                                rule: "repeated",
                                type: "FieldDescriptorProto",
                                id: 7
                            },
                            options: {
                                type: "FileOptions",
                                id: 8
                            },
                            source_code_info: {
                                type: "SourceCodeInfo",
                                id: 9
                            },
                            syntax: {
                                type: "string",
                                id: 12
                            }
                        }
                    },
                    DescriptorProto: {
                        fields: {
                            name: {
                                type: "string",
                                id: 1
                            },
                            field: {
                                rule: "repeated",
                                type: "FieldDescriptorProto",
                                id: 2
                            },
                            extension: {
                                rule: "repeated",
                                type: "FieldDescriptorProto",
                                id: 6
                            },
                            nested_type: {
                                rule: "repeated",
                                type: "DescriptorProto",
                                id: 3
                            },
                            enum_type: {
                                rule: "repeated",
                                type: "EnumDescriptorProto",
                                id: 4
                            },
                            extension_range: {
                                rule: "repeated",
                                type: "ExtensionRange",
                                id: 5
                            },
                            oneof_decl: {
                                rule: "repeated",
                                type: "OneofDescriptorProto",
                                id: 8
                            },
                            options: {
                                type: "MessageOptions",
                                id: 7
                            },
                            reserved_range: {
                                rule: "repeated",
                                type: "ReservedRange",
                                id: 9
                            },
                            reserved_name: {
                                rule: "repeated",
                                type: "string",
                                id: 10
                            }
                        },
                        nested: {
                            ExtensionRange: {
                                fields: {
                                    start: {
                                        type: "int32",
                                        id: 1
                                    },
                                    end: {
                                        type: "int32",
                                        id: 2
                                    }
                                }
                            },
                            ReservedRange: {
                                fields: {
                                    start: {
                                        type: "int32",
                                        id: 1
                                    },
                                    end: {
                                        type: "int32",
                                        id: 2
                                    }
                                }
                            }
                        }
                    },
                    FieldDescriptorProto: {
                        fields: {
                            name: {
                                type: "string",
                                id: 1
                            },
                            number: {
                                type: "int32",
                                id: 3
                            },
                            label: {
                                type: "Label",
                                id: 4
                            },
                            type: {
                                type: "Type",
                                id: 5
                            },
                            type_name: {
                                type: "string",
                                id: 6
                            },
                            extendee: {
                                type: "string",
                                id: 2
                            },
                            default_value: {
                                type: "string",
                                id: 7
                            },
                            oneof_index: {
                                type: "int32",
                                id: 9
                            },
                            json_name: {
                                type: "string",
                                id: 10
                            },
                            options: {
                                type: "FieldOptions",
                                id: 8
                            }
                        },
                        nested: {
                            Type: {
                                values: {
                                    TYPE_DOUBLE: 1,
                                    TYPE_FLOAT: 2,
                                    TYPE_INT64: 3,
                                    TYPE_UINT64: 4,
                                    TYPE_INT32: 5,
                                    TYPE_FIXED64: 6,
                                    TYPE_FIXED32: 7,
                                    TYPE_BOOL: 8,
                                    TYPE_STRING: 9,
                                    TYPE_GROUP: 10,
                                    TYPE_MESSAGE: 11,
                                    TYPE_BYTES: 12,
                                    TYPE_UINT32: 13,
                                    TYPE_ENUM: 14,
                                    TYPE_SFIXED32: 15,
                                    TYPE_SFIXED64: 16,
                                    TYPE_SINT32: 17,
                                    TYPE_SINT64: 18
                                }
                            },
                            Label: {
                                values: {
                                    LABEL_OPTIONAL: 1,
                                    LABEL_REQUIRED: 2,
                                    LABEL_REPEATED: 3
                                }
                            }
                        }
                    },
                    OneofDescriptorProto: {
                        fields: {
                            name: {
                                type: "string",
                                id: 1
                            },
                            options: {
                                type: "OneofOptions",
                                id: 2
                            }
                        }
                    },
                    EnumDescriptorProto: {
                        fields: {
                            name: {
                                type: "string",
                                id: 1
                            },
                            value: {
                                rule: "repeated",
                                type: "EnumValueDescriptorProto",
                                id: 2
                            },
                            options: {
                                type: "EnumOptions",
                                id: 3
                            }
                        }
                    },
                    EnumValueDescriptorProto: {
                        fields: {
                            name: {
                                type: "string",
                                id: 1
                            },
                            number: {
                                type: "int32",
                                id: 2
                            },
                            options: {
                                type: "EnumValueOptions",
                                id: 3
                            }
                        }
                    },
                    ServiceDescriptorProto: {
                        fields: {
                            name: {
                                type: "string",
                                id: 1
                            },
                            method: {
                                rule: "repeated",
                                type: "MethodDescriptorProto",
                                id: 2
                            },
                            options: {
                                type: "ServiceOptions",
                                id: 3
                            }
                        }
                    },
                    MethodDescriptorProto: {
                        fields: {
                            name: {
                                type: "string",
                                id: 1
                            },
                            input_type: {
                                type: "string",
                                id: 2
                            },
                            output_type: {
                                type: "string",
                                id: 3
                            },
                            options: {
                                type: "MethodOptions",
                                id: 4
                            },
                            client_streaming: {
                                type: "bool",
                                id: 5
                            },
                            server_streaming: {
                                type: "bool",
                                id: 6
                            }
                        }
                    },
                    FileOptions: {
                        fields: {
                            java_package: {
                                type: "string",
                                id: 1
                            },
                            java_outer_classname: {
                                type: "string",
                                id: 8
                            },
                            java_multiple_files: {
                                type: "bool",
                                id: 10
                            },
                            java_generate_equals_and_hash: {
                                type: "bool",
                                id: 20,
                                options: {
                                    deprecated: true
                                }
                            },
                            java_string_check_utf8: {
                                type: "bool",
                                id: 27
                            },
                            optimize_for: {
                                type: "OptimizeMode",
                                id: 9,
                                options: {
                                    "default": "SPEED"
                                }
                            },
                            go_package: {
                                type: "string",
                                id: 11
                            },
                            cc_generic_services: {
                                type: "bool",
                                id: 16
                            },
                            java_generic_services: {
                                type: "bool",
                                id: 17
                            },
                            py_generic_services: {
                                type: "bool",
                                id: 18
                            },
                            deprecated: {
                                type: "bool",
                                id: 23
                            },
                            cc_enable_arenas: {
                                type: "bool",
                                id: 31
                            },
                            objc_class_prefix: {
                                type: "string",
                                id: 36
                            },
                            csharp_namespace: {
                                type: "string",
                                id: 37
                            },
                            uninterpreted_option: {
                                rule: "repeated",
                                type: "UninterpretedOption",
                                id: 999
                            }
                        },
                        extensions: [
                            [
                                1000,
                                536870911
                            ]
                        ],
                        reserved: [
                            [
                                38,
                                38
                            ]
                        ],
                        nested: {
                            OptimizeMode: {
                                values: {
                                    SPEED: 1,
                                    CODE_SIZE: 2,
                                    LITE_RUNTIME: 3
                                }
                            }
                        }
                    },
                    MessageOptions: {
                        fields: {
                            message_set_wire_format: {
                                type: "bool",
                                id: 1
                            },
                            no_standard_descriptor_accessor: {
                                type: "bool",
                                id: 2
                            },
                            deprecated: {
                                type: "bool",
                                id: 3
                            },
                            map_entry: {
                                type: "bool",
                                id: 7
                            },
                            uninterpreted_option: {
                                rule: "repeated",
                                type: "UninterpretedOption",
                                id: 999
                            }
                        },
                        extensions: [
                            [
                                1000,
                                536870911
                            ]
                        ],
                        reserved: [
                            [
                                8,
                                8
                            ]
                        ]
                    },
                    FieldOptions: {
                        fields: {
                            ctype: {
                                type: "CType",
                                id: 1,
                                options: {
                                    "default": "STRING"
                                }
                            },
                            packed: {
                                type: "bool",
                                id: 2
                            },
                            jstype: {
                                type: "JSType",
                                id: 6,
                                options: {
                                    "default": "JS_NORMAL"
                                }
                            },
                            lazy: {
                                type: "bool",
                                id: 5
                            },
                            deprecated: {
                                type: "bool",
                                id: 3
                            },
                            weak: {
                                type: "bool",
                                id: 10
                            },
                            uninterpreted_option: {
                                rule: "repeated",
                                type: "UninterpretedOption",
                                id: 999
                            }
                        },
                        extensions: [
                            [
                                1000,
                                536870911
                            ]
                        ],
                        reserved: [
                            [
                                4,
                                4
                            ]
                        ],
                        nested: {
                            CType: {
                                values: {
                                    STRING: 0,
                                    CORD: 1,
                                    STRING_PIECE: 2
                                }
                            },
                            JSType: {
                                values: {
                                    JS_NORMAL: 0,
                                    JS_STRING: 1,
                                    JS_NUMBER: 2
                                }
                            }
                        }
                    },
                    OneofOptions: {
                        fields: {
                            uninterpreted_option: {
                                rule: "repeated",
                                type: "UninterpretedOption",
                                id: 999
                            }
                        },
                        extensions: [
                            [
                                1000,
                                536870911
                            ]
                        ]
                    },
                    EnumOptions: {
                        fields: {
                            allow_alias: {
                                type: "bool",
                                id: 2
                            },
                            deprecated: {
                                type: "bool",
                                id: 3
                            },
                            uninterpreted_option: {
                                rule: "repeated",
                                type: "UninterpretedOption",
                                id: 999
                            }
                        },
                        extensions: [
                            [
                                1000,
                                536870911
                            ]
                        ]
                    },
                    EnumValueOptions: {
                        fields: {
                            deprecated: {
                                type: "bool",
                                id: 1
                            },
                            uninterpreted_option: {
                                rule: "repeated",
                                type: "UninterpretedOption",
                                id: 999
                            }
                        },
                        extensions: [
                            [
                                1000,
                                536870911
                            ]
                        ]
                    },
                    ServiceOptions: {
                        fields: {
                            deprecated: {
                                type: "bool",
                                id: 33
                            },
                            uninterpreted_option: {
                                rule: "repeated",
                                type: "UninterpretedOption",
                                id: 999
                            }
                        },
                        extensions: [
                            [
                                1000,
                                536870911
                            ]
                        ]
                    },
                    MethodOptions: {
                        fields: {
                            deprecated: {
                                type: "bool",
                                id: 33
                            },
                            uninterpreted_option: {
                                rule: "repeated",
                                type: "UninterpretedOption",
                                id: 999
                            }
                        },
                        extensions: [
                            [
                                1000,
                                536870911
                            ]
                        ]
                    },
                    UninterpretedOption: {
                        fields: {
                            name: {
                                rule: "repeated",
                                type: "NamePart",
                                id: 2
                            },
                            identifier_value: {
                                type: "string",
                                id: 3
                            },
                            positive_int_value: {
                                type: "uint64",
                                id: 4
                            },
                            negative_int_value: {
                                type: "int64",
                                id: 5
                            },
                            double_value: {
                                type: "double",
                                id: 6
                            },
                            string_value: {
                                type: "bytes",
                                id: 7
                            },
                            aggregate_value: {
                                type: "string",
                                id: 8
                            }
                        },
                        nested: {
                            NamePart: {
                                fields: {
                                    name_part: {
                                        rule: "required",
                                        type: "string",
                                        id: 1
                                    },
                                    is_extension: {
                                        rule: "required",
                                        type: "bool",
                                        id: 2
                                    }
                                }
                            }
                        }
                    },
                    SourceCodeInfo: {
                        fields: {
                            location: {
                                rule: "repeated",
                                type: "Location",
                                id: 1
                            }
                        },
                        nested: {
                            Location: {
                                fields: {
                                    path: {
                                        rule: "repeated",
                                        type: "int32",
                                        id: 1
                                    },
                                    span: {
                                        rule: "repeated",
                                        type: "int32",
                                        id: 2
                                    },
                                    leading_comments: {
                                        type: "string",
                                        id: 3
                                    },
                                    trailing_comments: {
                                        type: "string",
                                        id: 4
                                    },
                                    leading_detached_comments: {
                                        rule: "repeated",
                                        type: "string",
                                        id: 6
                                    }
                                }
                            }
                        }
                    },
                    GeneratedCodeInfo: {
                        fields: {
                            annotation: {
                                rule: "repeated",
                                type: "Annotation",
                                id: 1
                            }
                        },
                        nested: {
                            Annotation: {
                                fields: {
                                    path: {
                                        rule: "repeated",
                                        type: "int32",
                                        id: 1
                                    },
                                    source_file: {
                                        type: "string",
                                        id: 2
                                    },
                                    begin: {
                                        type: "int32",
                                        id: 3
                                    },
                                    end: {
                                        type: "int32",
                                        id: 4
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
};
var MessagesLegacyV1JSON = {
    nested: nested
};
const httpRequest$1 = (url, type = "text")=>__awaiter(void 0, void 0, void 0, function*() {
        const headers = {};
        if (url.indexOf("ngrok-free.app") > -1) headers["ngrok-skip-browser-warning"] = true;
        const response = yield axios__default["default"].request({
            url,
            withCredentials: false,
            responseType: type === "binary" ? "arraybuffer" : "json",
            headers
        });
        if (+response.status === 200) {
            if (type === "json") return response.data;
            if (type === "binary") return response.data;
            return response.data;
        }
        throw new Error(`httpRequest error: ${url} ${response.statusText}`);
    });
const httpRequest = (url, type)=>httpRequest$1(url, type);
const getTimeStamp = ()=>new Date().getTime();
const VER_NUMS = 3;
const versionRegex = new RegExp(/^[0-9]{1,3}(\.[0-9]{1,3}){0,2}$/);
const isValidVersionString = (version)=>versionRegex.test(version);
const isValidVersionArray = (version)=>{
    if (!Array.isArray(version)) return false;
    if (version.length === 0 || version.length > VER_NUMS) return false;
    if (version[0] === 0) return false;
    for(let i = 0; i < version.length; i++){
        if (typeof version[i] !== "number" || version[i] < 0) return false;
    }
    return true;
};
const normalizeVersionArray = (version)=>{
    if (version.length === VER_NUMS) return version;
    const partialVersion = [
        ...version
    ];
    for(let i = version.length; i < VER_NUMS; i++)partialVersion.push(0);
    return partialVersion;
};
const versionSplit = (version)=>{
    if (!isValidVersionString(version)) return [
        0,
        0,
        0
    ];
    return version.split(".").map((v)=>Number(v));
};
const versionCompare = (a, b)=>{
    if (typeof a === "string" && typeof b === "string" && a === b) return 0;
    const pa = typeof a === "string" ? versionSplit(a) : a;
    const pb = typeof b === "string" ? versionSplit(b) : b;
    const vpa = isValidVersionArray(pa);
    const vpb = isValidVersionArray(pb);
    if (!vpa && !vpb) return 0;
    if (!vpa && vpb) return -1;
    if (vpa && !vpb) return 1;
    const npa = normalizeVersionArray(pa);
    const npb = normalizeVersionArray(pb);
    for(let i = 0; i < VER_NUMS; i++){
        if (npa[i] > npb[i]) return 1;
        if (npb[i] > npa[i]) return -1;
    }
    return 0;
};
function patchFeatures(response) {
    if (response.type !== "Features") return response;
    if (response.message.major_version < 1) response.message.major_version = 1;
    return response;
}
const pkg = require("a8ce48eb11c5df9f");
const getSDKVersion = ()=>pkg.version;
const DEFAULT_DOMAIN = `https://jssdk.onekey.so/${getSDKVersion()}/`;
const DEFAULT_PRIORITY = 2;
const initialSettings = {
    configSrc: "./data/config.json",
    version: "",
    debug: false,
    priority: DEFAULT_PRIORITY,
    trustedHost: false,
    connectSrc: DEFAULT_DOMAIN,
    iframeSrc: `${DEFAULT_DOMAIN}iframe.html`,
    parentOrigin: typeof window !== "undefined" && window.location ? window.location.origin : "",
    supportedBrowser: typeof navigator !== "undefined" ? !/Trident|MSIE|Edge/.test(navigator.userAgent) : true,
    env: "web",
    lazyLoad: false,
    timestamp: new Date().getTime()
};
const getEnv = ()=>{
    if (typeof chrome !== "undefined" && chrome.runtime && typeof chrome.runtime.onConnect !== "undefined") return "webextension";
    if (typeof navigator !== "undefined") {
        if (typeof navigator.product === "string" && navigator.product.toLowerCase() === "reactnative") return "react-native";
        const userAgent = navigator.userAgent.toLowerCase();
        if (userAgent.indexOf(" electron/") > -1) return "electron";
    }
    return "web";
};
const corsValidator = (url)=>{
    if (typeof url !== "string") return;
    if (url.match(/^https:\/\/([A-Za-z0-9\-_]+\.)*onekey\.so\//)) return url;
    if (url.match(/^https?:\/\/localhost:[58][0-9]{3}\//)) return url;
    return url;
};
const parseConnectSettings = (input = {})=>{
    const settings = Object.assign({}, initialSettings);
    if (Object.prototype.hasOwnProperty.call(input, "debug")) settings.debug = input.debug;
    if (input.isFrame) settings.parentOrigin = input.parentOrigin;
    if (typeof input.connectSrc === "string") settings.connectSrc = input.connectSrc;
    let globalSrc;
    if (typeof window !== "undefined") globalSrc = window.ONEKEY_CONNECT_SRC;
    else if (typeof global !== "undefined") globalSrc = global.ONEKEY_CONNECT_SRC;
    if (typeof globalSrc === "string") {
        settings.connectSrc = corsValidator(globalSrc);
        settings.debug = true;
    }
    const src = settings.connectSrc || DEFAULT_DOMAIN;
    settings.iframeSrc = `${src}iframe.html`;
    if (input.transportReconnect) settings.transportReconnect = input.transportReconnect;
    if (input.lazyLoad) settings.lazyLoad = input.lazyLoad;
    if (typeof input.env === "string") settings.env = input.env;
    else settings.env = getEnv();
    if (input.timestamp) settings.timestamp = input.timestamp;
    if (input.preRelease) settings.preRelease = input.preRelease;
    return settings;
};
function shouldUpdateBootloaderForClassicAndMini({ currentVersion, bootloaderVersion, willUpdateFirmware, targetBootloaderVersion, bootloaderRelatedFirmwareVersion }) {
    if (targetBootloaderVersion && semver__default["default"].gte(bootloaderVersion, targetBootloaderVersion.join("."))) return false;
    if (semver__default["default"].gte(willUpdateFirmware, bootloaderRelatedFirmwareVersion.join("."))) return true;
    if (semver__default["default"].gte(currentVersion, bootloaderRelatedFirmwareVersion.join("."))) return true;
    return false;
}
function checkNeedUpdateBootForTouch(features) {
    const deviceType = getDeviceType(features);
    if (deviceType !== "touch") return false;
    const currentVersion = getDeviceFirmwareVersion(features).join(".");
    const bootloaderVersion = getDeviceBootloaderVersion(features).join(".");
    const targetBootloaderVersion = DataManager.getBootloaderTargetVersion(features);
    if (!targetBootloaderVersion) return false;
    return semver__default["default"].gte(currentVersion, "3.2.0") && semver__default["default"].gte(currentVersion, "4.1.0") && semver__default["default"].lte(bootloaderVersion, targetBootloaderVersion.join("."));
}
function checkNeedUpdateBootForClassicAndMini(features, willUpdateFirmware) {
    const deviceType = getDeviceType(features);
    if (deviceType !== "classic" && deviceType !== "mini") return false;
    if (!willUpdateFirmware) return false;
    const currentVersion = getDeviceFirmwareVersion(features).join(".");
    const bootloaderVersion = getDeviceBootloaderVersion(features).join(".");
    const targetBootloaderVersion = DataManager.getBootloaderTargetVersion(features);
    if (targetBootloaderVersion && semver__default["default"].gte(bootloaderVersion, targetBootloaderVersion.join("."))) return false;
    const bootloaderRelatedFirmwareVersion = DataManager.getBootloaderRelatedFirmwareVersion(features);
    if (!bootloaderRelatedFirmwareVersion) return false;
    return shouldUpdateBootloaderForClassicAndMini({
        currentVersion,
        bootloaderVersion,
        willUpdateFirmware,
        targetBootloaderVersion,
        bootloaderRelatedFirmwareVersion
    });
}
const INIT_DATA_CHUNK_SIZE$1 = 16384;
function checkBootloaderLength(data) {
    const chunk = new Uint8Array(data.slice(0, Math.min(INIT_DATA_CHUNK_SIZE$1, data.byteLength)));
    const buffer = ByteBuffer__default["default"].wrap(chunk, undefined, undefined, true);
    buffer.LE();
    buffer.readByte();
    buffer.readByte();
    buffer.readByte();
    buffer.readByte();
    const hdrlen = buffer.readUint32();
    buffer.readUint32();
    const codelen = buffer.readUint32();
    const bootloaderLength = hdrlen + codelen;
    return bootloaderLength === data.byteLength;
}
const LOG_EVENT = "LOG_EVENT";
const LOG = {
    OUTPUT: "log-output"
};
const createLogMessage = (type, payload)=>({
        event: LOG_EVENT,
        type,
        payload
    });
const MAX_ENTRIES = 500;
let postMessage$1;
class Log$9 {
    constructor(prefix, enabled){
        this.prefix = prefix;
        this.enabled = enabled;
        this.messages = [];
    }
    addMessage(level, prefix, ...args) {
        this.messages.push({
            level,
            prefix,
            message: args,
            timestamp: new Date().getTime()
        });
        if (this.messages.length > MAX_ENTRIES) this.messages.shift();
    }
    log(...args) {
        this.addMessage("log", this.prefix, ...args);
        sendLogMessage(this.prefix, ...args);
        if (!this.enabled) return;
        console.log(this.prefix, ...args);
    }
    error(...args) {
        this.addMessage("error", this.prefix, ...args);
        sendLogMessage(this.prefix, ...args);
        if (!this.enabled) return;
        console.error(this.prefix, ...args);
    }
    warn(...args) {
        this.addMessage("warn", this.prefix, ...args);
        sendLogMessage(this.prefix, ...args);
        if (!this.enabled) return;
        console.warn(this.prefix, ...args);
    }
    debug(...args) {
        this.addMessage("debug", this.prefix, ...args);
        sendLogMessage(this.prefix, ...args);
        if (!this.enabled) return;
        console.log(this.prefix, ...args);
    }
}
const _logs = {};
const initLog = (prefix, enabled)=>{
    const instance = new Log$9(prefix, !!enabled);
    _logs[prefix] = instance;
    return instance;
};
const enableLog = (enabled)=>{
    Object.keys(_logs).forEach((key)=>{
        _logs[key].enabled = !!enabled;
    });
};
const getLog = ()=>{
    let logs = [];
    Object.keys(_logs).forEach((key)=>{
        logs = logs.concat(_logs[key].messages);
    });
    logs.sort((a, b)=>a.timestamp - b.timestamp);
    return logs;
};
const setLoggerPostMessage = (postMessageFn)=>{
    postMessage$1 = postMessageFn;
};
const serializeLog = (...args)=>args.map((arg)=>{
        if (typeof arg === "string") return arg;
        if (typeof arg === "number") return arg;
        if (typeof arg === "boolean") return arg;
        if (typeof arg === "undefined") return arg;
        if (typeof arg === "object") return JSON.stringify(arg, getCircularReplacer());
        return arg;
    });
const getCircularReplacer = ()=>{
    const seen = new WeakSet();
    return (_, value)=>{
        if (typeof value === "object" && value !== null) {
            if (seen.has(value)) return;
            seen.add(value);
        }
        return value;
    };
};
const sendLogMessage = (prefix, ...args)=>{
    postMessage$1 === null || postMessage$1 === void 0 || postMessage$1(createLogMessage(LOG.OUTPUT, serializeLog(prefix, ...args)));
};
exports.LoggerNames = void 0;
(function(LoggerNames) {
    LoggerNames["Core"] = "Core";
    LoggerNames["Transport"] = "Transport";
    LoggerNames["Device"] = "Device";
    LoggerNames["DeviceCommands"] = "DeviceCommands";
    LoggerNames["DeviceConnector"] = "DeviceConnector";
    LoggerNames["DeviceList"] = "DeviceList";
    LoggerNames["DevicePool"] = "DevicePool";
    LoggerNames["HdCommonConnectSdk"] = "@onekey/common-connect-sdk";
    LoggerNames["HdBleSdk"] = "@onekey/hd-ble-sdk";
    LoggerNames["HdTransportHttp"] = "@onekey/hd-transport-http";
    LoggerNames["HdTransportLowLevel"] = "@onekey/hd-transport-lowlevel";
    LoggerNames["HdBleTransport"] = "@onekey/hd-ble-transport";
    LoggerNames["Connect"] = "@onekey/connect";
    LoggerNames["Iframe"] = "IFrame";
    LoggerNames["SendMessage"] = "[SendMessage]";
    LoggerNames["Method"] = "[Method]";
})(exports.LoggerNames || (exports.LoggerNames = {}));
const LoggerMap = {
    [exports.LoggerNames.Core]: initLog(exports.LoggerNames.Core),
    [exports.LoggerNames.Transport]: initLog(exports.LoggerNames.Transport),
    [exports.LoggerNames.Device]: initLog(exports.LoggerNames.Device),
    [exports.LoggerNames.DeviceCommands]: initLog(exports.LoggerNames.DeviceCommands),
    [exports.LoggerNames.DeviceConnector]: initLog(exports.LoggerNames.DeviceConnector),
    [exports.LoggerNames.DeviceList]: initLog(exports.LoggerNames.DeviceList),
    [exports.LoggerNames.DevicePool]: initLog(exports.LoggerNames.DevicePool),
    [exports.LoggerNames.HdBleSdk]: initLog(exports.LoggerNames.HdBleSdk),
    [exports.LoggerNames.HdTransportHttp]: initLog(exports.LoggerNames.HdTransportHttp),
    [exports.LoggerNames.HdBleTransport]: initLog(exports.LoggerNames.HdBleTransport),
    [exports.LoggerNames.HdTransportLowLevel]: initLog(exports.LoggerNames.HdTransportLowLevel),
    [exports.LoggerNames.Connect]: initLog(exports.LoggerNames.Connect),
    [exports.LoggerNames.Iframe]: initLog(exports.LoggerNames.Iframe),
    [exports.LoggerNames.SendMessage]: initLog(exports.LoggerNames.SendMessage),
    [exports.LoggerNames.Method]: initLog(exports.LoggerNames.Method),
    [exports.LoggerNames.HdCommonConnectSdk]: initLog(exports.LoggerNames.Method)
};
const getLogger = (key)=>LoggerMap[key];
const getT1Data = ()=>({
        default: {
            name: "default",
            hex: ""
        },
        original: {
            name: "original",
            hex: "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003c0000000000000000000000000000003c000000000000000000000000000003fc000000000000000000000000000003fc000000000000000000000000000003fc000000000000000000000000000003fc0000000000000000000000000000003c0000000000000000000000000000003c0000000000000000000000000000003c0000000000000000000000000000003c0000000000000000000000000000003c0000000000000000000000000000003c0000000000000000000000000000003c0000000000000000000000000000003c0000000000000000000000000000003c0000000000000000000000000000003c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ff000000000000000000000000000000ff000000000000000000000000000003ffc00000000000000000000000000003ffc0000000000000000000000000000f00f0000000000000000000000000000f00f0000000000000000000000000003c003c000000000000000000000000003c003c000000000000000000000000003c003c000000000000000000000000003c003c000000000000000000000000003c003c000000000000000000000000003c003c000000000000000000000000003c003c000000000000000000000000003c003c000000000000000000000000000f00f0000000000000000000000000000f00f00000000000000000000000000003ffc00000000000000000000000000003ffc00000000000000000000000000000ff000000000000000000000000000000ff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
        },
        circleweb: {
            name: "circleweb",
            hex: "00486003070c08080c01c1c0380000c0007cc003fc04080c08017f801800018000f7c0033806080c08031d80180001000088400218020c0c0802018018000700008040020e0304041806018018003f0001f0400206010404180401803000f9000188e00403018604100c03c06003e180030fe00c01808e3e10080271f01f0180070f383e00c0fe7f3018041fb83c00801e880ff38060e1e3fc10080e0ee000c0f87007c0c020c0c1c610101c0780006078600300703f80c18320201803000070182003001c3b80c1816040100300007f0c6001000660c0e383f08010010007fc0660030001c043ff8319001001007cf00340030000c07f9cfe0e00100307e0c00160030000c07c84fe0e0078033e00c001e003e001c0d8c48e0c03cc0fe0018001f006ffc7f38c448e0c0e07ff00018001b80c03fc3f06669bfe7807fc000180019e3800181f062293e7c0071c00018001ffe0001809831292c1000c060007c001e0c0001808c3929481001c02007fc003806000181071bfa48100780307f0e0030020001c3038ffe8c30ff801fe00600700303ffff00c3ff8eff81801e000300e001fe071fe07381a7f00180100003f1e0010006043e7600c430018030000f9f200100040603ce007c30008060001c0c600100040600cc006c3000c0c00018083003000406007c007e3800f3800030083002001c07ffcc007fffe3ff0000200838060ffe0f1fc40071c0fe07000020047c0ffc03f800cc0061800c0300006003cfff00039c01fe00e1800c010007e00207fc00030c1fe701f38018018ffff002cc06000607f863c71fe01801fe0030033802000403c063ff0c3c0801800038021003003c0300e2311c07880180001802300103e402039e31f700fc0300000c0760013c06060e1e31e1807c0600000f966001c0031ff813ff40c07e1c00003ffc20018001f0e0333e607183fc0000601c20010000e0606222203900ff0000c00c70030007e020c662101f00e7fe00800fd803003ec0218463180600601ff90000780601f0c03f086308060060007f00003e0e0780607f886104fe0060000300001ff9fc0060c0f841079e0040000100000dc060003f807041060600c000018000058060007b807041840301f00001800007003001c1007fc3ec01831c00008000070010070100706c3c01fe07000fc0000600181c018060380c01f001c078e010060018700380c0300c01e00070c03870060018c006e1c010040330001d801fd00e001b001c7ec0100606180007000e001a001c003818c03007fc0c00030006003f003c00701040300ffc0e000300040fc3807f00e02060f0080c07000300040680c1c18180407f98380603800300060300ff00c300405f87fc0301c00300060100ce006600808183c40100e1ff000711008600380100818106018063038009f"
        },
        circuit: {
            name: "circuit",
            hex: "ffffffc18380002180001c0380f00c0000000041038000608000380701e0180000000063038000608000700e03c030400000003e038000218000e01c078060e000000000038000330001c0380f00c1b0000000000380001e000380701e0183180000001c03800000000700e03c03060c0000003703800000000e01c078060c060000006103800000001c0380f00c1803ffffffc18387ff8000380701e0183001ffffffc18387ff8000700e03c0306000000000610387ff8000e01c078060c000000000330387878001c0380f00c180000000001c038707800380701e0183038000000000038703800700e03c030606c000000000038707800e01c078060c0c6000000000038787801c0380f00c181830ffffffc00387ff80380701e018303018ffffffe00387ff80700e03c03060600c000000600387ff80e01c078060c0c0060000006003800001c0380f00c18180033ffffe600380000380701e01830300013ffffe600380000700e03c03060600003ffffe600380000e01c078060c0c02013ffffe600380001c0380f00c181807013c001e6007c000380701e01830300f813c001e600fe000700e03c03060601fc13c001e601ff000e01c078060c0c03de03c001e601ff001c0380f00c1818078f03c001e601ff00380701e01830300f0783c001e601ff00700e03c03060601e03c3c001e600ff00e01c078060c0c03c01e3c001e600fe01c0380f00c181807800f3c001e600380380701e01830300f00073c001e600000700e03c03060601e00033c001e600000e01c078060c0c03c00013c001e600001c0380f00c181807800003c001e60000380701e01830300f000003ffffe60000700e03c03060601e0c0013ffffe60000e01c078060c0c03c1f0033ffffe60001c0380f00c1818078218073ffffe6000380701e01830300f06080f0000006000700e03c03060601e06081e0000006000e01c078060c0c03c02083cffffffe001c0380f00c1818078133078ffffffc00380701e01830300f07de0f0000000000700e03c03060601e08401e0000000000e01c078060c0c03c18203c0000000001c0380f00c1818078102078100000000380701e01830300f01860f0200000000700e03c03060601e00c41e0400000000e01c078060c0c03c00783c0800078001c0380f00c181807800007810000cc00380701e01830300f00000f0200018600700e03c03060600780001e040fff0200e01c078060c03003c0003c0800018201c0380f00c1801801e00078100000860380701e3f80c00c00f000f0200000fc0700e03c63006006007801e0400000300e01c07841003003003c03c08001c0001c0380f041001801801e078100066000380701e041000c00c00f0f0200043000700e03c0630006006e079e04000c1000e01c07803e0003003b83fc08038"
        },
        starweb: {
            name: "starweb",
            hex: "01e600002f804210c218803f80001bc01f86000020f04610e31883c10000187ef1890000200e4331a1308e010000042331190ffe2003c1e010e070010ffe2623221108022000e04210c0c001180622112221880223e078040803c0f11004211144218c0222386404080cc31110047108444204022308230004104611100c5088cc46440201081188046246311008188c88844603110890c800c2462010180844888c420311f88830038446e230108c441088e33e10188810030447823e10c4421108a1e0100084180208400203e046221111000008008618060840040000222223111000180002140b104006000222112233180ffe1e830219104f1ff8023111222220f00701c1221120e01807c0111162220780058070a1210180680078111044646e0000403c80e14780c0001d888844446203e23006e0c1990110e01988884447830e201821e0c1e10601fc107888844e010c3106006041c1082104201c8888d8008410030030c1823002086006c448e030c210808030c3024042184301c44880f841e0407818e6048081f087c0443b038c2080203c1dae070180610c70351c0e061000fffe17ba0fffc003081c0e181802180e08038b36380438061006067c30030c300401f937f000070c30030fd2080186c002009daf601000d8600612110403038001004decc0200070300c221182060dffc0c063f980c07fec18186211c18818403ffffb37ffff00860c30e21120f0602000fe0e1c1fe00101834122111060c0180303861870300200c1822211180102060c007e1f800c08106006221116020f813000c738c0062078100e2211130418c0f0031ffe2003c0c608122211118830618f07fbf7f81c608304622211113070c3007f32d33f8030c383a2220191301d8600f026d903c0184603222088914c070c03606edd81b00c380ca26088998300181c4076db808e0400186644888981c010e080e7f9c0418200e0644488890070230181873860607103802444888a100e6c0107061838200d8e001c44888c3c03f0033f06183a3003f00f0c44c0486700b007c6061838f803c03984c0444841c180ec0c04083c0c0060e08488445080610008180c1c06040021804288446180620008321e1e12040011806108442100421810222e1911040610802108624200c43f10424a1490823f08c01091e24600846310838924704231884018913283818842010309243022108c4078530f807908c2220611a01811108427c07c03800708fe240c10c20c091ec43c007081b00010f0283210c2130d07c20003e0c28e00100039c210c210c70002001c504484e010003e0200c2101f000201f848c44437f003f00221211003e0033f98888442233ffe6000221110019fffa110888c2311200060e0261121c1800122310c0a2118c00043a1640923718000c62114"
        },
        stars: {
            name: "stars",
            hex: "0000000000000000000000000000000007e000000000000000000000000000000ff000000000000000000000000000001ff800000000000000200000000000043ffc00000001000000000000008000007ffe0800000380000000000001c000007ffe00000001000000000000009038007ffe0000000800000000001c00027c007ffe0000002040000000003e0000fe007ffe80000000003ff000003e0000fe007ffe2a00014021fffe00003e0000fe003ffc0080780007ffff80001c00007c001ff80028fc001fffffe00080000038000ff00002fc003ffffff000020000800007e00000fc00fffffffc02000000000000000000fc01ffc63ffe080100010000000800007803ffc63fff000000000000000000000003ffc63fff200080020000000400010007ffc63fff80000000000000000000000fffc63fffc0002008000000020004000fe00007ffc0000000000000000010001fe00000ffe0001020000000010020001fe000007fe0000000000000004000003ffc00003ff0000840000000000080003ffe07c03ff0000000000000002000003ffe07f03ff0000780000000000200007ffe07f83ff8000fc0000000001800007ffe07f83ff8000fc0000000003c00007ffe07f03ff8000fc0000000003c00007ffe07c07ff8000fc0000000001800007ffe0000fff8000780000000000000007ffe00007ff8000000008000001000007ffe00001ff800010001c000000000007ffe07e01ff8000000008000001000007ffe07f80ff8000100020000002000017ffe07fc0ff8000000000000000000043ffe07fc0ff000010004000c002000203ffe07fc0ff500008000000c000000803ffe07f80ff0480000100000004001c01ffe07e01fe0030080000000000000801ffc00001fe0030000400000004000000fe000003fc0000080000000000000000fe00000ffc00000008000000080000007e00003ff800000400000000000000003ffc63fff000000020000000080000003ffc63fff000000780000000000000009ffc63ffe000000fc0000000100000020ffc63ffc000001fe00000000000000003fc63ff0000001fe00000007800000401fffffe0000001fe0000000fc0000e0007ffff84000001fe0000000fd5401f0001fffe00000014fc0000000fc0155f00003ff0010000a0790000000fc0001f0000000000000500000000000780000e000000000040100000400000200000004000000000194000001000000000000010000000003c0000000800008000000004000000003c000000020000000000000000000000180000000080020000000001000000000000000000180800000000006000000000000080003c1c00000000006000000000000000003c0800001000000000000000000000001800000000000000000000000000000000"
        },
        bitcoin_b2: {
            name: "bitcoin_b2",
            hex: "000000000000000000000000000000000000000000000007800000000000000000000000000000fffc000000000000000000000000000fffffc00000000000000000000000003ffffff0000000000000000000000000fffffffc000000000000000000000003fffffffe000000000000000000000007ffffffff80000000000000000000000fffffffffc0000000000000000000001fffffffffe0000000000000000000007ffffffffff8000000000000000000007ffffffffff800000000000000000000fffffffffffc00000000000000000001fffffc7ffffe00000000000000000003fffff8f3ffff00000000000000000007fffff8f1ffff00000000000000000007fffff8e3ffff8000000000000000000ffffc10e3ffffc000000000000000000ffff800e3ffffc000000000000000001ffffc0003ffffe000000000000000001fffff0001ffffe000000000000000003fffff80007ffff000000000000000003fffff81803ffff000000000000000003fffff83f01ffff000000000000000003fffff03f80ffff000000000000000007fffff03fc0ffff800000000000000007fffff03fc0ffff800000000000000007fffff07fc0ffff800000000000000007ffffe07fc0ffff800000000000000007ffffe03f80ffff80000000000000000fffffe00001ffffc0000000000000000fffffe00003ffffc0000000000000000fffffc00007ffffc0000000000000000fffffc0f807ffffc00000000000000007ffffc0fe03ffff800000000000000007ffffc1ff01ffff800000000000000007ffff81ff81ffff800000000000000007ffff81ff80ffff800000000000000007fff801ff80ffff800000000000000003fff003ff81ffff000000000000000003fff000ff01ffff000000000000000003fffc000001ffff000000000000000003ffff800003ffff000000000000000001ffffc00007fffe000000000000000001ffffc7000ffffe000000000000000000ffffc71ffffffc000000000000000000ffff8f1ffffffc0000000000000000007fff8f1ffffff80000000000000000003fffce3ffffff00000000000000000003ffffe3ffffff00000000000000000001fffffffffffe00000000000000000000fffffffffffc000000000000000000007ffffffffff8000000000000000000007ffffffffff8000000000000000000001fffffffffe0000000000000000000000fffffffffc00000000000000000000007ffffffff800000000000000000000001fffffffe000000000000000000000000fffffffc0000000000000000000000003ffffff00000000000000000000000000fffffc000000000000000000000000000fffc000000000000000000000000000007800000000000000000000000000000000000000000000000"
        },
        bitcoin_shade: {
            name: "bitcoin_shade",
            hex: "00000000000002aaaa00000000000000000000000000155757600000000000000000000000002aeffef80000000000000000000000015dffffff000000000000000000000003bffbfbab80000000000000000000000ffff7f75540000000000000000000001ffe800aaaa0000000000000000000003fdc00005550000000000000000000007fb000002aa800000000000000000000ffc00000055600000000000000000001ff80007002ae00000000000000000003ff00007801fd00000000000000000007fe00007882fa80000000000000000007fc41c0f1f07f4000000000000000000ff889f8f1e0bea000000000000000001ff113fff1e15fd000000000000000001fe223ffe3c2aff000000000000000003fc440fff3c157f000000000000000003f88883fffc3ebf800000000000000007fd5103fff85f7f800000000000000007faaa23fffe3fbfc00000000000000007f55547f9ff9fdfc0000000000000000feaaa87f07fcfffc0000000000000000ff55547f01fe7dfe0000000000000000feaaa8ff00fe3efe0000000000000001fc5554fe007f5f7e0000000000000001feaaa8fe087f3efe0000000000000001fd7551fc147f1d7f0000000000000001febfe9fc00ff3aff0000000000000001fd77f3ff00ff177f0000000000000001feefebfffffe2eff0000000000000001fd5ff3fffffe1d7f0000000000000001febfe7fbfffc2aff00000000000000017d7fe7f0fff0577f0000000000000000feafeff03fe0eefe0000000000000001dd5d4fe00ff1557d0000000000000000beba0fe207f02a7a00000000000000015555dfe503f854760000000000000000aeabffc283f808ee00000000000000005757ffc143fc11de0000000000000000aaa7ffc2a3fc22be00000000000000005751fff007fc457c00000000000000006ba83ffe0ff889fc00000000000000005d540ffffff801f800000000000000003baa0ffffff003f8000000000000000037d40f7ffff007f000000000000000003fea0f1fffe00fe000000000000000001ff11e3dff800fd000000000000000000ff21e3c08001ba000000000000000000ffc3c3c00001740000000000000000007fc8c7800002ac0000000000000000003ff007800005500000000000000000003ff22780000aa00000000000000000001ffd40000055400000000000000000000ffea88800aa8000000000000000000007ffd11501d50000000000000000000003fff2aa1bfa0000000000000000000000ffffd7fff400000000000000000000007fffffffe800000000000000000000001fffffffd000000000000000000000000fffffffc0000000000000000000000001ffffff000000000000000000000000007ffffc0000000000000000000000000007ffc00000000000000"
        },
        bitcoin_b: {
            name: "bitcoin_b",
            hex: "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000380000000000000000000000000000003e0000000000000000000000000000003e1800000000000000000000000000007c1f00000000000000000000000000007c3e00000000000000000000000001007c3e00000000000000000000000001f07c3e00000000000000000000000003fff83c00000000000000000000000003fffc7c00000000000000000000000003fffffc00000000000000000000000001fffffc000000000000000000000000003ffffe000000000000000000000000001fffff800000000000000000000000001fffffe00000000000000000000000001ff7fff00000000000000000000000001fe07ff80000000000000000000000001fe01ffc0000000000000000000000003fe00ffe0000000000000000000000003fe007fe0000000000000000000000003fe003fe0000000000000000000000003fc003fe0000000000000000000000007fc003fe0000000000000000000000007fc003fe0000000000000000000000007fc007fe0000000000000000000000007ff00ffc000000000000000000000000fffffffc000000000000000000000000fffffff8000000000000000000000000fffffff0000000000000000000000000ffffffc0000000000000000000000001ff0fffc0000000000000000000000001ff01ffe0000000000000000000000001fe007ff0000000000000000000000001fe001ff8000000000000000000000003fe000ff8000000000000000000000003fe000ffc000000000000000000000003fc000ffc0000000000000000000000e7fc0007fc0000000000000000000001fffc000ffc0000000000000000000001fffc000ffc0000000000000000000001fffe001ffc0000000000000000000003ffffc07ff80000000000000000000000fffffffff800000000000000000000000ffffffff0000000000000000000000001fffffff0000000000000000000000001ffffffe0000000000000000000000001f3ffffc0000000000000000000000001e0ffff00000000000000000000000003e0f07800000000000000000000000003e1f00000000000000000000000000003e1f00000000000000000000000000003e1f00000000000000000000000000003c3e0000000000000000000000000000043e0000000000000000000000000000003e0000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
        },
        bitcoin_full: {
            name: "bitcoin_full",
            hexe000020000000000000000000000003ff8001e000f000000000000f00000007ffe003e001f000000000000f8000000ffff003c001f030000000000f8000001fe7f803c001f1f0000000000f0000003fe5fc03c00041e000000000040000007f01fe07c00001e000000000000000007f01fe07800001e00000000000000000ff807e07fe01e3ff03fc0fe01e0ff800ff8c3f07ff03e3ff0ffc1ff81e1ffc00ff8c3f0fff83c3fe1ffc3ff83e1ffe00ff007f0fcf83c3fe3f087cfc3c3e3e00ff007f0f07c3c3c03e00f87c3c3c1e00ff187f0f03c7c7807c00f03c3c3c1e00fe1c7f0f03c787807801e03c7c3c1e00f81c7f1e03c787807801e03c783c1e00fc007e1e07c78780f801e03c78781e007f00fe1e078f8f00f801e07c78783e007f4ffe1e078f0f00f801e07878783c003f4ffc3c0f0f0f00f801e0f8f0783c001ffff83c1f0f0f807c01f0f0f0f83c000ffff03ffe0f0ffc7fe1fff0f0f07c0007ffe03ffc1e0ffc3fe0ffe0f0f0780003ff807ff81e07fc1ff07fc1f0f07800007c000fc00001f007c01e
        },
        bitcat: {
            name: "bitcat",
            hex: "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003ff000000000000000000000000001e1ffff1e000000000000000000000007efffffcf80000000000000000000000e3ffffff1c0000000000000000000000c7ffffffce00000000000000000000019fffffffe60000000000000000000001bffffffff600000000000000000000013ffffffffa0000000000000000000000781fffe07c0000000000000000000000e10fffc41c0000000000000000000000e00fffc01e0000000000000000000001f00fcfe03e0000000000000000000001fc3f83f0fe0000000000000000000001ffff83ffff0000000000000000000003ffff87ffff0000000000000000000001ffffefffff0000000000000000000003ffefefefff0000000000000000000001ffefefdfff0000000000000000000001ffefcfdffe0000000000000000000001fff7979ffe0000000000000000000000fff8383ffc00000000000000000000007ffffffff800000000000000000000003ffffffff0000000000000000000000027ffffffc00000000000000000000000783f87fc380000000000000000000000f9c00003fc0000000000000000000000f7f703fffc0000000000000000000001e7f783fffe0000000000000000000001effb87fffe0000000000000000000003effbffffff0000000000000000000003effbffffff0000000000000000000007e7f3ffffff8000000000000000000007c001ffffff800000000000000000000f00007fffffc00000000000000000000e00003fffffc00000000000000000000c01001fffffe00000000000000000001803f00fffffe00000000000000000001803fc0fffffe000000000000000000010030e07fffff000000000000000000030030707fffff000000000000000000020070303fffff000000000000000000020060303fffff000000000000000000020060703fffff80000000000000000006007fe03fffff8000000000000000000600ffc01fffff8000000000000000000600c38037ffff8000000000000000000603c0c037ffff8000000000000000000603f8e037ffff8000000000000000000601f8e037ffffbf8000000000000000060180e037ffffbfe0000000000000000301c0c0760fffbfe0000000000000000301ffc071f3ff7ff00000000000000003807f80f3f9ff7ff00000000000000001c00601f3fdfefff00000000000000000e00003f7fdfdffe00000000000000000300007f7fdf3ffe0000000000000000000000ff3fd8fffc00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
        },
        nyancat: {
            name: "nyancat",
            hex: "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000030000000000000000000000000000000cc000000000000000000000000000000cc0000000000000000000000000000003000000000000000000000000000000030000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffe00000000000000000000000fffffffff00000000000000000000003ff9ffffff80000000000000000000003f19bfffff80000000000000000000003f833fffff80000000000000000000003fc03fffff80000000000000000000003fc03fffff80000000000000000000003f861fffff80000000000000000000003f870f8fff80000000000000000000003f8f8f87ff80000000000000000000003f0f0e71ff83800000000000000000003e000e79ff83c00000003fffe000000f3e101e7e7f8fc00000083fffe000000f3e3c3e7e7f8fc000000ffffffffff007303e3e7f001fc000000ffffffe1ff3c3207e1e7f807fc000000ffffffe1fe1e03c1c3e7fb7ffc000000f07fffe4fe0f03c003e7fffffc000000f87fffc4ff0703c803cffffffc000000f33fffc8ff83c399861fffffff000000f33fff9cffc3c3f9ff1ff7ffdf000000e47f0780ffe0f3fbff9fe7ffcf000000c67f87e3fff0e3ffff9fe7ff8f000000e07f33fff87803ffff9f87e20f000000f0ff33fff87c03ffff9f87e20f000000fffe47fffb3f83ffff9fffffff000000fffc67fff13fc3ffff9fffffff000000fffe07fff67ff3ffff9fe78e3f000000ffff0fffc67ff3ffff9fe78e3f000000ffffffffe07ff3ffffe7e0003c000000fffffffff8ffe3ffffe7e00038000000ff134bffffce00fffff9ffffe0000000fc0001ffff0000fffff9ffffe00000000000000000003f0000000000000000000000000000003f0000000000000000000000000000003c010000000c000000000000000000003c01c000780e000000000000600600000000000000000000000000006006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000180000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
        },
        coffee: {
            name: "coffee",
            hex: "0000000000000000000000000000000000000000000000000001fff8000000000000000000000000001e00bfc0000000000000000000000000e00005f800000000000000000000000180002bff00000000000000000000000600005fffc00000000000000000000008000003fff000000000000000000000100000007ffc00000000000000000000300000000ffe000000000000000000002000000001ff000000000000000000002000000000ff8000000000000000000040000000003fc000000000000000000040000000000fe0000000000000000000400000000007f0000000000000000000400000000003f0000000000000000000600000000001f8000000000000000000600000000000f8000000000000000000600000000000780000000000000000007000000000007c000000000000000001f800000000003c00000000000000000e7c00000000003800000000000000001c7e0000000000380000000000000000707f0000000000380000000000000000c57f80000000003000000000000000018a3fe000000000300000000000000003053ff0000000006000000000000000062abffc000000004000000000000000045dffff8000000180000000000000000c3bbfffe000000600000000000000000865dfff5e00003000000000000000001ac0ffffe1ffff80000000000000000011437fffd000000000000000000000003281afffa00000000000000000000000350047ff400000000c000000000000002080e7ff800000003f00000000000000250077ffd00000017f8000000000000022a83bffa20000003fc0000000000000251003ff400000000f40000000000000209801fe880000000680000000000000314800ff40000000030000000000000032ac00ffa000000001000000000000003546007f40000000011000000000000010eb003e8800000001a00000000000001179c11f50010400008000000000000018bae16b8202080000800000000000000957f0160404480001000000000000000c8ff80be80aac0001000000000000000477ff54fd558f803600000000000000063bfff27bba00fffc000000000000000357ffff3f500007f00000000000000001abffff9aa00000000000000000000000d5ffffc40000000000000000000000406bffffe200000000000000000000000031fffff1d4000000000000000000080818bffff8fea808ab80000000000000040c5ffffc7fd5555f8000000000002010472ffffe1fffbbff000000000000000409d7ffff0ffffffe000000000000080000e3ffff87fffffc00000000000020852139ffff81fffff00000000000000003041e3fffc0ffffe000000000000000501907c7ffe03fff8000000000000000220000fafff01ffe00000000000000000004101fd5f807f80000"
        },
        flower: {
            name: "flower",
            hex: "e598b7fdffdf7dc00000000000000000fbe46fffffff1d80024000000000000054917defffff77bc0830000000000000ef68b7ffffff7ffe2020000000000000ffb65ffffffffbe641600000000000003fdd97ffffdf7dfcb6a80000000000001ff68affffffffdc2dd600000000000087eb457f7fdffff8fb8600000000000071ffa7bf7ffffef3fe740000000000003cff63ffbfdffff3fdcc000000000000ab37a5ffbfffff7fbb9c0000000000008d9d757fdfa7f0ff7d38000000000000f3e7caffd4e7effefe7007000000000077b7ea55e24bf3fbace078c0000000009c79e83ec220d7f7f9c3e780000000006effd41f388007eff393888000000000b75fed9f20080fbffe1e410000000000ebffbbe700128bfffc714200000000007dfbfef9400003febdcc2c0000000000ff7ff7be7302217efe34180000000000f3fffef80809007ff8c83000000000003dbfd760004020ffe721c000000000000007fbf9000041ff9e33800000000000c373ff408112017ef8de000000000000013c7ffaa400047f2638ff0000000000873700410000987999c3f6c000000000057bf1ac042c04fe7e1fbfc00000000014adfff0026041ffe1ffffe000000000095feff0624008003fffff8000000000133bfffe0c0031fffffff800000000000ffdfffc801981ffffff00000000000007dbfff1080300fffff0000000000000217fedc60100033fff00000000000000189fff8e480001c00000000000000000e80bf81dc00800700050100000000000008009fbd088081f0000ce00000000000410b5ffe2001607c00007000000000020637fffe6800180fe009c0000000000050fbfffef860ff807ffe00000000000885ffdffdf9796ffc00000000000000070ff3fff9fb798bffe0000000000000046fbffffff37edf7ffc0000000000000357dedffff7ff6fffffc0000000000007be7efffbffffbffffff000000000000cfbfcf7fbffbfddff3ffe000000000001c7e0fff7ffbfeefff3ff800000000007ff00ffe3ffbfffbffe37c0000000000fec008a4fffdfffe7fff7e0000000000b5001181bbfdffff8efedf8000000000580042046ffdffdfe1dff58000000000000507807ffcfffffc6ffb800000000004000420bffcfffeff3c3e0000000000120808503ffc7fffffdf00000000000030c018813ffe3ffdf7e7800000000000f7003a211ffc3ffef9f5c00000000000f80030022dfe4efd7f79600000000000000060800ffc0eef9cb5e000000000000000424403dc07f5c7ea0000000000000000d04823ad41ffc3fe0000000000000000909820b9007dc07e000000000000000192200009000f000000000000000000010060201180080000000000000000000148c000040040000000000000000000035380000400001000000000000000"
        },
        saturn: {
            name: "saturn",
            hex: "00000000000000000000007800a00300000000000000000000000703ffffc0c000000000000000028000707eaaa0f8600000000000000101010307d5011d1c30000000000000000000007aa2aaa3cf1000000000000000000401d54404045708000000000000000888086a0fe80a2b880000000000000019541017f00f059988000000000000023aaaa0000000c24b880000000000004455554000000025458800000000000080aaeae880000010a98800000000000107fd55d5000000080d900000000000023bfbbbaa0000000aab9000000000000577f7ff5540000004432000000000000aaffefeaaa88000080b210000000000555ffdff5550400009564200000000102abfefffbaa0000008b6400000000000557fdfff7750200008ac800000000000aafefffefaa0800010490800000000415dfdfffffd5510001552100000000002abffffffffaa000022a6200000000004777fffffffd50000456440000000020aefffffffffaa88008ac88000000000115fffffffff555000959100000000002abffffffffbbaa0012b22000000004457ffdffffff7f5440256440000000010affeffffffeefea804a980000000026415dfffffffdffd5009530000000008980abffffffefffba032a4400000001138157ffffffdfff7c045c88000000004e82affffffffffff808d900000000009d815dfffffdfffff010e400000000026a82bbfffffbffffc022c88000000044c50557ffffffffff80d5900000000089ca08affffffffffe212e44000000003794115ffffffffffc051c80000000044e2802bffffffffff00a3220000000089d504557ff7fffffe4056440000000112aa000afeaffffff880b910000000002554001555ffffffe010f200000000004aa80002bfffffff882ac880000000009550004577fffffe00573000000000012aa0022afffffff8808cc0000000000255400015ffffffe10159100000000004a280002bffffff882ae4000000000009a4800105fffffc0455904000000000134100000afffff0808e40400000000026910000955fff84515901800000000026a2000022bffc2028e60300000000004d520000457fe04057901c00000000008b42000022fe0008ae406a0000000000995200001fc000157101d400000000001aa200000002022bca07a800000000003642000000000557305d5000000000003a8100000000aab880eaa0000000000036518000000515c403d5c000000000003a2a600000a2af102eab0000000000003b241c007e5578c03d460000000000003a9883ff888bc200ea980000000000001d445101115e100755600000000000001a60aaaa2be1803aa3800000000000008f1604057e0c74c45c0000000000000083eaeaafe0e087ffc00000000000000060ffdffc0e0400000000000000000000"
        },
        jupiter: {
            name: "jupiter",
            hex: "0000000008907bfdb7bf2b948000000000000000041eaff7a9d5f3fa0080000000000000012cfffefefe755400800000000000080b3fff5ffff7ffbfa0400000000000008644cbddff7ffffb804000000000000000beffffffffdbb880200000000000010aa7fb7ddf5df5de1020000000000004e579eef6fbffff7be6200000000000049bf27fdfbdefffedf0100000000000010500fffffffeffff6410000000000000261fffffffffffffd8100000000000000fd71fbdf7f7fbeebc0000000000000123e72dffecdbb4b500080000000000008040a58a03ef1a76500800000000000000393941ded666b34a08000000000000000047cf35da1d74a08800000000000000000041990af81d6688000000000000800000000000ef80180400000000000000000400100c38ea0204000000000000010d0804838540f82004000000000000003f1f80002eb9fa8004000000000000007c7ffffc17ffe33c0400000000000417707fffb2fffbc66c0400000000000099c3ffffc7ffff23ff04000000000003183cffff3dfffcd0e00400000000000000a27ffefffff9ff080400000000005c095c3ff306ffffd080040000000000001000001e03ffffc000040000000000000000000024f70100000400000000000000000001f7500eff4004000000000000001037ff7f07fedea20400000000000037f7fefffff9bfbb510000000000000001b7ffffffffd642000800000000000018f83d4fd2340000c008000000000000000080005080000c0008000000000000000000000007ffd06088000000000000000003e080fa36214008000000000000000b7e1f7f7cd0b00010000000000000080b4e753fffec18b01000000000000807cc1fa0401c9affc01000000000001012123246fe03ffc40020000000000001450a77bbff800020e02000000000000081056e7f49e00e0008200000000000002079e19fff685000884000000000001008e031388ff1a1cf4040000000000000151ca2e572d6233b80000000000000000aff00ea4280cc40008000000000000002bfd4309d02008241000000000000000bdff017f03ff209c1000000000000000421af0000f276f7020000000000000080080153473ff9e522000000000000000032a6f4cfebf7fa8400000000000000020a990813bdff68040000000000000000106016fc77eb500800000000000000008c04e5fc081930100000000000000000000209f9b7f40010000000000000000000042402a30ac3200000000000000000000a028904510040000000000000000000240137194cc08000000000000000020010680a1a00010000000000000000000000028100000200000000000000000000400800000004000000000000000000000010000102080000000000000000000000010040001000000000"
        },
        einstein: {
            name: "einstein",
            hex: "fffe812fffffffffffffff8800000000f7d10057fffffffffffffe1000000000fee800a88bfffffffffffd4000000000fdfd0111fffffffffffffda000000000b2fa0003fffffffffffffe9000000000f5f70045ffffffffffffff4000000000eaec000027ffffffffffffe000000000ddf8015001ffffffffffff1080000000b2f20000023fffffffffff9c00000000cdfe0000017ffff7fffffdd800000000cafc0000002fffe07ffffef80000000020f20001101fffe00ffffff900000000e0e8000a0003ffc01fffffae0000000045f400040001ff0007ffffc740000000806800003880fe800fffefe1800000005578000d3cc0fd8733fffd50c000000022e800080420fa8f9bffffa0000000000475400013007501dfff7df12000000000a880100c80f8846bfffea82000000001b000000e41fd0027fffd841000000020b002000ea0fe830bfffe8010000000045007011fc0ffffc7ffffc010000000004008a02388ffcfaffffd8000000000005007880750ff70e7fffdc0010000000020001e1fa03faff3fefec00200000000000617c3f07fdf7ffd7c1000000000000002c80ea03fe3efbefca000000000000000effdc01ffe7dddff400000000000000299ff803fffdbbabb000000000000000175ff007fffff7dfd4000000000000000f7ff803fffffaaeea0000000000000015dff001fffff55fc1c60000000000001bfff203ffffe3abfb8400000000000017f7f405fffff747d6720000000000000dffe803ffffee82e80800000000000004ffd001fdfff951704000000000000002abe003fffffa22b800000000000000095fc0017eff7f67fc0000000008000002bfc000feffe89f2800000000000000005f80005f7fe51fd400000000000000003f00002b3fe09b8220000000000000051f4000039ff85d8500000000000000002e80000fbfc0eea800000000000000103d44001fdfc0dd34000000000000000029a0003fefe0a77800000000000000101400015ff7c0775000000000060000000aaa046afee8cd98000000000800000015545d53fd780e08000000000a000000020008097fe02248000000000400000004001695ff804000000000000c00000000081820ffc00000000000000c00000040000140ff8000000000000008000000000000029f8000000000000008000000000000007f4000000000000000000000000000001f000000000000000000000000000000170000000000000000000000000000022b0000000000000000000000000000051600000000000000000000000000002b8a0000000000000000000000000000551400000000000000000000000000002ba40000000000000000000000000057ff4000000000000000000000000000fffece00000000000000000000000001ffff9fc00000000000000"
        },
        piggy: {
            name: "piggy",
            hex: "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000c001fffe000000000000000000000003e00fffffc00000000000000000000007f03ffffff0000000000000000000000630fffffffc000000000000000000003631ffffffff000000000000000000001ff3ffffffff801000000000000000001fe7fffe7fffc0180000000000000000078fffc66fffc0780000000000000000019fffe0cfff83f8000000000000000001fffff00fff8ff0000000000000000000fffff00fff3ff00000000000000000007fffe187ff3ff00000000000000000007fffe1c3ff7fe00000000000000000007fffe3e3ffffc00000000000000000007fffc3c3fffe000000000000000000007fff8003fffc000000000000000000007fff8407fffe000000000000000000007fff8f0fffff000000000000000000007ffc0f8fffff000000000000000000007ff81f87fff3000000000000000000007fff0707fff3800000000000000000007fff000ffff3f00000000000000000007fff200ffffff80000000000000000007ffe661ffffff80000000000000000007fffe7fffffff00000000000000000003fffeffffffff00000000000000000003ffffffffffff00000000000000000003fffffffffffe00000000000000000003fffffffffff800000000000000000003ffffffffffc000000000000000000003fe3ffffff80000000000000000000001fe00fffe000000000000000000000001fcc0007e000000000000000000000001fc7c007e7c0000000000000000000001f87e003e3c0000000000000000000000f87c003e3c0000000000000000000000f83e001e3c0000000000000000000000781e001e1c0000000000000000000000700e000e1c00000000000000000000003006000e0c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000384327c0021938007c2113e0078f800040e3e600061914007c613300030a8000c0b3e600061d16001061e200030200008192a700071d12001071838003020000811227000d15120010d1838003020000c1b226000f13160010f1c2000302000040a22600099314001099320003020000786227c008933c00108913e00fc20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
        },
        honeybadger: {
            name: "honeybadger",
            hex: "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ddda80000000000000000000000000150046f00000000005a80000000000004fffff8c00000000bb4c000000000002beff749b80000001e40300000000000cfa9bc5296000001f4ff080000000000be6f7eb015800f6ea9b3e600000000033bdfdf999eea7dd8ef6cc1000000000fffffff7ca9fd9afb87d2f1800000001fdffffffc4c600eff9fd1164000000017fffff7f7d9b27bfeffd00e400000002ffffffffff6edd7fe7f8022400000004fffffffffe71d7fff7d8400380000005fffff7fffdffffffbf4441408000000bffffffffffffdffffe000092c000003fbbfffffffffffffee900000080000033f7f7ffffffffff1bb210000040000067856bfffffffffc15d4000001800000cb8915fffffffff008e40001470000011ea9317fffffffe0054a0006bc0000023d18a15bffffffc0025400180000000c6a004895957fbf5000ac006000000031e400264a45656900015000c000000181580094a0aa8a521001200700000006094a012a20848a400000000c0000003800a000111040942200009010000000e0350004890009089488004820000003826b041142400080021100041000000248220c00020200011205000a1000000400880e0085008000241c20020800000680203c00088040001020780108000003000078000000082080408e00440000039000e00000111a42fd91858024000001c003800000f237ff4aa100e022000000c00f0000032020000092003051000000783a00015c20200000a20018490000001fc6001ba02030000193000e28800000000402e400101cc00088e003077fe00000080500000c0730008058018a01500000041800000e001800d28800e017e80000081f00000604580064780022aef0000004058000038038003fe000355ed000000400400000ffe0000080000ff7000000040840000020000000000000000000000792400000000000000000000000000002ffc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
        },
        dragon: {
            name: "dragon",
            hexc00000000000000000000000000000003f8c000000000000000000000100000007ef0000000000000000008d848300000871f8000000000000001effffc1800007fe3ff02000000000003fff1ffce10001ff3ffee001f8000001f7fdffffe80000381a7f80003f00f9063efffd7ff881001d7eff00000783ff8dfffffdffdec1007f1df1400001effeebfdb801f7bf7080fe0dce000000ffffffff30001efd30807c0ffd0000003fffffff0000037778807c00070000000003fffbde0000edfcc06c000f0000000001fffbc600003b7c607e000800000000007dee7200000fae383b000820000000008fbc3a0000037e1f07c0017c0000000063f230000001ff8f81e002600000000007e0400000005fca81f6074400000000ffc00000000037fa80ff039e00000001ff80000000000ff3805d006200000003fc000000000007fd807f83c20000039f00000000000003ffc07e8fc00000059c00000000000001ffe1ff1f70000001f0000000000000005fffbdfe20000021c00000000000083077dffc380000002f80000000000004185ffbfbf00000001c60000000000003fbe3eff63000000001300000000000003fffbfc0400000001638000000000000503fdc00000000000e40000000000005d83ff000000000000000000000000003901f8000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
        },
        narwal: {
            name: "narwal",
            hex: "0000000000000000000000000000000000000000000000000000000000000000000000003f000000000000000000000000000000e3000000000000000000000000000003810000000000000000000000000000060180000000000000000000000000000c018000000000000000000000000000180180000000000000000000000000001801800000000000000000000000000010018000000000000000000000000000100180000000000000000000000000001800c0000000000000000000000000001800c0000000000000001e00000000001800e000000000000000fc00000000000c003ffff00000000003f800000000000e000007fe00000000063000000000000300000006000000003ce00000000000038000000c00000000618000000000000e01800038003ffc01cf000000000000180780007007f80fc71c000000000000701e0001c07c00007c78000000000000c073f03f01e0000060c000000000000180c07ff80f000011c380000000000003018000003c00003f078000000000000603800000e000801c0cc000000000000c03000001c001c0381860000000000018030000070001c060f0700000000000180700000c00008060c330000000000030070000380000007f8638000000000030030000700000001e0e18000000000030030000c00000000018180000000000300380018000080000701800000000003001c00700000fc00fe01800000000003000e00c000003ffffc018000000000030003838000001ffffc038000000000030000ff0000000fc07c0300000000000300007c000000070008030000000000018003e00000000300100600000000000180000000000000e0e00e000000000000c00000000000001f000c000000000000c00000000000000000180000000000006000000000000000003000000000000030000000000000000070000000000000180000000000000000e00000000000000c000000000000000180000000000000060000400000000003c0000000000000030000c0010000000e6000000000000001c00180018000001c3000000000000000700180030000007018000000000000001c038003000001c00c000000000000000f030007000007c0060000000000000001e3000600003c780600000000000000007f000e0003e00f0300000000000000000f000c007f0001e3000000000000000003001cffe000003e000000000000000003003ff0000000000000000000000000030060000000000000000000000000000300c000000000000000000000000000030180000000000000000000000000000187000000000000000000000000000001fe0000000000000000000000000000007000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
        },
        rabbit: {
            name: "rabbit",
            hex: "00000000000000000000000000000000000000000000000bf800000000000000000000000000007eaf8000000000000000000000000003e000e00000000000000000000000000e000020000000000000000000000000180000600000000000000000000000003000006000000000000000000000000060000180000000000000000000000000c000038000000000000000000000000180000e0000000000000000000000000b0000380000000000000000000000001f00007e000000000000000000000000e0000003800000000000000000000001c0000000e0000000000000000000000300000000380000000000000000000006000000000c000000000000000000000c00000000060000000000000000000008180000000200000000000000000000183c000000030000000000000000000010180000000600000000000000000000100000a015fc00000000000000000000300000ffff6000000000000000000000100000d54000000000000000000000003000007c0000000000000000000000001000000700000000000000000000000018000001e0000000000000000000000018000000380000000000000000000000080000000e00000000000000000000000c0000000300000000000000000000000700000001800000000000000000000001a0000000c00000000000000000000000e00000007000000000000000000000002000000018000000000000000000000060000000080000000000000000000000400000000c00000000000000000000006000000006000000000000000000000060000000020000000000000000000000c0000000030000000000000000000001800000b8018000000000000000000002000001ee0080000000000000000000060000030000c0000000000000000000060000060000c00000000000000000000400000c00007c0000000000000000000400000800002f0000000000000000000400000800000180000000000000000006000018000000c0000000000000000006030008000000400000000000000000030380180000006000000000000000000186c00800000060000000000000000000fc400c000000200000000000000000002030040000006000000000000000000000185600000040000000000000000000000dfe00000040000000000000000000000700000000c000000000000000000000040000000180000000000000000000000c0000060700000000000000000000000c00003ffc000000000000000000000018000030a00000000000000000000000080000100000000000000000000000000c000060000000000000000000000000070001c000000000000000000000000003fb7f00000000000000000000000000002fe80000000000000000000000000000000000000000000000"
        },
        bunny: {
            name: "bunny",
            hex: "000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000002000078000000000000000000000000078000f800000000000000000000000007c000f800000000000000000000000007c001f800000000000000000000000007e0019800000000000000000000000006700318000000000000000000000000063007180000000000000000000000000610061800000000000000000000000006180c1800000000000000000000000004080c18000000000000000000000000040c1c18000000000000000000000000040c1818000000000000000000000000060c1830000000000000000000000000060c1030000000000000000000000000060c1030000000000000000000000000020c1060000000000000000000000000030c1060000000000000000000000000030410e0000000000000000000000000019ffcc000000000000000000000000003ffffc000000000000000000000000007f007e00000000000000000000000001e0000780000000000000000000000007c00001c000000000000000000000000f0000006000000000000000000000001e00000030000000000000000000000038000000180000000000000000000000700000000c000000000000000000000060000000060000000000000000000000c0000000060000000000000000000001c000000003000000000000000000000180000000030000000000000000000003800000000180000000000000000000038000000001800000000000000000000700007f8001c0000000000000000000070001f9c000c000000000000000000007000700e000c00000000000000000000f000e007800c00000000000000000000e001c003800c00000000000000000000e0030001800c00000000000000000000e0030000c00c00000000000000000000e0070000c00c00000000000000000000e0060000c00c00000000000000000000e0040001c00c00000000000000000000e00c0000c00c0000000000000000000070080000401c0000000000000000000070080000c01c00000000000000000000700c0000c01c00000000000000000000380e0000c0380000000000000000000038060000c0380000000000000000000018040000c030030000000000200000001c0400008070038006000000600000004e060000806006fc1e00000070007e1c7e07000180f88cfdfc000000d00067ffdf03800701fbf80f9c0000025801f03083c3800603fe40001fe00003cf0fc00001e1800c0f900000007e003ec7fc0000007fc0383e000000000600f800000000001ff0fbf8000000000000000000000000001fff80000000000000000000000000000000000000000000000000000000000000000000000000000"
        },
        rooster: {
            name: "rooster",
            hex: "0000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000bc000000000000000000000000000000fc000000000000000000000000000001fc000000000000000000000000000001f8000000000000000000000000000003fc000000000000000000000000000003ff000000000000000000000000000003ff800000000000000000000000000007ffc00000000000000000000000000007ffe00000000000000000000000000000fff00000000030000000000000000000fff800000000fe000000000000000000fff800000003ff000000000000000000fffc00000007fc000000000000000000fffe0000000fe00000000000000000007fff0000001fc00000000000000000003fff8000001ffc0000000000000000003fff800000ffff0000000000000000003fffc00003ffff8000000000000000003fffe00007ffffc000000000000000003ffffe000fffffc000000000000000007fffffc01ffffb0000000000000000007ffffffc3ffff10000000000000000007fffffffffffe18000000000000000003ffffffffffff08000000000000000003ffffffffffff08000000000000000003ffffffffffff08000000000000000001ffffffffffff00000000000000000001fffffffffffe00000000000000000000fffffffffffc00000000000000000000fffffffffffc000000000000000000007fffffffff98000000000000000000003fffffffffb0000000000000000000001ffffffffe00000000000000000000000ffffffffe000000000000000000000007fffffff6000000000000000000000003fffffff0000000000000000000000001fffffff0000000000000000000000000fffffff00000000000000000000000007fffffc00000000000000000000000001fffffc000000000000000000000000007fffec000000000000000000000000001fffc0000000000000000000000000000fffc0000000000000000000000000000ff9800000000000000000000000000007d00000000000000000000000000000078000000000000000000000000000000780000000000000000000000000000007000000000000000000000000000000070000000000000000000000000000000f0000000000000000000000000000000f0000000000000000000000000000000e0000000000000000000000000000000e0000000000000000000000000000017e000000000000000000000000000007ff000000000000000000000000000000ef000000000000000000000000000001fe000000000000000000000000000000fc0000000000000000000000000000038800000000000000000000000000000010000000000000000000000000000000000000000000000000"
        },
        genesis: {
            name: "genesis",
            hex: "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fd8003f600000039e118000bc71c7000318000c00000006c311800086db6d80031e380c6fe38e06c3319cf186db6d80031b6c0c6db6d806ce2186d91cdb6d80031b7c0c6db7de06c3619edb30db6780031b600c6db60606c341b6da30db6180031b3c0c6db3dc039e471eda3e71c700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001ec0000006c00000003006030006000030c0000006c0000000300003000c000030f1cf1ce6ce681cf03cd6f361ce000030d86db1b6db7836d836f6dbc36c000030d9edb1f6db6036d836c6db836c000030db6db186db6036d836c6dbc36c00001ed9ed9cf6ce601cd83cc6db61cc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030c00d80030300030000c0000000000030c00180030600030000c0000e71ce78f0f1cd9cdb8739a3c73cd9c018db1b6db0d86db6db066de361b6f3001efb1b6db0d9edb6db066d8367b6e3c006c31b6db0db6db6db066d836db6f0c01c79ce6cf0f1ed9c79863983c7b6db8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003f000000000000000000000000000000ffc03bbbbbbbbb93b3bbb00000000001f3e02aaaaaaaaab2aa22900000000001c0e02aaaaaaaaa93abbb90000000000380702aaaaaaaaa90aaaa90000000000380703bbbbbbbbbbbb3bb97fff000000380700000000000000000140010000003807039bbb9393bbb93bb940010000003fff02a2aa2a32228b22894001000000ffffc3a2bbbb13bbb933b940017f0000ffffc0a2a8aa128a8920894001417c00ffffc39bbbabbbbbbbbbb940014145c0e001c00000000000000001c001c1c76ae001c2bbbbb93ab939399140014145c0e001c2a20a0aa2a28aa2314001417c00e001c3b30bbbb3bbbbba1140017f0000e001c0a20a8aa0aaa2aa114001000000e001c0a20bbab8babab9b94001000000e001c000000000000000014001000000e001c3bb3b933b939bbbb97fff000000e001c08a8a32a2aaa20a210000000000f807c0bb3b133abba33bb10000000000ff3fc0a28a12aaaaa222a100000000007fff80bb3a3b3bab9bbba3000000000007f8000000000000000000000000000001e0000000000000000000000000000000000"
        },
        my_bank: {
            name: "my_bank",
            hex: "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003f000000000000000000000000000000ffc00000000000000000000000000003fff0000000000000000000000000000ffffc000000000000000000000000003fffff00000000000000000000000001ffffffe0000000000000000000000007fffffff800000000000000000000001ffffffffe00000000000000000000007fffffffff8000000000000000000001ffffffffffe000000000000000000007fffffffffff80000000000000000001ffffffffffffe0000000000000000000000000000000000000000000000000000000000000000000000000000000000003f8fe3f8fe00000000000000000000003f8fe3f8fe00000000000000000000003f8fe3f8fe00000000000000000000003f8fe3f8fe00000000000000000000003f8fe3f8fe00000000000000000000003f8fe3f8fe00000000000000000000003f8fe3f8fe00000000000000000000003f8fe3f8fe00000000000000000000003f8fe3f8fe00000000000000000000003f8fe3f8fe00000000000000000000003f8fe3f8fe00000000000000000000003f8fe3f8fe00000000000000000000003f8fe3f8fe00000000000000000000003f8fe3f8fe00000000000000000000003f8fe3f8fe00000000000000000000003f8fe3f8fe00000000000000000000000000000000000000000000000000000000000000000000000000000000000007fffffffffff800000000000000000007fffffffffff800000000000000000007fffffffffff800000000000000000007fffffffffff8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003c078781e0007f800780381c070780003c0f87c3e0007fe007803c1c070f80003e0f83c3c0007fe007c03e1c071f00003e1f81e7800071f00fc03e1c073e00003e1f81e7800070f00fe03f1c073c00003f1f80ff000071e01fe03f1c077800003f3f80ff00007fe01ee03f9c07f000003f3f807e00007fe01cf03bdc07f000003fbf807c00007ff03cf039dc07f800003bff803c000070f03ff039fc077c00003bf7803c000070703ff838fc073c000039f7803c000070f07ff838fc071e000039e7803c00007ff0783c387c071f000039e7803c00007fe0f03c383c070f800038e7803c00007fc0f03c383c07078000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
        },
        candle: {
            name: "candle",
            hex: "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000030000000000000000000000000000000380000000000000000000000000000003c0000000000000000000000000000003c0000000000000000000000000000003e0000000000000000000000000000003e0000000000000000000000000000007e0000000000000000000000000000007f000000000000000000000000000000ff000000000000000000000000000001ff000000000000000000000000000003ff000000000000000000000000000003ff000000000000000000000000000007ff000000000000000000000000000007ff00000000000000000000000000000ffe00000000000000000000000000000ffe00000000000000000000000000001fbe00000000000000000000000000001fbe00000000000000000000000000001f3e00000000000000000000000000003f3e00000000000000000000000000003e3e00000000000000000000000000003e3f00000000000000000000000000003c3f80000000000000000000000000003c3f80000000000000000000000000003c3fc0000000000000000000000000007c3fc0000000000000000000000000007c3fc0000000000000000000000000007c1fe0000000000000000000000000003c1fe0000000000000000000000000003c0fe0000000000000000000000000003c07e0000000000000000000000000003c07e0000000000000000000000000003c03c0000000000000000000000000001e03c0000000000000000000000000001e01c0000000000000000000000000000e01800000000000000000000000000007018000000000000000000000000000070100000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fe000000000000000000000000000001ff000000000000000000000000000003ff800000000000000000000000000003ff800000000000000000000000000003ff800000000000000000000000000003ff800000000000000000000000000003ff800000000000000000000000000003ff800000000000000000000000000003ff800000000000000000000000000003ff800000000000000000000000000003ff800000000000000000000000000003ff800000000000000000000000000003ff800000000000000"
        },
        ancap: {
            name: "ancap",
            hex: "0000001fffffffffffffffffff8000000000001fffffffffffffffffff0000000000001fffffffffffffffffff0000000000000f0000000ffffffffffe0000000000000780000007fffffffffc0000000000000780000007fffffffffc00000000000003c0000003fffffffff800000000000003e03fffc3fffffffff800000000000001e07fffe1fffffffff000000000000000f07ffff0fff0007ff000000000000000f07800f0ffe0007fe000000000000000787800787fe000ffc000000000000000783c00787fc001ffc0000000000000003c3e003c3fc001ff80000000000000003e1e003e3f8003ff80000000000000001e0f001e1f0003ff00000000000000000f0f000f0f0007ff00000000000000000f07800f0e000ffe0000000000000000078780079e000ffc00000000000000000783c0079e001ffc000000000000000003c3e003fc001ff8000000000000000003e1e003fc003ff8000000000000000001e0f001f8003ff0000000000000000000f0f000f8007ff0000000000000000000f07800f000ffe00000000000000000007878000000ffc0000000000000000000783c000001ffc00000000000000000003c3e000001ff800000000000000000003e1e000003ff800000000000000000001e0f000003ff000000000000000000000f0f000007fe000000000000000000000f0780000ffe00000000000000000000078780000ffc0000000000000000000007c3c0001ffc0000000000000000000003c3e0001ff80000000000000000000001e1e0003ff80000000000000000000001e0f0003ff00000000000000000000000f0f0007fe00000000000000000000000f07800ffe00000000000000000000000787800ffc000000000000000000000007c3c01ffc000000000000000000000003c3e01ff8000000000000000000000001e1e03ff8000000000000000000000001e0f03ff0000000000000000000000000f0f07fe0000000000000000000000000f078ffe00000000000000000000000007878ffc00000000000000000000000007c3dffc00000000000000000000000003c3fff800000000000000000000000001e1fff800000000000000000000000001e0fff000000000000000000000000000f0ffe000000000000000000000000000f0ffe00000000000000000000000000078ffc0000000000000000000000000007cffc0000000000000000000000000003cff80000000000000000000000000001eff80000000000000000000000000001eff00000000000000000000000000000ffe00000000000000000000000000000ffe000000000000000000000000000007fc000000000000000000000000000007fc000000000000000000000000000003f8000000000000000000000000000001f800000000000000"
        },
        anonymous: {
            name: "anonymous",
            hex: "000000001f0000fffc0003e000000000000000001e30007ff80071e000000000000000001cf0003ff0007ce0000000000000000019fe001fe001fee000000000000000003bff801fc08fffe000000000000000003fffe01fc01fffe000000000000000003ffff11fe03fffe000000000000000003ffff83ff87fffe000000000000000003ffffc3ff0ffffe000000000000000003ffffe3fe1fffff000000000000000003ff07e1fe3f03ff000000000000000003fc01f0fe7c00ff000000000000000003f00070fff8003f000000000000000003e00010ffc0003f000000000000000003800000ffc0000f000000000000000003000000ffc00000000000000000000003800010ffe0007c0000000000000000038007f07fffffff0000000000000000033ffff0ffffffff000000000000000003fffff0ffffffff000000000000000003fffff0ffffffff000000000000000003fffff0ffffffff000000000000000001ffffe0ffffffff000000000000000000fffff0fffffffe000000000000000000fffff0fffffffe0000000000000000007fffe0fffffffe0000000000000000007fffe0fffffffc0000000000000000003fffc0fffffff80000000000000000011fff80ff3ffff000000000000000000187e100ff1fffe0000000000000000000800200ffce000800000000000000000081fe10ffef0008000000000000000000c8fe31ffeff80800000000000000000048ff31fffff888000000000000000000643fa1fffff090000000000000000000241ff1ffffe110000000000000000000320ff9fdffc1200000000000000000001803f8f8ff822000000000000000000019006000fe06600000000000000000000c800000380c400000000000000000000e4000200018c000000000000000000006300070003180000000000000000000031800f8006180000000000000000000038f00f801c3000000000000000000000187fe001fe60000000000000000000001c3ff83ffe60000000000000000000000c07fffffcc0000000000000000000000e03fffff9c00000000000000000000006183ffff98000000000000000000000031f001ff30000000000000000000000031fe01fe60000000000000000000000019fe03fe60000000000000000000000019ff03fcc000000000000000000000000cff07fdc0000000000000000000000004fe07ff80000000000000000000000007fe03ff00000000000000000000000003fc03ff00000000000000000000000001fc01fe00000000000000000000000000fc01fc000000000000000000000000007c03f8000000000000000000000000007e03f8000000000000000000000000003e03f0000000000000000000000000003e07e0000000000000000000000000001e07c00000000000000"
        },
        mushroom: {
            name: "mushroom",
            hex: "00000000000000000000000000000000000000000000007ff40000000000000000000000000007ffffc00000000000000000000000003ffffff8000000000000000000000000ffffffff000000000000000000000003fffe007fc0000000000000000000000ffff8001ff0000000000000000000001ffff0000ffc000000000000000000003f87f00007fe000000000000000000007f07f00007ff00000000000000000000fe07f8000fff80000000000000000001fe1ffc003fffc0000000000000000003ffbfffabffffe0000000000000000007fffffffffffff000000000000000000ffffe3ffffffff800000000000000001ffff01ffffffffc00000000000000003fffc01ffffffffc00000000000000003fff801fffff07fc00000000000000007fff003fffff01fe00000000000000007fff007fffff00ff0000000000000000ff3f83ffffff807f0000000000000000fc3fffffffffc07f0000000000000000f83ffffffffffaff8000000000000001f03fffffffffffff8000000000000001f03fffffffffffff8000000000000001f07fffffffffffffc000000000000001f0ffffffffffffffc000000000000001f1ffffd557ffffffc000000000000001fffffaaaaabfffff8000000000000000ffffd5555555ffff8000000000000000fffeaa8808aaafff00000000000000007fd550000011555c00000000000000000aaa0000000022a800000000000000000000000000000000000000000000000000000002aa00000000000000000000000000055555500000000000000000000000000aaaaaa8000000000000000000000000055555500000000000000000000000000aaaaaa8000000000000000000000000055555500000000000000000000000000aaaaaa8000000000000000000000000055555500000000000000000000000000aaaaaa80000000000000000000000001ffffffc0000000000000000000000001ffffffc0000000000000000000000001ffffffc0000000000000000000000001ffffffe0000000000000000000000001ffffffe0000000000000000000000003ffffffe0000000000000000000000003ffffffe0000000000000000000000003ffffffe0000000000000000000000003fffffff0000000000000000000000003fffffff0000000000000000000000007fffffff0000000000000000000000007fffffff0000000000000000000000007fffffff0000000000000000000000007fffffff0000000000000000000000007fffffff0000000000000000000000003ffffffe0000000000000000000000001ffffffc00000000000000000000000007fffff000000000000000000000000001ffffc0000000000000000000000000003fff800000000000000000000000000007f400000000000000"
        },
        invader: {
            name: "invader",
            hex: "0000000003fc0000000003fc000000000000000003fc0000000003fc000000000000000003fc0000000003fc000000000000000003fc0000000003fc000000000000000003fc0000000003fc000000000000000003fc0000000003fc00000000000000000003fc000003fc0000000000000000000003fc000003fc0000000000000000000003fc000003fc0000000000000000000003fc000003fc0000000000000000000003fc000003fc0000000000000000000003fc000003fc0000000000000000000003fc000003fc0000000000000000000003fc000003fc00000000000000000003fffffffffffffc000000000000000003fffffffffffffc000000000000000003fffffffffffffc000000000000000003fffffffffffffc000000000000000003fffffffffffffc000000000000000003fffffffffffffc000000000000000003fffffffffffffc000000000000000003fffffffffffffc0000000000000003fffc03fffffc03fffc00000000000003fffc03fffffc03fffc00000000000003fffc03fffffc03fffc00000000000003fffc03fffffc03fffc00000000000003fffc03fffffc03fffc00000000000003fffc03fffffc03fffc00000000000003fffc03fffffc03fffc00000000000003fffc03fffffc03fffc000000000003fffffffffffffffffffffc0000000003fffffffffffffffffffffc0000000003fffffffffffffffffffffc0000000003fffffffffffffffffffffc0000000003fffffffffffffffffffffc0000000003fffffffffffffffffffffc0000000003fffffffffffffffffffffc0000000003fffffffffffffffffffffc0000000003fc03fffffffffffffc03fc0000000003fc03fffffffffffffc03fc0000000003fc03fffffffffffffc03fc0000000003fc03fffffffffffffc03fc0000000003fc03fffffffffffffc03fc0000000003fc03fffffffffffffc03fc0000000003fc03fffffffffffffc03fc0000000003fc03fffffffffffffc03fc0000000003fc03fc0000000003fc03fc0000000003fc03fc0000000003fc03fc0000000003fc03fc0000000003fc03fc0000000003fc03fc0000000003fc03fc0000000003fc03fc0000000003fc03fc0000000003fc03fc0000000003fc03fc0000000003fc03fc0000000003fc03fc0000000003fc03fc0000000003fc03fc0000000000000003fffc03fffc0000000000000000000003fffc03fffc0000000000000000000003fffc03fffc0000000000000000000003fffc03fffc0000000000000000000003fffc03fffc0000000000000000000003fffc03fffc0000000000000000000003fffc03fffc0000000000000000000003fffc03fffc00000000000000000000000000000000000000000000000000000000000000000000000000"
        },
        mtgox: {
            name: "mtgox",
            hex: "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007f800000000000000000000000000003ffc0000000000000000000000000000fffc0000000000000000000000000003c1fe000000000000000000000000000e00fe000000000000000000000000001800fe000000000000000000000000007000fc00000000000000000000000000c000fc000000000000000000000000030001fc000000000000000000000000060001f8000000000000000000000000080001f8000000000000000000000000000003f8000000000000000000000000000003f0000000000000000000000000000007f0000000000000000000000000000007e000000000000000000000000000000fc000000000000000000000000000001fc000000000000000000000000000003f8000000000000000000000000000003f0000000000000000000000000000007f000000000000000000000000000000fe00028000a2aaaa81ffff01fffe0ff1fc0005400155555543ffff87ffff07f9fc0002a002a2aaaa87ffffcfffff87fff8000540055555550fffffcfffffc3fff0000aa00aa002800f00001f0007c1ffe0000550155005000f00001e0007c1ffc0000aa82aa002800f00001e000780ffc0000554154005001f0fffde0007807f80000a2828a00a801e0fffde000780ffc0000514514005001e1fffde000781ffc0000a2aa0a00a001e1fffbe000783ffe0001415414005001e0007bc000787fff0000a0a80a00a001e0007bc000f8ffff0001405414005001f000fbe001f1fe7f8000a0282800a2a1fffff3fffff3fc3f8001405014005141fffff1ffffe7f81fc000a0202800a2a0ffffe0ffffcff01fe0014000140141403fff847fff1fe00fe000000000000000000008000000000000000000000000000000100000000000000000000000000000000000aaaa8000000000000000000000001000555500000000000000000000000020002aaa0000000000000000000000004000155400000000000000000000000000002aa8000000000000000000000000400155500000000000000000000000008002aaa000000000000000000000000140055540000000000000000000000000a02aaa8000000000000000000000000151555100000000000000000000000000aaaa800000000000000000000000000155550000000000000000000000000000aaa8000000000000000000000000000155500000000000000000000000000000aa800000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
        },
        electrum: {
            name: "electrum",
            hex: "0000000000000000000000000000000000000000000000000000000000000000000000000000000fe00000000000000000000000000001ffff0000000000000000000000000007ffffc00000000000000000000000003ffffff00000000000000000000000007ffffffc000000000000000000000001ffffffff000000000000000000000003e07ffc0f80000000000000000000000f801ff003e0000000000000000000001f0f07c1e1f0000000000000000000003f3fc38ff9f8000000000000000000007e3ff01ff8fc000000000000000000007e7ffc7ffcfe00000000000000000000fe7ff83ffc7e00000000000000000001fc7ff11ffe7f00000000000000000003fcffe38ffe7f80000000000000000003fcffc7c7fe7f80000000000000000007fcff8fe3fe7fc0000000000000000007fcff8001fe7fc000000000000000000ffc7000000e7fe000000000000000000ffc000fe0007fe000000000000000001ffc067ffc403ff000000000000000001ff07cfffe7c0ff000000000000000001fc078ffff3c87f000000000000000001f8e79f97f1ce1f000000000000000003f1e33f97f98f8f800000000000000003e7f33e01f89fc7800000000000000003c7f27e00fc9fe7800000000000000003cff07f187c1ff38000000000000000039ff8ff1cfe3ff38000000000000000039ff8ff18fe3ff38000000000000000039ff8ff007e3ff38000000000000000039ff8ff1c7e3ff3800000000000000003cff87f1e7c1fe7800000000000000003cff23f1c7c9fe7800000000000000003e7f33e00f89fcf800000000000000003f1f31f97f9cf1f800000000000000001f8e79f97f1ce3f000000000000000001fc278ff7e3c87f000000000000000001ff07c7ffe7c1ff000000000000000001ffc067ffc407ff000000000000000000ffe000fe0007fe000000000000000000ffe7800003e7fe0000000000000000007fcff8ee1fe7fc0000000000000000007fcffcfe3fe7fc0000000000000000003feffc7c7fe7f80000000000000000003feffe38ffe7f80000000000000000001fe7ff11ffe7f00000000000000000000fe7ff83ffefe00000000000000000000fe7ffc3ffcfe000000000000000000007f3ff01ffcfc000000000000000000003f3fe387f9f8000000000000000000001f8f07e0e3f0000000000000000000000fc01ff007e00000000000000000000003f0fffe1fc00000000000000000000001ffffffff000000000000000000000000fffffffe0000000000000000000000003ffffff800000000000000000000000007ffffc000000000000000000000000001ffff00000000000000000000000000000fe0000000000000000000000000000000000000000000000000000000000000000000000000000000"
        },
        mycelium: {
            name: "mycelium",
            hex: "000000000000000000000000000000000000000000000000000000000000000000000000000000fffe0000000000000000000000000003f7df800000000000000000000000001f07c1f00000000000000000000000007807c03c000000000000000000000001c007c0070000000000000000000000030007c00180000000000000000000000e0007c000e0000000000000000000001c0007c0007000000000000000000000300007c0001800000000000000000000600007c0000c00000000000000000000c0000fe000060000000000000000000180000fe000030000000000000000000180003ff800030000000000000000000300007ffc0001800000000000000000060001ffff0000c00000000000000000040007ffffc0004000000000000000000c000ff01fe0006000000000000000000807ffc007ffc0200000000000000000180fff8003ffe0300000000000000000181ffe0000fff0300000000000000000101cf800003e70100000000000000000301c7800003c70180000000000000000201ffc00007ff0180000000000000000200fff0001fff00c0000000000000000600fff8003ffe00c00000000000000006007ffe00fffc00c00000000000000006003cff83fe7c00c00000000000000004003c3ffff87c00400000000000000004003c0fffe07c00400000000000000004003c07ffc07c00400000000000000004003c01ff007c00400000000000000004003c00fe007c00400000000000000004003c007e007c00400000000000000004003c007c007c00400000000000000006003c007c007c00c00000000000000006003c007c007c00c00000000000000006007c007c007c00c00000000000000002007c007c007c00c0000000000000000200fe007c00fe0180000000000000000300fe007c01ff0180000000000000000103ff807c03ff8180000000000000000107ffe07c0fffe30000000000000000019ffff07c3ffffb000000000000000000ff83fc7c7fc7fe000000000000000000fe00ff7dff01fe0000000000000000007c007ffffc007e00000000000000000070001ffff0001c000000000000000000300007ffe00018000000000000000000100001e7800030000000000000000000180001e70000300000000000000000000c0001ff000060000000000000000000060000fe0000c0000000000000000000030000fe0001800000000000000000000180003800070000000000000000000000e00000000e0000000000000000000000300000001800000000000000000000001c00000070000000000000000000000007800003e0000000000000000000000001e0001f000000000000000000000000003f01fc000000000000000000000000000fffe0000000000000000000000000000000000000000000000"
        },
        ethereum: {
            name: "ethereum",
            hex: "0000000000000000000000000000000000000000000000030000000000000000000000000000000280000000000000000000000000000007000000000000000000000000000000068000000000000000000000000000000f4000000000000000000000000000001ea000000000000000000000000000001f5000000000000000000000000000003ea000000000000000000000000000003f5000000000000000000000000000007ea80000000000000000000000000000ff540000000000000000000000000000feaa0000000000000000000000000001ff540000000000000000000000000001feaa0000000000000000000000000003ff550000000000000000000000000007feaa8000000000000000000000000007ff55400000000000000000000000000ffeaa800000000000000000000000000fff55400000000000000000000000001ffeaaa00000000000000000000000003fff55500000000000000000000000003ffeaaa80000000000000000000000007ffc55500000000000000000000000007ffa2aa8000000000000000000000000ffd40554000000000000000000000001ffaa00aa000000000000000000000001fd540055000000000000000000000003eaaa000a000000000000000000000003d5540005000000000000000000000006aaaa000080000000000000000000000d55540000000000000000000000000002aaaa0000000000000000000000000001555400000000000000000000000000002aaa0000000000000000000000000000155400000000000000000000000000040aaa00008000000000000000000000030154000100000000000000000000000380aa0002000000000000000000000001e0540015000000000000000000000000f80a002a000000000000000000000000fe0400540000000000000000000000007f0202a80000000000000000000000003fc005500000000000000000000000001ff00aa00000000000000000000000001ff855400000000000000000000000000ffeaaa000000000000000000000000007ff554000000000000000000000000007feaa8000000000000000000000000003ff550000000000000000000000000001feaa0000000000000000000000000000ff540000000000000000000000000000fea800000000000000000000000000007f5400000000000000000000000000003ea800000000000000000000000000003f5000000000000000000000000000001ea000000000000000000000000000000f4000000000000000000000000000000680000000000000000000000000000007000000000000000000000000000000028000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000"
        },
        litecoin: {
            name: "litecoin",
            hex: "00000000000000aaaa00000000000000000000000000057fff400000000000000000000000000fffffe80000000000000000000000005ffffff4000000000000000000000000fffffffa000000000000000000000005ff8001ff40000000000000000000000bfc00003fa00000000000000000000017f000011fd0000000000000000000003fc0000aa3f8000000000000000000007f00000171fc00000000000000000000fe000000fcfe000000000000000000017c001ff9707d00000000000000000002f8222aa8803e80000000000000000001f5403558001f40000000000000000003e2882ab8000f80000000000000000007c51075500007c000000000000000000fc8206ab00033a00000000000000000079040557001fbd000000000000000000f80806ee002f9e000000000000000001f0100dfe015fdf000000000000000002f0200ffe0abfef800000000000000001e0404ffe1557cf400000000000000003e0808ffc0aae0f800000000000000001e0151ffc055807400000000000000003e02a1ffcc2a007800000000000000007c5541fffc50007c00000000000000003caaa3fffc80007800000000000000007dd553fff800007c00000000000000003daaa3fff00000ba00000000000000007dd503ffc000073c00000000000000003ce80fff00002fba00000000000000007dd03fff0000573c00000000000000003d807fff0002abba00000000000000007c007ffe0005577c00000000000000003c007ffe008aaafa00000000000000007c008ffe0115547c00000000000000003e000ffe0222a07800000000000000005e010ffc0000007400000000000000003e0a9ffc000000f800000000000000001e151fffffff00f000000000000000002f7a9fffffff00f800000000000000001f7d1fffff5601f000000000000000000fbebfffeaaa01e80000000000000000179d3ffdd55603d000000000000000000bda3fffaaaa3be0000000000000000007c03ffffffc77c0000000000000000003e000000000ef80000000000000000001f0000000005f40000000000000000002f800a22022be800000000000000000017c055440457f00000000000000000000be3eaa8088fe000000000000000000005f3d550111fc000000000000000000002f8aa80003f80000000000000000000017e540000ff0000000000000000000000bf800003fa00000000000000000000005ff0001ff400000000000000000000002bff83ffe8000000000000000000000005ffffff40000000000000000000000002fffffe8000000000000000000000000057ffd5000000000000000000000000000aaaa00000000000000000000000000000550000000000000000000000000000000000000000000000000000000000000000000000000000000"
        },
        myetherwallet: {
            name: "myetherwallet",
            hex: "000000000000007ffe0000000000000000000000000007d555e00000000000000000000000001aaaaab800000000000000000000000075455556000000000000000000000001aab2aaab800000000000000000000006557d555540000000000000000000000eaa7aaaaab0000000000000000000001f557d555558000000000000000000003b2abcaaaaac000000000000000000007354cd55555600000000000000000000f2a9ceaaaaab0000000000000000000175958001555580000000000000000002ebcb3ffcaaaac0000000000000000002e4d2ffff155540000000000000000006caeaffffcaaaa000000000000000000dd4f77ffff55550000000000000000009aa66bffffaaab0000000000000000013957e3ffffd555800000000000000001aaabc9ffffeaaa8000000000000000035553d5fffff55540000000000000000272abcafffffaaac0000000000000000365535501fff955400000000000000006eaa7eaaa7ffcaaa00000000000000004e55665541ffd55600000000000000005ca8672abaffeaaa0000000000000000dd572755797fe5560000000000000000baa7caaa9c7feaaa0000000000000000b94ff3955d3ff5550000000000000000baaffdaaaebff2ab0000000000000000f54ffdd0003ff5550000000000000000f2aff9c7fffff2ab0000000000000000e54ff8e1fffff55100000000000000008aaffaa83ffff2a70000000000000000d54ff9744ffff54f0000000000000000aaaffc7283fff2af0000000000000000d54ffd75507ff55d0000000000000000aaaffebaaa9fea9f0000000000000000d557fe395507e55a00000000000000006aa7ff1caac8eaaa00000000000000005557ff9d54f1153a00000000000000006aabffccaa6e2a7200000000000000005553fff0157e557400000000000000002aa9ffffeabcaaec00000000000000003154ffffe53d54e40000000000000000122afffff2bcaac8000000000000000014547ffff57555d800000000000000000aaa3ffffa7ea9d0000000000000000009110ffff96653900000000000000000062287fffca6aba00000000000000000045541fffed7534000000000000000000288a87ffecb2740000000000000000001151407e1939780000000000000000000a2228001a9ab000000000000000000004445500795ce0000000000000000000068aaaa7329cc000000000000000000001111153f54d8000000000000000000000a222abeaab0000000000000000000000445555e55600000000000000000000003888a9caa800000000000000000000000d1554d57000000000000000000000000322222bc0000000000000000000000000e4455e000000000000000000000000001fabf000000000000000000000000000007e000000000000000"
        },
        zcash: {
            name: "zcash",
            hex: "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007f80000000000000000000000000000ffffc000000000000000000000000003fffff80000000000000000000000000ffffffe0000000000000000000000003fffffff800000000000000000000000ffffffffc00000000000000000000001fffffffff00000000000000000000003ffe001fff80000000000000000000007ff00003ffc000000000000000000000ffc00000ffe000000000000000000001ff803f003ff000000000000000000003fe003f001ff000000000000000000007fc003f000ff800000000000000000007f8003f0007fc0000000000000000000ff0003f0003fc0000000000000000000fe01fffff01fe0000000000000000001fe01fffff00ff0000000000000000001fc01fffff007f0000000000000000003f881fffff007f0000000000000000003f801fffff003f8000000000000000003f201ffffe003f801f800e001f80e01c7f401ffffe003f807fe00f007fe0e01c7f008003fc001fc0fff01f00fff0e01c7f010007f8001fc1e0f01f00f070e01c7e02000ff8001fc1e0703f81e078e01cfe04001ff0001fc1c0703b81e078e01cfe88083fe0001fc3c0783b80f000e01cfe10103fc0000fc3c00079c0fc00e01cfe20207fc0000fc3c00071c07f00fffcfe4040ff80000fc3c00071e03fc0fffcfe8880ff00001fc3c000f0e007e0fffcfe1101fe00001fc3c000e0e001f0e01cfe2223fe00001fc3c078fff00078e01c7e4407fc00001fc1c071fff1c078e01c7f0887f800001fc1e071c071c078e01c7f510ff777003f81e0f3c079e070e01c7f2a1fffff003f80ffe38038fff0e01c3f943fffff003f807fc380387fe0e01c3faabfffff007f001f87803c1f80e01c1fd53fffff007f0000000000000000001fcabfffff00ff0000000000000000000fe53fffff01fe0000000000000000000ff2803f0081fe00000000000000000007f9553f1003fc00000000000000000003fcaa3f2007fc00000000000000000003fe443f400ff800000000000000000001ff2abf003ff000000000000000000000ffc100007fe0000000000000000000007ff2a221ffc0000000000000000000003ffc000fff80000000000000000000001fffe1ffff00000000000000000000000ffffffffe000000000000000000000003fffffff8000000000000000000000001fffffff00000000000000000000000003fffffc00000000000000000000000000fffff0000000000000000000000000000fff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
        },
        dash: {
            name: "dash",
            hexfffffc03fffff00ffffff8fe000fe007fffffe07fffff81ffffff8fe000fe00ffffffe1ffffff83ffffff1fc001fc00ffffffe1ffffff87ffffff1fc001fc00ffffffe3ffffff8fffffff1fc001fc0000000fe3f8003f8fe000003f8003f80000001fc7f8003f8fe000003f8003f80fff001fc7f0007f1fffffe03ffffff81ffe001fc7f0007f1ffffff07ffffff81ffe003f87f1ffff1ffffff87ffffff01ffe003f8fe1fffe0ffffff87ffffff03ffe003f8fe1fffe07fffff8fffffff00000007f0fe3fffe000003f8fe000fe00000007f1fc3fffc000007f8fe000fe007ffffff1fc001fc7ffffff1fc001fe00ffffffe1fc001fc7ffffff1fc001fc00ffffffe3f8003f8ffffffe1fc001fc00ffffffc3f8003f8ffffffc3fc003fc01ffffff03f8003f8ffffff83f8003f
        },
        bitcoin_cash: {
            name: "bitcoin_cash",
            hex: "00003ffff00ffffffffff00ffffc000000003ffff01ffffffffff80ffffc000000003fffe03ffffffffffc07fffc000000003fffc03ffff1fffffc03fffc000000003fffc07ffe30fffffe03fffc000000003fff80fffe38ffffff01fffc000000003fff80fffe38ffffff01fffc000000003fff01fffe3803ffff80fffc000000003fff03ffff0000ffffc0fffc000000003fff03ffff0000ffffc0fffc000000003ffe03fff000007fffc07ffc000000003ffe07ffc003c07fffe07ffc000000003ffe07ffc00fe03fffe07ffc000000003ffc07ffc00ff07fffe03ffc000000003ffc0ffffe0ff07ffff03ffc000000003ffc0ffffe07e07ffff03ffc000000003ffc0ffffe07c0fffff03ffc000000003ffc0ffffe07801ffff03ffc000000003ffc0fffff00000ffff03ffc000000003ffc0fffff000007fff03ffc000000003ffc0fffff003c07fff03ffc000000003ffc0fffff03fe03fff03ffc000000003ffc0fffff83ff03fff03ffc000000003ffc0fffff81ff03fff03ffc000000003ffc0fffff81fe03fff03ffc000000003ffc0fffff81fe07fff03ffc000000003ffc0fffffc1f807fff03ffc000000003ffc07ffffc0e00fffe03ffc000000003ffe07ffffc0001fffe07ffc000000003ffe07ffffc0007fffe07ffc000000003ffe03fffe0003ffffc07ffc000000003fff03fffe0023ffffc0fffc000000003fff03fffe0061ffffc0fffc000000003fff01fffe3c71ffff80fffc000000003fff80fffffc71ffff01fffc000000003fff80fffffc71ffff01fffc000000003fffc07ffffe3ffffe03fffc000000003fffc07ffffffffffc03fffc000000003fffe03ffffffffffc07fffc000000003fffe01ffffffffff807fffc000000003ffff00ffffffffff00ffffc000000003ffff807ffffffffe01ffffc000000003ffffc03ffffffffc03ffffc000000003ffffe00ffffffff007ffffc000000003fffff007ffffffe00fffffc000000003fffff801ffffff801fffffc000000003fffffc007ffffe003fffffc000000003fffffe000ffff0007fffffc000000003ffffff0000ff0000ffffffc00000000000000000000000000000000000000000000000000000000000000000000000000038000001c000000000e00000000001fe39800001c001fe0000e00000000001ff198000018003fc0000e00000000001c7818000000007840000e00000000001c3b9f1f3f1dfc700fc7eff0000000001c739f3f7f9dfe700fe7eff0000000001ff39878739dcee000ee0e78000000001ffb9870e1ddc6e0036f0e38000000001c3b9870e1ddc6700fe7ce38000000001c3b9870e1ddc6701c61ee38000000001c3b987071ddc6781c606e38000000001ffb9fff7f9dc63fffefee38000000001ff39fbf3f1dc61fefefee380000"
        },
        bitcoin_gold: {
            name: "bitcoin_gold",
            hex: "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fc000000000000000000000000000000ff80000000000000000000000000000007e00000000000000000000000000000fcf80000000000000000000000000000ff1e0000000000000000000000000000ffe78000000000000000000000000000fff9c000000000000000000000000000fffce000000000000000000000000000ffff7000000000000000000000000000ffffb800000000000000000000000000ffffdc00000000000000000000000000ffffee00000000000000000000000000c7fff700000000000000000000000000fdfffb00000000000000000000000000ff7ffb80000000000000000000000000f7bffd80000000000000000000000000f1dffec0000000000000000000000000f0fffec0000000000000000000000000fe37ffe0000000000000000000000000ffbbff60000000000000000000000000ffddff60000000000000000000000000ffcdfff00000000000000000000000001fceffb00000000000000000000000000fc6ffb3f1ffe7e1f8770e1f81f8f1fc0fc3ffb3f9ffeff3fc778e3fc7fcf1ff0fc37ff3f9fffff7fe77ce7fe7fef1ff7fc37ff3b9c71e3f0f77cef0cf1ef1e7ff837fd3f9c73c0e0f77eee00e0ef1e3ffc37fd3f9c73c0e0777fee7fe0ff1e3ffe37fd3fdc73c0e07777ee7ee0ff1e3fff37fd39dc73c0e0f777ee7ee0ef1e307f37ff39dc71e3f0f773ef0ef1ef1e707f37ff3fdc71ff7fe771e7fe7feffff07f3ffb3fdc70ff3fc771e7fc7fcffff07f6ffb3f9c707e1f8770e1f01f0fffc1ffeffb0000000000000000000000000ffedfff0000000000000000000000000fffdff60000000000000000000000000ffbbff60000000000000000000000000fe77ffe0000000000000000000000000f0effec0000000000000000000000000f1dfffc0000000000000000000000000e7bffd80000000000000000000000000ff7ffb80000000000000000000000000f9fffb0000000000000000000000000087fff600000000000000000000000000ffffee00000000000000000000000000ffffdc00000000000000000000000000ffffb800000000000000000000000000ffff7000000000000000000000000000fffce000000000000000000000000000fffbc000000000000000000000000000ffe78000000000000000000000000000ff1e0000000000000000000000000000f878000000000000000000000000000003e00000000000000000000000000000ff800000000000000000000000000000fc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
        },
        vertcoin: {
            name: "vertcoin",
            hex: "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003ff00000000000000000000000000003ffff000000000000000000000000001fffffc00000000000000000000000003ffffff0000000000000000000000000fffffff8000000000000000000000003fffffffe000000000000000000000007ffffffff00000000000000000000000fffffffff80000000000000000000001fffffffff00000000000000000000003fffffffff00000000000000000000007ffffffffe00000000000000000000007ffffffffc0000000000000000000000fffffffffc0000000000000000000001fffffffff80000000000000000000001fffffffff00000000000000000000003ffffffffe00200000000000000000003ffffffffe00200000000000000000007ffffffffc00700000000000000000007ffffffff800f00000000000000000007ffffffff801f80000000000006000007ffffffff001f8000000000000600000ffffffffe003f8000004000000000000ffffffffe007f8000004000000000000ffffffffc007f81e049f83c1e0613c00ffffffff800ff83f05df8fc3f0e1fe00fe000fff001ffc61860408061821c200fc0007ff003ffc40840418040c218200f80003fe003ffc40840410040c218300ffe001fc007ffcff840410040c218300fff001fc00fff8c0040410040c218300fff800f800fff840040418040c218300fff8007001fff8600404180608218300fffc003003fff83084040c03182183007ffe002007fff81f840787e1f02183007fff000007fff80000000000000000007fff00000ffff00000000000000000003fff80001ffff00000000000000000003fffc0001fffe00000000000000000003fffe0003fffe00000000000000000001fffe0007fffc00000000000000000000ffff0007fffc00000000000000000000ffff800ffff8000000000000000000007fffc01ffff8000000000000000000003fffc03ffff0000000000000000000003fffe03fffe0000000000000000000001ffff07fffc0000000000000000000000ffff8ffff800000000000000000000007fffdffff000000000000000000000001fffffffe000000000000000000000000fffffff80000000000000000000000003fffffe00000000000000000000000000fffff8000000000000000000000000001fffe00000000000000000000000000001fe0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
        },
        namecoin: {
            name: "namecoin",
            hex: "00000000000000000000000000000000000000000000000ff00000000000000000000000000000ffff0000000000000000000000000003ffffc00000000000000000000000000ffffff00000000000000000000000001ffffff80000000000000000000000007ffffffe000000000000000000000000ffffffff000000000000000000000001ffffffff800000000000000000000003ffffffffc00000000000000000000007ffffffffe00000000000000000000007ffffffffe0000000000000000000000fff87fff1f0000000000000000000000fff07ffc3f0000000000000000000001ffe03ffc3f8000000000000000000001ffe01ff83f8000000000000000000003ffe11ff87fc000000000000000000003ffc18ff87fc000000000000000000003ffc187f07fc000000000000000000007ffc1c3f07fe000000000000000000007ffc0e3f0ffe000000000000000000007ff8061f0ffe000000000000000000007ff8070e0ffe000000000000000000007ff843860ffe000000000000000000007ff061c61ffe000000000000000000007ff071c21ffe000000000000000000007ff0f8e01ffe000000000000000000007ff0f8701ffe000000000000000000007fe0fc383ffe000000000000000000003fe0fe383ffc000000000000000000003fe1fe183ffc000000000000000000003fe1ff087ffc000000000000000000003fc1ff807ffc000000000000000000001fc1ffc07ff8000000000000000000001fc3ffc0fff8000000000000000000000f87ffe1fff0000000000000000000000fffffffffe00000000000000000000007ffffffffe00000000000000000000003ffffffffc00000000000000000000001ffffffff800000000000000000000000ffffffff0000000000000000000000007ffffffe0000000000000000000000003ffffffc0000000000000000000000001ffffff800000000000000000000000007ffffe000000000000000000000000001ffff80000000000000000000000000003ffc00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000001c0000000000000000000000000000001800000000000000000000000000000000000000000000000fc1fcfff0f87e7e39fc0000000000001fe3f8fff1fcfefe39fc0000000000001ce739ce738de1e7399c0000000000001cee39ce731dc1c7738c00000000000018ee39ce77f9c1c7739c00000000000038ee31ce77f1c187739c00000000000039ce738e7701c18e731c00000000000039cff39c63f1f9fe671c00000000000039c7f39ce3f1f9fce73800000000000031c3e39ce1f07870e73800000000000000000000000000000000000000"
        },
        monacoin: {
            name: "monacoin",
            hex: "00000000002000000000040000000000000000000030000000000c0000000000000000000030000000000c0000000000000000000038000000001c000000000000000000003c000000003c000000000000000000007c000000003e000000000000000000007e000000007e000000000000000000007f00000000fe000000000000000000007f00000000fe00000000000000000000ff80000001ff00000000000000000000ff80000001ff00000000000000000000ffc0000003ff00000000000000000000ffe0000007ff00000000000000000001ffe0000007ff80000000000000000001fff07ffe0fff80000000000000000001ffffffffffff80000000000000000001ffffffffffff80000000000000000001ffffffffffff80000000000000000003ffffffffffffc0000000000000000003ffffffffffffc0000000000000000003ffffffffffffc0000000000000000003ffffffffffffc0000000000000000007ffffffffffffe000000000000000000ffffffffffffff000000000000000001ffffffffffffff800000000000000003ffffffffffffffc00000000000000007fff1ffffff8fffe00000000000000007ffe3ffffffc7ffe0000000000000000fffc7ffffffe3fff0000000000000001fff8ffffffff1fff8000000000000001fff1ffffffff8fff8000000000000003fff3fe7ffe7fc7ffc000000000000003ffe7fe3ffc7fe7ffc000000000000003fffffe3ffc7fffffc000000000000007ffffff0000ffffffe000000000000007ffffff0001ffffffe000000000000007ffffff8001ffffffe000000000000007ffffffcfe3ffffffe000000000000007ffffffc7e3ffffffe000000000000007ffffffe3c7ffffffe000000000000007ffffffe3cfffffffe000000000000007fffffff18fffffffe000000000000007fffffff91fffffffe000000000000003fffffff81fffffffc000000000000003fffffffc3fffffffc000000000000003fffffffc3fffffffc000000000000001fffffffe7fffffff8000000000000001fffffffeffffffff8000000000000000ffffffffffffffff00000000000000007fffffffffffffff00000000000000007ffffffffffffffe00000000000000003ffffffffffffffc00000000000000001ffffffffffffff800000000000000000ffffffffffffff0000000000000000007ffffffffffffe0000000000000000001ffffffffffff80000000000000000000ffffffffffff000000000000000000003ffffffffffc000000000000000000000ffffffffff00000000000000000000003ffffffffc00000000000000000000000ffffffff0000000000000000000000000ffffff000000000000000000000000000ffff0000000000000000000000000000000000000000000000"
        },
        doge: {
            name: "doge",
            hex: "000000000000023c0000000000000000000000000000027c0000000000000000000000000000023a0000000000000000000000000000031a0000000000000000000000000000023e0000000000000000000000000000020d00000000000000000000000000000204800000000000000000000000000002168000000000000000000000000000020b40000000000000000000000000000405800000000000000000000000000004c8d000000000000000000000000000057f25580000000000000000000000001afbcfe200000000000000001600000075757ffd000000000000000021800001aaefaffe400000000000000041e0001d5557f7ff2000000000000000027c01ceaabffaffd000000000000000411a0e755577ff7fe8000000000000004288d8aa889befffe80000000000000041552555415fdffdf40000000000000042a286aaba15ff1bfa00000000000000401541555c45f86ff5200000000000004002808aae2a6cf6fd200000000000004010815ddd9559177e40000000000000200080abbb83ac17ff40000000000000200045455f44f217ffc010000000000020062aeafee0ff8fffe0f0000000000010050555fdfc7ffffff1c00000000000100302aaabfbbbffffff0000000000001000c55557ffdfffbffc00000000000008002aaaafeebfeffffc000000000000040013d558e1fffe07fcfc000000000004202baab20bbffc07ffa000000000000244475567c17ff003ff000000000000020a4eaac8e4bfe001fefe000000000001441dd580e0ffc001ff80000000000002a0bbaa80ecffc000ff7e0000000000037577778097ffc0007f8700000000000286eeebe06fffc0007ff8000000000003015ddddfddffe4003f8c000000000002823bbeaaabffe2003f800000000000036374ff554dfffc007fc000000000000282ebffeabffffc007fc0000000000003655fffffffffd6007fc0000000000002a27ffffffffbfe007fc0000000000002547fffffffcfd6003fc0000000000001aaffffffffcdfa087fc000000000000111ffffffffd576107fc00000000000012a7fffffffeaba00ffc0000000000000557fffffffe55c00ffc0000000000000e8ffffffffeaba01ffc0000000000000d57fffffffffc401ffc0000000000000aa3ffffffff00083ffe0000000000000d43fffffffe000d7ff60000000000000aa7ffffffff00bafff70000000000000943ffffffff0157fff78000000000000aa3ffffffffc2affff7c000000000000b45ffffffffffffffd78000000000000aa9ffffffffffefffafc000000000000150ffffffffffffffd7c000000000000aaa7fffffffffffff3fe0000000000007543fffffffffffff77f0000000000006a89fffffffffffffaff0000000000005140fffffffffffff5ff000000"
        },
        digibyte: {
            name: "digibyte",
            hex: "0000000000000003c000000000000000000000000000007ffe0000000000000000000000000001ffff8000000000000000000000000007ffffe00000000000000000000000001fc003f80000000000000000000000003f0000fc0000000000000000000000007c00003e000000000000000000000000f800001f000000000000000000000001f000000f800000000000000000000003e0000007c00000000000000000000003c0000003c000000000000000000000078000cc01e0000000000000000000000f00009800f0000000000000000000000f01fffc00f0000000000000000000000e01ffff8070000000000000000000001e03ffffc078000000000000000000001c00000fe038000000000000000000001c000003e038000000000000000000001c000003e038000000000000000000003c003e03e03c000000000000000000003c003c03e03c000000000000000000003c003c03c03c000000000000000000003c007807c03c000000000000000000003c007807803c000000000000000000003c00f80f003c000000000000000000001c00f01f0038000000000000000000001c00f03e0038000000000000000000001c01f1f80038000000000000000000001e01fff00078000000000000000000000e03ff800070000000000000000000000f03fc0000f0000000000000000000000700cc0000e0000000000000000000000780000001e00000000000000000000003c0000003c00000000000000000000003e0000007c00000000000000000000001f000000f800000000000000000000000f800001f0000000000000000000000007c00003e0000000000000000000000003f0000fc0000000000000000000000001fe007f800000000000000000000000007ffffe000000000000000000000000001ffff80000000000000000000000000003ffc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000180060000000000000000000000001fc3000c7f000000000000000000000019e0000063000600000000000000000038e00600c3000e06000000000000000030c63f98c6719f1f800000000000000030c66318fc330c31800000000000000061cc63318c3618730000000000000000618cc6318c34187f00000000000000006318c6330c3c30600000000000000000fe18ee63983838600000000000000000fc18ec63f0303c7c000000000000000000000c00006000000000000000000000000018000060000000000000000000000003f00003c0000000000000000000000001c0000300000000000000"
        },
        decred: {
            name: "decred",
            hex: "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001fffc0007ffffe0000000000000000000fffe0003fffffc0000000000000000007fff0001ffffff0000000000000000003fffc000ffffff8000000000000000001fffe0007fffffc0000000000000000007fff0001ffffff0000000000000000003fff8000ffffff0000000000000000001fffc0007fffff8000000000000000000fffe0003fffffc0000000000000000007fff8001fffffe0000000000000000003fffc000007ffe0000000000000000003fffe000001fff000000000000000000fffff000000fff000000000000000001fffff8000007ff800000000000000003fffffc000003ff80000000000000000ffffffe000001ff80000000000000001fffffff800001ffc0000000000000001fffffffc00000ffc0000000000000003fffffffe00000ffc0000000000000007ffffffff00000ffc0000000000000007ffe0000000000ffc000000000000000fff80000000000ffc000000000000000fff00000000000ffc000000000000001ffe00000000000ffc000000000000001ffc00000000000ffc000000000000001ff800000000001ffc000000000000003ff800000000001ff8000000000000003ff000000000003ff8000000000000003ff000000000007ff8000000000000003ff00000000000fff0000000000000003ff00000000001fff0000000000000003ff00000000007ffe0000000000000003ff00000ffffffffe0000000000000003ff000007fffffffc0000000000000003ff000003fffffff80000000000000003ff800001fffffff80000000000000001ff8000007ffffff00000000000000001ffc000003fffffc00000000000000001ffe000001fffff800000000000000000fff000000fffff000000000000000000fff8000007fffc0000000000000000007ffe000003fffc0000000000000000007fffff8001fffe0000000000000000003fffffc0007fff0000000000000000001fffffe0003fff8000000000000000000ffffff0001fffc000000000000000000ffffff8000fffe0000000000000000003fffffe0007fff8000000000000000001ffffff0003fffc000000000000000000ffffff8000fffe0000000000000000003fffffc0007fff00000000000000000007ffffe0003fff80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
        },
        multibit: {
            name: "multibit",
            hex: "0ffc07f8e01c7ffe07ff0000000000001ff80ff9e03c7fff83ff8000000000003ff03ff9e03c7fffc0ffc000000000007fe07ff9e03c7fffe0ffc000000000007fc0fff9e03c7ffff07fe00000000000ffc1fff9e03c7ffff83ff00000000000ff83ff81e03c7ffffc1ff00000000000ff07e001e03c17fffe0ff80000000000fe0f0001e03c03ffff0ffc0000000000fe1f0001e03c00ffff87fc0000000000fc1f1fffffff803fff83fe0000000000f83f1ffffffffc0fffc3fe0000000000f87f1fffffffff07ffe1fe0000000000f07f1fffffffffc3ffe1ff0000000000f0ff00fff87fffe3fff0ff0000000000e0ff003fe001fff1fff0ff8000000000e0ff801fe0007ff1fff87f8000000000e1fffe1fe0003ff9fff87f8000000000c3ffff1fe0f81ff8fff87f8000000000c3ffff1fe1fc0ff8fffc3fc000000000c3ffff1fe1fe0ff8fffc3fc00000000087ffff1fe1fe0ff8fffc1fc00000000087ffff1fe1ff0ff8fffe1fc00000000087ffff1fe1fe0ff8fffe1fe00000000087ffff1fe0fc0ff1fffe1fe0000000008fffff1fe0f01ff1fffe1fe0000000000fffff1fe0003fe3fffe1fe0000000000fffff1fe0007fc3ffff0fe0000000000fffff1fe001ff87ffff0fe0000000000fffff1ffffffe07ffff0fe0000000000fffff1ffffffe03ffff0fe0000000000fffff1fffffffe0ffff0fe0000000000fffff1ffffffff87fff0fe0000000000fffff1e3f8c03fc7fff0fe0000000000fffff1e3f0c00fe3fff0fe0000000000fffff1e3f8c007f3fff0fe0000000000fffff1e3f8c003f1fff0fe0000000000fffff1e3f8c7c3f1fff0fe0000000000fffff1e3f8c7e1f9ffe1fe00000000087ffff1e000c7e1f9ffe1fe00000000087ffff1e000c7e1f9ffe1fe00000000087ffff1e000c7e1f9ffe1fc00000000087ffff1e1f0c7e1f9ffe1fc000000000c3ffff1e3f8c7e1f1ffc3fc000000000c3ffff1e3f8c7e1f1ffc3fc000000000c3ffff1e3f8c7c3f1ff83fc000000000e1ffe01e3f8c003f3ff87f8000000000e1ffc01e3f08007e3ff07f8000000000e0ffc03e3f0801fc7ff07f8000000000f0ff8ffffffffffc7ff0ff0000000000f0ff8ffffffffff0ffe0ff0000000000f87f8fffffffffe1ffe1ff0000000000f83f8fffffffff83ffc3fe0000000000fc3f8fffffffe007ff83fe0000000000fe1f8001e03c001fff87fc0000000000fe0f8001e03c007fff07fc0000000000ff07c001e03c07fffe0ff80000000000ff83fff9e03c7ffffc1ff80000000000ff83fff9e03c7ffff83ff000000000007fc1fff9e03c7ffff03fe000000000007fe07ff9e03c7fffe07fe000000000003ff03ff9e03c7fffc0ffc000000000001ff81ff9e03c7fff81ff8000000000000ffc0ff9e03c7ffe03ff000000000000"
        },
        reddit: {
            name: "reddit",
            hex: "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007c000000000000000000000000000f80fe000000000000000000000000000ff9c7000000000000000000000000001cff8300000000000000000000000000180f830000000000000000000000000018038300000000000000000000000000380183000000000000000000000000003001cf000000000000000000000000003000fe0000000000000000000000000070007c000000000000000000000000006000000000000000000000000000000060000000000000000000000000000003f00000000000000000000000000000ffffc000000000000000000000000007fffff800000000000000000000001c1fc000fe0e000000000000000000007ffc00000fbf80000000000000000000fff0000003ffc0000000000000000001c3c0000000f0e0000000000000000001878000000078600000000000000000018e000000001c600000000000000000018c000000000c600000000000000000019c01f001e006600000000000000000019803f803f00760000000000000000001f003f807f803e0000000000000000000f003f807f803c00000000000000000007003f807f803800000000000000000007003f803f001800000000000000000007001f001f0018000000000000000000070000000000380000000000000000000700000000003800000000000000000003000000000030000000000000000000030000000000300000000000000000000180000000007000000000000000000001c00c000c00e000000000000000000000e00f003c00c0000000000000000000007007fff803c0000000000000000000007801ffe00780000000000000000000001c001e000e00000000000000000000000f0000003c000000000000000000000007e00001f8000000000000000000000001fc000fe00000000000000000000000003fffff0000000000000000000000000007fff8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
        },
        hacker: {
            name: "hacker",
            hex: "00000000000000000000000000000000000000007ffffffffffffffe00000000000000004000040000200002000000000000000040000403c020000200000000000000004000041ff820000200000000000000004000043ffc20000200000000000000004000047ffe20000200000000000000004000047ffe2000020000000000000000400004ffff2000020000000000000000400004ffff2000020000000000000000400004ffff2000020000000000000000400004ffff2000020000000000000000400004ffff2000020000000000000000400004ffff2000020000000000000000400004ffff20000200000000000000004000047ffe20000200000000000000004000047ffe20000200000000000000004000043ffc20000200000000000000004000040ff0200002000000000000000040000403c02000020000000000000000400004000020000200000000000000007ffffffffffffffe000000000000000040000400002000020000000000000000400004000020000200000000000000004000040000207f020000000000000000400004000021ffc20000000000000000400004000023ffe20000000000000000400004000023fff20000000000000000400004000027fff20000000000000000400004000027fff2000000000000000040000400002ffffa000000000000000040000400002ffffa000000000000000040000400002ffffa000000000000000040000400002ffffa0000000000000000400004000027fff20000000000000000400004000027fff20000000000000000400004000023fff20000000000000000400004000023ffe20000000000000000400004000021ffc200000000000000004000040000207f02000000000000000040000400002000020000000000000000400004000020000200000000000000007ffffffffffffffe00000000000000004000040000200002000000000000000040780403c0201e02000000000000000041ff040ff020ff82000000000000000043ff843ffc21ffc2000000000000000047ffc47ffe23ffe200000000000000004fffe47ffe27fff200000000000000004fffe4ffff27fff200000000000000005fffe4ffff27fffa00000000000000005ffff4ffff2ffffa00000000000000005ffff4ffff2ffffa00000000000000005ffff4ffff2ffffa00000000000000005ffff4ffff2ffffa00000000000000004fffe4ffff27fff200000000000000004fffe47ffe27fff2000000000000000047ffc47ffe23ffe2000000000000000043ff843ffc21ffc2000000000000000041ff041ff820ff820000000000000000407c0403c0203e020000000000000000400004000020000200000000000000007ffffffffffffffe0000000000000000000000000000000000000000"
        },
        polis: {
            name: "polis",
            hex: "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e000000000007fe00000000e00070001c000000000007ff00000000e0007000180000080000070f00000000e00070000000000c0000070780000000e00070000000001c000007038fc733f8e1f873be3c00003e00000707bfe7f7fce3fc73ff3c00003f00000707bcf7f71ee79e73ef3c00007f000007ff3877871ee70e7387bc00007f800007ff01f7803eefff7387bc0000ff800007fe1ff783feefff7387bc0000ffc00007003e7787deeffe7387bc0001ffc000070078778e1eef007387bc0003f7e000070070f78e1ee70e7387bc0003f3f000070079f78f3ee7fe7387bc0007e3f00007003ff787fee3fc7387bc0007c1f80007001e7783cee1f87387bc000fc0f8000000000000000000000000000f80fc000000000000000000000000001f807e000000000000000000000000003f007e0007fe0003ce000000000000003f003f0007ff0003ce000000000000007e001f00070f0003c0000000000000007c001f8007078003c000000000000000fc000f8007038fe3ce3f800000000001f8000fc007079ff3ce7fc00000000001f80007e00707befbcef1c00000000003f00007e007ff387bcef1c00000000003f00003f007ff783bcefc000000000007e00001f007fe783bce7f800000000007c00001f80700783bce1fc0000000000fc00000f80700783bce03e0000000001f83fffffc0700383bcee0e0000000001f87fffffe07003cfbcef9e0000000003f07fffffe07001ff3ce7fc0000000003e0fffffff07000fe3ce3f80000000007e0fffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
        },
        carlos: {
            name: "carlos",
            hex: "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003c0000000000000000000000000000007f80000007f000000000000000000000ffc00000fffc00000000000000000000fee00000fffc00000000000000000001fe300380fffa00000000000000000000f8180f807ff800000000000000000003ff0806f87ff000000000000000000007f88002807fd000000000000000000007ffc4000070300000000000000000000f4fe0000180000000000000000000000e0fe0000000000000000000000000001e7ff0000000000000000000000000001e7ff0000000000000000000000000001c7bf0000000000000000000000000001c09f0000000000000000000000000001d05f0000000000000000000000000001c01f1800000000000000000000000001c01e1800000000000000000000000000e01e3800000000000000000000000000cffc300000000000000000000000000047fc000000000000000000000000000007f400000000000000000000000000000fe000000000000000000000000000000fc800000000000000000000000000000fc800000000000000000000000000000781e0000000000000000000000000000007e000000000000000000000000000000fe000000000000000000000000000003fc00000000000000000000000000000ff800000000000000000000000000008ff0000000000000000000000000000107e0000000000000000000000000000003e0000000000000000000000000000007c000000000000000000000000000000fc000000000000000000000000000001f8000000000000000000000000000003f0000000000000000000000000000183f0000000000000000000000000000103f0000000000000000000000000000407f000000000000000000000000000040ee000000000000000000000000000040e00000000000000000000000000000c1c60000000000000000000000000000c39c0000000000000000000000000000e73c0000000000000000000000000000e73c0000000000000000000000000000e6780000000000000000000000000000ee780000000000000000000000000000ec780000000000000000000000000001fc780000000000000000000000000003f8700000000000000000000000000003f8700000000000000000000000000002f8700000000000000000000000000003f8700000000000000000000000000001f0200000000000000000000000000001f0000000000000000000000000000001d0000000000000000000000000000001f0000000000000000000"
        },
        xrc: {
            name: "xrc",
            hex: "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fc000000000000000000000000000003ff00000000000000000000000000000fff80000000000000000000000000001fff80000000000000000000000000007f8fc038000000000000000000000000fe07c0fe000000000000000000000001fc03c3ff800000000000000000000001f803cfffc00000000000000000000003f003ff83c00000000000000000000003e007fe01e00000000000000000000007c007fc00f0000000000000000000000f800ff800f0000000000000000000000f801ff080e0000000000000000000000f001ff3c3e0000000000000000000001f003fffffe0000000000000000000001f043fffffc0000000000000000000007f0e7fffff8000000000000000000000ff1fffffff0000000000000000000003fffffffffe0000000000000000000007fffffffffe000000000000000000000fffffffffff000000000000000000001fffffffffff800000000000000000001fffffffffffc00000000000000000003f83fffe0fffe00000000000000000003f00fffc03fff00000000000000000007e007ff801fff00000000000000000007c703ff180fff8000000000000000000fcf83ff3e0fff8000000000000000000f9cc1fe6307ffc000000000000000000f9861fec107ffc000000000000000001f9861fec107ffc000000000000000001f98c1fe6307ffc000000000000000001f8fc3fe7e0fffe000000000000000001fc783073c0fffe000000000000000001fe00603001fffe000000000000000001ff00e03803fffe000000000000000001ff81f03e0ffffe000000000000000001fe7ff87ff3fffe000000000000000000fc0ffcffc1fffe000000000000000000fcc3ffff18fffc000000000000000000fcf87fc07cfffc0000000000000000007e78000439fff80000000000000000007f223c7c91fff80000000000000000003f0e793dc3fff00000000000000000001fff3399fffff00000000000000000001fff87c3ffffe00000000000000000000fffffffffffc000000000000000000007ffffffffff8000000000000000000001ffffffffff0000000000000000000000fffffffffc00000000000000000000003ffffffff0000000000000000000000007ffffff800000000000000000000000003ffff80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
        }
    });
const getTouchData = ()=>({
        "wallpaper-1": {
            name: "wallpaper-1",
            hex: "77616c6c70617065722d312e706e67"
        },
        "wallpaper-2": {
            name: "wallpaper-2",
            hex: "77616c6c70617065722d322e706e67"
        },
        "wallpaper-3": {
            name: "wallpaper-3",
            hex: "77616c6c70617065722d332e706e67"
        },
        "wallpaper-4": {
            name: "wallpaper-4",
            hex: "77616c6c70617065722d342e706e67"
        }
    });
const getHomeScreenHex = (deviceType, name)=>{
    var _a, _b;
    const data = deviceType === "touch" ? getTouchData() : getT1Data();
    return (_b = (_a = data[name]) === null || _a === void 0 ? void 0 : _a.hex) !== null && _b !== void 0 ? _b : "";
};
const wait = (ms)=>new Promise((resolve)=>{
        setTimeout(resolve, ms);
    });
const getReleaseStatus = (releases, currentVersion)=>{
    const newVersions = releases.filter((r)=>semver__default["default"].gt(r.version.join("."), currentVersion));
    if (newVersions.length === 0) return "valid";
    if (newVersions.some((r)=>r.required)) return "required";
    return "outdated";
};
const getReleaseChangelog = (releases, currentVersion)=>{
    const newVersions = releases.filter((r)=>semver__default["default"].gt(r.version.join("."), currentVersion));
    return newVersions.map((r)=>r.changelog);
};
const findLatestRelease = (releases)=>{
    let leastRelease = releases[0];
    releases.forEach((release)=>{
        if (semver__default["default"].gt(release.version.join("."), leastRelease.version.join("."))) leastRelease = release;
    });
    return leastRelease;
};
var _a;
class DataManager {
    static load(settings) {
        return __awaiter(this, void 0, void 0, function*() {
            this.settings = settings;
            try {
                const url = settings.preRelease ? "https://data.onekey.so/pre-config.json" : "https://data.onekey.so/config.json";
                const { data } = yield axios__default["default"].get(`${url}?noCache=${getTimeStamp()}`, {
                    timeout: 7000
                });
                this.deviceMap = {
                    classic: data.classic,
                    mini: data.mini,
                    touch: data.touch,
                    pro: data.pro
                };
                this.assets = {
                    bridge: data.bridge
                };
            } catch (e) {}
        });
    }
    static checkAndReloadData() {
        return __awaiter(this, void 0, void 0, function*() {
            if (getTimeStamp() - this.lastCheckTimestamp > 10800000) yield this.load(this.settings).then(()=>{
                this.lastCheckTimestamp = getTimeStamp();
            });
        });
    }
    static getProtobufMessages(messageVersion = "latest") {
        return this.messages[messageVersion];
    }
    static getSettings(key) {
        if (!this.settings) return null;
        if (typeof key === "string") return this.settings[key];
        return this.settings;
    }
}
_a = DataManager;
DataManager.deviceMap = {
    classic: {
        firmware: [],
        ble: []
    },
    mini: {
        firmware: [],
        ble: []
    },
    touch: {
        firmware: [],
        ble: []
    },
    pro: {
        firmware: [],
        ble: []
    }
};
DataManager.assets = null;
DataManager.messages = {
    latest: MessagesJSON,
    v1: MessagesLegacyV1JSON
};
DataManager.lastCheckTimestamp = 0;
DataManager.getFirmwareStatus = (features)=>{
    var _b, _c;
    const deviceType = getDeviceType(features);
    const deviceFirmwareVersion = getDeviceFirmwareVersion(features);
    if (features.firmware_present === false) return "none";
    if (deviceType === "classic" && features.bootloader_mode) return "unknown";
    const firmwareUpdateField = getFirmwareUpdateField(features, "firmware");
    const targetDeviceConfigList = (_c = (_b = _a.deviceMap[deviceType]) === null || _b === void 0 ? void 0 : _b[firmwareUpdateField]) !== null && _c !== void 0 ? _c : [];
    const currentVersion = deviceFirmwareVersion.join(".");
    return getReleaseStatus(targetDeviceConfigList, currentVersion);
};
DataManager.getSysResourcesLatestRelease = (features, forcedUpdateRes)=>{
    var _b, _c, _d;
    const deviceType = getDeviceType(features);
    const deviceFirmwareVersion = getDeviceFirmwareVersion(features);
    if (deviceType !== "pro" && deviceType !== "touch") return undefined;
    const firmwareUpdateField = getFirmwareUpdateField(features, "firmware");
    const targetDeviceConfigList = (_c = (_b = _a.deviceMap[deviceType]) === null || _b === void 0 ? void 0 : _b[firmwareUpdateField]) !== null && _c !== void 0 ? _c : [];
    const currentVersion = deviceFirmwareVersion.join(".");
    const targetDeviceConfig = targetDeviceConfigList.filter((item)=>forcedUpdateRes ? !!item.resource : semver__default["default"].gt(item.version.join("."), currentVersion) && !!item.resource);
    return (_d = findLatestRelease(targetDeviceConfig)) === null || _d === void 0 ? void 0 : _d.resource;
};
DataManager.getSysFullResource = (features)=>{
    var _b, _c, _d;
    const deviceType = getDeviceType(features);
    if (deviceType !== "pro" && deviceType !== "touch") return undefined;
    const firmwareUpdateField = getFirmwareUpdateField(features, "firmware");
    const targetDeviceConfigList = (_c = (_b = _a.deviceMap[deviceType]) === null || _b === void 0 ? void 0 : _b[firmwareUpdateField]) !== null && _c !== void 0 ? _c : [];
    const targetDeviceConfig = targetDeviceConfigList.filter((item)=>!!item.fullResource);
    return (_d = findLatestRelease(targetDeviceConfig)) === null || _d === void 0 ? void 0 : _d.fullResource;
};
DataManager.getBootloaderResource = (features)=>{
    var _b, _c, _d;
    const deviceType = getDeviceType(features);
    if (deviceType !== "pro" && deviceType !== "touch") return undefined;
    const firmwareUpdateField = getFirmwareUpdateField(features, "firmware");
    const targetDeviceConfigList = (_c = (_b = _a.deviceMap[deviceType]) === null || _b === void 0 ? void 0 : _b[firmwareUpdateField]) !== null && _c !== void 0 ? _c : [];
    const targetDeviceConfig = targetDeviceConfigList.filter((item)=>!!item.bootloaderResource);
    return (_d = findLatestRelease(targetDeviceConfig)) === null || _d === void 0 ? void 0 : _d.bootloaderResource;
};
DataManager.getBootloaderTargetVersion = (features)=>{
    var _b, _c, _d, _e;
    const deviceType = getDeviceType(features);
    const firmwareUpdateField = getFirmwareUpdateField(features, "firmware");
    const targetDeviceConfigList = (_c = (_b = _a.deviceMap[deviceType]) === null || _b === void 0 ? void 0 : _b[firmwareUpdateField]) !== null && _c !== void 0 ? _c : [];
    const targetDeviceConfig = targetDeviceConfigList.filter((item)=>!!item.bootloaderResource);
    return (_e = (_d = targetDeviceConfig === null || targetDeviceConfig === void 0 ? void 0 : targetDeviceConfig[0]) === null || _d === void 0 ? void 0 : _d.bootloaderVersion) !== null && _e !== void 0 ? _e : undefined;
};
DataManager.getBootloaderRelatedFirmwareVersion = (features)=>{
    var _b, _c, _d, _e;
    const deviceType = getDeviceType(features);
    if (!(deviceType === "classic" || deviceType === "mini")) return undefined;
    const firmwareUpdateField = getFirmwareUpdateField(features, "firmware");
    const targetDeviceConfigList = (_c = (_b = _a.deviceMap[deviceType]) === null || _b === void 0 ? void 0 : _b[firmwareUpdateField]) !== null && _c !== void 0 ? _c : [];
    const targetDeviceConfig = targetDeviceConfigList.filter((item)=>!!item.bootloaderRelatedFirmwareVersion);
    return (_e = (_d = targetDeviceConfig === null || targetDeviceConfig === void 0 ? void 0 : targetDeviceConfig[0]) === null || _d === void 0 ? void 0 : _d.bootloaderRelatedFirmwareVersion) !== null && _e !== void 0 ? _e : undefined;
};
DataManager.getFirmwareChangelog = (features)=>{
    var _b, _c;
    const deviceType = getDeviceType(features);
    const deviceFirmwareVersion = getDeviceFirmwareVersion(features);
    if (features.firmware_present === false || deviceType === "classic" && features.bootloader_mode) return [];
    const firmwareUpdateField = getFirmwareUpdateField(features, "firmware");
    const targetDeviceConfigList = (_c = (_b = _a.deviceMap[deviceType]) === null || _b === void 0 ? void 0 : _b[firmwareUpdateField]) !== null && _c !== void 0 ? _c : [];
    const currentVersion = deviceFirmwareVersion.join(".");
    return getReleaseChangelog(targetDeviceConfigList, currentVersion);
};
DataManager.getFirmwareLatestRelease = (features)=>{
    var _b, _c;
    const deviceType = getDeviceType(features);
    const firmwareUpdateField = getFirmwareUpdateField(features, "firmware");
    const targetDeviceConfigList = (_c = (_b = _a.deviceMap[deviceType]) === null || _b === void 0 ? void 0 : _b[firmwareUpdateField]) !== null && _c !== void 0 ? _c : [];
    const target = findLatestRelease(targetDeviceConfigList);
    if (!target) return target;
    if (!target.resource) {
        const resource = _a.getSysResourcesLatestRelease(features);
        return Object.assign(Object.assign({}, target), {
            resource
        });
    }
    return target;
};
DataManager.getBLEFirmwareStatus = (features)=>{
    var _b, _c;
    const deviceType = getDeviceType(features);
    const deviceBLEFirmwareVersion = getDeviceBLEFirmwareVersion(features);
    if (!deviceBLEFirmwareVersion) return "none";
    const targetDeviceConfigList = (_c = (_b = _a.deviceMap[deviceType]) === null || _b === void 0 ? void 0 : _b.ble) !== null && _c !== void 0 ? _c : [];
    const currentVersion = deviceBLEFirmwareVersion.join(".");
    return getReleaseStatus(targetDeviceConfigList, currentVersion);
};
DataManager.getBleFirmwareChangelog = (features)=>{
    var _b, _c;
    const deviceType = getDeviceType(features);
    const deviceBLEFirmwareVersion = getDeviceBLEFirmwareVersion(features);
    if (!deviceBLEFirmwareVersion) return [];
    const targetDeviceConfigList = (_c = (_b = _a.deviceMap[deviceType]) === null || _b === void 0 ? void 0 : _b.ble) !== null && _c !== void 0 ? _c : [];
    const currentVersion = deviceBLEFirmwareVersion.join(".");
    return getReleaseChangelog(targetDeviceConfigList, currentVersion);
};
DataManager.getBleFirmwareLatestRelease = (features)=>{
    var _b, _c;
    const deviceType = getDeviceType(features);
    const targetDeviceConfigList = (_c = (_b = _a.deviceMap[deviceType]) === null || _b === void 0 ? void 0 : _b.ble) !== null && _c !== void 0 ? _c : [];
    return findLatestRelease(targetDeviceConfigList);
};
DataManager.getTransportStatus = (localVersion)=>{
    var _b, _c;
    const latestTransportVersion = (_c = (_b = _a.assets) === null || _b === void 0 ? void 0 : _b.bridge) === null || _c === void 0 ? void 0 : _c.version;
    if (!latestTransportVersion) return "valid";
    const isLatest = semver__default["default"].gte(localVersion, latestTransportVersion.join("."));
    return isLatest ? "valid" : "outdated";
};
const PROTOBUF_MESSAGE_CONFIG = {
    model_mini: [
        {
            minVersion: "3.3.0",
            messageVersion: "latest"
        },
        {
            minVersion: "0.0.0",
            messageVersion: "v1"
        }
    ],
    model_touch: [
        {
            minVersion: "4.5.0",
            messageVersion: "latest"
        },
        {
            minVersion: "0.0.0",
            messageVersion: "v1"
        }
    ]
};
const getDeviceModel = (features)=>{
    if (!features || typeof features !== "object") return "model_mini";
    if (!features.model) return "model_mini";
    if (features.model === "1") return "model_mini";
    return "model_touch";
};
const getDeviceType = (features)=>{
    if (!features || typeof features !== "object" || !features.serial_no) return "classic";
    const serialNo = features.serial_no;
    const miniFlag = serialNo.slice(0, 2);
    if (miniFlag.toLowerCase() === "mi") return "mini";
    if (miniFlag.toLowerCase() === "tc") return "touch";
    return "classic";
};
const getDeviceTypeOnBootloader = (features)=>getDeviceType(features);
const getDeviceTypeByBleName = (name)=>{
    if (!name) return "classic";
    if (name.startsWith("MI")) return "mini";
    if (name.startsWith("T")) return "touch";
    return "classic";
};
const getDeviceTypeByDeviceId = (deviceId)=>{
    if (!deviceId) return "classic";
    const miniFlag = deviceId.slice(0, 2);
    if (miniFlag.toLowerCase() === "mi") return "mini";
    return "classic";
};
const getDeviceUUID = (features)=>{
    var _a, _b;
    const deviceType = getDeviceType(features);
    if (deviceType === "classic") return (_a = features.onekey_serial) !== null && _a !== void 0 ? _a : "";
    return (_b = features.serial_no) !== null && _b !== void 0 ? _b : "";
};
const getDeviceLabel = (features)=>{
    const deviceType = getDeviceType(features);
    if (typeof features.label === "string") return features.label;
    return `My OneKey ${deviceType.charAt(0).toUpperCase() + deviceType.slice(1)}`;
};
const getDeviceFirmwareVersion = (features)=>{
    if (!features) return [
        0,
        0,
        0
    ];
    if (features.onekey_version) return features.onekey_version.split(".");
    return [
        features.major_version,
        features.minor_version,
        features.patch_version
    ];
};
const getDeviceBLEFirmwareVersion = (features)=>{
    if (!features.ble_ver) return null;
    if (!semver__default["default"].valid(features.ble_ver)) return null;
    return features.ble_ver.split(".");
};
const getDeviceBootloaderVersion = (features)=>{
    if (!features.bootloader_version) {
        if (features.bootloader_mode) return [
            features.major_version,
            features.minor_version,
            features.patch_version
        ];
        return [
            0,
            0,
            0
        ];
    }
    if (semver__default["default"].valid(features.bootloader_version)) return features.bootloader_version.split(".");
    return [
        0,
        0,
        0
    ];
};
const getSupportMessageVersion = (features)=>{
    var _a;
    if (!features) return {
        messages: DataManager.messages.latest,
        messageVersion: "latest"
    };
    const currentDeviceVersion = getDeviceFirmwareVersion(features).join(".");
    const deviceType = getDeviceType(features);
    const deviceVersionConfigs = PROTOBUF_MESSAGE_CONFIG[deviceType] || DeviceTypeToModels[deviceType] && DeviceTypeToModels[deviceType].map((model)=>PROTOBUF_MESSAGE_CONFIG[model]).find((range)=>range !== undefined);
    const sortedDeviceVersionConfigs = (_a = deviceVersionConfigs === null || deviceVersionConfigs === void 0 ? void 0 : deviceVersionConfigs.sort((a, b)=>semver__default["default"].compare(b.minVersion, a.minVersion))) !== null && _a !== void 0 ? _a : [];
    for (const { minVersion, messageVersion } of sortedDeviceVersionConfigs){
        if (semver__default["default"].gte(currentDeviceVersion, minVersion)) return {
            messages: DataManager.messages[messageVersion],
            messageVersion
        };
    }
    return {
        messages: DataManager.messages.latest,
        messageVersion: "latest"
    };
};
const supportInputPinOnSoftware = (features)=>{
    if (!features) return {
        support: false
    };
    const deviceType = getDeviceType(features);
    if (deviceType === "touch") return {
        support: false
    };
    const currentVersion = getDeviceFirmwareVersion(features).join(".");
    return {
        support: semver__default["default"].gte(currentVersion, "2.3.0"),
        require: "2.3.0"
    };
};
const supportNewPassphrase = (features)=>{
    if (!features) return {
        support: false
    };
    const deviceType = getDeviceType(features);
    if (deviceType === "touch" || deviceType === "pro") return {
        support: true
    };
    const currentVersion = getDeviceFirmwareVersion(features).join(".");
    return {
        support: semver__default["default"].gte(currentVersion, "2.4.0"),
        require: "2.4.0"
    };
};
const getPassphraseState = (features, commands)=>__awaiter(void 0, void 0, void 0, function*() {
        if (!features) return false;
        const { message, type } = yield commands.typedCall("GetAddress", "Address", {
            address_n: [
                toHardened(44),
                toHardened(1),
                toHardened(0),
                0,
                0
            ],
            coin_name: "Testnet",
            script_type: "SPENDADDRESS",
            show_display: false
        });
        if (type === "CallMethodError") throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.RuntimeError, "Get the passphrase state error");
        return message.address;
    });
const supportBatchPublicKey = (features)=>{
    if (!features) return false;
    const currentVersion = getDeviceFirmwareVersion(features).join(".");
    const deviceType = getDeviceType(features);
    if (deviceType === "touch" || deviceType === "pro") return semver__default["default"].gte(currentVersion, "3.1.0");
    return semver__default["default"].gte(currentVersion, "2.6.0");
};
const supportModifyHomescreen = (features)=>{
    if (!features) return {
        support: false
    };
    const currentVersion = getDeviceFirmwareVersion(features).join(".");
    const deviceType = getDeviceType(features);
    if (deviceType === "classic" || deviceType === "mini") return {
        support: true
    };
    return {
        support: semver__default["default"].gte(currentVersion, "3.4.0")
    };
};
const getFirmwareUpdateField = (features, updateType)=>{
    const deviceType = getDeviceType(features);
    const deviceFirmwareVersion = getDeviceFirmwareVersion(features);
    if (updateType === "ble") return "ble";
    if (deviceType === "classic" || deviceType === "mini") return "firmware-v4";
    if (deviceType === "touch") {
        if (semver__default["default"].lt(deviceFirmwareVersion.join("."), "3.4.0")) return "firmware";
        return "firmware-v4";
    }
    return "firmware";
};
const CORE_EVENT = "CORE_EVENT";
const parseMessage = (messageData)=>{
    const { data } = messageData;
    const message = {
        event: data.event,
        type: data.type,
        payload: data.payload
    };
    if (typeof messageData.id === "number") message.id = messageData.id;
    if (typeof message.success === "boolean") message.success = data.success;
    return message;
};
const createErrorMessage = (error)=>{
    let payload = {
        error: error.message,
        code: error.code
    };
    if (error instanceof hdShared.HardwareError) payload = {
        error: error.message,
        code: error.errorCode
    };
    return {
        success: false,
        payload
    };
};
const UI_EVENT = "UI_EVENT";
const UI_REQUEST$1 = {
    REQUEST_PIN: "ui-request_pin",
    INVALID_PIN: "ui-invalid_pin",
    REQUEST_BUTTON: "ui-button",
    REQUEST_PASSPHRASE: "ui-request_passphrase",
    REQUEST_PASSPHRASE_ON_DEVICE: "ui-request_passphrase_on_device",
    CLOSE_UI_WINDOW: "ui-close_window",
    BLUETOOTH_PERMISSION: "ui-bluetooth_permission",
    LOCATION_PERMISSION: "ui-location_permission",
    LOCATION_SERVICE_PERMISSION: "ui-location_service_permission",
    FIRMWARE_PROGRESS: "ui-firmware-progress",
    FIRMWARE_TIP: "ui-firmware-tip",
    NOT_IN_BOOTLOADER: "ui-device_not_in_bootloader_mode",
    PREVIOUS_ADDRESS_RESULT: "ui-previous_address_result"
};
const createUiMessage = (type, payload)=>({
        event: UI_EVENT,
        type,
        payload
    });
const IFRAME = {
    INIT: "iframe-init",
    INIT_BRIDGE: "iframe-init-bridge",
    CALL: "iframe-call",
    CANCEL: "iframe-cancel"
};
const createIFrameMessage = (type, payload)=>({
        event: UI_EVENT,
        type,
        payload
    });
const RESPONSE_EVENT = "RESPONSE_EVENT";
const createResponseMessage = (id, success, payload)=>({
        event: RESPONSE_EVENT,
        type: RESPONSE_EVENT,
        id,
        success,
        payload: success ? payload : hdShared.serializeError(payload)
    });
const UI_RESPONSE = {
    RECEIVE_PIN: "ui-receive_pin",
    RECEIVE_PASSPHRASE: "ui-receive_passphrase"
};
const createUiResponse = (type, payload)=>({
        event: UI_EVENT,
        type,
        payload
    });
const DEVICE_EVENT = "DEVICE_EVENT";
const DEVICE = {
    CONNECT: "device-connect",
    CONNECT_UNACQUIRED: "device-connect_unacquired",
    DISCONNECT: "device-disconnect",
    CHANGED: "device-changed",
    ACQUIRE: "device-acquire",
    RELEASE: "device-release",
    ACQUIRED: "device-acquired",
    RELEASED: "device-released",
    USED_ELSEWHERE: "device-used_elsewhere",
    UNREADABLE: "unreadable-device",
    LOADING: "device-loading",
    BUTTON: "button",
    PIN: "pin",
    PASSPHRASE: "passphrase",
    PASSPHRASE_ON_DEVICE: "passphrase_on_device",
    WORD: "word",
    SUPPORT_FEATURES: "support_features",
    FEATURES: "features"
};
const createDeviceMessage = (type, payload)=>({
        event: DEVICE_EVENT,
        type,
        payload
    });
const FIRMWARE_EVENT = "FIRMWARE_EVENT";
const FIRMWARE = {
    RELEASE_INFO: "firmware-release-info",
    BLE_RELEASE_INFO: "ble-firmware-release-info"
};
const createFirmwareMessage = (type, payload)=>({
        event: FIRMWARE_EVENT,
        type,
        payload
    });
const Log$8 = getLogger(exports.LoggerNames.DevicePool);
const getDiff = (current, descriptors)=>{
    const connected = descriptors.filter((d)=>current.find((x)=>x.path === d.path) === undefined);
    const disconnected = current.filter((d)=>descriptors.find((x)=>x.path === d.path) === undefined);
    const changedSessions = descriptors.filter((d)=>{
        const currentDescriptor = current.find((x)=>x.path === d.path);
        if (currentDescriptor) return currentDescriptor.session !== d.session;
        return false;
    });
    const acquired = changedSessions.filter((d)=>typeof d.session === "string");
    const released = changedSessions.filter((d)=>typeof d.session !== "string");
    const changedDebugSessions = descriptors.filter((d)=>{
        const currentDescriptor = current.find((x)=>x.path === d.path);
        if (currentDescriptor) return currentDescriptor.debugSession !== d.debugSession;
        return false;
    });
    const debugAcquired = changedSessions.filter((d)=>typeof d.debugSession === "string");
    const debugReleased = changedSessions.filter((d)=>typeof d.debugSession !== "string");
    const didUpdate = connected.length + disconnected.length + changedSessions.length + changedDebugSessions.length > 0;
    return {
        connected,
        disconnected,
        changedSessions,
        acquired,
        released,
        changedDebugSessions,
        debugAcquired,
        debugReleased,
        didUpdate,
        descriptors
    };
};
class DevicePool extends events.exports {
    static setConnector(connector) {
        this.connector = connector;
    }
    static getDevices(descriptorList, connectId, initOptions) {
        var descriptorList_1, descriptorList_1_1;
        var e_1, _a;
        return __awaiter(this, void 0, void 0, function*() {
            const devices = {};
            const deviceList = [];
            if (connectId) {
                const device = this.devicesCache[connectId];
                if (device) {
                    const exist = descriptorList.find((d)=>d.path === device.originalDescriptor.path);
                    if (exist) {
                        device.updateDescriptor(exist, true);
                        devices[connectId] = device;
                        deviceList.push(device);
                        yield this._checkDevicePool(initOptions);
                        return {
                            devices,
                            deviceList
                        };
                    }
                    Log$8.debug("found device in cache, but path is different: ", connectId);
                }
            }
            try {
                for(descriptorList_1 = __asyncValues(descriptorList); descriptorList_1_1 = yield descriptorList_1.next(), !descriptorList_1_1.done;){
                    const descriptor = descriptorList_1_1.value;
                    const device = yield this._createDevice(descriptor, initOptions);
                    if (device.features) {
                        const uuid = getDeviceUUID(device.features);
                        if (this.devicesCache[uuid]) {
                            const cache = this.devicesCache[uuid];
                            cache.updateDescriptor(descriptor, true);
                        }
                        this.devicesCache[uuid] = device;
                        devices[uuid] = device;
                    }
                    deviceList.push(device);
                }
            } catch (e_1_1) {
                e_1 = {
                    error: e_1_1
                };
            } finally{
                try {
                    if (descriptorList_1_1 && !descriptorList_1_1.done && (_a = descriptorList_1.return)) yield _a.call(descriptorList_1);
                } finally{
                    if (e_1) throw e_1.error;
                }
            }
            yield this._checkDevicePool(initOptions);
            return {
                devices,
                deviceList
            };
        });
    }
    static clearDeviceCache(connectId) {
        if (connectId) delete this.devicesCache[connectId];
    }
    static _createDevice(descriptor, initOptions) {
        return __awaiter(this, void 0, void 0, function*() {
            let device = this.getDeviceByPath(descriptor.path);
            if (!device) {
                device = Device.fromDescriptor(descriptor);
                device.deviceConnector = this.connector;
                yield device.connect();
                yield device.initialize(initOptions);
                yield device.release();
            }
            return device;
        });
    }
    static _checkDevicePool(initOptions) {
        return __awaiter(this, void 0, void 0, function*() {
            yield this._sendConnectMessage(initOptions);
            this._sendDisconnectMessage();
        });
    }
    static _sendConnectMessage(initOptions) {
        return __awaiter(this, void 0, void 0, function*() {
            for(let i = this.connectedPool.length - 1; i >= 0; i--){
                const descriptor = this.connectedPool[i];
                const device = yield this._createDevice(descriptor, initOptions);
                Log$8.debug("emit DEVICE.CONNECT: ", device);
                this.emitter.emit(DEVICE.CONNECT, device);
                this.connectedPool.splice(i, 1);
            }
        });
    }
    static _sendDisconnectMessage() {
        for(let i = this.disconnectPool.length - 1; i >= 0; i--){
            const descriptor = this.connectedPool[i];
            const device = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.path) ? this.getDeviceByPath(descriptor.path) : null;
            if (device) this.emitter.emit(DEVICE.DISCONNECT, device);
            this.disconnectPool.splice(i, 1);
        }
    }
    static reportDeviceChange(upcoming) {
        const diff = getDiff(this.current || [], upcoming);
        this.upcoming = upcoming;
        this.current = this.upcoming;
        console.log("device pool -> current: ", this.current);
        console.log("device pool -> upcomming: ", this.upcoming);
        console.log("DeviceCache.reportDeviceChange diff: ", diff);
        if (!diff.didUpdate) return;
        diff.connected.forEach((d)=>{
            const device = this.getDeviceByPath(d.path);
            if (!device) {
                this._addConnectedDeviceToPool(d);
                return;
            }
            Log$8.debug("emit DEVICE.CONNECT: ", device);
            this.emitter.emit(DEVICE.CONNECT, device);
        });
        diff.disconnected.forEach((d)=>{
            this._removeDeviceFromConnectedPool(d.path);
            const device = this.getDeviceByPath(d.path);
            if (!device) {
                this._addDisconnectedDeviceToPool(d);
                return;
            }
            Log$8.debug("emit DEVICE.DISCONNECT: ", device);
            this.emitter.emit(DEVICE.DISCONNECT, device);
        });
    }
    static getDeviceByPath(path) {
        return Object.values(this.devicesCache).find((d)=>d.originalDescriptor.path === path);
    }
    static _addConnectedDeviceToPool(descriptor) {
        const existDescriptorIndex = this.connectedPool.findIndex((d)=>d.path === descriptor.path);
        if (existDescriptorIndex > -1) {
            this.connectedPool.splice(existDescriptorIndex, 1, descriptor);
            return;
        }
        this.connectedPool.push(descriptor);
    }
    static _removeDeviceFromConnectedPool(path) {
        const index = this.connectedPool.findIndex((d)=>d.path === path);
        if (index > -1) this.connectedPool.splice(index, 1);
    }
    static _addDisconnectedDeviceToPool(descriptor) {
        const existDescriptorIndex = this.disconnectPool.findIndex((d)=>d.path === descriptor.path);
        if (existDescriptorIndex > -1) {
            this.disconnectPool.splice(existDescriptorIndex, 1, descriptor);
            return;
        }
        this.disconnectPool.push(descriptor);
    }
}
DevicePool.current = null;
DevicePool.upcoming = [];
DevicePool.connectedPool = [];
DevicePool.disconnectPool = [];
DevicePool.devicesCache = {};
DevicePool.emitter = new events.exports();
const Log$7 = getLogger(exports.LoggerNames.Transport);
const BleLogger = getLogger(exports.LoggerNames.HdBleTransport);
const HttpLogger = getLogger(exports.LoggerNames.HdTransportHttp);
const LowLevelLogger = getLogger(exports.LoggerNames.HdTransportLowLevel);
class TransportManager {
    static load() {
        Log$7.debug("transport manager load");
        this.defaultMessages = DataManager.getProtobufMessages();
        this.currentMessages = this.defaultMessages;
        this.messageVersion = "latest";
    }
    static configure() {
        return __awaiter(this, void 0, void 0, function*() {
            try {
                const env = DataManager.getSettings("env");
                Log$7.debug("Initializing transports");
                if (env === "react-native") {
                    if (!this.reactNativeInit) {
                        yield this.transport.init(BleLogger, DevicePool.emitter);
                        this.reactNativeInit = true;
                    } else Log$7.debug("React Native Do Not Initializing transports");
                } else if (env === "lowlevel") {
                    if (!this.plugin) throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.TransportNotConfigured, "Lowlevel transport mast have plugin");
                    yield this.transport.init(LowLevelLogger, DevicePool.emitter, this.plugin);
                } else yield this.transport.init(HttpLogger);
                Log$7.debug("Configuring transports");
                yield this.transport.configure(JSON.stringify(this.defaultMessages));
                Log$7.debug("Configuring transports done");
            } catch (error) {
                Log$7.debug("Initializing transports error: ", error);
                if (error.code === "ECONNABORTED") throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.BridgeTimeoutError);
            }
        });
    }
    static reconfigure(features) {
        return __awaiter(this, void 0, void 0, function*() {
            Log$7.debug(`Begin reconfiguring transports`);
            const { messageVersion, messages } = getSupportMessageVersion(features);
            if (this.currentMessages === messages || !messages) return;
            Log$7.debug(`Reconfiguring transports version:${messageVersion}`);
            try {
                yield this.transport.configure(JSON.stringify(messages));
                this.currentMessages = messages;
                this.messageVersion = messageVersion;
            } catch (error) {
                throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.TransportInvalidProtobuf, `Transport_InvalidProtobuf:  ${error.message}`);
            }
        });
    }
    static setTransport(TransportConstructor, plugin) {
        const env = DataManager.getSettings("env");
        if (env === "react-native") this.transport = new TransportConstructor({
            scanTimeout: 3000
        });
        else this.transport = new TransportConstructor();
        if (plugin) {
            this.plugin = plugin;
            Log$7.debug("set transport plugin: ", this.plugin);
        }
        Log$7.debug("set transport: ", this.transport);
    }
    static getTransport() {
        return this.transport;
    }
    static getDefaultMessages() {
        return this.defaultMessages;
    }
    static getCurrentMessages() {
        return this.currentMessages;
    }
    static getMessageVersion() {
        return this.messageVersion;
    }
}
TransportManager.reactNativeInit = false;
TransportManager.messageVersion = "latest";
TransportManager.plugin = null;
const assertType = (res, resType)=>{
    const splitResTypes = Array.isArray(resType) ? resType : resType.split("|");
    if (!splitResTypes.includes(res.type)) throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.ResponseUnexpectTypeError, `assertType: Response of unexpected type: ${res.type}. Should be ${resType}`);
};
const Log$6 = getLogger(exports.LoggerNames.DeviceCommands);
class DeviceCommands {
    constructor(device, mainId){
        this.device = device;
        this.mainId = mainId;
        this.transport = TransportManager.getTransport();
        this.disposed = false;
    }
    dispose(cancelRequest) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function*() {
            this.disposed = true;
            if (cancelRequest && this._cancelableRequest) this._cancelableRequest();
            this._cancelableRequest = undefined;
            yield (_b = (_a = this.transport).cancel) === null || _b === void 0 ? void 0 : _b.call(_a);
        });
    }
    call(type, msg = {}) {
        var _a, _b, _c, _d, _e, _f, _g;
        return __awaiter(this, void 0, void 0, function*() {
            Log$6.debug("[DeviceCommands] [call] Sending", type);
            try {
                const promise = this.transport.call(this.mainId, type, msg);
                this.callPromise = promise;
                const res = yield promise;
                Log$6.debug("[DeviceCommands] [call] Received", res.type);
                return res;
            } catch (error) {
                Log$6.debug("[DeviceCommands] [call] Received error", error);
                if (error.errorCode === hdShared.HardwareErrorCode.BleDeviceBondError) return {
                    type: "BleDeviceBondError",
                    message: {
                        error: error === null || error === void 0 ? void 0 : error.message
                    }
                };
                if ((_a = error.response) === null || _a === void 0 ? void 0 : _a.data) Log$6.debug("error response", error === null || error === void 0 ? void 0 : error.response.data);
                if (((_c = (_b = error === null || error === void 0 ? void 0 : error.response) === null || _b === void 0 ? void 0 : _b.data) === null || _c === void 0 ? void 0 : _c.error) === "device disconnected during action") return {
                    type: "BridgeNetworkError",
                    message: {}
                };
                if (((_f = (_e = (_d = error === null || error === void 0 ? void 0 : error.response) === null || _d === void 0 ? void 0 : _d.data) === null || _e === void 0 ? void 0 : _e.error) === null || _f === void 0 ? void 0 : _f.indexOf("Request failed with status code")) !== -1) return {
                    type: "CallMethodError",
                    message: {
                        error: (_g = error === null || error === void 0 ? void 0 : error.response.data) !== null && _g !== void 0 ? _g : ""
                    }
                };
                throw error;
            }
        });
    }
    typedCall(type, resType, msg) {
        return __awaiter(this, void 0, void 0, function*() {
            if (this.disposed) throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.RuntimeError, "typedCall: DeviceCommands already disposed");
            const response = yield this._commonCall(type, msg);
            try {
                assertType(response, resType);
            } catch (error) {
                Log$6.debug("DeviceCommands typedcall error: ", error);
                if (error instanceof hdShared.HardwareError) {
                    if (error.errorCode === hdShared.HardwareErrorCode.ResponseUnexpectTypeError) {
                        if (error.message.indexOf("BridgeNetworkError") > -1) throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.BridgeNetworkError);
                        if (error.message.indexOf("BleDeviceBondError") > -1) throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.BleDeviceBondError);
                    }
                } else throw error;
            }
            return response;
        });
    }
    _commonCall(type, msg) {
        return __awaiter(this, void 0, void 0, function*() {
            const resp = yield this.call(type, msg);
            return this._filterCommonTypes(resp, type);
        });
    }
    _filterCommonTypes(res, callType) {
        try {
            if (DataManager.getSettings("env") === "react-native") Log$6.debug("_filterCommonTypes: ", JSON.stringify(res));
            else Log$6.debug("_filterCommonTypes: ", res);
        } catch (error) {}
        if (res.type === "Failure") {
            const { code, message } = res.message;
            let error = null;
            if (code === "Failure_FirmwareError" && !message) error = hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.FirmwareError);
            if (code === "Failure_ActionCancelled") error = hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.ActionCancelled);
            if (code === "Failure_PinInvalid") error = hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.PinInvalid, message);
            if (code === "Failure_PinCancelled") error = hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.PinCancelled);
            if (code === "Failure_DataError") {
                if (message === "Please confirm the BlindSign enabled") error = hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.BlindSignDisabled);
                if (message === "File already exists") error = hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.FileAlreadyExists);
            }
            if (code === "Failure_UnexpectedMessage") {
                if (callType === "PassphraseAck") error = hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.UnexpectPassphrase);
                if (message === "Not in Signing mode") error = hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.NotInSigningMode);
            }
            if (error) return Promise.reject(error);
            return Promise.reject(hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.RuntimeError, `${code || "Failure_UnknownCode"},${message || "Failure_UnknownMessage"}`));
        }
        if (res.type === "Features") return Promise.resolve(patchFeatures(res));
        if (res.type === "ButtonRequest") {
            if (res.message.code === "ButtonRequest_PassphraseEntry") this.device.emit(DEVICE.PASSPHRASE_ON_DEVICE, this.device);
            else this.device.emit(DEVICE.BUTTON, this.device, res.message);
            return this._commonCall("ButtonAck", {});
        }
        res.type;
        const isWebusbEnv = DataManager.getSettings("env") === "webusb";
        if (res.type === "PinMatrixRequest") {
            if (isWebusbEnv) return Promise.reject(hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.RuntimeError, "Please unlock your device"));
            return this._promptPin(res.message.type).then((pin)=>{
                if (pin === "@@ONEKEY_INPUT_PIN_IN_DEVICE") return this._commonCall("BixinPinInputOnDevice");
                return this._commonCall("PinMatrixAck", {
                    pin
                });
            }, ()=>this._commonCall("Cancel", {}));
        }
        if (res.type === "PassphraseRequest") return this._promptPassphrase().then((response)=>{
            const { passphrase, passphraseOnDevice } = response;
            return !passphraseOnDevice ? this._commonCall("PassphraseAck", {
                passphrase
            }) : this._commonCall("PassphraseAck", {
                on_device: true
            });
        });
        res.type;
        res.type;
        return Promise.resolve(res);
    }
    _promptPin(type) {
        return new Promise((resolve, reject)=>{
            if (this.device.listenerCount(DEVICE.PIN) > 0) {
                this._cancelableRequest = reject;
                this.device.emit(DEVICE.PIN, this.device, type, (err, pin)=>{
                    this._cancelableRequest = undefined;
                    if (err) reject(err);
                    else resolve(pin);
                });
            } else {
                console.warn("[DeviceCommands] [call] PIN callback not configured, cancelling request");
                reject(hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.RuntimeError, "_promptPin: PIN callback not configured"));
            }
        });
    }
    _promptPassphrase() {
        return new Promise((resolve, reject)=>{
            if (this.device.listenerCount(DEVICE.PASSPHRASE) > 0) {
                this._cancelableRequest = reject;
                this.device.emit(DEVICE.PASSPHRASE, this.device, (response, error)=>{
                    this._cancelableRequest = undefined;
                    if (error) reject(error);
                    else resolve(response);
                });
            } else {
                Log$6.error("[DeviceCommands] [call] Passphrase callback not configured, cancelling request");
                reject(hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.RuntimeError, "_promptPassphrase: Passphrase callback not configured"));
            }
        });
    }
}
const UI_REQUEST = {
    BOOTLOADER: "ui-device_bootloader_mode",
    NOT_IN_BOOTLOADER: "ui-device_not_in_bootloader_mode",
    REQUIRE_MODE: "ui-device_require_mode",
    INITIALIZE: "ui-device_not_initialized",
    SEEDLESS: "ui-device_seedless",
    FIRMWARE_OLD: "ui-device_firmware_old",
    FIRMWARE_NOT_SUPPORTED: "ui-device_firmware_unsupported",
    FIRMWARE_NOT_COMPATIBLE: "ui-device_firmware_not_compatible",
    FIRMWARE_NOT_INSTALLED: "ui-device_firmware_not_installed",
    NOT_USE_ONEKEY_DEVICE: "ui-device_please_use_onekey_device",
    FIRMWARE_TIP: "ui-firmware-tip",
    PREVIOUS_ADDRESS_RESULT: "ui-previous_address_result"
};
const parseRunOptions = (options)=>{
    if (!options) options = {};
    return options;
};
const Log$5 = getLogger(exports.LoggerNames.Device);
const deviceSessionCache = {};
class Device extends events.exports {
    constructor(descriptor){
        super();
        this.deviceConnector = null;
        this.features = undefined;
        this.featuresNeedsReload = false;
        this.externalState = [];
        this.unavailableCapabilities = {};
        this.instance = 0;
        this.internalState = [];
        this.needReloadDevice = false;
        this.keepSession = false;
        this.passphraseState = undefined;
        this.originalDescriptor = descriptor;
    }
    static fromDescriptor(originalDescriptor) {
        const descriptor = Object.assign({}, originalDescriptor);
        return new Device(descriptor);
    }
    toMessageObject() {
        if (this.isUnacquired() || !this.features) return null;
        const env = DataManager.getSettings("env");
        return {
            connectId: env === "react-native" ? this.mainId || null : getDeviceUUID(this.features),
            uuid: getDeviceUUID(this.features),
            deviceType: this.features.bootloader_mode ? getDeviceTypeOnBootloader(this.features) : getDeviceType(this.features),
            deviceId: this.features.device_id || null,
            path: this.originalDescriptor.path,
            name: this.features.ble_name || this.features.label || `OneKey ${getDeviceType(this.features).toUpperCase()}`,
            label: getDeviceLabel(this.features),
            mode: this.getMode(),
            features: this.features,
            firmwareVersion: this.getFirmwareVersion(),
            bleFirmwareVersion: this.getBLEFirmwareVersion(),
            unavailableCapabilities: this.unavailableCapabilities
        };
    }
    connect() {
        const env = DataManager.getSettings("env");
        return new Promise((resolve)=>__awaiter(this, void 0, void 0, function*() {
                if (env === "react-native") {
                    try {
                        yield this.acquire();
                        resolve(true);
                    } catch (error) {
                        resolve(error);
                    }
                    return;
                }
                if (!this.mainId || !this.isUsedHere() && this.originalDescriptor) {
                    try {
                        yield this.acquire();
                        resolve(true);
                    } catch (error) {
                        resolve(error);
                    }
                    return;
                }
                if (this.isUsedHere()) {
                    resolve(true);
                    return;
                }
                resolve(false);
            }));
    }
    acquire() {
        var _a, _b, _c, _d;
        return __awaiter(this, void 0, void 0, function*() {
            const env = DataManager.getSettings("env");
            const mainIdKey = env === "react-native" ? "id" : "session";
            try {
                if (env === "react-native") {
                    const res = yield (_a = this.deviceConnector) === null || _a === void 0 ? void 0 : _a.acquire(this.originalDescriptor.id);
                    this.mainId = (_b = res.uuid) !== null && _b !== void 0 ? _b : "";
                    Log$5.debug("Expected uuid:", this.mainId);
                } else {
                    this.mainId = yield (_c = this.deviceConnector) === null || _c === void 0 ? void 0 : _c.acquire(this.originalDescriptor.path, this.originalDescriptor.session);
                    Log$5.debug("Expected session id:", this.mainId);
                }
                this.updateDescriptor({
                    [mainIdKey]: this.mainId
                });
                if (this.commands) yield this.commands.dispose(false);
                this.commands = new DeviceCommands(this, (_d = this.mainId) !== null && _d !== void 0 ? _d : "");
            } catch (error) {
                if (this.runPromise) this.runPromise.reject(error);
                else throw error;
                this.runPromise = null;
            }
        });
    }
    release() {
        var _a;
        return __awaiter(this, void 0, void 0, function*() {
            const env = DataManager.getSettings("env");
            if (this.isUsedHere() && !this.keepSession && this.mainId || this.mainId && env === "react-native") {
                if (this.commands) {
                    this.commands.dispose(false);
                    if (this.commands.callPromise) try {
                        yield this.commands.callPromise;
                    } catch (error) {
                        this.commands.callPromise = undefined;
                    }
                }
                try {
                    yield (_a = this.deviceConnector) === null || _a === void 0 ? void 0 : _a.release(this.mainId, false);
                    this.updateDescriptor({
                        session: null
                    });
                } catch (err) {
                    Log$5.error("[Device] release error: ", err);
                } finally{
                    this.needReloadDevice = true;
                }
            }
        });
    }
    getCommands() {
        return this.commands;
    }
    generateStateKey(deviceId, passphraseState) {
        if (passphraseState) return `${deviceId}@${passphraseState}`;
        return deviceId;
    }
    getInternalState(_deviceId) {
        var _a, _b;
        Log$5.debug("getInternalState session param: ", `device_id: ${_deviceId}`, `features.device_id: ${(_a = this.features) === null || _a === void 0 ? void 0 : _a.device_id}`, `passphraseState: ${this.passphraseState}`);
        Log$5.debug("getInternalState session cache: ", deviceSessionCache);
        const deviceId = _deviceId || ((_b = this.features) === null || _b === void 0 ? void 0 : _b.device_id);
        if (!deviceId) return undefined;
        if (!this.passphraseState) return undefined;
        const usePassKey = this.generateStateKey(deviceId, this.passphraseState);
        return deviceSessionCache[usePassKey];
    }
    tryFixInternalState(state, deviceId, sessionId = null) {
        Log$5.debug("tryFixInternalState session param: ", `device_id: ${deviceId}`, `passphraseState: ${state}`, `sessionId: ${sessionId}`);
        const key = `${deviceId}`;
        const session = deviceSessionCache[key];
        if (session) {
            deviceSessionCache[this.generateStateKey(deviceId, state)] = session;
            delete deviceSessionCache[key];
        } else if (sessionId) deviceSessionCache[this.generateStateKey(deviceId, state)] = sessionId;
        Log$5.debug("tryFixInternalState session cache: ", deviceSessionCache);
    }
    setInternalState(state, initSession) {
        var _a, _b;
        Log$5.debug("setInternalState session param: ", `state: ${state}`, `initSession: ${initSession}`, `device_id: ${(_a = this.features) === null || _a === void 0 ? void 0 : _a.device_id}`, `passphraseState: ${this.passphraseState}`);
        if (!this.features) return;
        if (!this.passphraseState && !initSession) return;
        const deviceId = (_b = this.features) === null || _b === void 0 ? void 0 : _b.device_id;
        if (!deviceId) return;
        const key = this.generateStateKey(deviceId, this.passphraseState);
        if (state) deviceSessionCache[key] = state;
        Log$5.debug("setInternalState done session cache: ", deviceSessionCache);
    }
    clearInternalState(_deviceId) {
        var _a;
        Log$5.debug("clearInternalState param: ", _deviceId);
        const deviceId = _deviceId || ((_a = this.features) === null || _a === void 0 ? void 0 : _a.device_id);
        if (!deviceId) return;
        const key = `${deviceId}`;
        delete deviceSessionCache[key];
        if (this.passphraseState) {
            const usePassKey = this.generateStateKey(deviceId, this.passphraseState);
            delete deviceSessionCache[usePassKey];
        }
    }
    initialize(options) {
        return __awaiter(this, void 0, void 0, function*() {
            Log$5.debug("initialize param:", options);
            this.passphraseState = options === null || options === void 0 ? void 0 : options.passphraseState;
            if (options === null || options === void 0 ? void 0 : options.initSession) this.clearInternalState(options === null || options === void 0 ? void 0 : options.deviceId);
            const internalState = this.getInternalState(options === null || options === void 0 ? void 0 : options.deviceId);
            const payload = {};
            if (internalState) payload.session_id = internalState;
            if (options === null || options === void 0 ? void 0 : options.deriveCardano) payload.derive_cardano = true;
            Log$5.debug("initialize payload:", payload);
            const { message } = yield this.commands.typedCall("Initialize", "Features", payload);
            this._updateFeatures(message, options === null || options === void 0 ? void 0 : options.initSession);
            yield TransportManager.reconfigure(message);
        });
    }
    getFeatures() {
        return __awaiter(this, void 0, void 0, function*() {
            const { message } = yield this.commands.typedCall("GetFeatures", "Features", {});
            this._updateFeatures(message);
        });
    }
    _updateFeatures(feat, initSession) {
        var _a;
        if (this.features && this.features.session_id && !feat.session_id) feat.session_id = this.features.session_id;
        if (this.features && this.features.device_id && feat.session_id) this.setInternalState(feat.session_id, initSession);
        feat.unlocked = (_a = feat.unlocked) !== null && _a !== void 0 ? _a : true;
        this.features = feat;
        this.featuresNeedsReload = false;
        this.emit(DEVICE.FEATURES, this, feat);
    }
    updateDescriptor(descriptor, forceUpdate = false) {
        const env = DataManager.getSettings("env");
        if (env === "react-native") return;
        const originalSession = this.originalDescriptor.session;
        const upcomingSession = descriptor.session;
        if (originalSession !== upcomingSession) this.originalDescriptor.session = upcomingSession;
        if (forceUpdate) this.originalDescriptor = descriptor;
    }
    updateFromCache(device) {
        this.mainId = device.mainId;
        this.commands = device.commands;
        this.updateDescriptor(device.originalDescriptor, true);
        if (device.features) this._updateFeatures(device.features);
    }
    run(fn, options) {
        return __awaiter(this, void 0, void 0, function*() {
            if (this.runPromise) {
                yield this.interruptionFromOutside();
                Log$5.debug("[Device] run error:", "Device is running, but will cancel previous operate");
            }
            options = parseRunOptions(options);
            this.runPromise = hdShared.createDeferred(this._runInner.bind(this, fn, options));
            return this.runPromise.promise;
        });
    }
    _runInner(fn, options) {
        return __awaiter(this, void 0, void 0, function*() {
            if (!this.isUsedHere() || this.commands.disposed) {
                const env = DataManager.getSettings("env");
                if (env !== "react-native") {
                    yield this.acquire();
                    try {
                        if (fn) yield this.initialize(options);
                    } catch (error) {
                        this.runPromise = null;
                        if (error instanceof hdShared.HardwareError) return Promise.reject(error);
                        return Promise.reject(hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.DeviceInitializeFailed, `Initialize failed: ${error.message}, code: ${error.code}`));
                    }
                }
            }
            if (options.keepSession) this.keepSession = true;
            if (fn) try {
                yield fn();
            } catch (e) {
                if (this.runPromise) this.runPromise.reject(e);
                this.runPromise = null;
                return;
            }
            if (!this.keepSession && typeof options.keepSession !== "boolean" || options.keepSession === false) {
                this.keepSession = false;
                yield this.release();
                Log$5.debug("release device, mainId: ", this.mainId);
            }
            if (this.runPromise) this.runPromise.resolve();
            this.runPromise = null;
        });
    }
    interruptionFromOutside() {
        return __awaiter(this, void 0, void 0, function*() {
            if (this.commands) yield this.commands.dispose(false);
            if (this.runPromise) this.runPromise.reject(hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.DeviceInterruptedFromOutside));
        });
    }
    interruptionFromUser() {
        return __awaiter(this, void 0, void 0, function*() {
            if (this.commands) yield this.commands.dispose(true);
            if (this.runPromise) this.runPromise.reject(hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.DeviceInterruptedFromUser));
        });
    }
    getMode() {
        var _a, _b, _c;
        if ((_a = this.features) === null || _a === void 0 ? void 0 : _a.bootloader_mode) return "bootloader";
        if (!((_b = this.features) === null || _b === void 0 ? void 0 : _b.initialized)) return "initialize";
        if ((_c = this.features) === null || _c === void 0 ? void 0 : _c.no_backup) return "seedless";
        return "normal";
    }
    getFirmwareVersion() {
        if (!this.features) return null;
        return getDeviceFirmwareVersion(this.features);
    }
    getBLEFirmwareVersion() {
        if (!this.features) return null;
        return getDeviceBLEFirmwareVersion(this.features);
    }
    isUsed() {
        return typeof this.originalDescriptor.session === "string";
    }
    isUsedHere() {
        const env = DataManager.getSettings("env");
        if (env === "react-native") return false;
        return this.isUsed() && this.originalDescriptor.session === this.mainId;
    }
    isUsedElsewhere() {
        return this.isUsed() && !this.isUsedHere();
    }
    isBootloader() {
        return this.features && !!this.features.bootloader_mode;
    }
    isInitialized() {
        return this.features && !!this.features.initialized;
    }
    isSeedless() {
        return this.features && !!this.features.no_backup;
    }
    isUnacquired() {
        return this.features === undefined;
    }
    hasUnexpectedMode(allow, require1) {
        if (this.features) {
            if (this.isBootloader() && !allow.includes(UI_REQUEST.BOOTLOADER)) return UI_REQUEST.BOOTLOADER;
            if (!this.isInitialized() && !allow.includes(UI_REQUEST.INITIALIZE)) return UI_REQUEST.INITIALIZE;
            if (this.isSeedless() && !allow.includes(UI_REQUEST.SEEDLESS)) return UI_REQUEST.SEEDLESS;
            if (!this.isBootloader() && require1.includes(UI_REQUEST.BOOTLOADER)) return UI_REQUEST.NOT_IN_BOOTLOADER;
        }
        return null;
    }
    hasUsePassphrase() {
        var _a;
        const isModeT = getDeviceType(this.features) === "touch" || getDeviceType(this.features) === "pro";
        const preCheckTouch = isModeT && ((_a = this.features) === null || _a === void 0 ? void 0 : _a.unlocked) === true;
        return this.features && (!!this.features.passphrase_protection || preCheckTouch);
    }
    checkDeviceId(deviceId) {
        if (this.features) return this.features.device_id === deviceId;
        return false;
    }
    checkPassphraseState() {
        var _a;
        return __awaiter(this, void 0, void 0, function*() {
            if (!this.features) return false;
            const locked = ((_a = this.features) === null || _a === void 0 ? void 0 : _a.unlocked) === true;
            const isModeT = getDeviceType(this.features) === "touch" || getDeviceType(this.features) === "pro";
            const newState = yield getPassphraseState(this.features, this.commands);
            if (isModeT && locked) yield this.getFeatures();
            if (this.passphraseState && this.passphraseState !== newState) {
                this.clearInternalState();
                return newState;
            }
        });
    }
}
class DeviceList extends events.exports {
    constructor(){
        super(...arguments);
        this.devices = {};
    }
    getDeviceLists(connectId, initOptions) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function*() {
            const deviceDiff = yield (_a = this.connector) === null || _a === void 0 ? void 0 : _a.enumerate();
            const descriptorList = (_b = deviceDiff === null || deviceDiff === void 0 ? void 0 : deviceDiff.descriptors) !== null && _b !== void 0 ? _b : [];
            this.devices = {};
            const { deviceList, devices } = yield DevicePool.getDevices(descriptorList, connectId, initOptions);
            this.devices = devices;
            return deviceList;
        });
    }
    allDevices() {
        return Object.keys(this.devices).map((key)=>this.devices[key]);
    }
    getDevice(connectId) {
        return this.devices[connectId];
    }
}
const getFirmwareReleaseInfo = (features)=>{
    const firmwareStatus = DataManager.getFirmwareStatus(features);
    const changelog = DataManager.getFirmwareChangelog(features);
    const release = DataManager.getFirmwareLatestRelease(features);
    return {
        status: firmwareStatus,
        changelog,
        release
    };
};
const getBleFirmwareReleaseInfo = (features)=>{
    const firmwareStatus = DataManager.getBLEFirmwareStatus(features);
    const changelog = DataManager.getBleFirmwareChangelog(features);
    const release = DataManager.getBleFirmwareLatestRelease(features);
    return {
        status: firmwareStatus,
        changelog,
        release
    };
};
const Log$4 = getLogger(exports.LoggerNames.Method);
class BaseMethod {
    constructor(message){
        this.shouldEnsureConnected = true;
        this.checkDeviceId = false;
        this.useDevicePassphraseState = true;
        this.skipForceUpdateCheck = false;
        this.postPreviousAddressMessage = (data)=>{
            this.postMessage(createUiMessage(UI_REQUEST.PREVIOUS_ADDRESS_RESULT, {
                device: this.device.toMessageObject(),
                data
            }));
        };
        const { payload } = message;
        this.name = payload.method;
        this.payload = payload;
        this.responseID = message.id || 0;
        this.connectId = payload.connectId || "";
        this.deviceId = payload.deviceId || "";
        this.useDevice = true;
        this.notAllowDeviceMode = [
            UI_REQUEST.INITIALIZE
        ];
        this.requireDeviceMode = [];
    }
    getVersionRange() {
        return {};
    }
    setDevice(device) {
        this.device = device;
        this.connectId = device.originalDescriptor.path;
    }
    checkFirmwareRelease() {
        if (!this.device || !this.device.features) return;
        const releaseInfo = getFirmwareReleaseInfo(this.device.features);
        this.postMessage(createFirmwareMessage(FIRMWARE.RELEASE_INFO, Object.assign(Object.assign({}, releaseInfo), {
            features: this.device.features
        })));
        const bleReleaseInfo = getBleFirmwareReleaseInfo(this.device.features);
        this.postMessage(createFirmwareMessage(FIRMWARE.BLE_RELEASE_INFO, Object.assign(Object.assign({}, bleReleaseInfo), {
            features: this.device.features
        })));
    }
    checkDeviceSupportFeature() {
        if (!this.device || !this.device.features) return;
        const inputPinOnSoftware = supportInputPinOnSoftware(this.device.features);
        const modifyHomescreen = supportModifyHomescreen(this.device.features);
        this.postMessage(createDeviceMessage(DEVICE.SUPPORT_FEATURES, {
            inputPinOnSoftware,
            modifyHomescreen,
            device: this.device.toMessageObject()
        }));
    }
    checkSafetyLevelOnTestNet() {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function*() {
            let checkFlag = false;
            if (this.name === "evmSignTransaction" && [
                3,
                4,
                5,
                42
            ].includes(Number((_b = (_a = this.payload) === null || _a === void 0 ? void 0 : _a.transaction) === null || _b === void 0 ? void 0 : _b.chainId))) checkFlag = true;
            if (checkFlag && ((_c = this.device.features) === null || _c === void 0 ? void 0 : _c.safety_checks) === "Strict") {
                Log$4.debug("will change safety_checks level");
                yield this.device.commands.typedCall("ApplySettings", "Success", {
                    safety_checks: "PromptTemporarily"
                });
            }
        });
    }
    dispose() {}
}
class SearchDevices extends BaseMethod {
    init() {
        this.useDevice = false;
        this.useDevicePassphraseState = false;
        this.skipForceUpdateCheck = true;
    }
    run() {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function*() {
            yield TransportManager.configure();
            const deviceDiff = yield (_a = this.connector) === null || _a === void 0 ? void 0 : _a.enumerate();
            const devicesDescriptor = (_b = deviceDiff === null || deviceDiff === void 0 ? void 0 : deviceDiff.descriptors) !== null && _b !== void 0 ? _b : [];
            const env = DataManager.getSettings("env");
            if (env === "react-native") return devicesDescriptor.map((device)=>{
                var _a;
                return Object.assign(Object.assign({}, device), {
                    connectId: device.id,
                    deviceType: getDeviceTypeByBleName((_a = device.name) !== null && _a !== void 0 ? _a : "")
                });
            });
            const { deviceList } = yield DevicePool.getDevices(devicesDescriptor);
            return deviceList.map((device)=>device.toMessageObject());
        });
    }
}
class GetFeatures extends BaseMethod {
    init() {
        this.notAllowDeviceMode = [
            ...this.notAllowDeviceMode,
            UI_REQUEST.INITIALIZE,
            UI_REQUEST.BOOTLOADER
        ];
        this.useDevicePassphraseState = false;
        this.skipForceUpdateCheck = true;
    }
    run() {
        return Promise.resolve(this.device.features);
    }
}
class GetPassphraseState extends BaseMethod {
    init() {
        this.notAllowDeviceMode = [
            ...this.notAllowDeviceMode,
            UI_REQUEST.INITIALIZE
        ];
        this.useDevicePassphraseState = false;
    }
    run() {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function*() {
            if (!this.device.features) return Promise.reject(hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.DeviceInitializeFailed));
            let { features } = this.device;
            const locked = ((_b = (_a = this.device) === null || _a === void 0 ? void 0 : _a.features) === null || _b === void 0 ? void 0 : _b.unlocked) === true;
            const passphraseState = yield getPassphraseState(this.device.features, this.device.commands);
            const isModeT = getDeviceType(features) === "touch" || getDeviceType(features) === "pro";
            if (isModeT && locked) {
                const { message } = yield this.device.commands.typedCall("GetFeatures", "Features", {});
                features = message;
            }
            if (features && features.passphrase_protection === true) {
                if (passphraseState && features.device_id) this.device.tryFixInternalState(passphraseState, features.device_id, features.session_id);
                return Promise.resolve(passphraseState);
            }
            return Promise.resolve(undefined);
        });
    }
}
class CheckBridgeStatus$1 extends BaseMethod {
    init() {
        this.useDevice = false;
        this.useDevicePassphraseState = false;
        this.skipForceUpdateCheck = true;
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            const logs = getLog();
            return Promise.resolve(logs);
        });
    }
}
class CheckFirmwareRelease extends BaseMethod {
    init() {
        this.useDevicePassphraseState = false;
        this.skipForceUpdateCheck = true;
    }
    run() {
        if (this.device.features) {
            const releaseInfo = getFirmwareReleaseInfo(this.device.features);
            return Promise.resolve(releaseInfo);
        }
        return Promise.resolve(null);
    }
}
class CheckBLEFirmwareRelease extends BaseMethod {
    init() {
        this.notAllowDeviceMode = [
            ...this.notAllowDeviceMode,
            UI_REQUEST.BOOTLOADER
        ];
        this.checkDeviceId = true;
        this.useDevicePassphraseState = false;
        this.skipForceUpdateCheck = true;
    }
    run() {
        if (this.device.features) {
            const releaseInfo = getBleFirmwareReleaseInfo(this.device.features);
            return Promise.resolve(releaseInfo);
        }
        return Promise.resolve(null);
    }
}
class CheckTransportRelease extends BaseMethod {
    init() {
        this.useDevice = false;
        this.useDevicePassphraseState = false;
        this.skipForceUpdateCheck = true;
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            const transport = TransportManager.getTransport();
            const localVersion = yield transport.init();
            const response = DataManager.getTransportStatus(localVersion);
            return Promise.resolve(response);
        });
    }
}
class CheckBridgeStatus extends BaseMethod {
    init() {
        this.useDevice = false;
        this.useDevicePassphraseState = false;
        this.skipForceUpdateCheck = true;
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            return new Promise((resolve, reject)=>{
                axios__default["default"].request({
                    url: "http://localhost:21320",
                    method: "POST",
                    withCredentials: false,
                    timeout: 3000
                }).then(()=>resolve(true)).catch((e)=>{
                    if (e.code === "ECONNABORTED") reject(hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.BridgeTimeoutError));
                    else resolve(false);
                });
            });
        });
    }
}
const BridgeVersion = "2.2.0";
const TouchNeedUpdateVersion = "4.3.0";
const ClassicAndMiniNeedUpdateVersion = "3.1.0";
class CheckBridgeRelease extends BaseMethod {
    init() {
        this.notAllowDeviceMode = [
            ...this.notAllowDeviceMode,
            UI_REQUEST.BOOTLOADER
        ];
        this.useDevicePassphraseState = false;
        this.skipForceUpdateCheck = true;
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            if (!this.device.features) return null;
            try {
                const { data } = yield axios__default["default"].request({
                    url: "http://localhost:21320",
                    method: "POST",
                    withCredentials: false,
                    timeout: 3000
                });
                const { version = "0.0.0" } = data;
                const { willUpdateFirmwareVersion } = this.payload;
                const { features } = this.device;
                const deviceType = getDeviceType(features);
                const currentFirmwareVersion = getDeviceFirmwareVersion(features).join(".");
                const isOldVersionBridge = semver__default["default"].lt(version, BridgeVersion);
                let shouldUpdate = false;
                if (deviceType === "touch") {
                    if (semver__default["default"].gte(willUpdateFirmwareVersion, TouchNeedUpdateVersion) && isOldVersionBridge) shouldUpdate = true;
                    if (semver__default["default"].gte(currentFirmwareVersion, TouchNeedUpdateVersion) && isOldVersionBridge) shouldUpdate = true;
                }
                if (deviceType === "classic" || deviceType === "mini") {
                    if (semver__default["default"].gte(willUpdateFirmwareVersion, ClassicAndMiniNeedUpdateVersion) && isOldVersionBridge) shouldUpdate = true;
                    if (semver__default["default"].gte(currentFirmwareVersion, ClassicAndMiniNeedUpdateVersion) && isOldVersionBridge) shouldUpdate = true;
                }
                return {
                    shouldUpdate,
                    status: shouldUpdate ? "outdated" : "valid",
                    releaseVersion: BridgeVersion
                };
            } catch (e) {
                if (e.code === "ECONNABORTED") return Promise.reject(hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.BridgeTimeoutError));
                return Promise.reject(hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.BridgeNotInstalled));
            }
        });
    }
}
class CheckBootloaderRelease extends BaseMethod {
    init() {
        this.notAllowDeviceMode = [
            ...this.notAllowDeviceMode,
            UI_REQUEST.BOOTLOADER
        ];
        this.useDevicePassphraseState = false;
        this.skipForceUpdateCheck = true;
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            if (!this.device.features) return null;
            const { features } = this.device;
            const deviceType = getDeviceType(features);
            let shouldUpdate = false;
            if (deviceType === "classic" || deviceType === "mini") shouldUpdate = !!checkNeedUpdateBootForClassicAndMini(features, this.payload.willUpdateFirmwareVersion);
            else if (deviceType === "touch") shouldUpdate = checkNeedUpdateBootForTouch(features);
            const resource = DataManager.getBootloaderResource(features);
            return Promise.resolve({
                shouldUpdate,
                status: shouldUpdate ? "outdated" : "valid",
                release: resource
            });
        });
    }
}
class DeviceBackup extends BaseMethod {
    init() {
        this.useDevicePassphraseState = false;
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            const res = yield this.device.commands.typedCall("BackupDevice", "Success");
            return Promise.resolve(res.message);
        });
    }
}
const hasHexPrefix = (str)=>str.slice(0, 2).toLowerCase() === "0x";
const stripHexPrefix = (str)=>hasHexPrefix(str) ? str.slice(2) : str;
const addHexPrefix = (str)=>hasHexPrefix(str) ? str : `0x${str}`;
const isHexString = (value, length)=>{
    if (typeof value !== "string" || !value.match(/^(0x|0X)?[0-9A-Fa-f]*$/)) return false;
    if (length && value.length !== 2 + 2 * length) return false;
    return true;
};
const stripHexStartZeroes = (str)=>{
    while(/^00/.test(str))str = str.slice(2);
    return str;
};
const modifyValues = (object, transformer)=>Object.fromEntries(Object.entries(object).map(([key, value])=>[
            key,
            transformer(value, key)
        ]));
const formatAnyHex = (value)=>{
    if (typeof value === "string") {
        let stripped = stripHexPrefix(value);
        if (stripped.length % 2 !== 0) stripped = `0${stripped}`;
        return stripped;
    }
    if (Array.isArray(value)) return value.map(formatAnyHex);
    if (typeof value === "object") return modifyValues(value, (value)=>formatAnyHex(value));
    return value;
};
const hexes = Array.from({
    length: 256
}, (_, i)=>i.toString(16).padStart(2, "0"));
function bytesToHex(uint8a) {
    if (!(uint8a instanceof Uint8Array)) throw new Error("Uint8Array expected");
    let hex = "";
    for(let i = 0; i < uint8a.length; i++)hex += hexes[uint8a[i]];
    return hex;
}
function hexToBytes(hex) {
    if (typeof hex !== "string") throw new TypeError(`hexToBytes: expected string, got ${typeof hex}`);
    if (hex.length % 2) throw new Error("hexToBytes: received invalid unpadded hex");
    const array = new Uint8Array(hex.length / 2);
    for(let i = 0; i < array.length; i++){
        const j = i * 2;
        const hexByte = hex.slice(j, j + 2);
        const byte = Number.parseInt(hexByte, 16);
        if (Number.isNaN(byte) || byte < 0) throw new Error("Invalid byte sequence");
        array[i] = byte;
    }
    return array;
}
const invalidParameter = (message)=>hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.CallMethodInvalidParameter, message);
const validateParams = (values, fields)=>{
    fields.forEach((field)=>{
        const existsProp = Object.prototype.hasOwnProperty.call(values, field.name);
        if (!existsProp && field.required) throw invalidParameter(`Missing required parameter: ${field.name}`);
        const value = values[field.name];
        if (value && field.type) switch(field.type){
            case "array":
                if (!Array.isArray(value)) throw invalidParameter(`Parameter [${field.name}] is of type invalid and should be [${field.type}].`);
                else if (!field.allowEmpty && value.length < 1) throw invalidParameter(`Parameter "${field.name}" is empty.`);
                break;
            case "uint":
                if (typeof value !== "string" && typeof value !== "number") throw invalidParameter(`Parameter [${field.name}] has invalid type. "string|number" expected.`);
                if (typeof value === "number" && !Number.isSafeInteger(value) || !/^(?:[1-9]\d*|\d)$/.test(value.toString().replace(/^-/, field.allowNegative ? "" : "-"))) throw invalidParameter(`Parameter [${field.name}] has invalid value "${value}". Integer representation expected.`);
                break;
            case "bigNumber":
                if (typeof value !== "string") throw invalidParameter(`Parameter [${field.name}] is of type invalid and should be [string].`);
                try {
                    const bn = new BigNumber__default["default"](value);
                    if (bn.toFixed(0) !== value) throw new Error("");
                } catch (error) {
                    throw invalidParameter(`Parameter [${field.name}] is of type invalid and should be [${field.type}].`);
                }
                break;
            case "buffer":
                if (typeof value === "undefined" || typeof value.constructor.isBuffer === "function" && value.constructor.isBuffer(value)) throw invalidParameter(`Parameter [${field.name}] is of type invalid and should be [buffer].`);
                break;
            case "hexString":
                if (typeof value !== "string" || !isHexString(addHexPrefix(value))) throw invalidParameter(`Parameter [${field.name}] is of type invalid and should be [${field.type}].`);
                break;
            default:
                if (typeof value !== field.type) throw invalidParameter(`Parameter [${field.name}] is of type invalid and should be [${field.type}].`);
                break;
        }
    });
};
class DeviceChangePin extends BaseMethod {
    init() {
        this.useDevicePassphraseState = false;
        validateParams(this.payload, [
            {
                name: "remove",
                type: "boolean"
            }
        ]);
        this.params = {
            remove: this.payload.remove
        };
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            const res = yield this.device.commands.typedCall("ChangePin", "Success", Object.assign({}, this.params));
            return Promise.resolve(res.message);
        });
    }
}
class DeviceFlags extends BaseMethod {
    init() {
        this.useDevicePassphraseState = false;
        validateParams(this.payload, [
            {
                name: "flags",
                type: "number"
            }
        ]);
        this.params = {
            flags: this.payload.flags
        };
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            const res = yield this.device.commands.typedCall("ApplyFlags", "Success", Object.assign({}, this.params));
            return Promise.resolve(res.message);
        });
    }
}
class DeviceRebootToBootloader extends BaseMethod {
    init() {
        this.useDevicePassphraseState = false;
        this.skipForceUpdateCheck = true;
    }
    getVersionRange() {
        return {
            classic: {
                min: "2.1.11"
            },
            mini: {
                min: "2.1.11"
            }
        };
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            const res = yield this.device.commands.typedCall("RebootToBootloader", "Success");
            return Promise.resolve(res.message);
        });
    }
}
class DeviceRebootToBoardloader extends BaseMethod {
    init() {
        this.useDevicePassphraseState = false;
        this.skipForceUpdateCheck = true;
    }
    getVersionRange() {
        return {
            classic: {
                min: "2.1.11"
            },
            mini: {
                min: "2.1.11"
            }
        };
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            const res = yield this.device.commands.typedCall("BixinOutMessageSE", "Success");
            return Promise.resolve(res.message);
        });
    }
}
class DeviceRecovery extends BaseMethod {
    init() {
        this.useDevicePassphraseState = false;
        validateParams(this.payload, [
            {
                name: "wordCount",
                type: "number"
            },
            {
                name: "passphraseProtection",
                type: "boolean"
            },
            {
                name: "pinProtection",
                type: "boolean"
            },
            {
                name: "language",
                type: "string"
            },
            {
                name: "label",
                type: "string"
            },
            {
                name: "enforceWordlist",
                type: "boolean"
            },
            {
                name: "type",
                type: "object"
            },
            {
                name: "u2fCounter",
                type: "number"
            },
            {
                name: "dryRun",
                type: "boolean"
            }
        ]);
        this.params = {
            word_count: this.payload.wordCount,
            passphrase_protection: this.payload.passphraseProtection,
            pin_protection: this.payload.pinProtection,
            language: this.payload.language,
            label: this.payload.label,
            enforce_wordlist: this.payload.enforceWordlist,
            type: this.payload.type,
            u2f_counter: this.payload.u2fCounter || Math.floor(Date.now() / 1000),
            dry_run: this.payload.dryRun
        };
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            const res = yield this.device.commands.typedCall("RecoveryDevice", "Success", Object.assign({}, this.params));
            return Promise.resolve(res.message);
        });
    }
}
class DeviceReset extends BaseMethod {
    init() {
        this.useDevicePassphraseState = false;
        validateParams(this.payload, [
            {
                name: "displayRandom",
                type: "boolean"
            },
            {
                name: "strength",
                type: "number"
            },
            {
                name: "passphraseProtection",
                type: "boolean"
            },
            {
                name: "pinProtection",
                type: "boolean"
            },
            {
                name: "language",
                type: "string"
            },
            {
                name: "label",
                type: "string"
            },
            {
                name: "u2fCounter",
                type: "number"
            },
            {
                name: "skipBackup",
                type: "boolean"
            },
            {
                name: "noBackup",
                type: "boolean"
            },
            {
                name: "backupType"
            }
        ]);
        this.params = {
            display_random: this.payload.displayRandom,
            strength: this.payload.strength || 256,
            passphrase_protection: this.payload.passphraseProtection,
            pin_protection: this.payload.pinProtection,
            language: this.payload.language,
            label: this.payload.label,
            u2f_counter: this.payload.u2fCounter || Math.floor(Date.now() / 1000),
            skip_backup: this.payload.skipBackup,
            no_backup: this.payload.noBackup,
            backup_type: this.payload.backupType
        };
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            const res = yield this.device.commands.typedCall("ResetDevice", "Success", Object.assign({}, this.params));
            return Promise.resolve(res.message);
        });
    }
}
class DeviceSettings extends BaseMethod {
    init() {
        this.useDevicePassphraseState = false;
        validateParams(this.payload, [
            {
                name: "language",
                type: "string"
            },
            {
                name: "label",
                type: "string"
            },
            {
                name: "usePassphrase",
                type: "boolean"
            },
            {
                name: "homescreen",
                type: "string"
            },
            {
                name: "passphraseSource",
                type: "number"
            },
            {
                name: "autoLockDelayMs",
                type: "number"
            },
            {
                name: "displayRotation",
                type: "number"
            },
            {
                name: "passphraseAlwaysOnDevice",
                type: "boolean"
            },
            {
                name: "safetyChecks",
                type: "number"
            },
            {
                name: "experimentalFeatures",
                type: "boolean"
            }
        ]);
        this.params = {
            language: this.payload.language,
            label: this.payload.label,
            use_passphrase: this.payload.usePassphrase,
            homescreen: this.payload.homescreen,
            _passphrase_source: this.payload.passphraseSource,
            auto_lock_delay_ms: this.payload.autoLockDelayMs,
            display_rotation: this.payload.displayRotation,
            passphrase_always_on_device: this.payload.passphraseAlwaysOnDevice,
            safety_checks: this.payload.safetyChecks,
            experimental_features: this.payload.experimentalFeatures
        };
    }
    getVersionRange() {
        if (this.payload.usePassphrase) return {
            model_mini: {
                min: "2.4.0"
            }
        };
        return {};
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            const res = yield this.device.commands.typedCall("ApplySettings", "Success", Object.assign({}, this.params));
            return Promise.resolve(res.message);
        });
    }
}
class DeviceUpdateReboot extends BaseMethod {
    init() {
        this.useDevicePassphraseState = false;
        this.skipForceUpdateCheck = true;
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            const res = yield this.device.commands.typedCall("DeviceBackToBoot", "Success");
            return Promise.resolve(res.message);
        });
    }
}
const safeThrowError = (error)=>{
    if (error instanceof hdShared.HardwareError) throw error;
    else if (error.code === "ERR_NETWORK") throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.BridgeNotInstalled);
    else if (error.code === "ECONNABORTED") throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.BridgeTimeoutError);
    else throw hdShared.ERRORS.TypedError(error);
};
class DeviceUploadResource extends BaseMethod {
    constructor(){
        super(...arguments);
        this.paramsData = {
            data: new Uint8Array(),
            thumbnailData: new Uint8Array()
        };
        this.processResourceRequest = (res)=>__awaiter(this, void 0, void 0, function*() {
                if (res.type === "Success") return res.message;
                const { offset, data_length } = res.message;
                const { data, thumbnailData } = this.paramsData;
                if (offset === undefined) throw new Error("offset is undefined");
                let payload;
                if (res.type === "ResourceRequest") payload = new Uint8Array(data.slice(offset, Math.min(offset + data_length, data.byteLength)));
                else payload = new Uint8Array(thumbnailData.slice(offset, Math.min(offset + data_length, thumbnailData.byteLength)));
                const digest = blake2s.blake2s(payload);
                const resourceAckParams = {
                    data_chunk: utils.bytesToHex(payload),
                    hash: utils.bytesToHex(digest)
                };
                const response = yield this.device.commands.typedCall("ResourceAck", [
                    "ResourceRequest",
                    "ZoomRequest",
                    "Success"
                ], resourceAckParams);
                return this.processResourceRequest(response);
            });
    }
    getVersionRange() {
        return {
            model_touch: {
                min: "3.2.0"
            }
        };
    }
    checkUploadNFTSupport() {
        const deviceType = getDeviceType(this.device.features);
        const currentVersion = getDeviceFirmwareVersion(this.device.features).join(".");
        if (deviceType !== "touch") throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.CallMethodError, "Device Not Support Upload NFT");
        if (semver__default["default"].lt(currentVersion, "4.1.0")) throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.CallMethodNeedUpgradeFirmware, `Device firmware version is too low, please update to 4.1.0`, {
            current: currentVersion,
            require: "4.1.0"
        });
    }
    init() {
        this.useDevicePassphraseState = false;
        this.skipForceUpdateCheck = true;
        validateParams(this.payload, [
            {
                name: "suffix",
                type: "string",
                required: true
            },
            {
                name: "dataHex",
                type: "string",
                required: true
            },
            {
                name: "thumbnailDataHex",
                type: "string",
                required: true
            },
            {
                name: "resType",
                type: "number",
                required: true
            },
            {
                name: "nftMetaData",
                type: "string"
            },
            {
                name: "file_name_no_ext",
                type: "boolean"
            }
        ]);
        const { suffix, dataHex, thumbnailDataHex, resType, nftMetaData } = this.payload;
        this.paramsData = {
            data: hexToBytes(dataHex),
            thumbnailData: hexToBytes(thumbnailDataHex)
        };
        const fileHash = utils.bytesToHex(blake2s.blake2s(this.payload.dataHex)).slice(0, 8);
        const file_name_no_ext = `${resType === 0 ? "wp" : "nft"}-${fileHash}-${Math.floor(Date.now() / 1000)}`;
        this.params = {
            extension: suffix,
            data_length: this.paramsData.data.byteLength,
            zoom_data_length: this.paramsData.thumbnailData.byteLength,
            res_type: resType,
            nft_meta_data: nftMetaData,
            file_name_no_ext
        };
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            if (this.payload.resType === hdTransport.Messages.ResourceType.Nft) this.checkUploadNFTSupport();
            const res = yield this.device.commands.typedCall("ResourceUpload", [
                "ResourceRequest",
                "ZoomRequest",
                "Success"
            ], this.params);
            this.postMessage(createUiMessage(UI_REQUEST$1.CLOSE_UI_WINDOW));
            return this.processResourceRequest(res);
        });
    }
}
class DeviceSupportFeatures extends BaseMethod {
    init() {
        this.useDevicePassphraseState = false;
        this.skipForceUpdateCheck = true;
    }
    run() {
        if (!this.device.features) return Promise.reject(hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.RuntimeError, "Device not initialized"));
        const inputPinOnSoftware = supportInputPinOnSoftware(this.device.features);
        const modifyHomescreen = supportModifyHomescreen(this.device.features);
        return Promise.resolve({
            inputPinOnSoftware,
            modifyHomescreen,
            device: this.device.toMessageObject()
        });
    }
}
class DeviceVerify extends BaseMethod {
    init() {
        this.useDevicePassphraseState = false;
        validateParams(this.payload, [
            {
                name: "dataHex",
                type: "hexString"
            }
        ]);
        this.params = {
            data: formatAnyHex(this.payload.dataHex)
        };
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            const deviceType = getDeviceType(this.device.features);
            let response;
            if (deviceType === "classic") {
                const res = yield this.device.commands.typedCall("BixinVerifyDeviceRequest", "BixinVerifyDeviceAck", Object.assign(Object.assign({}, this.params), {
                    data: utils.bytesToHex(sha256.sha256(this.params.data))
                }));
                response = res.message;
            } else {
                const signatureRes = yield this.device.commands.typedCall("SESignMessage", "SEMessageSignature", {
                    message: this.params.data
                });
                const certRes = yield this.device.commands.typedCall("ReadSEPublicCert", "SEPublicCert");
                response = {
                    cert: certRes.message.public_cert,
                    signature: signatureRes.message.signature
                };
            }
            if (response) return Promise.resolve(response);
            return Promise.reject(hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.RuntimeError, "Device not support verify"));
        });
    }
}
class DeviceWipe extends BaseMethod {
    init() {
        this.useDevicePassphraseState = false;
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            const res = yield this.device.commands.typedCall("WipeDevice", "Success");
            return Promise.resolve(res.message);
        });
    }
}
const getBinary = ({ features, updateType, version, isUpdateBootloader })=>__awaiter(void 0, void 0, void 0, function*() {
        const releaseInfo = getInfo({
            features,
            updateType,
            targetVersion: version === null || version === void 0 ? void 0 : version.join(".")
        });
        if (!releaseInfo) throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.RuntimeError, "no firmware found for this device");
        if (version && !semver__default["default"].eq(releaseInfo.version.join("."), version.join("."))) {
            const touchWithoutVersion = getDeviceType(features) === "touch" && !features.onekey_version;
            if (!touchWithoutVersion) throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.RuntimeError, "firmware version mismatch");
        }
        const url = updateType === "ble" ? releaseInfo.webUpdate : isUpdateBootloader ? releaseInfo.bootloaderResource : releaseInfo.url;
        let fw;
        try {
            fw = yield httpRequest(url, "binary");
        } catch (_a) {
            throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.RuntimeError, "Method_FirmwareUpdate_DownloadFailed");
        }
        return Object.assign(Object.assign({}, releaseInfo), {
            binary: fw
        });
    });
const getSysResourceBinary = (url)=>__awaiter(void 0, void 0, void 0, function*() {
        let fw;
        try {
            fw = yield httpRequest(url, "binary");
        } catch (_b) {
            throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.RuntimeError, "Method_FirmwareUpdate_DownloadFailed");
        }
        return {
            binary: fw
        };
    });
const getInfo = ({ features, updateType, targetVersion })=>{
    var _a, _b;
    const deviceType = getDeviceType(features);
    const { deviceMap } = DataManager;
    let firmwareUpdateField = getFirmwareUpdateField(features, updateType);
    if (deviceType === "touch" && targetVersion) {
        if (semver__default["default"].eq(targetVersion, "4.0.0")) firmwareUpdateField = "firmware-v2";
        else if (semver__default["default"].gt(targetVersion, "4.0.0")) firmwareUpdateField = "firmware-v3";
    }
    const releaseInfo = (_b = (_a = deviceMap === null || deviceMap === void 0 ? void 0 : deviceMap[deviceType]) === null || _a === void 0 ? void 0 : _a[firmwareUpdateField]) !== null && _b !== void 0 ? _b : [];
    return findLatestRelease(releaseInfo);
};
const NEW_BOOT_UPRATE_FIRMWARE_VERSION = "2.4.5";
const SESSION_ERROR = "session not found";
const postConfirmationMessage = (device)=>{
    var _a;
    if ((_a = device.features) === null || _a === void 0 ? void 0 : _a.firmware_present) device.emit(DEVICE.BUTTON, device, {
        code: "ButtonRequest_FirmwareUpdate"
    });
};
const postProgressMessage = (device, progress, postMessage)=>{
    postMessage(createUiMessage(UI_REQUEST$1.FIRMWARE_PROGRESS, {
        device: device.toMessageObject(),
        progress
    }));
};
const postProgressTip = (device, message, postMessage)=>{
    postMessage(createUiMessage(UI_REQUEST$1.FIRMWARE_TIP, {
        device: device.toMessageObject(),
        data: {
            message
        }
    }));
};
const waitBleInstall = (updateType)=>__awaiter(void 0, void 0, void 0, function*() {
        if (updateType === "ble") yield wait(10000);
    });
const uploadFirmware = (updateType, typedCall, postMessage, device, { payload })=>__awaiter(void 0, void 0, void 0, function*() {
        const deviceModel = getDeviceModel(device.features);
        if (deviceModel === "model_mini") {
            postConfirmationMessage(device);
            postProgressTip(device, "ConfirmOnDevice", postMessage);
            const eraseCommand = updateType === "firmware" ? "FirmwareErase" : "FirmwareErase_ex";
            const eraseRes = yield typedCall(eraseCommand, "Success", {});
            if (eraseRes.type !== "Success") throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.RuntimeError, "erase firmware error");
            postProgressTip(device, "FirmwareEraseSuccess", postMessage);
            postProgressMessage(device, 0, postMessage);
            const { message, type } = yield typedCall("FirmwareUpload", "Success", {
                payload
            });
            postProgressMessage(device, 100, postMessage);
            yield waitBleInstall(updateType);
            if (type !== "Success") throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.RuntimeError, "install firmware error");
            return message;
        }
        if (deviceModel === "model_touch") {
            if (device.features) {
                const bootloaderVersion = getDeviceBootloaderVersion(device.features);
                if (semver__default["default"].gte(bootloaderVersion.join("."), NEW_BOOT_UPRATE_FIRMWARE_VERSION)) {
                    const response = yield newTouchUpdateProcess(updateType, postMessage, device, {
                        payload
                    });
                    return response.message;
                }
            }
            postConfirmationMessage(device);
            postProgressTip(device, "ConfirmOnDevice", postMessage);
            const length = payload.byteLength;
            let response = yield typedCall("FirmwareErase", [
                "FirmwareRequest",
                "Success"
            ], {
                length
            });
            postProgressTip(device, "FirmwareEraseSuccess", postMessage);
            while(response.type !== "Success"){
                const start = response.message.offset;
                const end = response.message.offset + response.message.length;
                const chunk = payload.slice(start, end);
                if (start > 0) postProgressMessage(device, Math.round(start / length * 100), postMessage);
                response = yield typedCall("FirmwareUpload", [
                    "FirmwareRequest",
                    "Success"
                ], {
                    payload: chunk
                });
                if (response.type === "CallMethodError") throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.RuntimeError, "upload firmware error");
            }
            postProgressMessage(device, 100, postMessage);
            yield waitBleInstall(updateType);
            return response.message;
        }
        throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.RuntimeError, "uploadFirmware: unknown device model");
    });
const newTouchUpdateProcess = (updateType, postMessage, device, { payload })=>__awaiter(void 0, void 0, void 0, function*() {
        let typedCall = device.getCommands().typedCall.bind(device.getCommands());
        postProgressTip(device, "StartTransferData", postMessage);
        const filePath = `0:${updateType === "ble" ? "ble-" : ""}firmware.bin`;
        const env = DataManager.getSettings("env");
        const perPackageSize = env === "react-native" ? 16 : 128;
        const chunkSize = 1024 * perPackageSize;
        const totalChunks = Math.ceil(payload.byteLength / chunkSize);
        let offset = 0;
        for(let i = 0; i < totalChunks; i++){
            const chunkStart = i * chunkSize;
            const chunkEnd = Math.min(chunkStart + chunkSize, payload.byteLength);
            const chunkLength = chunkEnd - chunkStart;
            const chunk = payload.slice(chunkStart, chunkEnd);
            const overwrite = i === 0;
            const progress = Math.round((i + 1) / totalChunks * 100);
            const writeRes = yield emmcFileWriteWithRetry(device, filePath, chunkLength, offset, chunk, overwrite, progress);
            offset += writeRes.message.processed_byte;
            postProgressMessage(device, progress, postMessage);
        }
        postConfirmationMessage(device);
        postProgressTip(device, "ConfirmOnDevice", postMessage);
        postProgressTip(device, "InstallingFirmware", postMessage);
        typedCall = device.getCommands().typedCall.bind(device.getCommands());
        const response = yield typedCall("FirmwareUpdateEmmc", "Success", {
            path: filePath,
            reboot_on_success: true
        });
        return response;
    });
const emmcFileWriteWithRetry = (device, filePath, chunkLength, offset, chunk, overwrite, progress)=>__awaiter(void 0, void 0, void 0, function*() {
        var _a, _b, _c, _d, _e, _f;
        const writeFunc = ()=>__awaiter(void 0, void 0, void 0, function*() {
                var _g;
                const typedCall = device.getCommands().typedCall.bind(device.getCommands());
                const writeRes = yield typedCall("EmmcFileWrite", "EmmcFile", {
                    file: {
                        path: filePath,
                        len: chunkLength,
                        offset,
                        data: chunk
                    },
                    overwrite,
                    append: offset !== 0,
                    ui_percentage: progress
                });
                if (writeRes.type !== "EmmcFile") {
                    if (writeRes.type === "CallMethodError") {
                        if (((_g = writeRes.message.error) !== null && _g !== void 0 ? _g : "").indexOf(SESSION_ERROR) > -1) throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.RuntimeError, SESSION_ERROR);
                    }
                    throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.RuntimeError, "emmc file write chunk once error");
                }
                return writeRes;
            });
        let retryCount = 10;
        while(retryCount > 0)try {
            const result = yield writeFunc();
            return result;
        } catch (error) {
            console.error(`emmcWrite error: `, error);
            retryCount--;
            if (retryCount === 0) throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.RuntimeError, "emmc file write firmware error");
            const env = DataManager.getSettings("env");
            if (env === "react-native") {
                yield wait(3000);
                yield (_a = device.deviceConnector) === null || _a === void 0 ? void 0 : _a.acquire(device.originalDescriptor.id, null, true);
                yield device.initialize();
            } else if (error.message.indexOf(SESSION_ERROR) > -1) {
                const deviceDiff = yield (_b = device.deviceConnector) === null || _b === void 0 ? void 0 : _b.enumerate();
                const devicesDescriptor = (_c = deviceDiff === null || deviceDiff === void 0 ? void 0 : deviceDiff.descriptors) !== null && _c !== void 0 ? _c : [];
                const { deviceList } = yield DevicePool.getDevices(devicesDescriptor, undefined);
                if (deviceList.length === 1 && ((_e = (_d = deviceList[0]) === null || _d === void 0 ? void 0 : _d.features) === null || _e === void 0 ? void 0 : _e.bootloader_mode)) {
                    device.updateFromCache(deviceList[0]);
                    yield device.acquire();
                    device.getCommands().mainId = (_f = device.mainId) !== null && _f !== void 0 ? _f : "";
                }
            }
            yield wait(3000);
        }
    });
const processResourceRequest = (typedCall, res, data)=>__awaiter(void 0, void 0, void 0, function*() {
        if (res.type === "Success") return res.message;
        const { offset, data_length } = res.message;
        if (offset === undefined) throw new Error("offset is undefined");
        const payload = new Uint8Array(data.slice(offset, Math.min(offset + data_length, data.byteLength)));
        const digest = blake2s.blake2s(payload);
        const resourceAckParams = {
            data_chunk: bytesToHex(payload),
            hash: bytesToHex(digest)
        };
        const response = yield typedCall("ResourceAck", [
            "ResourceRequest",
            "Success"
        ], Object.assign({}, resourceAckParams));
        return processResourceRequest(typedCall, response, data);
    });
const INIT_DATA_CHUNK_SIZE = 16384;
const updateResource = (typedCall, fileName, data)=>__awaiter(void 0, void 0, void 0, function*() {
        const chunk = new Uint8Array(data.slice(0, Math.min(INIT_DATA_CHUNK_SIZE, data.byteLength)));
        const digest = blake2s.blake2s(chunk);
        const res = yield typedCall("ResourceUpdate", [
            "ResourceRequest",
            "Success"
        ], {
            file_name: fileName,
            data_length: data.byteLength,
            initial_data_chunk: bytesToHex(chunk),
            hash: bytesToHex(digest)
        });
        return processResourceRequest(typedCall, res, data);
    });
const updateResources = (typedCall, postMessage, device, source)=>__awaiter(void 0, void 0, void 0, function*() {
        postProgressTip(device, "UpdateSysResource", postMessage);
        const zipData = yield JSZip__default["default"].loadAsync(source);
        const files = Object.entries(zipData.files);
        let progress = 0;
        const stepProgress = 100 / files.length;
        for (const [fileName, file] of files){
            const name = fileName.split("/").pop();
            if (!file.dir && fileName.indexOf("__MACOSX") === -1 && name) {
                const data = yield file.async("arraybuffer");
                yield updateResource(typedCall, name, data);
            }
            progress += stepProgress;
            postProgressMessage(device, Math.floor(progress), postMessage);
        }
        postProgressMessage(device, 100, postMessage);
        postProgressTip(device, "UpdateSysResourceSuccess", postMessage);
        return true;
    });
const updateBootloader = (typedCall, postMessage, device, source)=>__awaiter(void 0, void 0, void 0, function*() {
        postProgressTip(device, "UpdateBootloader", postMessage);
        postProgressMessage(device, Math.floor(0), postMessage);
        yield updateResource(typedCall, "bootloader.bin", source);
        postProgressMessage(device, Math.floor(100), postMessage);
        postProgressTip(device, "UpdateBootloaderSuccess", postMessage);
        return true;
    });
class DeviceFullyUploadResource extends BaseMethod {
    constructor(){
        super(...arguments);
        this.checkPromise = null;
        this.postTipMessage = (message)=>{
            this.postMessage(createUiMessage(UI_REQUEST.FIRMWARE_TIP, {
                device: this.device.toMessageObject(),
                data: {
                    message
                }
            }));
        };
    }
    init() {
        this.notAllowDeviceMode = [
            UI_REQUEST.BOOTLOADER,
            UI_REQUEST.INITIALIZE
        ];
        this.requireDeviceMode = [];
        this.useDevicePassphraseState = false;
        this.skipForceUpdateCheck = true;
    }
    isSupportResourceUpdate(features, updateType) {
        if (updateType !== "firmware") return false;
        const deviceType = getDeviceType(features);
        const isTouchMode = deviceType === "touch" || deviceType === "pro";
        const currentVersion = getDeviceFirmwareVersion(features).join(".");
        return isTouchMode && semver__default["default"].gte(currentVersion, "3.4.0");
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            const { device } = this;
            const { features } = device;
            if (!(features === null || features === void 0 ? void 0 : features.bootloader_mode) && features) {
                if (features) {
                    this.postTipMessage("CheckLatestUiResource");
                    const resourceUrl = DataManager.getSysFullResource(features);
                    if (resourceUrl) {
                        this.postTipMessage("DownloadLatestUiResource");
                        const resource = yield getSysResourceBinary(resourceUrl);
                        this.postTipMessage("DownloadLatestUiResourceSuccess");
                        if (resource) yield updateResources(this.device.getCommands().typedCall.bind(this.device.getCommands()), this.postMessage, device, resource.binary);
                    }
                }
            }
        });
    }
}
class DeviceUpdateBootloader extends BaseMethod {
    constructor(){
        super(...arguments);
        this.checkPromise = null;
        this.postTipMessage = (message)=>{
            this.postMessage(createUiMessage(UI_REQUEST.FIRMWARE_TIP, {
                device: this.device.toMessageObject(),
                data: {
                    message
                }
            }));
        };
    }
    init() {
        this.notAllowDeviceMode = [
            UI_REQUEST.BOOTLOADER,
            UI_REQUEST.INITIALIZE
        ];
        this.requireDeviceMode = [];
        this.useDevicePassphraseState = false;
        this.skipForceUpdateCheck = true;
    }
    updateTouchBootloader(device, features) {
        return __awaiter(this, void 0, void 0, function*() {
            if (features && !features.bootloader_mode) {
                if (features && checkNeedUpdateBootForTouch(features)) {
                    this.postTipMessage("CheckLatestUiResource");
                    const resourceUrl = DataManager.getBootloaderResource(features);
                    if (resourceUrl) {
                        this.postTipMessage("DownloadLatestBootloaderResource");
                        const resource = yield getSysResourceBinary(resourceUrl);
                        this.postTipMessage("DownloadLatestBootloaderResourceSuccess");
                        if (resource) {
                            if (!checkBootloaderLength(resource.binary)) throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.CheckDownloadFileError);
                            yield updateBootloader(this.device.getCommands().typedCall.bind(this.device.getCommands()), this.postMessage, device, resource.binary);
                            return Promise.resolve(true);
                        }
                    }
                }
            }
            return Promise.resolve(true);
        });
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            const { device } = this;
            const { features } = device;
            const deviceType = getDeviceType(features);
            if (deviceType === "touch") return this.updateTouchBootloader(device, features);
            return Promise.resolve(true);
        });
    }
}
class FirmwareUpdate extends BaseMethod {
    init() {
        this.notAllowDeviceMode = [
            UI_REQUEST.BOOTLOADER,
            UI_REQUEST.INITIALIZE
        ];
        this.requireDeviceMode = [
            UI_REQUEST.BOOTLOADER
        ];
        this.useDevicePassphraseState = false;
        this.skipForceUpdateCheck = true;
        const { payload } = this;
        validateParams(payload, [
            {
                name: "version",
                type: "array"
            },
            {
                name: "binary",
                type: "buffer"
            }
        ]);
        if (!payload.updateType) throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.CallMethodInvalidParameter, "updateType is required");
        this.params = {
            updateType: payload.updateType
        };
        if ("version" in payload) this.params = Object.assign(Object.assign({}, this.params), {
            version: payload.version
        });
        if ("binary" in payload) this.params = Object.assign(Object.assign({}, this.params), {
            binary: payload.binary
        });
    }
    run() {
        var _a;
        return __awaiter(this, void 0, void 0, function*() {
            const { device, params } = this;
            let binary;
            try {
                if (params.binary) binary = this.params.binary;
                else {
                    if (!device.features) throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.RuntimeError, "no features found for this device");
                    const firmware = yield getBinary({
                        features: device.features,
                        version: params.version,
                        updateType: params.updateType
                    });
                    binary = firmware.binary;
                }
            } catch (err) {
                throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.FirmwareUpdateDownloadFailed, (_a = err.message) !== null && _a !== void 0 ? _a : err);
            }
            return uploadFirmware(params.updateType, this.device.getCommands().typedCall.bind(this.device.getCommands()), this.postMessage, device, {
                payload: binary
            });
        });
    }
}
const Log$3 = getLogger(exports.LoggerNames.Method);
class FirmwareUpdateV2 extends BaseMethod {
    constructor(){
        super(...arguments);
        this.checkPromise = null;
        this.postTipMessage = (message)=>{
            this.postMessage(createUiMessage(UI_REQUEST.FIRMWARE_TIP, {
                device: this.device.toMessageObject(),
                data: {
                    message
                }
            }));
        };
    }
    init() {
        this.notAllowDeviceMode = [
            UI_REQUEST.BOOTLOADER,
            UI_REQUEST.INITIALIZE
        ];
        this.requireDeviceMode = [];
        this.useDevicePassphraseState = false;
        this.skipForceUpdateCheck = true;
        const { payload } = this;
        validateParams(payload, [
            {
                name: "version",
                type: "array"
            },
            {
                name: "binary",
                type: "buffer"
            },
            {
                name: "forcedUpdateRes",
                type: "boolean"
            },
            {
                name: "platform",
                type: "string",
                required: true
            }
        ]);
        if (!payload.updateType) throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.CallMethodInvalidParameter, "updateType is required");
        this.params = {
            updateType: payload.updateType,
            forcedUpdateRes: payload.forcedUpdateRes,
            isUpdateBootloader: payload.isUpdateBootloader
        };
        if ("version" in payload) this.params = Object.assign(Object.assign({}, this.params), {
            version: payload.version
        });
        if ("binary" in payload) this.params = Object.assign(Object.assign({}, this.params), {
            binary: payload.binary
        });
    }
    checkDeviceToBootloader(connectId) {
        this.checkPromise = hdShared.createDeferred();
        const env = DataManager.getSettings("env");
        const isBleReconnect = connectId && env === "react-native";
        Log$3.log("FirmwareUpdateV2 [checkDeviceToBootloader] isBleReconnect: ", isBleReconnect);
        const intervalTimer = setInterval(()=>__awaiter(this, void 0, void 0, function*() {
                var _a, _b, _c, _d, _e, _f, _g, _h;
                if (isBleReconnect) try {
                    yield (_a = this.device.deviceConnector) === null || _a === void 0 ? void 0 : _a.acquire(this.device.originalDescriptor.id, null, true);
                    yield this.device.initialize();
                    if ((_b = this.device.features) === null || _b === void 0 ? void 0 : _b.bootloader_mode) {
                        clearInterval(intervalTimer);
                        (_c = this.checkPromise) === null || _c === void 0 || _c.resolve(true);
                    }
                } catch (e) {
                    Log$3.log("catch Bluetooth error when device is restarting: ", e);
                }
                else {
                    const deviceDiff = yield (_d = this.device.deviceConnector) === null || _d === void 0 ? void 0 : _d.enumerate();
                    const devicesDescriptor = (_e = deviceDiff === null || deviceDiff === void 0 ? void 0 : deviceDiff.descriptors) !== null && _e !== void 0 ? _e : [];
                    const { deviceList } = yield DevicePool.getDevices(devicesDescriptor, connectId);
                    if (deviceList.length === 1 && ((_g = (_f = deviceList[0]) === null || _f === void 0 ? void 0 : _f.features) === null || _g === void 0 ? void 0 : _g.bootloader_mode)) {
                        this.device.updateFromCache(deviceList[0]);
                        this.device.commands.disposed = false;
                        clearInterval(intervalTimer);
                        (_h = this.checkPromise) === null || _h === void 0 || _h.resolve(true);
                    }
                }
            }), isBleReconnect ? 3000 : 2000);
        setTimeout(()=>{
            if (this.checkPromise) {
                clearInterval(intervalTimer);
                this.checkPromise.reject(new Error());
            }
        }, 30000);
    }
    isEnteredManuallyBoot(features) {
        const deviceType = getDeviceType(features);
        const isMini = deviceType === "mini";
        const isBoot183ClassicUpBle = this.params.updateType === "firmware" && deviceType === "classic" && features.bootloader_version === "1.8.3";
        return isMini || isBoot183ClassicUpBle;
    }
    isSupportResourceUpdate(features, updateType) {
        if (updateType !== "firmware") return false;
        const deviceType = getDeviceType(features);
        const isTouchMode = deviceType === "touch" || deviceType === "pro";
        const currentVersion = getDeviceFirmwareVersion(features).join(".");
        return isTouchMode && semver__default["default"].gte(currentVersion, "3.2.0");
    }
    checkVersionForCopyTouchResource(features) {
        var _a;
        if (!features) return;
        const deviceType = getDeviceType(features);
        const currentVersion = getDeviceFirmwareVersion(features).join(".");
        const targetVersion = (_a = this.params.version) === null || _a === void 0 ? void 0 : _a.join(".");
        const { updateType } = this.params;
        const releaseInfo = getInfo({
            features,
            updateType
        });
        if (!releaseInfo) return;
        const { fullResourceRange } = releaseInfo;
        if (!fullResourceRange) return;
        const [minVersion, limitVersion] = fullResourceRange;
        if (deviceType === "touch" && updateType === "firmware" && targetVersion) {
            if (semver__default["default"].lt(currentVersion, minVersion) && semver__default["default"].gte(targetVersion, limitVersion) && this.payload.platform !== "desktop") throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.UseDesktopToUpdateFirmware);
        }
    }
    run() {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function*() {
            const { device, params } = this;
            const { features, commands } = device;
            const deviceType = getDeviceType(features);
            this.checkVersionForCopyTouchResource(features);
            if (!(features === null || features === void 0 ? void 0 : features.bootloader_mode) && features) {
                const uuid = getDeviceUUID(features);
                if (this.isEnteredManuallyBoot(features)) return Promise.reject(hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.FirmwareUpdateManuallyEnterBoot));
                if (features && this.isSupportResourceUpdate(features, params.updateType)) {
                    this.postTipMessage("CheckLatestUiResource");
                    const resourceUrl = DataManager.getSysResourcesLatestRelease(features, params.forcedUpdateRes);
                    if (resourceUrl) {
                        this.postTipMessage("DownloadLatestUiResource");
                        const resource = yield getSysResourceBinary(resourceUrl);
                        this.postTipMessage("DownloadLatestUiResourceSuccess");
                        if (resource) yield updateResources(this.device.getCommands().typedCall.bind(this.device.getCommands()), this.postMessage, device, resource.binary);
                    }
                }
                try {
                    this.postTipMessage("AutoRebootToBootloader");
                    const bootRes = yield commands.typedCall("DeviceBackToBoot", "Success");
                    if (bootRes.type === "CallMethodError") throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.FirmwareUpdateAutoEnterBootFailure);
                    this.postTipMessage("GoToBootloaderSuccess");
                    this.checkDeviceToBootloader(this.payload.connectId);
                    if (deviceType === "classic") DevicePool.clearDeviceCache(uuid);
                    delete DevicePool.devicesCache[""];
                    yield (_a = this.checkPromise) === null || _a === void 0 ? void 0 : _a.promise;
                    this.checkPromise = null;
                    yield wait(1500);
                } catch (e) {
                    if (e instanceof hdShared.HardwareError) return Promise.reject(e);
                    console.log("auto go to bootloader mode failed: ", e);
                    return Promise.reject(hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.FirmwareUpdateAutoEnterBootFailure));
                }
            }
            let binary;
            try {
                if (params.binary) binary = this.params.binary;
                else {
                    if (!device.features) throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.RuntimeError, "no features found for this device");
                    this.postTipMessage("DownloadFirmware");
                    const firmware = yield getBinary({
                        features: device.features,
                        version: params.version,
                        updateType: params.updateType,
                        isUpdateBootloader: params.isUpdateBootloader
                    });
                    binary = firmware.binary;
                    this.postTipMessage("DownloadFirmwareSuccess");
                }
            } catch (err) {
                throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.FirmwareUpdateDownloadFailed, (_b = err.message) !== null && _b !== void 0 ? _b : err);
            }
            yield this.device.acquire();
            return uploadFirmware(params.updateType, this.device.getCommands().typedCall.bind(this.device.getCommands()), this.postMessage, device, {
                payload: binary
            });
        });
    }
}
const Log$2 = getLogger(exports.LoggerNames.Method);
class RequestWebUsbDevice extends BaseMethod {
    init() {
        this.useDevice = false;
        this.useDevicePassphraseState = false;
        this.skipForceUpdateCheck = true;
    }
    run() {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function*() {
            yield TransportManager.configure();
            const env = DataManager.getSettings("env");
            if (env !== "webusb") return Promise.reject(hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.RuntimeError, "Not webusb environment"));
            try {
                const deviceDiff = yield (_a = this.connector) === null || _a === void 0 ? void 0 : _a.enumerate();
                const devicesDescriptor = (_b = deviceDiff === null || deviceDiff === void 0 ? void 0 : deviceDiff.descriptors) !== null && _b !== void 0 ? _b : [];
                const { deviceList } = yield DevicePool.getDevices(devicesDescriptor);
                if (deviceList.length > 0) return {
                    device: deviceList[0].toMessageObject()
                };
                return yield Promise.reject(hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.RuntimeError, "Please select the device to connect"));
            } catch (error) {
                Log$2.debug(error);
                return Promise.reject(hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.RuntimeError, "Please select the device to connect"));
            }
        });
    }
}
class CipherKeyValue extends BaseMethod {
    constructor(){
        super(...arguments);
        this.hasBundle = false;
    }
    init() {
        var _a;
        this.checkDeviceId = true;
        this.notAllowDeviceMode = [
            ...this.notAllowDeviceMode,
            UI_REQUEST.INITIALIZE
        ];
        this.hasBundle = !!((_a = this.payload) === null || _a === void 0 ? void 0 : _a.bundle);
        const payload = this.hasBundle ? this.payload : {
            bundle: [
                this.payload
            ]
        };
        validateParams(payload, [
            {
                name: "bundle",
                type: "array"
            }
        ]);
        this.params = [];
        payload.bundle.forEach((batch)=>{
            const addressN = validatePath(batch.path);
            validateParams(batch, [
                {
                    name: "path",
                    required: true
                },
                {
                    name: "key",
                    type: "string"
                },
                {
                    name: "value",
                    type: "hexString"
                },
                {
                    name: "encrypt",
                    type: "boolean"
                },
                {
                    name: "askOnEncrypt",
                    type: "boolean"
                },
                {
                    name: "askOnDecrypt",
                    type: "boolean"
                },
                {
                    name: "iv",
                    type: "hexString"
                }
            ]);
            this.params.push({
                address_n: addressN,
                key: batch.key,
                value: formatAnyHex(batch.value),
                encrypt: batch.encrypt,
                ask_on_encrypt: batch.askOnEncrypt,
                ask_on_decrypt: batch.askOnDecrypt,
                iv: formatAnyHex(batch.iv)
            });
        });
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            const responses = [];
            for(let i = 0; i < this.params.length; i++){
                const param = this.params[i];
                const res = yield this.device.commands.typedCall("CipherKeyValue", "CipheredKeyValue", Object.assign({}, param));
                responses.push(Object.assign({
                    path: serializedPath(param.address_n)
                }, res.message));
            }
            return Promise.resolve(this.hasBundle ? responses : responses[0]);
        });
    }
}
var bitcoin = [
    {
        name: "Bitcoin",
        label: "BTC",
        slip44: 0
    },
    {
        name: "Regtest",
        label: "REGTEST",
        slip44: 1
    },
    {
        name: "Testnet",
        label: "TEST",
        slip44: 1
    },
    {
        name: "Actinium",
        label: "ACM",
        slip44: 228
    },
    {
        name: "Axe",
        label: "AXE",
        slip44: 4242
    },
    {
        name: "Bcash",
        label: "BCH",
        slip44: 145
    },
    {
        name: "Bitcore",
        label: "BTX",
        slip44: 160
    },
    {
        name: "Dash",
        label: "DASH",
        slip44: 5
    },
    {
        name: "Dash Testnet",
        label: "tDASH",
        slip44: 1
    },
    {
        name: "Decred",
        label: "DCR",
        slip44: 42
    },
    {
        name: "Decred Testnet",
        label: "TDCR",
        slip44: 1
    },
    {
        name: "DigiByte",
        label: "DGB",
        slip44: 20
    },
    {
        name: "Dogecoin",
        label: "DOGE",
        slip44: 3
    },
    {
        name: "Feathercoin",
        label: "FTC",
        slip44: 8
    },
    {
        name: "Firo",
        label: "FIRO",
        slip44: 136
    },
    {
        name: "Firo Testnet",
        label: "tFIRO",
        slip44: 1
    },
    {
        name: "Fujicoin",
        label: "FJC",
        slip44: 75
    },
    {
        name: "GameCredits",
        label: "GAME",
        slip44: 101
    },
    {
        name: "Komodo",
        label: "KMD",
        slip44: 141
    },
    {
        name: "Koto",
        label: "KOTO",
        slip44: 510
    },
    {
        name: "Litecoin",
        label: "LTC",
        slip44: 2
    },
    {
        name: "Litecoin Testnet",
        label: "tLTC",
        slip44: 1
    },
    {
        name: "Monacoin",
        label: "MONA",
        slip44: 22
    },
    {
        name: "MonetaryUnit",
        label: "MUE",
        slip44: 31
    },
    {
        name: "NIX",
        label: "NIX",
        slip44: 400
    },
    {
        name: "Namecoin",
        label: "NMC",
        slip44: 7
    },
    {
        name: "Peercoin",
        label: "PPC",
        slip44: 6
    },
    {
        name: "Peercoin Testnet",
        label: "tPPC",
        slip44: 1
    },
    {
        name: "Polis",
        label: "POLIS",
        slip44: 1997
    },
    {
        name: "Primecoin",
        label: "XPM",
        slip44: 24
    },
    {
        name: "Ravencoin",
        label: "RVN",
        slip44: 175
    },
    {
        name: "Ritocoin",
        label: "RITO",
        slip44: 19169
    },
    {
        name: "Stakenet",
        label: "XSN",
        slip44: 199
    },
    {
        name: "Syscoin",
        label: "SYS",
        slip44: 57
    },
    {
        name: "Unobtanium",
        label: "UNO",
        slip44: 92
    },
    {
        name: "Verge",
        label: "XVG",
        slip44: 77
    },
    {
        name: "Vertcoin",
        label: "VTC",
        slip44: 28
    },
    {
        name: "Viacoin",
        label: "VIA",
        slip44: 14
    },
    {
        name: "ZCore",
        label: "ZCR",
        slip44: 428
    },
    {
        name: "Zcash",
        label: "ZEC",
        slip44: 133
    },
    {
        name: "Zcash Testnet",
        label: "TAZ",
        slip44: 1
    }
];
const getCoinInfo = (path, coin)=>{
    let coinInfo;
    if (coin) {
        const coinName = coin.toLowerCase();
        coinInfo = bitcoin.find((c)=>c.name.toLowerCase() === coinName || c.label.toLowerCase() === coinName);
    } else if (path) {
        const slip44 = fromHardened(path[1]);
        coinInfo = bitcoin.find((c)=>c.slip44 === slip44);
    }
    if (!coinInfo) {
        if (coin) throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.CallMethodInvalidParameter, `Invalid coin name: ${coin}`);
        else if (path) throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.CallMethodInvalidParameter, `Invalid path: ${path[0]}`);
        else throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.CallMethodInvalidParameter);
    }
    return coinInfo;
};
const getCoinAndScriptType = (path, coin, multisig)=>{
    const coinName = getCoinInfo(path, coin).name;
    let isMultisig = multisig;
    if (isMultisig === undefined) isMultisig = isMultisigPath(path);
    let scriptType = getScriptType(path);
    if (scriptType === "SPENDMULTISIG" && !isMultisig) scriptType = "SPENDADDRESS";
    return {
        coinName,
        scriptType: scriptType !== null && scriptType !== void 0 ? scriptType : "SPENDADDRESS"
    };
};
class BTCGetAddress extends BaseMethod {
    constructor(){
        super(...arguments);
        this.hasBundle = false;
    }
    init() {
        this.checkDeviceId = true;
        this.notAllowDeviceMode = [
            ...this.notAllowDeviceMode,
            UI_REQUEST.INITIALIZE
        ];
        this.hasBundle = Object.prototype.hasOwnProperty.call(this.payload, "bundle");
        const payload = this.hasBundle ? this.payload : {
            bundle: [
                this.payload
            ]
        };
        validateParams(payload, [
            {
                name: "bundle",
                type: "array"
            }
        ]);
        this.params = [];
        payload.bundle.forEach((batch)=>{
            var _a;
            const addressN = validatePath(batch.path, 1);
            validateParams(batch, [
                {
                    name: "path",
                    required: true
                },
                {
                    name: "coin",
                    type: "string"
                },
                {
                    name: "showOnOneKey",
                    type: "boolean"
                },
                {
                    name: "multisig",
                    type: "object"
                },
                {
                    name: "scriptType",
                    type: "string"
                }
            ]);
            const showOnOneKey = (_a = batch.showOnOneKey) !== null && _a !== void 0 ? _a : true;
            const { multisig, coin } = batch;
            let { scriptType } = batch;
            if (!scriptType) {
                scriptType = getScriptType(addressN);
                if (scriptType === "SPENDMULTISIG" && !multisig) scriptType = "SPENDADDRESS";
            }
            const coinName = getCoinInfo(addressN, coin).name;
            this.params.push({
                address_n: addressN,
                show_display: showOnOneKey,
                coin_name: coinName,
                multisig,
                script_type: scriptType || "SPENDADDRESS"
            });
        });
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            const responses = [];
            for(let i = 0; i < this.params.length; i++){
                const param = this.params[i];
                const res = yield this.device.commands.typedCall("GetAddress", "Address", Object.assign({}, param));
                const path = serializedPath(param.address_n);
                responses.push(Object.assign({
                    path
                }, res.message));
                this.postPreviousAddressMessage({
                    address: res.message.address,
                    path
                });
            }
            return Promise.resolve(this.hasBundle ? responses : responses[0]);
        });
    }
}
class BTCGetPublicKey extends BaseMethod {
    constructor(){
        super(...arguments);
        this.hasBundle = false;
    }
    init() {
        this.checkDeviceId = true;
        this.notAllowDeviceMode = [
            ...this.notAllowDeviceMode,
            UI_REQUEST.INITIALIZE
        ];
        this.hasBundle = Object.prototype.hasOwnProperty.call(this.payload, "bundle");
        const payload = this.hasBundle ? this.payload : {
            bundle: [
                this.payload
            ]
        };
        validateParams(payload, [
            {
                name: "bundle",
                type: "array"
            }
        ]);
        this.params = [];
        payload.bundle.forEach((batch)=>{
            var _a;
            const addressN = validatePath(batch.path, 1);
            validateParams(batch, [
                {
                    name: "path",
                    required: true
                },
                {
                    name: "coin",
                    type: "string"
                },
                {
                    name: "showOnOneKey",
                    type: "boolean"
                },
                {
                    name: "scriptType",
                    type: "string"
                }
            ]);
            const showOnOneKey = (_a = batch.showOnOneKey) !== null && _a !== void 0 ? _a : true;
            const { multisig, coin } = batch;
            let { scriptType } = batch;
            if (!scriptType) {
                scriptType = getScriptType(addressN);
                if (scriptType === "SPENDMULTISIG" && !multisig) scriptType = "SPENDADDRESS";
            }
            const coinName = getCoinInfo(addressN, coin).name;
            this.params.push({
                address_n: addressN,
                show_display: showOnOneKey,
                coin_name: coinName,
                script_type: scriptType || "SPENDADDRESS"
            });
        });
    }
    isBtcNetwork(param) {
        return param.coin_name === "Testnet" || param.coin_name === "Bitcoin";
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            const responses = [];
            for(let i = 0; i < this.params.length; i++){
                const param = this.params[i];
                const res = yield this.device.commands.typedCall("GetPublicKey", "PublicKey", Object.assign({}, param));
                const response = Object.assign(Object.assign({
                    path: serializedPath(param.address_n)
                }, res.message), {
                    xpubSegwit: res.message.xpub
                });
                if (this.isBtcNetwork(param) && isTaprootPath(param.address_n)) {
                    const fingerprint = Number(response.root_fingerprint || 0).toString(16).padStart(8, "0");
                    const descriptorPath = `${fingerprint}${response.path.substring(1)}`;
                    response.xpubSegwit = `tr([${descriptorPath}]${response.xpub}/<0;1>/*)`;
                }
                responses.push(response);
            }
            return Promise.resolve(this.hasBundle ? responses : responses[0]);
        });
    }
}
class BTCSignMessage extends BaseMethod {
    init() {
        this.checkDeviceId = true;
        this.notAllowDeviceMode = [
            ...this.notAllowDeviceMode,
            UI_REQUEST.INITIALIZE
        ];
        validateParams(this.payload, [
            {
                name: "path",
                required: true
            },
            {
                name: "messageHex",
                type: "hexString",
                required: true
            },
            {
                name: "coin",
                type: "string"
            }
        ]);
        const { path, messageHex, coin } = this.payload;
        const addressN = validatePath(path);
        const { coinName, scriptType } = getCoinAndScriptType(addressN, coin, false);
        this.params = {
            address_n: addressN,
            message: formatAnyHex(messageHex),
            coin_name: coinName,
            script_type: scriptType
        };
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            const res = yield this.device.commands.typedCall("SignMessage", "MessageSignature", Object.assign({}, this.params));
            return Promise.resolve(res.message);
        });
    }
}
const requestPrevTxInfo$1 = ({ typedCall, txRequest: { request_type, details }, refTxs })=>{
    const { tx_hash } = details;
    if (!tx_hash) throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.RuntimeError, "requestPrevTxInfo: unknown details.tx_hash");
    const tx = refTxs[tx_hash.toLowerCase()];
    if (!tx) throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.RuntimeError, `requestPrevTxInfo: Requested unknown tx: ${tx_hash}`);
    if (request_type === "TXINPUT") {
        if (!tx.bin_outputs) throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.RuntimeError, `requestPrevTxInfo: Requested unknown TXINPUT: ${tx_hash}`);
        return typedCall("TxAckPrevInput", "TxRequest", {
            tx: {
                input: tx.inputs[details.request_index]
            }
        });
    }
    if (request_type === "TXOUTPUT") {
        if (!tx.bin_outputs) throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.RuntimeError, `requestPrevTxInfo: Requested unknown TXOUTPUT: ${tx_hash}`);
        return typedCall("TxAckPrevOutput", "TxRequest", {
            tx: {
                output: tx.bin_outputs[details.request_index]
            }
        });
    }
    if (request_type === "TXORIGINPUT") {
        if (!tx.outputs) throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.RuntimeError, `requestPrevTxInfo: Requested unknown TXORIGINPUT: ${tx_hash}`);
        return typedCall("TxAckInput", "TxRequest", {
            tx: {
                input: tx.inputs[details.request_index]
            }
        });
    }
    if (request_type === "TXORIGOUTPUT") {
        if (!tx.outputs) throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.RuntimeError, `requestPrevTxInfo: Requested unknown TXORIGOUTPUT: ${tx_hash}`);
        return typedCall("TxAckOutput", "TxRequest", {
            tx: {
                output: tx.outputs[details.request_index]
            }
        });
    }
    if (request_type === "TXEXTRADATA") {
        if (typeof details.extra_data_len !== "number") throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.RuntimeError, "requestPrevTxInfo: Missing extra_data_len");
        if (typeof details.extra_data_offset !== "number") throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.RuntimeError, "requestPrevTxInfo: Missing extra_data_offset");
        if (typeof tx.extra_data !== "string") throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.RuntimeError, `requestPrevTxInfo: No extra data for transaction ${tx.hash}`);
        const data = tx.extra_data;
        const dataLen = details.extra_data_len;
        const dataOffset = details.extra_data_offset;
        const extra_data_chunk = data.substring(dataOffset * 2, (dataOffset + dataLen) * 2);
        return typedCall("TxAckPrevExtraData", "TxRequest", {
            tx: {
                extra_data_chunk
            }
        });
    }
    if (request_type === "TXMETA") {
        const data = tx.extra_data;
        const meta = {
            version: tx.version,
            lock_time: tx.lock_time,
            inputs_count: tx.inputs.length,
            outputs_count: tx.outputs ? tx.outputs.length : tx.bin_outputs.length,
            timestamp: tx.timestamp,
            version_group_id: tx.version_group_id,
            expiry: tx.expiry,
            branch_id: tx.branch_id,
            extra_data_len: data ? data.length / 2 : undefined
        };
        return typedCall("TxAckPrevMeta", "TxRequest", {
            tx: meta
        });
    }
    throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.RuntimeError, `requestPrevTxInfo: Unknown request type: ${request_type}`);
};
const requestSignedTxInfo$1 = ({ typedCall, txRequest: { request_type, details }, inputs, outputs })=>{
    if (request_type === "TXINPUT") return typedCall("TxAckInput", "TxRequest", {
        tx: {
            input: inputs[details.request_index]
        }
    });
    if (request_type === "TXOUTPUT") return typedCall("TxAckOutput", "TxRequest", {
        tx: {
            output: outputs[details.request_index]
        }
    });
    if (request_type === "TXMETA") throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.RuntimeError, "requestSignedTxInfo: Cannot read TXMETA from signed transaction");
    if (request_type === "TXEXTRADATA") throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.RuntimeError, "requestSignedTxInfo: Cannot read TXEXTRADATA from signed transaction");
    throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.RuntimeError, `requestSignedTxInfo: Unknown request type: ${request_type}`);
};
const requestTxAck$1 = (props)=>{
    const { tx_hash } = props.txRequest.details;
    if (tx_hash) return requestPrevTxInfo$1(props);
    return requestSignedTxInfo$1(props);
};
const saveTxSignatures$1 = (serializedTx, signatures, txRequest)=>{
    if (!txRequest) return;
    const { signature_index, signature, serialized_tx } = txRequest;
    if (serialized_tx) serializedTx.push(serialized_tx);
    if (typeof signature_index === "number") {
        if (!signature) throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.RuntimeError, "saveTxSignatures: Unexpected null in trezor:TxRequestSerialized signature.");
        signatures[signature_index] = signature;
    }
};
const processTxRequest$2 = (props)=>__awaiter(void 0, void 0, void 0, function*() {
        const { typedCall, txRequest, refTxs, inputs, outputs, serializedTx, signatures } = props;
        saveTxSignatures$1(serializedTx, signatures, txRequest.serialized);
        if (txRequest.request_type === "TXFINISHED") return Promise.resolve({
            signatures,
            serializedTx: serializedTx.join("")
        });
        const { message } = yield requestTxAck$1(props);
        return processTxRequest$2({
            typedCall,
            txRequest: message,
            refTxs,
            inputs,
            outputs,
            serializedTx,
            signatures
        });
    });
var signtx = (typedCall, inputs, outputs, refTxsArray, options, coinName)=>__awaiter(void 0, void 0, void 0, function*() {
        const refTxs = {};
        refTxsArray.forEach((tx)=>{
            refTxs[tx.hash.toLowerCase()] = tx;
        });
        const { message } = yield typedCall("SignTx", "TxRequest", Object.assign(Object.assign({}, options), {
            inputs_count: inputs.length,
            outputs_count: outputs.length,
            coin_name: coinName
        }));
        return processTxRequest$2({
            typedCall,
            txRequest: message,
            refTxs,
            inputs,
            outputs,
            serializedTx: [],
            signatures: []
        });
    });
const requestPrevTxInfo = ({ txRequest: { request_type, details }, refTxs })=>{
    const { tx_hash } = details;
    if (!tx_hash) throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.RuntimeError, "requestPrevTxInfo: unknown details.tx_hash");
    const tx = refTxs[tx_hash.toLowerCase()];
    if (!tx) throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.RuntimeError, `requestPrevTxInfo: Requested unknown tx: ${tx_hash}`);
    if (!tx.bin_outputs) throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.RuntimeError, `requestPrevTxInfo: bin_outputs not set tx: ${tx_hash}`);
    if (request_type === "TXINPUT") return {
        inputs: [
            tx.inputs[details.request_index]
        ]
    };
    if (request_type === "TXOUTPUT") return {
        bin_outputs: [
            tx.bin_outputs[details.request_index]
        ]
    };
    if (request_type === "TXEXTRADATA") {
        if (typeof details.extra_data_len !== "number") throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.RuntimeError, "requestPrevTxInfo: Missing extra_data_len");
        if (typeof details.extra_data_offset !== "number") throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.RuntimeError, "requestPrevTxInfo: Missing extra_data_offset");
        if (typeof tx.extra_data !== "string") throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.RuntimeError, `requestPrevTxInfo: No extra data for transaction ${tx.hash}`);
        const data = tx.extra_data;
        const dataLen = details.extra_data_len;
        const dataOffset = details.extra_data_offset;
        const extra_data = data.substring(dataOffset * 2, (dataOffset + dataLen) * 2);
        return {
            extra_data
        };
    }
    if (request_type === "TXMETA") {
        const data = tx.extra_data;
        const meta = {
            version: tx.version,
            lock_time: tx.lock_time,
            inputs_cnt: tx.inputs.length,
            outputs_cnt: tx.bin_outputs.length,
            timestamp: tx.timestamp,
            version_group_id: tx.version_group_id,
            expiry: tx.expiry,
            branch_id: tx.branch_id
        };
        if (typeof data === "string" && data.length !== 0) return Object.assign(Object.assign({}, meta), {
            extra_data_len: data.length / 2
        });
        return meta;
    }
    throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.RuntimeError, `requestPrevTxInfo: Unknown request type: ${request_type}`);
};
const requestSignedTxInfo = ({ txRequest: { request_type, details }, inputs, outputs })=>{
    if (request_type === "TXINPUT") return {
        inputs: [
            inputs[details.request_index]
        ]
    };
    if (request_type === "TXOUTPUT") return {
        outputs: [
            outputs[details.request_index]
        ]
    };
    if (request_type === "TXMETA") throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.RuntimeError, "requestSignedTxInfo: Cannot read TXMETA from signed transaction");
    if (request_type === "TXEXTRADATA") throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.RuntimeError, "requestSignedTxInfo: Cannot read TXEXTRADATA from signed transaction");
    throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.RuntimeError, `requestSignedTxInfo: Unknown request type: ${request_type}`);
};
const requestTxAck = (props)=>{
    const { tx_hash } = props.txRequest.details;
    if (tx_hash) return requestPrevTxInfo(props);
    return requestSignedTxInfo(props);
};
const saveTxSignatures = (serializedTx, signatures, txRequest)=>{
    if (!txRequest) return;
    const { signature_index, signature, serialized_tx } = txRequest;
    if (serialized_tx) serializedTx.push(serialized_tx);
    if (typeof signature_index === "number") {
        if (!signature) throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.RuntimeError, "saveTxSignatures: Unexpected null in oneKey:TxRequestSerialized signature.");
        signatures[signature_index] = signature;
    }
};
const processTxRequest$1 = (props)=>__awaiter(void 0, void 0, void 0, function*() {
        const { typedCall, txRequest, refTxs, inputs, outputs, serializedTx, signatures } = props;
        saveTxSignatures(serializedTx, signatures, txRequest.serialized);
        if (txRequest.request_type === "TXFINISHED") return Promise.resolve({
            signatures,
            serializedTx: serializedTx.join("")
        });
        const txAck = requestTxAck(props);
        const { message } = yield typedCall("TxAck", "TxRequest", {
            tx: txAck
        });
        return processTxRequest$1({
            typedCall,
            txRequest: message,
            refTxs,
            inputs,
            outputs,
            serializedTx,
            signatures
        });
    });
var signtxLegacy = (typedCall, inputs, outputs, refTxsArray, options, coinName)=>__awaiter(void 0, void 0, void 0, function*() {
        const refTxs = {};
        refTxsArray.forEach((tx)=>{
            refTxs[tx.hash.toLowerCase()] = tx;
        });
        const { message } = yield typedCall("SignTx", "TxRequest", Object.assign(Object.assign({}, options), {
            inputs_count: inputs.length,
            outputs_count: outputs.length,
            coin_name: coinName
        }));
        return processTxRequest$1({
            typedCall,
            txRequest: message,
            refTxs,
            inputs,
            outputs,
            serializedTx: [],
            signatures: []
        });
    });
class BTCSignTransaction extends BaseMethod {
    init() {
        this.checkDeviceId = true;
        this.notAllowDeviceMode = [
            ...this.notAllowDeviceMode,
            UI_REQUEST.INITIALIZE
        ];
        validateParams(this.payload, [
            {
                name: "coin",
                type: "string",
                required: true
            },
            {
                name: "inputs",
                type: "array",
                required: true
            },
            {
                name: "outputs",
                type: "array",
                required: true
            },
            {
                name: "refTxs",
                type: "array",
                required: true,
                allowEmpty: true
            },
            {
                name: "locktime",
                type: "number"
            },
            {
                name: "version",
                type: "number"
            },
            {
                name: "expiry",
                type: "number"
            },
            {
                name: "overwintered",
                type: "boolean"
            },
            {
                name: "versionGroupId",
                type: "number"
            },
            {
                name: "branchId",
                type: "number"
            },
            {
                name: "timestamp",
                type: "number"
            }
        ]);
        this.payload.refTxs.forEach((tx)=>{
            validateParams(tx, [
                {
                    name: "hash",
                    type: "hexString",
                    required: true
                },
                {
                    name: "inputs",
                    type: "array",
                    required: true
                },
                {
                    name: "bin_outputs",
                    type: "array",
                    required: !Array.isArray(tx.outputs)
                },
                {
                    name: "outputs",
                    type: "array"
                },
                {
                    name: "version",
                    type: "number",
                    required: true
                },
                {
                    name: "lock_time",
                    type: "number",
                    required: true
                },
                {
                    name: "extra_data",
                    type: "string"
                },
                {
                    name: "timestamp",
                    type: "number"
                },
                {
                    name: "version_group_id",
                    type: "number"
                }
            ]);
        });
        this.payload.inputs.forEach((input)=>{
            validatePath(input.address_n);
            const useAmount = isSegwitPath(input.address_n);
            validateParams(input, [
                {
                    name: "prev_hash",
                    type: "hexString",
                    required: true
                },
                {
                    name: "prev_index",
                    type: "number",
                    required: true
                },
                {
                    name: "script_type",
                    type: "string"
                },
                {
                    name: "amount",
                    type: "string",
                    required: useAmount
                },
                {
                    name: "sequence",
                    type: "number"
                },
                {
                    name: "multisig",
                    type: "object"
                }
            ]);
        });
        this.payload.outputs.forEach((output)=>{
            validateParams(output, [
                {
                    name: "address_n",
                    type: "array"
                },
                {
                    name: "address",
                    type: "string"
                },
                {
                    name: "amount",
                    type: "string"
                },
                {
                    name: "op_return_data",
                    type: "string"
                },
                {
                    name: "multisig",
                    type: "object"
                }
            ]);
            if (Object.prototype.hasOwnProperty.call(output, "address_n") && Object.prototype.hasOwnProperty.call(output, "address")) throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.CallMethodInvalidParameter, "Cannot use address and address_n in one output");
            if (output.address_n) {
                const scriptType = getOutputScriptType(output.address_n);
                if (output.script_type !== scriptType) throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.CallMethodInvalidParameter, `Output change script_type should be set to ${scriptType}`);
            }
        });
        const { inputs, outputs, refTxs, account, coin } = this.payload;
        const coinName = getCoinInfo(undefined, coin).name;
        this.params = {
            inputs,
            outputs,
            refTxs,
            addresses: account ? account.addresses : undefined,
            options: {
                lock_time: this.payload.locktime,
                timestamp: this.payload.timestamp,
                version: this.payload.version,
                expiry: this.payload.expiry,
                overwintered: this.payload.overwintered,
                version_group_id: this.payload.versionGroupId,
                branch_id: this.payload.branchId
            },
            coinName
        };
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            const { device, params } = this;
            const useLegacySignProcess = device.unavailableCapabilities.replaceTransaction;
            const { refTxs } = params;
            const signTxMethod = !useLegacySignProcess ? signtx : signtxLegacy;
            const response = yield signTxMethod(device.commands.typedCall.bind(device.commands), params.inputs, params.outputs, refTxs, params.options, params.coinName);
            return response;
        });
    }
}
class BTCVerifyMessage extends BaseMethod {
    init() {
        this.checkDeviceId = true;
        this.notAllowDeviceMode = [
            ...this.notAllowDeviceMode,
            UI_REQUEST.INITIALIZE
        ];
        validateParams(this.payload, [
            {
                name: "address",
                type: "string",
                required: true
            },
            {
                name: "messageHex",
                type: "hexString",
                required: true
            },
            {
                name: "signature",
                type: "hexString",
                required: true
            },
            {
                name: "coin",
                type: "string",
                required: true
            }
        ]);
        const { coin } = this.payload;
        const { address, messageHex, signature } = formatAnyHex(this.payload);
        const coinName = getCoinInfo(undefined, coin).name;
        this.params = {
            address,
            message: messageHex,
            signature,
            coin_name: coinName
        };
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            const res = yield this.device.commands.typedCall("VerifyMessage", "Success", Object.assign({}, this.params));
            return Promise.resolve(res.message);
        });
    }
}
class ConfluxGetAddress extends BaseMethod {
    constructor(){
        super(...arguments);
        this.hasBundle = false;
    }
    init() {
        var _a;
        this.notAllowDeviceMode = [
            ...this.notAllowDeviceMode,
            UI_REQUEST.INITIALIZE
        ];
        this.hasBundle = !!((_a = this.payload) === null || _a === void 0 ? void 0 : _a.bundle);
        const payload = this.hasBundle ? this.payload : {
            bundle: [
                this.payload
            ]
        };
        validateParams(payload, [
            {
                name: "bundle",
                type: "array"
            }
        ]);
        this.params = [];
        payload.bundle.forEach((batch)=>{
            var _a;
            const addressN = validatePath(batch.path, 3);
            validateParams(batch, [
                {
                    name: "path",
                    required: true
                },
                {
                    name: "chainId",
                    type: "number"
                },
                {
                    name: "showOnOneKey",
                    type: "boolean"
                }
            ]);
            const showOnOneKey = (_a = batch.showOnOneKey) !== null && _a !== void 0 ? _a : true;
            this.params.push({
                address_n: addressN,
                chain_id: batch.chainId,
                show_display: showOnOneKey
            });
        });
    }
    getVersionRange() {
        return {
            model_mini: {
                min: "2.4.0"
            }
        };
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            const responses = [];
            for(let i = 0; i < this.params.length; i++){
                const param = this.params[i];
                const res = yield this.device.commands.typedCall("ConfluxGetAddress", "ConfluxAddress", Object.assign({}, param));
                const path = serializedPath(param.address_n);
                responses.push(Object.assign({
                    path
                }, res.message));
                this.postPreviousAddressMessage({
                    path,
                    address: res.message.address
                });
            }
            return Promise.resolve(this.hasBundle ? responses : responses[0]);
        });
    }
}
class ConfluxSignMessage extends BaseMethod {
    init() {
        this.notAllowDeviceMode = [
            ...this.notAllowDeviceMode,
            UI_REQUEST.INITIALIZE
        ];
        validateParams(this.payload, [
            {
                name: "path",
                required: true
            },
            {
                name: "messageHex",
                type: "hexString",
                required: true
            }
        ]);
        const { path, messageHex } = this.payload;
        const addressN = validatePath(path, 3);
        this.params = {
            address_n: addressN,
            message: formatAnyHex(messageHex)
        };
    }
    getVersionRange() {
        return {
            model_mini: {
                min: "2.4.0"
            }
        };
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            const res = yield this.device.commands.typedCall("ConfluxSignMessage", "ConfluxMessageSignature", Object.assign({}, this.params));
            return Promise.resolve(res.message);
        });
    }
}
class ConfluxSignMessageCIP23 extends BaseMethod {
    init() {
        this.notAllowDeviceMode = [
            ...this.notAllowDeviceMode,
            UI_REQUEST.INITIALIZE
        ];
        validateParams(this.payload, [
            {
                name: "path",
                required: true
            },
            {
                name: "domainHash",
                type: "hexString",
                required: true
            },
            {
                name: "messageHash",
                type: "hexString",
                required: true
            }
        ]);
        const { path, domainHash, messageHash } = this.payload;
        const addressN = validatePath(path, 3);
        this.params = {
            address_n: addressN,
            domain_hash: formatAnyHex(domainHash),
            message_hash: formatAnyHex(messageHash)
        };
    }
    getVersionRange() {
        return {
            model_mini: {
                min: "2.4.0"
            }
        };
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            const res = yield this.device.commands.typedCall("ConfluxSignMessageCIP23", "ConfluxMessageSignature", Object.assign({}, this.params));
            return Promise.resolve(res.message);
        });
    }
}
const cutString = (str, cutLen)=>{
    if (!str) return [
        "",
        ""
    ];
    const first = str.slice(0, cutLen);
    const second = str.slice(cutLen);
    return [
        first,
        second
    ];
};
class ConfluxSignTransaction extends BaseMethod {
    constructor(){
        super(...arguments);
        this.addressN = [];
        this.processTxRequest = (request, data)=>__awaiter(this, void 0, void 0, function*() {
                if (!request.data_length) {
                    const v = request.signature_v;
                    const r = request.signature_r;
                    const s = request.signature_s;
                    if (v == null || r == null || s == null) throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.CallMethodError, "sign transaction failed");
                    return Promise.resolve({
                        v: `0x${v.toString(16)}`,
                        r: `0x${r}`,
                        s: `0x${s}`
                    });
                }
                const [first, rest] = cutString(data, request.data_length * 2);
                const response = yield this.device.commands.typedCall("ConfluxTxAck", "ConfluxTxRequest", {
                    data_chunk: first
                });
                return this.processTxRequest(response.message, rest);
            });
        this.evmSignTx = (addressN, tx)=>__awaiter(this, void 0, void 0, function*() {
                const { to, value, gasPrice, gasLimit, nonce, data, chainId, epochHeight, storageLimit } = tx;
                const length = data == null ? 0 : data.length / 2;
                const [first, rest] = cutString(data, 2048);
                let message = {
                    address_n: addressN,
                    nonce: stripHexStartZeroes(nonce),
                    gas_price: stripHexStartZeroes(gasPrice),
                    gas_limit: stripHexStartZeroes(gasLimit),
                    to,
                    value: stripHexStartZeroes(value),
                    epoch_height: stripHexStartZeroes(epochHeight),
                    storage_limit: stripHexStartZeroes(storageLimit),
                    chain_id: chainId
                };
                if (length !== 0) message = Object.assign(Object.assign({}, message), {
                    data_length: length,
                    data_initial_chunk: first
                });
                const response = yield this.device.commands.typedCall("ConfluxSignTx", "ConfluxTxRequest", message);
                return this.processTxRequest(response.message, rest);
            });
    }
    init() {
        this.notAllowDeviceMode = [
            ...this.notAllowDeviceMode,
            UI_REQUEST.INITIALIZE
        ];
        validateParams(this.payload, [
            {
                name: "path",
                required: true
            },
            {
                name: "transaction",
                type: "object",
                required: true
            }
        ]);
        const { path, transaction } = this.payload;
        this.addressN = validatePath(path, 3);
        const tx = transaction;
        const schema = [
            {
                name: "to",
                type: "hexString",
                required: true
            },
            {
                name: "value",
                type: "hexString",
                required: true
            },
            {
                name: "gasLimit",
                type: "hexString",
                required: true
            },
            {
                name: "gasPrice",
                type: "hexString",
                required: true
            },
            {
                name: "nonce",
                type: "hexString",
                required: true
            },
            {
                name: "epochHeight",
                type: "hexString",
                required: true
            },
            {
                name: "storageLimit",
                type: "hexString",
                required: true
            },
            {
                name: "chainId",
                type: "number",
                required: true
            },
            {
                name: "data",
                type: "hexString"
            }
        ];
        validateParams(tx, schema);
        this.formattedTx = formatAnyHex(tx);
    }
    getVersionRange() {
        return {
            model_mini: {
                min: "2.4.0"
            }
        };
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            const { addressN, formattedTx } = this;
            if (formattedTx == null) throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.CallMethodInvalidParameter, "ConfluxSignTransaction: format tx error");
            const signedTx = yield this.evmSignTx(addressN, formattedTx);
            return Promise.resolve(signedTx);
        });
    }
}
function getAddressLegacyV1({ typedCall, param }) {
    return __awaiter(this, void 0, void 0, function*() {
        return typedCall("EthereumGetAddress", "EthereumAddress", {
            address_n: param.address_n,
            show_display: param.show_display,
            chain_id: param.chain_id
        });
    });
}
function getAddress({ typedCall, param }) {
    return __awaiter(this, void 0, void 0, function*() {
        return typedCall("EthereumGetAddressOneKey", "EthereumAddressOneKey", Object.assign({}, param));
    });
}
class EvmGetAddress extends BaseMethod {
    constructor(){
        super(...arguments);
        this.hasBundle = false;
    }
    init() {
        var _a;
        this.checkDeviceId = true;
        this.notAllowDeviceMode = [
            ...this.notAllowDeviceMode,
            UI_REQUEST.INITIALIZE
        ];
        this.hasBundle = !!((_a = this.payload) === null || _a === void 0 ? void 0 : _a.bundle);
        const payload = this.hasBundle ? this.payload : {
            bundle: [
                this.payload
            ]
        };
        validateParams(payload, [
            {
                name: "bundle",
                type: "array"
            }
        ]);
        this.params = [];
        payload.bundle.forEach((batch)=>{
            var _a;
            const addressN = validatePath(batch.path, 3);
            validateParams(batch, [
                {
                    name: "path",
                    required: true
                },
                {
                    name: "showOnOneKey",
                    type: "boolean"
                },
                {
                    name: "chainId",
                    type: "number"
                }
            ]);
            const showOnOneKey = (_a = batch.showOnOneKey) !== null && _a !== void 0 ? _a : true;
            this.params.push({
                address_n: addressN,
                show_display: showOnOneKey,
                chain_id: batch.chainId
            });
        });
    }
    getEvmAddress(param) {
        return __awaiter(this, void 0, void 0, function*() {
            if (TransportManager.getMessageVersion() === "v1") return getAddressLegacyV1({
                typedCall: this.device.commands.typedCall.bind(this.device.commands),
                param
            });
            return getAddress({
                typedCall: this.device.commands.typedCall.bind(this.device.commands),
                param
            });
        });
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            const responses = [];
            for(let i = 0; i < this.params.length; i++){
                const param = this.params[i];
                const res = yield this.getEvmAddress(param);
                const { address } = res.message;
                if (!address) throw new Error("EthereumGetAddressOneKey: address is undefined");
                const result = {
                    path: serializedPath(param.address_n),
                    address
                };
                responses.push(result);
                this.postPreviousAddressMessage(result);
            }
            return Promise.resolve(this.hasBundle ? responses : responses[0]);
        });
    }
}
function getPublicKey({ typedCall, param }) {
    return __awaiter(this, void 0, void 0, function*() {
        return typedCall("EthereumGetPublicKeyOneKey", "EthereumPublicKeyOneKey", Object.assign({}, param));
    });
}
function getPublicKeyLegacyV1({ typedCall, param }) {
    return __awaiter(this, void 0, void 0, function*() {
        return typedCall("EthereumGetPublicKey", "EthereumPublicKey", {
            address_n: param.address_n,
            show_display: param.show_display,
            chain_id: param.chain_id
        });
    });
}
class EVMGetPublicKey extends BaseMethod {
    constructor(){
        super(...arguments);
        this.hasBundle = false;
        this.useBatch = false;
    }
    init() {
        var _a, _b;
        this.checkDeviceId = true;
        this.notAllowDeviceMode = [
            ...this.notAllowDeviceMode,
            UI_REQUEST.INITIALIZE
        ];
        this.hasBundle = !!((_a = this.payload) === null || _a === void 0 ? void 0 : _a.bundle);
        this.useBatch = !!((_b = this.payload) === null || _b === void 0 ? void 0 : _b.useBatch);
        const payload = this.hasBundle ? this.payload : {
            bundle: [
                this.payload
            ]
        };
        validateParams(payload, [
            {
                name: "bundle",
                type: "array"
            }
        ]);
        this.params = [];
        payload.bundle.forEach((batch)=>{
            var _a;
            const addressN = validatePath(batch.path, 3);
            validateParams(batch, [
                {
                    name: "path",
                    required: true
                },
                {
                    name: "showOnOneKey",
                    type: "boolean"
                },
                {
                    name: "chainId",
                    type: "number"
                }
            ]);
            const showOnOneKey = (_a = batch.showOnOneKey) !== null && _a !== void 0 ? _a : true;
            this.params.push({
                address_n: addressN,
                show_display: showOnOneKey,
                chain_id: batch.chainId
            });
        });
    }
    getEvmPublicKey(param) {
        if (TransportManager.getMessageVersion() === "v1") return getPublicKeyLegacyV1({
            typedCall: this.device.commands.typedCall.bind(this.device.commands),
            param
        });
        return getPublicKey({
            typedCall: this.device.commands.typedCall.bind(this.device.commands),
            param
        });
    }
    run() {
        var _a;
        return __awaiter(this, void 0, void 0, function*() {
            const responses = [];
            if (this.useBatch && this.hasBundle && supportBatchPublicKey((_a = this.device) === null || _a === void 0 ? void 0 : _a.features)) {
                const res = yield this.device.commands.typedCall("BatchGetPublickeys", "EcdsaPublicKeys", {
                    paths: this.params,
                    ecdsa_curve_name: "secp256k1"
                });
                const result = res.message.public_keys.map((publicKey, index)=>({
                        path: serializedPath(this.params[index].address_n),
                        publicKey
                    }));
                return Promise.resolve(result);
            }
            for(let i = 0; i < this.params.length; i++){
                const param = this.params[i];
                const res = yield this.getEvmPublicKey(param);
                responses.push(Object.assign({
                    path: serializedPath(param.address_n),
                    publicKey: res.message.node.public_key
                }, res.message));
            }
            return Promise.resolve(this.hasBundle ? responses : responses[0]);
        });
    }
}
function signMessage({ typedCall, params }) {
    return __awaiter(this, void 0, void 0, function*() {
        const res = yield typedCall("EthereumSignMessageOneKey", "EthereumMessageSignatureOneKey", Object.assign({}, params));
        return Promise.resolve(res.message);
    });
}
function signMessageLegacyV1({ typedCall, params }) {
    return __awaiter(this, void 0, void 0, function*() {
        const res = yield typedCall("EthereumSignMessage", "EthereumMessageSignature", {
            address_n: params.address_n,
            message: params.message,
            chain_id: params.chain_id
        });
        return Promise.resolve(res.message);
    });
}
class EVMSignMessage$2 extends BaseMethod {
    init() {
        this.checkDeviceId = true;
        this.notAllowDeviceMode = [
            ...this.notAllowDeviceMode,
            UI_REQUEST.INITIALIZE
        ];
        validateParams(this.payload, [
            {
                name: "path",
                required: true
            },
            {
                name: "messageHex",
                type: "hexString",
                required: true
            },
            {
                name: "chainId",
                type: "number"
            }
        ]);
        const { path, messageHex, chainId } = this.payload;
        const addressN = validatePath(path, 3);
        this.params = {
            address_n: addressN,
            message: formatAnyHex(messageHex),
            chain_id: chainId
        };
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            if (TransportManager.getMessageVersion() === "v1") return signMessageLegacyV1({
                typedCall: this.device.commands.typedCall.bind(this.device.commands),
                params: this.params
            });
            return signMessage({
                typedCall: this.device.commands.typedCall.bind(this.device.commands),
                params: this.params
            });
        });
    }
}
class EVMSignMessageEIP712 extends BaseMethod {
    init() {
        this.checkDeviceId = true;
        this.notAllowDeviceMode = [
            ...this.notAllowDeviceMode,
            UI_REQUEST.INITIALIZE
        ];
        validateParams(this.payload, [
            {
                name: "path",
                required: true
            },
            {
                name: "domainHash",
                type: "hexString",
                required: true
            },
            {
                name: "messageHash",
                type: "hexString",
                required: true
            }
        ]);
        const { path, domainHash, messageHash } = this.payload;
        const addressN = validatePath(path, 3);
        this.params = {
            address_n: addressN,
            domain_hash: formatAnyHex(domainHash),
            message_hash: formatAnyHex(messageHash)
        };
    }
    getVersionRange() {
        return {
            model_mini: {
                min: "2.1.9"
            }
        };
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            const res = yield this.device.commands.typedCall("EthereumSignMessageEIP712", "EthereumMessageSignature", Object.assign({}, this.params));
            return Promise.resolve(res.message);
        });
    }
}
const processTxRequest = ({ typedCall, request, data, chainId, supportTrezor })=>__awaiter(void 0, void 0, void 0, function*() {
        if (!request.data_length) {
            let v = request.signature_v;
            const r = request.signature_r;
            const s = request.signature_s;
            if (v == null || r == null || s == null) throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.RuntimeError, "processTxRequest: Unexpected request");
            if (chainId && v <= 1) v += 2 * chainId + 35;
            return Promise.resolve({
                v: `0x${v.toString(16)}`,
                r: `0x${r}`,
                s: `0x${s}`
            });
        }
        const [first, rest] = cutString(data, request.data_length * 2);
        let response;
        if (supportTrezor) response = yield typedCall("EthereumTxAck", "EthereumTxRequest", {
            data_chunk: first
        });
        else response = yield typedCall("EthereumTxAckOneKey", "EthereumTxRequestOneKey", {
            data_chunk: first
        });
        return processTxRequest({
            typedCall,
            request: response.message,
            data: rest,
            chainId,
            supportTrezor
        });
    });
const evmSignTx = ({ typedCall, addressN, tx, supportTrezor })=>__awaiter(void 0, void 0, void 0, function*() {
        const { to, value, gasPrice, gasLimit, nonce, data, chainId, txType } = tx;
        const length = data == null ? 0 : data.length / 2;
        const [first, rest] = cutString(data, 2048);
        let message = {
            address_n: addressN,
            nonce: stripHexStartZeroes(nonce),
            gas_price: stripHexStartZeroes(gasPrice),
            gas_limit: stripHexStartZeroes(gasLimit),
            to,
            value: stripHexStartZeroes(value),
            chain_id: chainId
        };
        if (length !== 0) message = Object.assign(Object.assign({}, message), {
            data_length: length,
            data_initial_chunk: first
        });
        if (txType !== null) message = Object.assign(Object.assign({}, message), {
            tx_type: txType
        });
        let response;
        if (supportTrezor) response = yield typedCall("EthereumSignTx", "EthereumTxRequest", message);
        else response = yield typedCall("EthereumSignTxOneKey", "EthereumTxRequestOneKey", message);
        return processTxRequest({
            typedCall,
            request: response.message,
            data: rest,
            chainId,
            supportTrezor
        });
    });
const evmSignTxEip1559 = ({ typedCall, addressN, tx, supportTrezor })=>__awaiter(void 0, void 0, void 0, function*() {
        const { to, value, gasLimit, nonce, data, chainId, maxFeePerGas, maxPriorityFeePerGas, accessList } = tx;
        const length = data == null ? 0 : data.length / 2;
        const [first, rest] = cutString(data, 2048);
        const message = {
            address_n: addressN,
            nonce: stripHexStartZeroes(nonce),
            max_gas_fee: stripHexStartZeroes(maxFeePerGas),
            max_priority_fee: stripHexStartZeroes(maxPriorityFeePerGas),
            gas_limit: stripHexStartZeroes(gasLimit),
            to,
            value: stripHexStartZeroes(value),
            data_length: length,
            data_initial_chunk: first,
            chain_id: chainId,
            access_list: (accessList || []).map((a)=>({
                    address: a.address,
                    storage_keys: a.storageKeys
                }))
        };
        let response;
        if (supportTrezor) response = yield typedCall("EthereumSignTxEIP1559", "EthereumTxRequest", message);
        else response = yield typedCall("EthereumSignTxEIP1559OneKey", "EthereumTxRequestOneKey", message);
        return processTxRequest({
            typedCall,
            request: response.message,
            data: rest,
            supportTrezor
        });
    });
const signTransaction$1 = ({ typedCall, isEIP1559, addressN, tx })=>__awaiter(void 0, void 0, void 0, function*() {
        return isEIP1559 ? evmSignTxEip1559({
            typedCall,
            addressN,
            tx: tx
        }) : evmSignTx({
            typedCall,
            addressN,
            tx: tx
        });
    });
const signTransaction = ({ typedCall, isEIP1559, addressN, tx })=>__awaiter(void 0, void 0, void 0, function*() {
        return isEIP1559 ? evmSignTxEip1559({
            typedCall,
            addressN,
            tx: tx,
            supportTrezor: true
        }) : evmSignTx({
            typedCall,
            addressN,
            tx: tx,
            supportTrezor: true
        });
    });
class EVMSignTransaction extends BaseMethod {
    constructor(){
        super(...arguments);
        this.addressN = [];
        this.isEIP1559 = false;
    }
    init() {
        this.checkDeviceId = true;
        this.notAllowDeviceMode = [
            ...this.notAllowDeviceMode,
            UI_REQUEST.INITIALIZE
        ];
        validateParams(this.payload, [
            {
                name: "path",
                required: true
            },
            {
                name: "transaction",
                type: "object",
                required: true
            }
        ]);
        const { path, transaction } = this.payload;
        this.addressN = validatePath(path, 3);
        const tx = transaction;
        this.isEIP1559 = !!tx.maxFeePerGas && !!tx.maxPriorityFeePerGas;
        const schema = [
            {
                name: "to",
                type: "hexString",
                required: true
            },
            {
                name: "value",
                type: "hexString",
                required: true
            },
            {
                name: "gasLimit",
                type: "hexString",
                required: true
            },
            {
                name: "nonce",
                type: "hexString",
                required: true
            },
            {
                name: "chainId",
                type: "number",
                required: true
            },
            {
                name: "data",
                type: "hexString"
            }
        ];
        if (this.isEIP1559) {
            schema.push({
                name: "maxFeePerGas",
                type: "hexString",
                required: true
            });
            schema.push({
                name: "maxPriorityFeePerGas",
                type: "hexString",
                required: true
            });
        } else {
            schema.push({
                name: "gasPrice",
                type: "hexString",
                required: true
            });
            schema.push({
                name: "txType",
                type: "number"
            });
        }
        validateParams(tx, schema);
        this.formattedTx = formatAnyHex(tx);
    }
    getVersionRange() {
        if (this.isEIP1559) return {
            model_mini: {
                min: "2.1.11"
            }
        };
        return {
            model_mini: {
                min: "1.0.0"
            }
        };
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            const { addressN, isEIP1559, formattedTx } = this;
            if (formattedTx == null) throw hdShared.ERRORS.TypedError("Runtime", "formattedTx is not set");
            if (TransportManager.getMessageVersion() === "v1") return signTransaction({
                typedCall: this.device.commands.typedCall.bind(this.device.commands),
                addressN,
                tx: formattedTx,
                isEIP1559
            });
            return signTransaction$1({
                typedCall: this.device.commands.typedCall.bind(this.device.commands),
                addressN,
                tx: formattedTx,
                isEIP1559
            });
        });
    }
}
const signTypedHash$1 = ({ typedCall, addressN, device, chainId, domainHash, messageHash })=>__awaiter(void 0, void 0, void 0, function*() {
        const deviceType = getDeviceType(device.features);
        if (deviceType === "touch" || deviceType === "pro") {
            const currentVersion = getDeviceFirmwareVersion(device.features).join(".");
            const supportNestedArraysSignVersion = "4.2.0";
            if (semver__default["default"].lt(currentVersion, supportNestedArraysSignVersion)) throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.CallMethodNeedUpgradeFirmware, `Device firmware version is too low, please update to ${supportNestedArraysSignVersion}`, {
                current: currentVersion,
                require: supportNestedArraysSignVersion
            });
        }
        return typedCall("EthereumSignTypedHash", "EthereumTypedDataSignature", {
            address_n: addressN,
            domain_separator_hash: domainHash !== null && domainHash !== void 0 ? domainHash : "",
            message_hash: messageHash,
            chain_id: chainId
        });
    });
const signTypedHash = ({ typedCall, addressN, device, chainId, domainHash, messageHash })=>__awaiter(void 0, void 0, void 0, function*() {
        const deviceType = getDeviceType(device.features);
        if (deviceType === "touch" || deviceType === "pro") {
            const currentVersion = getDeviceFirmwareVersion(device.features).join(".");
            const supportNestedArraysSignVersion = "4.2.0";
            if (semver__default["default"].lt(currentVersion, supportNestedArraysSignVersion)) throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.CallMethodNeedUpgradeFirmware, `Device firmware version is too low, please update to ${supportNestedArraysSignVersion}`, {
                current: currentVersion,
                require: supportNestedArraysSignVersion
            });
        }
        return typedCall("EthereumSignTypedHashOneKey", "EthereumTypedDataSignatureOneKey", {
            address_n: addressN,
            domain_separator_hash: domainHash !== null && domainHash !== void 0 ? domainHash : "",
            message_hash: messageHash,
            chain_id: chainId
        });
    });
const signTypedData$1 = ({ typedCall, addressN, data, metamaskV4Compat, chainId })=>__awaiter(void 0, void 0, void 0, function*() {
        const { primaryType } = data;
        const response = yield typedCall("EthereumSignTypedData", [
            "EthereumTypedDataStructRequest",
            "EthereumTypedDataValueRequest",
            "EthereumTypedDataSignature"
        ], {
            address_n: addressN,
            primary_type: primaryType,
            metamask_v4_compat: metamaskV4Compat,
            chain_id: chainId
        });
        return response;
    });
const signTypedData = ({ typedCall, addressN, data, metamaskV4Compat, chainId })=>__awaiter(void 0, void 0, void 0, function*() {
        const { primaryType } = data;
        return typedCall("EthereumSignTypedDataOneKey", [
            "EthereumTypedDataStructRequestOneKey",
            "EthereumTypedDataValueRequestOneKey",
            "EthereumTypedDataSignatureOneKey"
        ], {
            address_n: addressN,
            primary_type: primaryType,
            metamask_v4_compat: metamaskV4Compat,
            chain_id: chainId
        });
    });
const twosComplement = (number, bytes)=>{
    if (bytes < 1 || bytes > 32) throw hdShared.ERRORS.TypedError("Runtime", "Int byte size must be between 1 and 32 (8 and 256 bits)");
    const minValue = new BigNumber__default["default"](2).exponentiatedBy(bytes * 8 - 1).negated();
    const maxValue = minValue.negated().minus(1);
    const bigNumber = new BigNumber__default["default"](number);
    if (bigNumber.isGreaterThan(maxValue) || bigNumber.isLessThan(minValue)) throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.RuntimeError, `Overflow when trying to convert number ${number.toString()} into ${bytes} bytes`);
    if (bigNumber.isPositive()) return bigNumber;
    return bigNumber.minus(minValue).minus(minValue);
};
const intToHex = (number, bytes, signed)=>{
    let bigNumber = new BigNumber__default["default"](number);
    if (signed) bigNumber = twosComplement(bigNumber, bytes);
    if (bigNumber.isNegative()) throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.RuntimeError, `Cannot convert negative number to unsigned interger: ${number.toString()}`);
    const hex = bigNumber.toString(16);
    const hexChars = bytes * 2;
    if (hex.length > hexChars) throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.RuntimeError, `Overflow when trying to convert number ${number.toString()} into ${bytes} bytes`);
    return hex.padStart(bytes * 2, "0");
};
const paramTypeArray = new RegExp(/^(.*)\[([0-9]*)\]$/);
const paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);
const paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);
const parseArrayType = (arrayTypeName)=>{
    const arrayMatch = paramTypeArray.exec(arrayTypeName);
    if (arrayMatch === null) throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.RuntimeError, `typename ${arrayTypeName} could not be parsed as an EIP-712 array`);
    const [_, entryTypeName, arraySize] = arrayMatch;
    return {
        entryTypeName,
        arraySize: parseInt(arraySize, 10) || null
    };
};
const encodeData = (typeName, data)=>{
    if (paramTypeBytes.test(typeName) || typeName === "address") return formatAnyHex(data);
    if (typeName === "string") return Buffer.from(data, "utf-8").toString("hex");
    const numberMatch = paramTypeNumber.exec(typeName);
    if (numberMatch) {
        const [_, intType, bits] = numberMatch;
        const bytes = Math.ceil(parseInt(bits, 10) / 8);
        return intToHex(data, bytes, intType === "int");
    }
    if (typeName === "bool") return data ? "01" : "00";
    throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.RuntimeError, `Unsupported data type for direct field encoding: ${typeName}`);
};
const paramTypesMap = {
    string: hdTransport.EthereumDataType.STRING,
    bool: hdTransport.EthereumDataType.BOOL,
    address: hdTransport.EthereumDataType.ADDRESS
};
const getFieldType = (typeName, types)=>{
    const arrayMatch = paramTypeArray.exec(typeName);
    if (arrayMatch) {
        const [_, arrayItemTypeName, arraySize] = arrayMatch;
        const entryType = getFieldType(arrayItemTypeName, types);
        return {
            data_type: hdTransport.EthereumDataType.ARRAY,
            size: parseInt(arraySize, 10) || undefined,
            entry_type: entryType
        };
    }
    const numberMatch = paramTypeNumber.exec(typeName);
    if (numberMatch) {
        const [_, type, bits] = numberMatch;
        return {
            data_type: type === "uint" ? hdTransport.EthereumDataType.UINT : hdTransport.EthereumDataType.INT,
            size: Math.floor(parseInt(bits, 10) / 8)
        };
    }
    const bytesMatch = paramTypeBytes.exec(typeName);
    if (bytesMatch) {
        const [_, size] = bytesMatch;
        return {
            data_type: hdTransport.EthereumDataType.BYTES,
            size: parseInt(size, 10) || undefined
        };
    }
    const fixedSizeTypeMatch = paramTypesMap[typeName];
    if (fixedSizeTypeMatch) return {
        data_type: fixedSizeTypeMatch
    };
    if (typeName in types) return {
        data_type: hdTransport.EthereumDataType.STRUCT,
        size: types[typeName].length,
        struct_name: typeName
    };
    throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.RuntimeError, `No type definition specified: ${typeName}`);
};
class EVMSignTypedData extends BaseMethod {
    init() {
        this.checkDeviceId = true;
        this.notAllowDeviceMode = [
            ...this.notAllowDeviceMode,
            UI_REQUEST.INITIALIZE
        ];
        validateParams(this.payload, [
            {
                name: "path",
                required: true
            },
            {
                name: "metamaskV4Compat",
                type: "boolean"
            },
            {
                name: "data",
                type: "object"
            },
            {
                name: "domainHash",
                type: "hexString"
            },
            {
                name: "messageHash",
                type: "hexString"
            },
            {
                name: "chainId",
                type: "number"
            }
        ]);
        const { path, data, metamaskV4Compat, domainHash, messageHash, chainId } = this.payload;
        const addressN = validatePath(path, 3);
        this.params = {
            addressN,
            metamaskV4Compat,
            data,
            chainId
        };
        if (domainHash) {
            this.params.domainHash = formatAnyHex(domainHash);
            if (messageHash) this.params.messageHash = formatAnyHex(messageHash);
            else if (!!data && (!data.primaryType || data.primaryType !== "EIP712Domain")) throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.CallMethodInvalidParameter, "message_hash should only be empty when data.primaryType=EIP712Domain");
        }
    }
    handleSignTypedData({ typedCall, signData, response, supportTrezor }) {
        return __awaiter(this, void 0, void 0, function*() {
            const { types, primaryType, domain, message } = signData;
            while(response.type === "EthereumTypedDataStructRequest" || response.type === "EthereumTypedDataStructRequestOneKey"){
                const { name: typeDefinitionName } = response.message;
                const typeDefinition = types[typeDefinitionName];
                if (typeDefinition === undefined) throw hdShared.ERRORS.TypedError("Runtime", `Type ${typeDefinitionName} was not defined in types object`);
                const dataStruckAck = {
                    members: typeDefinition.map(({ name, type: typeName })=>({
                            name,
                            type: getFieldType(typeName, types)
                        }))
                };
                if (supportTrezor) response = yield typedCall("EthereumTypedDataStructAck", [
                    "EthereumTypedDataStructRequest",
                    "EthereumTypedDataValueRequest",
                    "EthereumTypedDataSignature"
                ], dataStruckAck);
                else response = yield typedCall("EthereumTypedDataStructAckOneKey", [
                    "EthereumTypedDataStructRequestOneKey",
                    "EthereumTypedDataValueRequestOneKey",
                    "EthereumTypedDataSignatureOneKey"
                ], dataStruckAck);
            }
            while(response.type === "EthereumTypedDataValueRequest" || response.type === "EthereumTypedDataValueRequestOneKey"){
                const { member_path } = response.message;
                let memberData;
                let memberTypeName;
                const [rootIndex, ...nestedMemberPath] = member_path;
                switch(rootIndex){
                    case 0:
                        memberData = domain;
                        memberTypeName = "EIP712Domain";
                        break;
                    case 1:
                        memberData = message;
                        memberTypeName = primaryType;
                        break;
                    default:
                        throw hdShared.ERRORS.TypedError("Runtime", "Root index can only be 0 or 1");
                }
                for (const index of nestedMemberPath){
                    if (Array.isArray(memberData)) {
                        memberTypeName = parseArrayType(memberTypeName).entryTypeName;
                        memberData = memberData[index];
                    } else if (typeof memberData === "object" && memberData !== null) {
                        const memberTypeDefinition = types[memberTypeName][index];
                        memberTypeName = memberTypeDefinition.type;
                        memberData = memberData[memberTypeDefinition.name];
                    }
                }
                let encodedData;
                if (Array.isArray(memberData)) encodedData = encodeData("uint16", memberData.length);
                else encodedData = encodeData(memberTypeName, memberData);
                if (supportTrezor) response = yield typedCall("EthereumTypedDataValueAck", [
                    "EthereumTypedDataValueRequest",
                    "EthereumTypedDataSignature"
                ], {
                    value: encodedData
                });
                else response = yield typedCall("EthereumTypedDataValueAckOneKey", [
                    "EthereumTypedDataValueRequestOneKey",
                    "EthereumTypedDataSignatureOneKey"
                ], {
                    value: encodedData
                });
            }
            if (response.type !== "EthereumTypedDataSignature" && response.type !== "EthereumTypedDataSignatureOneKey") throw hdShared.ERRORS.TypedError("Runtime", "Unexpected response type");
            const { address, signature } = response.message;
            return {
                address,
                signature
            };
        });
    }
    signTypedData() {
        return __awaiter(this, void 0, void 0, function*() {
            const { addressN, data, metamaskV4Compat, chainId } = this.params;
            let supportTrezor = false;
            let response;
            switch(TransportManager.getMessageVersion()){
                case "v1":
                    supportTrezor = true;
                    response = yield signTypedData$1({
                        typedCall: this.device.commands.typedCall.bind(this.device.commands),
                        addressN,
                        data,
                        metamaskV4Compat,
                        chainId
                    });
                    break;
                case "latest":
                default:
                    supportTrezor = false;
                    response = yield signTypedData({
                        typedCall: this.device.commands.typedCall.bind(this.device.commands),
                        addressN,
                        data,
                        metamaskV4Compat,
                        chainId
                    });
                    break;
            }
            return this.handleSignTypedData({
                typedCall: this.device.commands.typedCall.bind(this.device.commands),
                signData: data,
                response,
                supportTrezor
            });
        });
    }
    signTypedHash({ typedCall, addressN, chainId, domainHash, messageHash }) {
        if (!domainHash) throw hdShared.ERRORS.TypedError("Runtime", "domainHash is required");
        if (!chainId) throw hdShared.ERRORS.TypedError("Runtime", "chainId is required");
        switch(TransportManager.getMessageVersion()){
            case "v1":
                return signTypedHash$1({
                    typedCall,
                    addressN,
                    domainHash,
                    messageHash,
                    chainId,
                    device: this.device
                });
            case "latest":
            default:
                return signTypedHash({
                    typedCall,
                    addressN,
                    domainHash,
                    messageHash,
                    chainId,
                    device: this.device
                });
        }
    }
    getVersionRange() {
        return {
            model_mini: {
                min: "2.1.9"
            }
        };
    }
    hasBiggerData(item) {
        const data = lodash.get(item.message, "data", undefined);
        if (!data) return false;
        let biggerLimit = 1024;
        const currentVersion = getDeviceFirmwareVersion(this.device.features).join(".");
        const supportBiggerDataVersion = "4.4.0";
        if (semver__default["default"].gte(currentVersion, supportBiggerDataVersion)) biggerLimit = 1536;
        const startIndex = data.startsWith("0x") ? 2 : 0;
        return (data.length - startIndex) / 2 > biggerLimit;
    }
    hasNestedArrays(item) {
        if (!item) return false;
        if (Array.isArray(item)) for (const element of item){
            if (Array.isArray(element)) return true;
            if (typeof element === "object" && element !== null) {
                if (this.hasNestedArrays(element)) return true;
            }
        }
        else if (typeof item === "object" && item !== null) for(const property in item){
            if (this.hasNestedArrays(item[property])) return true;
        }
        return false;
    }
    supportSignTyped() {
        const deviceType = getDeviceType(this.device.features);
        if (deviceType === "classic" || deviceType === "mini") {
            const currentVersion = getDeviceFirmwareVersion(this.device.features).join(".");
            const supportSignTypedVersion = "2.2.0";
            if (semver__default["default"].lt(currentVersion, supportSignTypedVersion)) return false;
        }
        return true;
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            if (!this.device.features) throw hdShared.ERRORS.TypedError("Device_InitializeFailed", "Device initialization failed. Please try again.");
            const { addressN, chainId } = this.params;
            const deviceType = getDeviceType(this.device.features);
            if (deviceType === "classic" || deviceType === "mini") {
                validateParams(this.params, [
                    {
                        name: "domainHash",
                        type: "hexString",
                        required: true
                    },
                    {
                        name: "messageHash",
                        type: "hexString",
                        required: true
                    }
                ]);
                const { domainHash, messageHash } = this.params;
                let response;
                if (this.supportSignTyped()) response = yield this.signTypedHash({
                    typedCall: this.device.commands.typedCall.bind(this.device.commands),
                    addressN,
                    domainHash,
                    messageHash,
                    chainId
                });
                else response = yield this.device.commands.typedCall("EthereumSignMessageEIP712", "EthereumMessageSignature", {
                    address_n: addressN,
                    domain_hash: domainHash !== null && domainHash !== void 0 ? domainHash : "",
                    message_hash: messageHash !== null && messageHash !== void 0 ? messageHash : ""
                });
                return Promise.resolve(response.message);
            }
            if (this.hasNestedArrays(this.params.data) || this.hasBiggerData(this.params.data)) {
                validateParams(this.params, [
                    {
                        name: "domainHash",
                        type: "hexString",
                        required: true
                    },
                    {
                        name: "messageHash",
                        type: "hexString",
                        required: true
                    }
                ]);
                const { domainHash, messageHash } = this.params;
                if (!domainHash) throw hdShared.ERRORS.TypedError("Runtime", "domainHash is required");
                if (!chainId) throw hdShared.ERRORS.TypedError("Runtime", "chainId is required");
                const response = yield this.signTypedHash({
                    typedCall: this.device.commands.typedCall.bind(this.device.commands),
                    addressN,
                    domainHash,
                    messageHash,
                    chainId
                });
                return Promise.resolve(response.message);
            }
            return this.signTypedData();
        });
    }
}
function verifyMessageLegacyV1({ typedCall, params }) {
    return __awaiter(this, void 0, void 0, function*() {
        const res = yield typedCall("EthereumVerifyMessage", "Success", {
            signature: params.signature,
            message: params.message,
            address: params.address,
            chain_id: params.chain_id
        });
        return Promise.resolve(res.message);
    });
}
function verifyMessage({ typedCall, params }) {
    return __awaiter(this, void 0, void 0, function*() {
        const res = yield typedCall("EthereumVerifyMessageOneKey", "Success", Object.assign({}, params));
        return Promise.resolve(res.message);
    });
}
class EVMSignMessage$1 extends BaseMethod {
    init() {
        this.checkDeviceId = true;
        this.notAllowDeviceMode = [
            ...this.notAllowDeviceMode,
            UI_REQUEST.INITIALIZE
        ];
        validateParams(this.payload, [
            {
                name: "address",
                type: "string",
                required: true
            },
            {
                name: "messageHex",
                type: "hexString",
                required: true
            },
            {
                name: "signature",
                type: "hexString",
                required: true
            },
            {
                name: "chainId",
                type: "number"
            }
        ]);
        const { address, messageHex, signature } = formatAnyHex(this.payload);
        this.params = {
            address,
            message: messageHex,
            signature,
            chain_id: this.payload.chainId
        };
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            if (TransportManager.getMessageVersion() === "v1") return verifyMessageLegacyV1({
                typedCall: this.device.commands.typedCall.bind(this.device.commands),
                params: this.params
            });
            return verifyMessage({
                typedCall: this.device.commands.typedCall.bind(this.device.commands),
                params: this.params
            });
        });
    }
}
class StarcoinGetAddress extends BaseMethod {
    constructor(){
        super(...arguments);
        this.hasBundle = false;
    }
    init() {
        var _a;
        this.checkDeviceId = true;
        this.notAllowDeviceMode = [
            ...this.notAllowDeviceMode,
            UI_REQUEST.INITIALIZE
        ];
        this.hasBundle = !!((_a = this.payload) === null || _a === void 0 ? void 0 : _a.bundle);
        const payload = this.hasBundle ? this.payload : {
            bundle: [
                this.payload
            ]
        };
        validateParams(payload, [
            {
                name: "bundle",
                type: "array"
            }
        ]);
        this.params = [];
        payload.bundle.forEach((batch)=>{
            var _a;
            const addressN = validatePath(batch.path, 3);
            validateParams(batch, [
                {
                    name: "path",
                    required: true
                },
                {
                    name: "showOnOneKey",
                    type: "boolean"
                }
            ]);
            const showOnOneKey = (_a = batch.showOnOneKey) !== null && _a !== void 0 ? _a : true;
            this.params.push({
                address_n: addressN,
                show_display: showOnOneKey
            });
        });
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            const responses = [];
            for(let i = 0; i < this.params.length; i++){
                const param = this.params[i];
                const res = yield this.device.commands.typedCall("StarcoinGetAddress", "StarcoinAddress", Object.assign({}, param));
                const path = serializedPath(param.address_n);
                responses.push(Object.assign({
                    path
                }, res.message));
                this.postPreviousAddressMessage({
                    path,
                    address: res.message.address
                });
            }
            return Promise.resolve(this.hasBundle ? responses : responses[0]);
        });
    }
}
class StarcoinGetPublicKey extends BaseMethod {
    constructor(){
        super(...arguments);
        this.hasBundle = false;
    }
    init() {
        var _a;
        this.checkDeviceId = true;
        this.notAllowDeviceMode = [
            ...this.notAllowDeviceMode,
            UI_REQUEST.INITIALIZE
        ];
        this.hasBundle = !!((_a = this.payload) === null || _a === void 0 ? void 0 : _a.bundle);
        const payload = this.hasBundle ? this.payload : {
            bundle: [
                this.payload
            ]
        };
        validateParams(payload, [
            {
                name: "bundle",
                type: "array"
            }
        ]);
        this.params = [];
        payload.bundle.forEach((batch)=>{
            var _a;
            const addressN = validatePath(batch.path, 3);
            validateParams(batch, [
                {
                    name: "path",
                    required: true
                },
                {
                    name: "showOnOneKey",
                    type: "boolean"
                }
            ]);
            const showOnOneKey = (_a = batch.showOnOneKey) !== null && _a !== void 0 ? _a : true;
            this.params.push({
                address_n: addressN,
                show_display: showOnOneKey
            });
        });
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            const responses = [];
            for(let i = 0; i < this.params.length; i++){
                const param = this.params[i];
                const res = yield this.device.commands.typedCall("StarcoinGetPublicKey", "StarcoinPublicKey", Object.assign({}, param));
                responses.push(Object.assign({
                    path: serializedPath(param.address_n)
                }, res.message));
            }
            return Promise.resolve(this.hasBundle ? responses : responses[0]);
        });
    }
}
class StarcoinSignMessage extends BaseMethod {
    init() {
        this.checkDeviceId = true;
        this.notAllowDeviceMode = [
            ...this.notAllowDeviceMode,
            UI_REQUEST.INITIALIZE
        ];
        validateParams(this.payload, [
            {
                name: "path",
                required: true
            },
            {
                name: "messageHex",
                type: "hexString",
                required: true
            }
        ]);
        const { path, messageHex } = this.payload;
        const addressN = validatePath(path, 3);
        this.params = {
            address_n: addressN,
            message: formatAnyHex(messageHex)
        };
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            const res = yield this.device.commands.typedCall("StarcoinSignMessage", "StarcoinMessageSignature", Object.assign({}, this.params));
            return Promise.resolve(res.message);
        });
    }
}
class StarcoinSignTransaction extends BaseMethod {
    init() {
        this.checkDeviceId = true;
        this.notAllowDeviceMode = [
            ...this.notAllowDeviceMode,
            UI_REQUEST.INITIALIZE
        ];
        validateParams(this.payload, [
            {
                name: "path",
                required: true
            },
            {
                name: "rawTx",
                type: "hexString",
                required: true
            }
        ]);
        const { path, rawTx } = this.payload;
        const addressN = validatePath(path, 3);
        this.params = {
            address_n: addressN,
            raw_tx: formatAnyHex(rawTx)
        };
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            const res = yield this.device.commands.typedCall("StarcoinSignTx", "StarcoinSignedTx", Object.assign({}, this.params));
            return Promise.resolve(res.message);
        });
    }
}
class EVMSignMessage extends BaseMethod {
    init() {
        this.checkDeviceId = true;
        this.notAllowDeviceMode = [
            ...this.notAllowDeviceMode,
            UI_REQUEST.INITIALIZE
        ];
        validateParams(this.payload, [
            {
                name: "publicKey",
                type: "string",
                required: true
            },
            {
                name: "messageHex",
                type: "hexString",
                required: true
            },
            {
                name: "signature",
                type: "hexString",
                required: true
            }
        ]);
        const { publicKey, messageHex, signature } = formatAnyHex(this.payload);
        this.params = {
            public_key: publicKey,
            message: messageHex,
            signature
        };
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            const res = yield this.device.commands.typedCall("StarcoinVerifyMessage", "Success", Object.assign({}, this.params));
            return Promise.resolve(res.message);
        });
    }
}
const MAINNET = 0x68;
class NEMGetAddress extends BaseMethod {
    constructor(){
        super(...arguments);
        this.hasBundle = false;
    }
    init() {
        var _a;
        this.checkDeviceId = true;
        this.notAllowDeviceMode = [
            ...this.notAllowDeviceMode,
            UI_REQUEST.INITIALIZE
        ];
        this.hasBundle = !!((_a = this.payload) === null || _a === void 0 ? void 0 : _a.bundle);
        const payload = this.hasBundle ? this.payload : {
            bundle: [
                this.payload
            ]
        };
        validateParams(payload, [
            {
                name: "bundle",
                type: "array"
            }
        ]);
        this.params = [];
        payload.bundle.forEach((batch)=>{
            var _a;
            const addressN = validatePath(batch.path, 3);
            validateParams(batch, [
                {
                    name: "path",
                    required: true
                },
                {
                    name: "network",
                    type: "number"
                },
                {
                    name: "showOnOneKey",
                    type: "boolean"
                }
            ]);
            const showOnOneKey = (_a = batch.showOnOneKey) !== null && _a !== void 0 ? _a : true;
            this.params.push({
                address_n: addressN,
                network: batch.network || MAINNET,
                show_display: showOnOneKey
            });
        });
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            const responses = [];
            for(let i = 0; i < this.params.length; i++){
                const param = this.params[i];
                const res = yield this.device.commands.typedCall("NEMGetAddress", "NEMAddress", Object.assign({}, param));
                const path = serializedPath(param.address_n);
                responses.push(Object.assign({
                    path
                }, res.message));
                this.postPreviousAddressMessage({
                    path,
                    address: res.message.address
                });
            }
            return Promise.resolve(this.hasBundle ? responses : responses[0]);
        });
    }
}
const NEM_TRANSFER = 0x0101;
const NEM_COSIGNING = 0x0102;
const NEM_IMPORTANCE_TRANSFER = 0x0801;
const NEM_AGGREGATE_MODIFICATION = 0x1001;
const NEM_MULTISIG_SIGNATURE = 0x1002;
const NEM_MULTISIG = 0x1004;
const NEM_PROVISION_NAMESPACE = 0x2001;
const NEM_MOSAIC_CREATION = 0x4001;
const NEM_SUPPLY_CHANGE = 0x4002;
class NEMSignTransaction extends BaseMethod {
    constructor(){
        super(...arguments);
        this.NEM_MOSAIC_LEVY_TYPES = {
            1: "MosaicLevy_Absolute",
            2: "MosaicLevy_Percentile"
        };
        this.NEM_SUPPLY_CHANGE_TYPES = {
            1: "SupplyChange_Increase",
            2: "SupplyChange_Decrease"
        };
        this.NEM_AGGREGATE_MODIFICATION_TYPES = {
            1: "CosignatoryModification_Add",
            2: "CosignatoryModification_Delete"
        };
        this.NEM_IMPORTANCE_TRANSFER_MODES = {
            1: "ImportanceTransfer_Activate",
            2: "ImportanceTransfer_Deactivate"
        };
        this.getCommon = (tx, address_n)=>{
            var _a;
            return {
                address_n,
                network: tx.version >> 24 & 0xff,
                timestamp: tx.timeStamp,
                fee: tx.fee,
                deadline: (_a = tx.deadline) !== null && _a !== void 0 ? _a : 0,
                signer: address_n ? undefined : tx.signer
            };
        };
        this.transferMessage = (tx)=>{
            const mosaics = tx.mosaics ? tx.mosaics.map((mosaic)=>({
                    namespace: mosaic.mosaicId.namespaceId,
                    mosaic: mosaic.mosaicId.name,
                    quantity: mosaic.quantity
                })) : undefined;
            return {
                recipient: tx.recipient,
                amount: tx.amount,
                payload: tx.message ? tx.message.payload : undefined,
                public_key: tx.message && tx.message.type === 0x02 ? tx.message.publicKey : undefined,
                mosaics
            };
        };
        this.importanceTransferMessage = (tx)=>({
                mode: this.NEM_IMPORTANCE_TRANSFER_MODES[tx.importanceTransfer.mode],
                public_key: tx.importanceTransfer.publicKey
            });
        this.aggregateModificationMessage = (tx)=>{
            const modifications = tx.modifications ? tx.modifications.map((modification)=>({
                    type: this.NEM_AGGREGATE_MODIFICATION_TYPES[modification.modificationType],
                    public_key: modification.cosignatoryAccount
                })) : undefined;
            return {
                modifications,
                relative_change: tx.minCosignatories.relativeChange
            };
        };
        this.provisionNamespaceMessage = (tx)=>{
            var _a, _b, _c;
            return {
                namespace: (_a = tx.newPart) !== null && _a !== void 0 ? _a : "",
                parent: tx.parent || undefined,
                sink: (_b = tx.rentalFeeSink) !== null && _b !== void 0 ? _b : "",
                fee: (_c = tx.rentalFee) !== null && _c !== void 0 ? _c : 0
            };
        };
        this.mosaicCreationMessage = (tx)=>{
            var _a, _b;
            const { levy } = tx.mosaicDefinition;
            const definition = {
                namespace: tx.mosaicDefinition.id.namespaceId,
                mosaic: tx.mosaicDefinition.id.name,
                levy: levy && levy.type ? this.NEM_MOSAIC_LEVY_TYPES[levy.type] : undefined,
                fee: levy && levy.fee,
                levy_address: levy && levy.recipient,
                levy_namespace: levy && levy.mosaicId && levy.mosaicId.namespaceId,
                levy_mosaic: levy && levy.mosaicId && levy.mosaicId.name,
                description: tx.mosaicDefinition.description
            };
            const { properties } = tx.mosaicDefinition;
            if (Array.isArray(properties)) properties.forEach((property)=>{
                const { name, value } = property;
                switch(name){
                    case "divisibility":
                        definition.divisibility = parseInt(value);
                        break;
                    case "initialSupply":
                        definition.supply = parseInt(value);
                        break;
                    case "supplyMutable":
                        definition.mutable_supply = value === "true";
                        break;
                    case "transferable":
                        definition.transferable = value === "true";
                        break;
                }
            });
            return {
                definition,
                sink: (_a = tx.creationFeeSink) !== null && _a !== void 0 ? _a : "",
                fee: (_b = tx.creationFee) !== null && _b !== void 0 ? _b : 0
            };
        };
        this.supplyChangeMessage = (tx)=>{
            var _a;
            return {
                namespace: tx.mosaicId.namespaceId,
                mosaic: tx.mosaicId.name,
                type: this.NEM_SUPPLY_CHANGE_TYPES[tx.supplyType],
                delta: (_a = tx.delta) !== null && _a !== void 0 ? _a : 0
            };
        };
        this.parseTx = (tx, address_n)=>{
            let transaction = tx;
            const message = {
                transaction: this.getCommon(tx, address_n),
                transfer: undefined,
                importance_transfer: undefined,
                aggregate_modification: undefined,
                provision_namespace: undefined,
                mosaic_creation: undefined,
                supply_change: undefined
            };
            if (tx.type === NEM_COSIGNING || tx.type === NEM_MULTISIG || tx.type === NEM_MULTISIG_SIGNATURE) {
                message.cosigning = tx.type === NEM_COSIGNING || tx.type === NEM_MULTISIG_SIGNATURE;
                transaction = tx.otherTrans;
                message.multisig = this.getCommon(transaction);
            }
            switch(transaction.type){
                case NEM_TRANSFER:
                    message.transfer = this.transferMessage(transaction);
                    break;
                case NEM_IMPORTANCE_TRANSFER:
                    message.importance_transfer = this.importanceTransferMessage(transaction);
                    break;
                case NEM_AGGREGATE_MODIFICATION:
                    message.aggregate_modification = this.aggregateModificationMessage(transaction);
                    break;
                case NEM_PROVISION_NAMESPACE:
                    message.provision_namespace = this.provisionNamespaceMessage(transaction);
                    break;
                case NEM_MOSAIC_CREATION:
                    message.mosaic_creation = this.mosaicCreationMessage(transaction);
                    break;
                case NEM_SUPPLY_CHANGE:
                    message.supply_change = this.supplyChangeMessage(transaction);
                    break;
                default:
                    throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.CallMethodInvalidParameter, "Unknown transaction type");
            }
            return message;
        };
    }
    init() {
        this.checkDeviceId = true;
        this.notAllowDeviceMode = [
            ...this.notAllowDeviceMode,
            UI_REQUEST.INITIALIZE
        ];
        validateParams(this.payload, [
            {
                name: "path",
                required: true
            },
            {
                name: "transaction",
                type: "object",
                required: true
            }
        ]);
        const { path, transaction } = this.payload;
        const addressN = validatePath(path, 3);
        this.params = this.parseTx(transaction, addressN);
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            const res = yield this.device.commands.typedCall("NEMSignTx", "NEMSignedTx", Object.assign({}, this.params));
            return Promise.resolve(res);
        });
    }
}
class SolGetAddress extends BaseMethod {
    constructor(){
        super(...arguments);
        this.hasBundle = false;
    }
    init() {
        var _a;
        this.checkDeviceId = true;
        this.notAllowDeviceMode = [
            ...this.notAllowDeviceMode,
            UI_REQUEST.INITIALIZE
        ];
        this.hasBundle = !!((_a = this.payload) === null || _a === void 0 ? void 0 : _a.bundle);
        const payload = this.hasBundle ? this.payload : {
            bundle: [
                this.payload
            ]
        };
        validateParams(payload, [
            {
                name: "bundle",
                type: "array"
            }
        ]);
        this.params = [];
        payload.bundle.forEach((batch)=>{
            var _a;
            const addressN = validatePath(batch.path, 3);
            validateParams(batch, [
                {
                    name: "path",
                    required: true
                },
                {
                    name: "showOnOneKey",
                    type: "boolean"
                }
            ]);
            const showOnOneKey = (_a = batch.showOnOneKey) !== null && _a !== void 0 ? _a : true;
            this.params.push({
                address_n: addressN,
                show_display: showOnOneKey
            });
        });
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            const responses = [];
            for(let i = 0; i < this.params.length; i++){
                const param = this.params[i];
                const res = yield this.device.commands.typedCall("SolanaGetAddress", "SolanaAddress", Object.assign({}, param));
                const { address } = res.message;
                const result = {
                    path: serializedPath(param.address_n),
                    address
                };
                responses.push(result);
                this.postPreviousAddressMessage(result);
            }
            return Promise.resolve(this.hasBundle ? responses : responses[0]);
        });
    }
}
class SolSignTransaction extends BaseMethod {
    constructor(){
        super(...arguments);
        this.hasBundle = false;
    }
    init() {
        var _a;
        this.checkDeviceId = true;
        this.notAllowDeviceMode = [
            ...this.notAllowDeviceMode,
            UI_REQUEST.INITIALIZE
        ];
        this.hasBundle = !!((_a = this.payload) === null || _a === void 0 ? void 0 : _a.bundle);
        const payload = this.hasBundle ? this.payload : {
            bundle: [
                this.payload
            ]
        };
        validateParams(payload, [
            {
                name: "bundle",
                type: "array"
            }
        ]);
        this.params = [];
        payload.bundle.forEach((batch)=>{
            const addressN = validatePath(batch.path, 3);
            validateParams(batch, [
                {
                    name: "path",
                    required: true
                },
                {
                    name: "rawTx",
                    type: "hexString",
                    required: true
                }
            ]);
            this.params.push({
                address_n: addressN,
                raw_tx: formatAnyHex(batch.rawTx)
            });
        });
    }
    getVersionRange() {
        return {
            classic: {
                min: "2.1.9"
            },
            mini: {
                min: "2.1.9"
            }
        };
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            const responses = [];
            for(let i = 0; i < this.params.length; i++){
                const param = this.params[i];
                const res = yield this.device.commands.typedCall("SolanaSignTx", "SolanaSignedTx", Object.assign({}, param));
                const { signature } = res.message;
                responses.push({
                    path: serializedPath(param.address_n),
                    signature
                });
            }
            return Promise.resolve(this.hasBundle ? responses : responses[0]);
        });
    }
}
class StellarGetAddress extends BaseMethod {
    constructor(){
        super(...arguments);
        this.hasBundle = false;
    }
    init() {
        var _a;
        this.checkDeviceId = true;
        this.notAllowDeviceMode = [
            ...this.notAllowDeviceMode,
            UI_REQUEST.INITIALIZE
        ];
        this.hasBundle = !!((_a = this.payload) === null || _a === void 0 ? void 0 : _a.bundle);
        const payload = this.hasBundle ? this.payload : {
            bundle: [
                this.payload
            ]
        };
        validateParams(payload, [
            {
                name: "bundle",
                type: "array"
            }
        ]);
        this.params = [];
        payload.bundle.forEach((batch)=>{
            var _a;
            const addressN = validatePath(batch.path, 3);
            validateParams(batch, [
                {
                    name: "path",
                    required: true
                },
                {
                    name: "showOnOneKey",
                    type: "boolean"
                }
            ]);
            const showOnOneKey = (_a = batch.showOnOneKey) !== null && _a !== void 0 ? _a : true;
            this.params.push({
                address_n: addressN,
                show_display: showOnOneKey
            });
        });
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            const responses = [];
            for(let i = 0; i < this.params.length; i++){
                const param = this.params[i];
                const res = yield this.device.commands.typedCall("StellarGetAddress", "StellarAddress", Object.assign({}, param));
                const { address } = res.message;
                const result = {
                    path: serializedPath(param.address_n),
                    address
                };
                responses.push(result);
                this.postPreviousAddressMessage(result);
            }
            return Promise.resolve(this.hasBundle ? responses : responses[0]);
        });
    }
}
class StellarSignTransaction extends BaseMethod {
    constructor(){
        super(...arguments);
        this.operations = [];
        this.parseOperation = (op)=>{
            switch(op.type){
                case "createAccount":
                    validateParams(op, [
                        {
                            name: "destination",
                            type: "string",
                            required: true
                        },
                        {
                            name: "startingBalance",
                            type: "bigNumber",
                            required: true
                        }
                    ]);
                    return {
                        type: "StellarCreateAccountOp",
                        source_account: op.source,
                        new_account: op.destination,
                        starting_balance: op.startingBalance
                    };
                case "payment":
                    validateParams(op, [
                        {
                            name: "destination",
                            type: "string",
                            required: true
                        },
                        {
                            name: "amount",
                            type: "bigNumber",
                            required: true
                        },
                        {
                            name: "asset",
                            required: true
                        }
                    ]);
                    return {
                        type: "StellarPaymentOp",
                        source_account: op.source,
                        destination_account: op.destination,
                        asset: op.asset,
                        amount: op.amount
                    };
                case "pathPayment":
                    validateParams(op, [
                        {
                            name: "destAmount",
                            type: "bigNumber",
                            required: true
                        }
                    ]);
                    return {
                        type: "StellarPathPaymentOp",
                        source_account: op.source,
                        send_asset: op.sendAsset,
                        send_max: op.sendMax,
                        destination_account: op.destination,
                        destination_asset: op.destAsset,
                        destination_amount: op.destAmount,
                        paths: op.path
                    };
                case "createPassiveOffer":
                    validateParams(op, [
                        {
                            name: "amount",
                            type: "bigNumber",
                            required: true
                        }
                    ]);
                    return {
                        type: "StellarCreatePassiveOfferOp",
                        source_account: op.source,
                        buying_asset: op.buying,
                        selling_asset: op.selling,
                        amount: op.amount,
                        price_n: op.price.n,
                        price_d: op.price.d
                    };
                case "manageOffer":
                    validateParams(op, [
                        {
                            name: "amount",
                            type: "bigNumber",
                            required: true
                        }
                    ]);
                    return {
                        type: "StellarManageOfferOp",
                        source_account: op.source,
                        buying_asset: op.buying,
                        selling_asset: op.selling,
                        amount: op.amount,
                        offer_id: op.offerId,
                        price_n: op.price.n,
                        price_d: op.price.d
                    };
                case "setOptions":
                    {
                        const signer = op.signer ? {
                            signer_type: op.signer.type,
                            signer_key: op.signer.key,
                            signer_weight: op.signer.weight
                        } : undefined;
                        return Object.assign({
                            type: "StellarSetOptionsOp",
                            source_account: op.source,
                            clear_flags: op.clearFlags,
                            set_flags: op.setFlags,
                            master_weight: op.masterWeight,
                            low_threshold: op.lowThreshold,
                            medium_threshold: op.medThreshold,
                            high_threshold: op.highThreshold,
                            home_domain: op.homeDomain,
                            inflation_destination_account: op.inflationDest
                        }, signer);
                    }
                case "changeTrust":
                    validateParams(op, [
                        {
                            name: "limit",
                            type: "bigNumber"
                        }
                    ]);
                    return {
                        type: "StellarChangeTrustOp",
                        source_account: op.source,
                        asset: op.line,
                        limit: op.limit
                    };
                case "allowTrust":
                    return {
                        type: "StellarAllowTrustOp",
                        source_account: op.source,
                        trusted_account: op.trustor,
                        asset_type: op.assetType,
                        asset_code: op.assetCode,
                        is_authorized: op.authorize ? 1 : 0
                    };
                case "accountMerge":
                    return {
                        type: "StellarAccountMergeOp",
                        source_account: op.source,
                        destination_account: op.destination
                    };
                case "manageData":
                    return {
                        type: "StellarManageDataOp",
                        source_account: op.source,
                        key: op.name,
                        value: op.value
                    };
                case "bumpSequence":
                    return {
                        type: "StellarBumpSequenceOp",
                        source_account: op.source,
                        bump_to: op.bumpTo
                    };
                default:
                    return {};
            }
        };
        this.processTxRequest = (operations, index)=>__awaiter(this, void 0, void 0, function*() {
                const isLastOp = index + 1 >= operations.length;
                const _a = operations[index], { type } = _a, op = __rest(_a, [
                    "type"
                ]);
                if (isLastOp) {
                    const response = yield this.device.commands.typedCall(type, "StellarSignedTx", op);
                    return response.message;
                }
                yield this.device.commands.typedCall(type, "StellarTxOpRequest", op);
                return this.processTxRequest(operations, index + 1);
            });
    }
    init() {
        this.checkDeviceId = true;
        this.notAllowDeviceMode = [
            ...this.notAllowDeviceMode,
            UI_REQUEST.INITIALIZE
        ];
        validateParams(this.payload, [
            {
                name: "path",
                required: true
            },
            {
                name: "networkPassphrase",
                type: "string",
                required: true
            },
            {
                name: "transaction",
                type: "object",
                required: true
            }
        ]);
        const { transaction, networkPassphrase } = this.payload;
        if (!transaction.timebounds) throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.CallMethodInvalidParameter, "timebounds is required");
        const addressN = validatePath(this.payload.path, 3);
        this.params = {
            address_n: addressN,
            network_passphrase: networkPassphrase,
            source_account: transaction.source,
            fee: transaction.fee,
            sequence_number: transaction.sequence,
            num_operations: transaction.operations.length,
            memo_type: hdTransport.StellarMemoType.NONE,
            timebounds_start: transaction.timebounds.minTime,
            timebounds_end: transaction.timebounds.maxTime
        };
        if (transaction.memo) {
            this.params.memo_type = transaction.memo.type;
            this.params.memo_text = transaction.memo.text;
            this.params.memo_id = transaction.memo.id;
            this.params.memo_hash = transaction.memo.hash;
        }
        transaction.operations.forEach((op)=>{
            const transformed = this.parseOperation(op);
            if (transformed) this.operations.push(transformed);
        });
        console.log("StellarSignTransactionParams", this.params);
        console.log("StellarSignTransactionOperations", this.operations);
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            yield this.device.commands.typedCall("StellarSignTx", "StellarTxOpRequest", Object.assign({}, this.params));
            return this.processTxRequest(this.operations, 0);
        });
    }
}
class TronGetAddress extends BaseMethod {
    constructor(){
        super(...arguments);
        this.hasBundle = false;
    }
    init() {
        var _a;
        this.checkDeviceId = true;
        this.notAllowDeviceMode = [
            ...this.notAllowDeviceMode,
            UI_REQUEST.INITIALIZE
        ];
        this.hasBundle = !!((_a = this.payload) === null || _a === void 0 ? void 0 : _a.bundle);
        const payload = this.hasBundle ? this.payload : {
            bundle: [
                this.payload
            ]
        };
        validateParams(payload, [
            {
                name: "bundle",
                type: "array"
            }
        ]);
        this.params = [];
        payload.bundle.forEach((batch)=>{
            var _a;
            const addressN = validatePath(batch.path, 3);
            validateParams(batch, [
                {
                    name: "path",
                    required: true
                },
                {
                    name: "showOnOneKey",
                    type: "boolean"
                }
            ]);
            const showOnOneKey = (_a = batch.showOnOneKey) !== null && _a !== void 0 ? _a : true;
            this.params.push({
                address_n: addressN,
                show_display: showOnOneKey
            });
        });
    }
    getVersionRange() {
        return {
            model_mini: {
                min: "2.5.0"
            }
        };
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            const responses = [];
            for(let i = 0; i < this.params.length; i++){
                const param = this.params[i];
                const res = yield this.device.commands.typedCall("TronGetAddress", "TronAddress", Object.assign({}, param));
                const { address } = res.message;
                const result = {
                    path: serializedPath(param.address_n),
                    address
                };
                responses.push(result);
                this.postPreviousAddressMessage(result);
            }
            return Promise.resolve(this.hasBundle ? responses : responses[0]);
        });
    }
}
class TronSignMessage extends BaseMethod {
    init() {
        this.checkDeviceId = true;
        this.notAllowDeviceMode = [
            ...this.notAllowDeviceMode,
            UI_REQUEST.INITIALIZE
        ];
        validateParams(this.payload, [
            {
                name: "path",
                required: true
            },
            {
                name: "messageHex",
                type: "hexString",
                required: true
            }
        ]);
        const { path, messageHex } = this.payload;
        const addressN = validatePath(path, 3);
        this.params = {
            address_n: addressN,
            message: stripHexPrefix(messageHex)
        };
    }
    getVersionRange() {
        return {
            model_mini: {
                min: "2.5.0"
            }
        };
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            const response = yield this.device.commands.typedCall("TronSignMessage", "TronMessageSignature", Object.assign({}, this.params));
            return Promise.resolve(response.message);
        });
    }
}
class TronSignTransaction extends BaseMethod {
    parseTx(tx, address_n) {
        const unSignTx = {
            address_n,
            data: tx.data,
            timestamp: tx.timestamp,
            fee_limit: tx.feeLimit,
            ref_block_bytes: tx.refBlockBytes,
            ref_block_hash: tx.refBlockHash,
            expiration: tx.expiration,
            contract: {}
        };
        if (tx.contract) {
            if (tx.contract.transferContract) unSignTx.contract = {
                transfer_contract: {
                    to_address: tx.contract.transferContract.toAddress,
                    amount: tx.contract.transferContract.amount
                }
            };
            if (tx.contract.triggerSmartContract) unSignTx.contract = {
                trigger_smart_contract: {
                    contract_address: tx.contract.triggerSmartContract.contractAddress,
                    call_value: tx.contract.triggerSmartContract.callValue,
                    data: tx.contract.triggerSmartContract.data,
                    call_token_value: tx.contract.triggerSmartContract.callTokenValue,
                    asset_id: tx.contract.triggerSmartContract.assetId
                }
            };
            if (tx.contract.freezeBalanceV2Contract) unSignTx.contract = {
                freeze_balance_v2_contract: {
                    frozen_balance: tx.contract.freezeBalanceV2Contract.frozenBalance,
                    resource: tx.contract.freezeBalanceV2Contract.resource
                }
            };
            if (tx.contract.unfreezeBalanceV2Contract) unSignTx.contract = {
                unfreeze_balance_v2_contract: {
                    unfreeze_balance: tx.contract.unfreezeBalanceV2Contract.unfreezeBalance,
                    resource: tx.contract.unfreezeBalanceV2Contract.resource
                }
            };
            if (tx.contract.delegateResourceContract) unSignTx.contract = {
                delegate_resource_contract: {
                    resource: tx.contract.delegateResourceContract.resource,
                    balance: tx.contract.delegateResourceContract.balance,
                    receiver_address: tx.contract.delegateResourceContract.receiverAddress,
                    lock: tx.contract.delegateResourceContract.lock
                }
            };
            if (tx.contract.unDelegateResourceContract) unSignTx.contract = {
                undelegate_resource_contract: {
                    resource: tx.contract.unDelegateResourceContract.resource,
                    balance: tx.contract.unDelegateResourceContract.balance,
                    receiver_address: tx.contract.unDelegateResourceContract.receiverAddress
                }
            };
            if (tx.contract.withdrawExpireUnfreezeContract) unSignTx.contract = {
                withdraw_expire_unfreeze_contract: {}
            };
            if (tx.contract.withdrawBalanceContract) unSignTx.contract = {
                withdraw_balance_contract: {
                    owner_address: tx.contract.withdrawBalanceContract.ownerAddress
                }
            };
        }
        return unSignTx;
    }
    init() {
        this.checkDeviceId = true;
        this.notAllowDeviceMode = [
            ...this.notAllowDeviceMode,
            UI_REQUEST.INITIALIZE
        ];
        validateParams(this.payload, [
            {
                name: "path",
                required: true
            },
            {
                name: "transaction",
                type: "object",
                required: true
            }
        ]);
        const { path, transaction } = this.payload;
        const addressN = validatePath(path, 3);
        validateParams(transaction, [
            {
                name: "refBlockBytes",
                type: "hexString",
                required: true
            },
            {
                name: "refBlockHash",
                type: "hexString",
                required: true
            },
            {
                name: "expiration",
                type: "number",
                required: true
            },
            {
                name: "timestamp",
                type: "number",
                required: true
            },
            {
                name: "contract",
                type: "object",
                required: true
            }
        ]);
        this.params = this.parseTx(formatAnyHex(transaction), addressN);
    }
    getVersionRange() {
        return {
            model_mini: {
                min: "2.5.0"
            }
        };
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            const response = yield this.device.commands.typedCall("TronSignTx", "TronSignedTx", Object.assign({}, this.params));
            return Promise.resolve(response.message);
        });
    }
}
class NearGetAddress extends BaseMethod {
    constructor(){
        super(...arguments);
        this.hasBundle = false;
    }
    init() {
        var _a;
        this.checkDeviceId = true;
        this.notAllowDeviceMode = [
            ...this.notAllowDeviceMode,
            UI_REQUEST.INITIALIZE
        ];
        this.hasBundle = !!((_a = this.payload) === null || _a === void 0 ? void 0 : _a.bundle);
        const payload = this.hasBundle ? this.payload : {
            bundle: [
                this.payload
            ]
        };
        validateParams(payload, [
            {
                name: "bundle",
                type: "array"
            }
        ]);
        this.params = [];
        payload.bundle.forEach((batch)=>{
            var _a;
            const addressN = validatePath(batch.path, 3);
            validateParams(batch, [
                {
                    name: "path",
                    required: true
                },
                {
                    name: "showOnOneKey",
                    type: "boolean"
                }
            ]);
            const showOnOneKey = (_a = batch.showOnOneKey) !== null && _a !== void 0 ? _a : true;
            this.params.push({
                address_n: addressN,
                show_display: showOnOneKey
            });
        });
    }
    getVersionRange() {
        return {
            model_mini: {
                min: "2.5.0"
            }
        };
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            const responses = [];
            for(let i = 0; i < this.params.length; i++){
                const param = this.params[i];
                const res = yield this.device.commands.typedCall("NearGetAddress", "NearAddress", Object.assign({}, param));
                const { address } = res.message;
                const result = {
                    path: serializedPath(param.address_n),
                    address
                };
                responses.push(result);
                this.postPreviousAddressMessage(result);
            }
            return Promise.resolve(this.hasBundle ? responses : responses[0]);
        });
    }
}
class NearSignTransaction extends BaseMethod {
    init() {
        this.checkDeviceId = true;
        this.notAllowDeviceMode = [
            ...this.notAllowDeviceMode,
            UI_REQUEST.INITIALIZE
        ];
        validateParams(this.payload, [
            {
                name: "path",
                required: true
            },
            {
                name: "rawTx",
                type: "hexString",
                required: true
            }
        ]);
        const { path, rawTx } = this.payload;
        const addressN = validatePath(path, 3);
        this.params = {
            address_n: addressN,
            raw_tx: formatAnyHex(rawTx)
        };
    }
    getVersionRange() {
        return {
            model_mini: {
                min: "2.5.0"
            }
        };
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            const res = yield this.device.commands.typedCall("NearSignTx", "NearSignedTx", Object.assign({}, this.params));
            return Promise.resolve(res.message);
        });
    }
}
class AptosGetAddress extends BaseMethod {
    constructor(){
        super(...arguments);
        this.hasBundle = false;
        this.shouldConfirm = false;
    }
    init() {
        var _a;
        this.checkDeviceId = true;
        this.notAllowDeviceMode = [
            ...this.notAllowDeviceMode,
            UI_REQUEST.INITIALIZE
        ];
        this.hasBundle = !!((_a = this.payload) === null || _a === void 0 ? void 0 : _a.bundle);
        const payload = this.hasBundle ? this.payload : {
            bundle: [
                this.payload
            ]
        };
        this.shouldConfirm = this.hasBundle ? this.payload.bundle.some((i)=>!!i.showOnOneKey) : false;
        validateParams(payload, [
            {
                name: "bundle",
                type: "array"
            }
        ]);
        this.params = [];
        payload.bundle.forEach((batch)=>{
            var _a;
            const addressN = validatePath(batch.path, 3);
            validateParams(batch, [
                {
                    name: "path",
                    required: true
                },
                {
                    name: "showOnOneKey",
                    type: "boolean"
                }
            ]);
            const showOnOneKey = (_a = batch.showOnOneKey) !== null && _a !== void 0 ? _a : true;
            this.params.push({
                address_n: addressN,
                show_display: showOnOneKey
            });
        });
    }
    publicKeyToAddress(publicKey) {
        const hash = sha3.sha3_256.create();
        hash.update(hexToBytes(publicKey));
        hash.update("\x00");
        return `0x${utils.bytesToHex(hash.digest())}`;
    }
    getVersionRange() {
        return {
            model_mini: {
                min: "2.6.0"
            }
        };
    }
    run() {
        var _a;
        return __awaiter(this, void 0, void 0, function*() {
            if (this.hasBundle && supportBatchPublicKey((_a = this.device) === null || _a === void 0 ? void 0 : _a.features) && !this.shouldConfirm) {
                const res = yield this.device.commands.typedCall("BatchGetPublickeys", "EcdsaPublicKeys", {
                    paths: this.params,
                    ecdsa_curve_name: "ed25519"
                });
                const result = res.message.public_keys.map((publicKey, index)=>({
                        path: serializedPath(this.params[index].address_n),
                        publicKey,
                        address: this.publicKeyToAddress(publicKey)
                    }));
                return Promise.resolve(result);
            }
            const responses = [];
            for(let i = 0; i < this.params.length; i++){
                const param = this.params[i];
                const res = yield this.device.commands.typedCall("AptosGetAddress", "AptosAddress", Object.assign({}, param));
                const { address } = res.message;
                const result = {
                    path: serializedPath(param.address_n),
                    address: address === null || address === void 0 ? void 0 : address.toLowerCase()
                };
                responses.push(result);
                this.postPreviousAddressMessage(result);
            }
            return Promise.resolve(this.hasBundle ? responses : responses[0]);
        });
    }
}
class AptosGetPublicKey extends BaseMethod {
    constructor(){
        super(...arguments);
        this.hasBundle = false;
    }
    init() {
        var _a;
        this.checkDeviceId = true;
        this.notAllowDeviceMode = [
            ...this.notAllowDeviceMode,
            UI_REQUEST.INITIALIZE
        ];
        this.hasBundle = !!((_a = this.payload) === null || _a === void 0 ? void 0 : _a.bundle);
        const payload = this.hasBundle ? this.payload : {
            bundle: [
                this.payload
            ]
        };
        validateParams(payload, [
            {
                name: "bundle",
                type: "array"
            }
        ]);
        this.params = [];
        payload.bundle.forEach((batch)=>{
            var _a;
            const addressN = validatePath(batch.path, 3);
            validateParams(batch, [
                {
                    name: "path",
                    required: true
                },
                {
                    name: "showOnOneKey",
                    type: "boolean"
                }
            ]);
            const showOnOneKey = (_a = batch.showOnOneKey) !== null && _a !== void 0 ? _a : true;
            this.params.push({
                address_n: addressN,
                show_display: showOnOneKey
            });
        });
    }
    getVersionRange() {
        return {
            model_mini: {
                min: "2.6.0"
            }
        };
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            const res = yield this.device.commands.typedCall("BatchGetPublickeys", "EcdsaPublicKeys", {
                paths: this.params,
                ecdsa_curve_name: "ed25519"
            });
            const responses = res.message.public_keys.map((publicKey, index)=>({
                    path: serializedPath(this.params[index].address_n),
                    publicKey
                }));
            return Promise.resolve(this.hasBundle ? responses : responses[0]);
        });
    }
}
class AptosSignTransaction extends BaseMethod {
    init() {
        this.checkDeviceId = true;
        this.notAllowDeviceMode = [
            ...this.notAllowDeviceMode,
            UI_REQUEST.INITIALIZE
        ];
        validateParams(this.payload, [
            {
                name: "path",
                required: true
            },
            {
                name: "rawTx",
                type: "hexString",
                required: true
            }
        ]);
        const { path, rawTx } = this.payload;
        const addressN = validatePath(path, 3);
        this.params = {
            address_n: addressN,
            raw_tx: formatAnyHex(rawTx)
        };
    }
    getVersionRange() {
        return {
            model_mini: {
                min: "2.6.0"
            }
        };
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            const res = yield this.device.commands.typedCall("AptosSignTx", "AptosSignedTx", Object.assign({}, this.params));
            return Promise.resolve(res.message);
        });
    }
}
class AptosSignMessage extends BaseMethod {
    init() {
        this.checkDeviceId = true;
        this.notAllowDeviceMode = [
            ...this.notAllowDeviceMode,
            UI_REQUEST.INITIALIZE
        ];
        validateParams(this.payload, [
            {
                name: "path",
                required: true
            },
            {
                name: "payload",
                type: "object",
                required: true
            }
        ]);
        const { path, payload } = this.payload;
        const addressN = validatePath(path, 3);
        validateParams(payload, [
            {
                name: "address",
                type: "string"
            },
            {
                name: "chainId",
                type: "string"
            },
            {
                name: "application",
                type: "string"
            },
            {
                name: "nonce",
                type: "string",
                required: true
            },
            {
                name: "message",
                type: "string",
                required: true
            }
        ]);
        this.params = {
            address_n: addressN,
            payload: {
                address: payload.address,
                chain_id: payload.chainId,
                application: payload.application,
                nonce: payload.nonce,
                message: payload.message
            }
        };
    }
    getVersionRange() {
        return {
            model_mini: {
                min: "2.6.0"
            }
        };
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            let fullMessage = "APTOS\n";
            if (this.params.payload.address) fullMessage += `address: ${this.params.payload.address}\n`;
            if (this.params.payload.application) fullMessage += `application: ${this.params.payload.application}\n`;
            if (this.params.payload.chain_id) fullMessage += `chainId: ${this.params.payload.chain_id}\n`;
            fullMessage += `message: ${this.params.payload.message}\n`;
            fullMessage += `nonce: ${this.params.payload.nonce}`;
            const res = yield this.device.commands.typedCall("AptosSignMessage", "AptosMessageSignature", Object.assign({}, this.params));
            const { address, signature } = res.message;
            return Promise.resolve({
                path: serializedPath(this.params.address_n),
                address,
                signature,
                fullMessage
            });
        });
    }
}
class AlgoGetAddress extends BaseMethod {
    constructor(){
        super(...arguments);
        this.hasBundle = false;
    }
    init() {
        var _a;
        this.checkDeviceId = true;
        this.notAllowDeviceMode = [
            ...this.notAllowDeviceMode
        ];
        this.hasBundle = !!((_a = this.payload) === null || _a === void 0 ? void 0 : _a.bundle);
        const payload = this.hasBundle ? this.payload : {
            bundle: [
                this.payload
            ]
        };
        validateParams(payload, [
            {
                name: "bundle",
                type: "array"
            }
        ]);
        this.params = [];
        payload.bundle.forEach((batch)=>{
            var _a;
            const addressN = validatePath(batch.path, 3);
            validateParams(batch, [
                {
                    name: "path",
                    required: true
                },
                {
                    name: "showOnOneKey",
                    type: "boolean"
                }
            ]);
            const showOnOneKey = (_a = batch.showOnOneKey) !== null && _a !== void 0 ? _a : true;
            this.params.push({
                address_n: addressN,
                show_display: showOnOneKey
            });
        });
    }
    getVersionRange() {
        return {
            model_mini: {
                min: "2.6.0"
            }
        };
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            const responses = [];
            for(let i = 0; i < this.params.length; i++){
                const param = this.params[i];
                const res = yield this.device.commands.typedCall("AlgorandGetAddress", "AlgorandAddress", Object.assign({}, param));
                const { address } = res.message;
                const result = {
                    path: serializedPath(param.address_n),
                    address
                };
                responses.push(result);
                this.postPreviousAddressMessage(result);
            }
            return Promise.resolve(this.hasBundle ? responses : responses[0]);
        });
    }
}
class AlgoSignTransaction extends BaseMethod {
    constructor(){
        super(...arguments);
        this.hasBundle = false;
    }
    init() {
        this.checkDeviceId = true;
        this.notAllowDeviceMode = [
            ...this.notAllowDeviceMode
        ];
        validateParams(this.payload, [
            {
                name: "path",
                required: true
            },
            {
                name: "rawTx",
                type: "hexString",
                required: true
            }
        ]);
        const { path, rawTx } = this.payload;
        const addressN = validatePath(path, 3);
        this.params = {
            address_n: addressN,
            raw_tx: formatAnyHex(rawTx)
        };
    }
    getVersionRange() {
        return {
            model_mini: {
                min: "2.6.0"
            }
        };
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            const res = yield this.device.commands.typedCall("AlgorandSignTx", "AlgorandSignedTx", Object.assign({}, this.params));
            const { signature } = res.message;
            return {
                path: serializedPath(this.params.address_n),
                signature
            };
        });
    }
}
class CosmosGetAddress extends BaseMethod {
    constructor(){
        super(...arguments);
        this.hasBundle = false;
    }
    init() {
        var _a;
        this.checkDeviceId = true;
        this.notAllowDeviceMode = [
            ...this.notAllowDeviceMode
        ];
        this.hasBundle = !!((_a = this.payload) === null || _a === void 0 ? void 0 : _a.bundle);
        const payload = this.hasBundle ? this.payload : {
            bundle: [
                this.payload
            ]
        };
        validateParams(payload, [
            {
                name: "bundle",
                type: "array"
            }
        ]);
        this.params = [];
        payload.bundle.forEach((batch)=>{
            var _a;
            const addressN = validatePath(batch.path, 3);
            validateParams(batch, [
                {
                    name: "path",
                    required: true
                },
                {
                    name: "hrp",
                    type: "string"
                },
                {
                    name: "showOnOneKey",
                    type: "boolean"
                }
            ]);
            const showOnOneKey = (_a = batch.showOnOneKey) !== null && _a !== void 0 ? _a : true;
            const { hrp } = batch;
            this.params.push({
                address_n: addressN,
                hrp,
                show_display: showOnOneKey
            });
        });
    }
    getVersionRange() {
        return {
            model_mini: {
                min: "2.10.0"
            },
            model_touch: {
                min: "4.0.0"
            }
        };
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            const responses = [];
            for(let i = 0; i < this.params.length; i++){
                const param = this.params[i];
                const res = yield this.device.commands.typedCall("CosmosGetAddress", "CosmosAddress", Object.assign({}, param));
                const { address } = res.message;
                const result = {
                    path: serializedPath(param.address_n),
                    address
                };
                responses.push(result);
                this.postPreviousAddressMessage(result);
            }
            return Promise.resolve(this.hasBundle ? responses : responses[0]);
        });
    }
}
class CosmosGetPublicKey extends BaseMethod {
    constructor(){
        super(...arguments);
        this.hasBundle = false;
    }
    init() {
        var _a;
        this.checkDeviceId = true;
        this.notAllowDeviceMode = [
            ...this.notAllowDeviceMode,
            UI_REQUEST.INITIALIZE
        ];
        this.hasBundle = !!((_a = this.payload) === null || _a === void 0 ? void 0 : _a.bundle);
        const payload = this.hasBundle ? this.payload : {
            bundle: [
                this.payload
            ]
        };
        validateParams(payload, [
            {
                name: "bundle",
                type: "array"
            }
        ]);
        if (payload.bundle.length === 0) throw new Error("Bundle is empty");
        this.params = [];
        payload.bundle.forEach((batch)=>{
            var _a, _b;
            const addressN = validatePath(batch.path, 3);
            validateParams(batch, [
                {
                    name: "path",
                    required: true
                },
                {
                    name: "curve",
                    type: "string"
                },
                {
                    name: "showOnOneKey",
                    type: "boolean"
                }
            ]);
            const showOnOneKey = (_a = batch.showOnOneKey) !== null && _a !== void 0 ? _a : true;
            const curveName = (_b = batch.curve) !== null && _b !== void 0 ? _b : "secp256k1";
            if (curveName !== "secp256k1") throw new Error("Curve name is not supported");
            this.params.push({
                address_n: addressN,
                curve: curveName,
                show_display: showOnOneKey
            });
        });
    }
    getVersionRange() {
        return {
            model_mini: {
                min: "2.10.0"
            },
            model_touch: {
                min: "4.0.0"
            }
        };
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            const res = yield this.device.commands.typedCall("BatchGetPublickeys", "EcdsaPublicKeys", {
                paths: this.params,
                ecdsa_curve_name: this.params[0].curve
            });
            const responses = res.message.public_keys.map((publicKey, index)=>({
                    path: serializedPath(this.params[index].address_n),
                    publicKey
                }));
            return Promise.resolve(this.hasBundle ? responses : responses[0]);
        });
    }
}
class CosmosSignTransaction extends BaseMethod {
    constructor(){
        super(...arguments);
        this.hasBundle = false;
    }
    init() {
        this.checkDeviceId = true;
        this.notAllowDeviceMode = [
            ...this.notAllowDeviceMode
        ];
        validateParams(this.payload, [
            {
                name: "path",
                required: true
            },
            {
                name: "rawTx",
                type: "hexString",
                required: true
            }
        ]);
        const { path, rawTx } = this.payload;
        const addressN = validatePath(path, 3);
        this.params = {
            address_n: addressN,
            raw_tx: formatAnyHex(rawTx)
        };
    }
    getVersionRange() {
        return {
            model_mini: {
                min: "2.10.0"
            },
            model_touch: {
                min: "4.0.0"
            }
        };
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            const res = yield this.device.commands.typedCall("CosmosSignTx", "CosmosSignedTx", Object.assign({}, this.params));
            const { signature } = res.message;
            return {
                path: serializedPath(this.params.address_n),
                signature
            };
        });
    }
}
class XrpGetAddress$1 extends BaseMethod {
    constructor(){
        super(...arguments);
        this.hasBundle = false;
        this.shouldConfirm = false;
    }
    init() {
        var _a;
        this.checkDeviceId = true;
        this.notAllowDeviceMode = [
            ...this.notAllowDeviceMode,
            UI_REQUEST.INITIALIZE
        ];
        this.hasBundle = !!((_a = this.payload) === null || _a === void 0 ? void 0 : _a.bundle);
        const payload = this.hasBundle ? this.payload : {
            bundle: [
                this.payload
            ]
        };
        this.shouldConfirm = this.hasBundle ? this.payload.bundle.some((i)=>!!i.showOnOneKey) : false;
        validateParams(payload, [
            {
                name: "bundle",
                type: "array"
            }
        ]);
        this.params = [];
        payload.bundle.forEach((batch)=>{
            var _a;
            const addressN = validatePath(batch.path, 3);
            validateParams(batch, [
                {
                    name: "path",
                    required: true
                },
                {
                    name: "showOnOneKey",
                    type: "boolean"
                }
            ]);
            const showOnOneKey = (_a = batch.showOnOneKey) !== null && _a !== void 0 ? _a : true;
            this.params.push({
                address_n: addressN,
                show_display: showOnOneKey
            });
        });
    }
    getVersionRange() {
        return {
            model_mini: {
                min: "2.9.0"
            }
        };
    }
    run() {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function*() {
            if (this.hasBundle && supportBatchPublicKey((_a = this.device) === null || _a === void 0 ? void 0 : _a.features) && !this.shouldConfirm) {
                const res = yield this.device.commands.typedCall("BatchGetPublickeys", "EcdsaPublicKeys", {
                    paths: this.params,
                    ecdsa_curve_name: "secp256k1"
                });
                const result = res.message.public_keys.map((publicKey, index)=>({
                        path: serializedPath(this.params[index].address_n),
                        publicKey,
                        address: rippleKeypairs.deriveAddress(publicKey)
                    }));
                return Promise.resolve(result);
            }
            const responses = [];
            for(let i = 0; i < this.params.length; i++){
                const param = this.params[i];
                const res = yield this.device.commands.typedCall("RippleGetAddress", "RippleAddress", Object.assign({}, param));
                const publicKey = yield this.device.commands.typedCall("BatchGetPublickeys", "EcdsaPublicKeys", {
                    paths: [
                        {
                            address_n: param.address_n
                        }
                    ],
                    ecdsa_curve_name: "secp256k1"
                });
                const { address } = res.message;
                const path = serializedPath(param.address_n);
                responses.push({
                    path,
                    address,
                    publicKey: (_c = (_b = publicKey.message) === null || _b === void 0 ? void 0 : _b.public_keys) === null || _c === void 0 ? void 0 : _c[0]
                });
                this.postPreviousAddressMessage({
                    path,
                    address
                });
            }
            return Promise.resolve(this.hasBundle ? responses : responses[0]);
        });
    }
}
class XrpGetAddress extends BaseMethod {
    constructor(){
        super(...arguments);
        this.hasBundle = false;
    }
    init() {
        this.checkDeviceId = true;
        this.notAllowDeviceMode = [
            ...this.notAllowDeviceMode,
            UI_REQUEST.INITIALIZE
        ];
        const { payload } = this;
        validateParams(payload, [
            {
                name: "path",
                required: true
            },
            {
                name: "transaction",
                required: true
            }
        ]);
        const path = validatePath(payload.path, 5);
        const { transaction } = payload;
        validateParams(transaction, [
            {
                name: "fee",
                type: "string"
            },
            {
                name: "flags",
                type: "number"
            },
            {
                name: "sequence",
                type: "number"
            },
            {
                name: "maxLedgerVersion",
                type: "number"
            },
            {
                name: "payment",
                type: "object"
            }
        ]);
        validateParams(transaction.payment, [
            {
                name: "amount",
                type: "number",
                required: true
            },
            {
                name: "destination",
                type: "string",
                required: true
            },
            {
                name: "destinationTag",
                type: "number"
            }
        ]);
        this.params = {
            address_n: path,
            fee: transaction.fee,
            flags: transaction.flags,
            sequence: transaction.sequence,
            last_ledger_sequence: transaction.maxLedgerVersion,
            payment: {
                amount: transaction.payment.amount,
                destination: transaction.payment.destination,
                destination_tag: transaction.payment.destinationTag
            }
        };
    }
    getVersionRange() {
        return {
            model_mini: {
                min: "2.9.0"
            }
        };
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            const { message } = yield this.device.commands.typedCall("RippleSignTx", "RippleSignedTx", this.params);
            return {
                serializedTx: message.serialized_tx,
                signature: message.signature
            };
        });
    }
}
const SUI_ADDRESS_LENGTH = 32;
const PUBLIC_KEY_SIZE = 32;
const SIGNATURE_SCHEME_TO_FLAG = {
    ED25519: 0x00,
    Secp256k1: 0x01
};
function normalizeSuiAddress(value, forceAdd0x = false) {
    let address = value.toLowerCase();
    if (!forceAdd0x && address.startsWith("0x")) address = address.slice(2);
    return `0x${address.padStart(SUI_ADDRESS_LENGTH * 2, "0")}`.toLowerCase();
}
function publicKeyToAddress(publicKey) {
    const tmp = new Uint8Array(PUBLIC_KEY_SIZE + 1);
    tmp.set([
        SIGNATURE_SCHEME_TO_FLAG.ED25519
    ]);
    tmp.set(utils.hexToBytes(publicKey), 1);
    return normalizeSuiAddress(utils.bytesToHex(blake2b.blake2b(tmp, {
        dkLen: 32
    })).slice(0, SUI_ADDRESS_LENGTH * 2));
}
class SuiGetAddress extends BaseMethod {
    constructor(){
        super(...arguments);
        this.hasBundle = false;
        this.shouldConfirm = false;
    }
    init() {
        var _a;
        this.checkDeviceId = true;
        this.notAllowDeviceMode = [
            ...this.notAllowDeviceMode,
            UI_REQUEST.INITIALIZE
        ];
        this.hasBundle = !!((_a = this.payload) === null || _a === void 0 ? void 0 : _a.bundle);
        const payload = this.hasBundle ? this.payload : {
            bundle: [
                this.payload
            ]
        };
        this.shouldConfirm = this.hasBundle ? this.payload.bundle.some((i)=>!!i.showOnOneKey) : false;
        validateParams(payload, [
            {
                name: "bundle",
                type: "array"
            }
        ]);
        this.params = [];
        payload.bundle.forEach((batch)=>{
            var _a;
            const addressN = validatePath(batch.path, 3);
            validateParams(batch, [
                {
                    name: "path",
                    required: true
                },
                {
                    name: "showOnOneKey",
                    type: "boolean"
                }
            ]);
            const showOnOneKey = (_a = batch.showOnOneKey) !== null && _a !== void 0 ? _a : true;
            this.params.push({
                address_n: addressN,
                show_display: showOnOneKey
            });
        });
    }
    getVersionRange() {
        return {
            model_mini: {
                min: "3.0.0"
            },
            model_touch: {
                min: "4.3.0"
            }
        };
    }
    run() {
        var _a;
        return __awaiter(this, void 0, void 0, function*() {
            if (this.hasBundle && supportBatchPublicKey((_a = this.device) === null || _a === void 0 ? void 0 : _a.features) && !this.shouldConfirm) {
                const res = yield this.device.commands.typedCall("BatchGetPublickeys", "EcdsaPublicKeys", {
                    paths: this.params,
                    ecdsa_curve_name: "ed25519"
                });
                const result = res.message.public_keys.map((publicKey, index)=>({
                        path: serializedPath(this.params[index].address_n),
                        publicKey,
                        address: publicKeyToAddress(publicKey)
                    }));
                return Promise.resolve(result);
            }
            const responses = [];
            for(let i = 0; i < this.params.length; i++){
                const param = this.params[i];
                const res = yield this.device.commands.typedCall("SuiGetAddress", "SuiAddress", Object.assign({}, param));
                const { address } = res.message;
                const result = {
                    path: serializedPath(param.address_n),
                    address: address === null || address === void 0 ? void 0 : address.toLowerCase()
                };
                responses.push(result);
                this.postPreviousAddressMessage(result);
            }
            return Promise.resolve(this.hasBundle ? responses : responses[0]);
        });
    }
}
class SuiGetPublicKey extends BaseMethod {
    constructor(){
        super(...arguments);
        this.hasBundle = false;
    }
    init() {
        var _a;
        this.checkDeviceId = true;
        this.notAllowDeviceMode = [
            ...this.notAllowDeviceMode,
            UI_REQUEST.INITIALIZE
        ];
        this.hasBundle = !!((_a = this.payload) === null || _a === void 0 ? void 0 : _a.bundle);
        const payload = this.hasBundle ? this.payload : {
            bundle: [
                this.payload
            ]
        };
        validateParams(payload, [
            {
                name: "bundle",
                type: "array"
            }
        ]);
        this.params = [];
        payload.bundle.forEach((batch)=>{
            var _a;
            const addressN = validatePath(batch.path, 3);
            validateParams(batch, [
                {
                    name: "path",
                    required: true
                },
                {
                    name: "showOnOneKey",
                    type: "boolean"
                }
            ]);
            const showOnOneKey = (_a = batch.showOnOneKey) !== null && _a !== void 0 ? _a : true;
            this.params.push({
                address_n: addressN,
                show_display: showOnOneKey
            });
        });
    }
    getVersionRange() {
        return {
            model_mini: {
                min: "3.0.0"
            },
            model_touch: {
                min: "4.3.0"
            }
        };
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            const res = yield this.device.commands.typedCall("BatchGetPublickeys", "EcdsaPublicKeys", {
                paths: this.params,
                ecdsa_curve_name: "ed25519"
            });
            const responses = res.message.public_keys.map((publicKey, index)=>({
                    path: serializedPath(this.params[index].address_n),
                    publicKey
                }));
            return Promise.resolve(this.hasBundle ? responses : responses[0]);
        });
    }
}
class SuiSignTransaction extends BaseMethod {
    init() {
        this.checkDeviceId = true;
        this.notAllowDeviceMode = [
            ...this.notAllowDeviceMode,
            UI_REQUEST.INITIALIZE
        ];
        validateParams(this.payload, [
            {
                name: "path",
                required: true
            },
            {
                name: "rawTx",
                type: "hexString",
                required: true
            }
        ]);
        const { path, rawTx } = this.payload;
        const addressN = validatePath(path, 3);
        this.params = {
            address_n: addressN,
            raw_tx: formatAnyHex(rawTx)
        };
    }
    getVersionRange() {
        return {
            model_mini: {
                min: "3.0.0"
            },
            model_touch: {
                min: "4.3.0"
            }
        };
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            const res = yield this.device.commands.typedCall("SuiSignTx", "SuiSignedTx", Object.assign({}, this.params));
            return Promise.resolve(res.message);
        });
    }
}
const validateAddressParameters = (addressParameters)=>{
    validateParams(addressParameters, [
        {
            name: "addressType",
            type: "number",
            required: true
        },
        {
            name: "stakingKeyHash",
            type: "string"
        },
        {
            name: "paymentScriptHash",
            type: "string"
        },
        {
            name: "stakingScriptHash",
            type: "string"
        }
    ]);
    if (addressParameters.path) validatePath(addressParameters.path);
    if (addressParameters.stakingPath) validatePath(addressParameters.stakingPath);
    if (addressParameters.certificatePointer) validateParams(addressParameters.certificatePointer, [
        {
            name: "blockIndex",
            type: "number",
            required: true
        },
        {
            name: "txIndex",
            type: "number",
            required: true
        },
        {
            name: "certificateIndex",
            type: "number",
            required: true
        }
    ]);
};
const addressParametersToProto = (addressParameters)=>{
    let path = [];
    if (addressParameters.path) path = validatePath(addressParameters.path, 3);
    let stakingPath = [];
    if (addressParameters.stakingPath) stakingPath = validatePath(addressParameters.stakingPath, 3);
    let certificatePointer;
    if (addressParameters.certificatePointer) certificatePointer = {
        block_index: addressParameters.certificatePointer.blockIndex,
        tx_index: addressParameters.certificatePointer.txIndex,
        certificate_index: addressParameters.certificatePointer.certificateIndex
    };
    return {
        address_type: addressParameters.addressType,
        address_n: path,
        address_n_staking: stakingPath,
        staking_key_hash: addressParameters.stakingKeyHash,
        certificate_pointer: certificatePointer,
        script_payment_hash: addressParameters.paymentScriptHash,
        script_staking_hash: addressParameters.stakingScriptHash
    };
};
const addressParametersFromProto = (addressParameters)=>{
    let certificatePointer;
    if (addressParameters.certificate_pointer) certificatePointer = {
        blockIndex: addressParameters.certificate_pointer.block_index,
        txIndex: addressParameters.certificate_pointer.tx_index,
        certificateIndex: addressParameters.certificate_pointer.certificate_index
    };
    return {
        addressType: addressParameters.address_type,
        path: addressParameters.address_n,
        stakingPath: addressParameters.address_n_staking,
        stakingKeyHash: addressParameters.staking_key_hash,
        certificatePointer
    };
};
const modifyAddressParametersForBackwardsCompatibility = (address_parameters)=>{
    if (address_parameters.address_type === hdTransport.Messages.CardanoAddressType.REWARD) {
        let { address_n, address_n_staking } = address_parameters;
        if (address_n.length > 0 && address_n_staking.length > 0) throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.CallMethodInvalidParameter, `Only stakingPath is allowed for CardanoAddressType.REWARD`);
        if (address_n.length > 0) {
            address_n_staking = address_n;
            address_n = [];
        }
        return Object.assign(Object.assign({}, address_parameters), {
            address_n,
            address_n_staking
        });
    }
    return address_parameters;
};
class CardanoGetAddress extends BaseMethod {
    init() {
        var _a, _b, _c;
        this.checkDeviceId = true;
        this.notAllowDeviceMode = [
            ...this.notAllowDeviceMode,
            UI_REQUEST.INITIALIZE
        ];
        this.hasBundle = !!((_a = this.payload) === null || _a === void 0 ? void 0 : _a.bundle);
        this.isCheck = this.hasBundle ? !!((_b = this.payload) === null || _b === void 0 ? void 0 : _b.bundle.every((i)=>!!i.isCheck)) : !!((_c = this.payload) === null || _c === void 0 ? void 0 : _c.isCheck);
        const payload = this.hasBundle ? this.payload : {
            bundle: [
                this.payload
            ]
        };
        this.params = payload.bundle.map((batch)=>{
            validateParams(batch, [
                {
                    name: "addressParameters",
                    type: "object",
                    required: true
                },
                {
                    name: "networkId",
                    type: "number",
                    required: true
                },
                {
                    name: "protocolMagic",
                    type: "number",
                    required: true
                },
                {
                    name: "derivationType",
                    type: "number"
                },
                {
                    name: "address",
                    type: "string"
                },
                {
                    name: "showOnOneKey",
                    type: "boolean"
                }
            ]);
            validateAddressParameters(batch.addressParameters);
            return {
                address_parameters: addressParametersToProto(batch.addressParameters),
                address: batch.address,
                protocol_magic: batch.protocolMagic,
                network_id: batch.networkId,
                derivation_type: typeof batch.derivationType !== "undefined" ? batch.derivationType : hdTransport.Messages.CardanoDerivationType.ICARUS,
                show_display: typeof batch.showOnOneKey === "boolean" ? !!batch.showOnOneKey : true
            };
        });
    }
    getVersionRange() {
        return {
            model_mini: {
                min: "3.0.0"
            },
            model_touch: {
                min: "4.1.0"
            }
        };
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            const responses = [];
            for (const batch of this.params){
                const { address_parameters, protocol_magic, network_id, derivation_type, show_display } = batch;
                const response = yield this.device.commands.typedCall("CardanoGetAddress", "CardanoAddress", {
                    address_parameters,
                    protocol_magic,
                    network_id,
                    derivation_type,
                    show_display
                });
                let xpub;
                let stakeAddress;
                if (address_parameters.address_type === hdTransport.Messages.CardanoAddressType.BASE && !this.isCheck) {
                    const publicKeyRes = yield this.device.commands.typedCall("CardanoGetPublicKey", "CardanoPublicKey", {
                        address_n: address_parameters.address_n.slice(0, 3),
                        derivation_type,
                        show_display: false
                    });
                    xpub = publicKeyRes.message.xpub;
                    const stakeAddressRes = yield this.device.commands.typedCall("CardanoGetAddress", "CardanoAddress", {
                        address_parameters: {
                            address_type: hdTransport.Messages.CardanoAddressType.REWARD,
                            address_n: [],
                            address_n_staking: address_parameters.address_n_staking
                        },
                        protocol_magic,
                        network_id,
                        derivation_type,
                        show_display: false
                    });
                    stakeAddress = stakeAddressRes.message.address;
                }
                const path = serializedPath(batch.address_parameters.address_n);
                responses.push({
                    addressParameters: addressParametersFromProto(batch.address_parameters),
                    protocolMagic: batch.protocol_magic,
                    networkId: batch.network_id,
                    serializedPath: path,
                    serializedStakingPath: serializedPath(batch.address_parameters.address_n_staking),
                    address: response.message.address,
                    xpub,
                    stakeAddress
                });
                this.postPreviousAddressMessage({
                    path,
                    address: response.message.address
                });
            }
            return this.hasBundle ? responses : responses[0];
        });
    }
}
class CardanoGetPublicKey extends BaseMethod {
    init() {
        var _a;
        this.checkDeviceId = true;
        this.notAllowDeviceMode = [
            ...this.notAllowDeviceMode,
            UI_REQUEST.INITIALIZE
        ];
        this.hasBundle = !!((_a = this.payload) === null || _a === void 0 ? void 0 : _a.bundle);
        const payload = this.hasBundle ? this.payload : {
            bundle: [
                this.payload
            ]
        };
        validateParams(payload, [
            {
                name: "bundle",
                type: "array"
            }
        ]);
        this.params = payload.bundle.map((batch)=>{
            validateParams(batch, [
                {
                    name: "path",
                    required: true
                },
                {
                    name: "derivationType",
                    type: "number"
                },
                {
                    name: "showOnOneKey",
                    type: "boolean"
                }
            ]);
            const path = validatePath(batch.path, 3);
            return {
                address_n: path,
                derivation_type: typeof batch.derivationType !== "undefined" ? batch.derivationType : hdTransport.Messages.CardanoDerivationType.ICARUS,
                show_display: typeof batch.showOnOneKey === "boolean" ? batch.showOnOneKey : false
            };
        });
    }
    getVersionRange() {
        return {
            model_mini: {
                min: "3.0.0"
            },
            model_touch: {
                min: "4.1.0"
            }
        };
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            const responses = [];
            const cmd = this.device.getCommands();
            for(let i = 0; i < this.params.length; i++){
                const batch = this.params[i];
                const { message } = yield cmd.typedCall("CardanoGetPublicKey", "CardanoPublicKey", batch);
                responses.push({
                    path: batch.address_n,
                    serializedPath: serializedPath(batch.address_n),
                    publicKey: message.xpub,
                    node: message.node
                });
            }
            return this.hasBundle ? responses : responses[0];
        });
    }
}
const transformInput = (input)=>{
    validateParams(input, [
        {
            name: "prev_hash",
            type: "string",
            required: true
        },
        {
            name: "prev_index",
            type: "number",
            required: true
        }
    ]);
    return {
        input: {
            prev_hash: input.prev_hash,
            prev_index: input.prev_index
        },
        path: input.path ? validatePath(input.path, 5) : undefined
    };
};
const transformCollateralInput = (collateralInput)=>{
    validateParams(collateralInput, [
        {
            name: "prev_hash",
            type: "string",
            required: true
        },
        {
            name: "prev_index",
            type: "number",
            required: true
        }
    ]);
    return {
        collateralInput: {
            prev_hash: collateralInput.prev_hash,
            prev_index: collateralInput.prev_index
        },
        path: collateralInput.path ? validatePath(collateralInput.path, 5) : undefined
    };
};
const transformReferenceInput = (referenceInput)=>{
    validateParams(referenceInput, [
        {
            name: "prev_hash",
            type: "string",
            required: true
        },
        {
            name: "prev_index",
            type: "number",
            required: true
        }
    ]);
    return {
        prev_hash: referenceInput.prev_hash,
        prev_index: referenceInput.prev_index
    };
};
const validateTokens = (tokenAmounts)=>{
    tokenAmounts.forEach((tokenAmount)=>{
        validateParams(tokenAmount, [
            {
                name: "assetNameBytes",
                type: "string",
                required: true
            },
            {
                name: "amount",
                type: "uint"
            },
            {
                name: "mintAmount",
                type: "uint",
                allowNegative: true
            }
        ]);
    });
};
const validateTokenBundle = (tokenBundle)=>{
    tokenBundle.forEach((tokenGroup)=>{
        validateParams(tokenGroup, [
            {
                name: "policyId",
                type: "string",
                required: true
            },
            {
                name: "tokenAmounts",
                type: "array",
                required: true
            }
        ]);
        validateTokens(tokenGroup.tokenAmounts);
    });
};
const tokenBundleToProto = (tokenBundle)=>{
    validateTokenBundle(tokenBundle);
    return tokenBundle.map((tokenGroup)=>({
            policyId: tokenGroup.policyId,
            tokens: tokenAmountsToProto(tokenGroup.tokenAmounts)
        }));
};
const tokenAmountsToProto = (tokenAmounts)=>tokenAmounts.map((tokenAmount)=>({
            asset_name_bytes: tokenAmount.assetNameBytes,
            amount: tokenAmount.amount,
            mint_amount: tokenAmount.mintAmount
        }));
const hexStringByteLength = (s)=>s.length / 2;
const sendChunkedHexString = (typedCall, data, chunkSize, messageType)=>__awaiter(void 0, void 0, void 0, function*() {
        let processedSize = 0;
        while(processedSize < data.length){
            const chunk = data.slice(processedSize, processedSize + chunkSize);
            yield typedCall(messageType, "CardanoTxItemAck", {
                data: chunk
            });
            processedSize += chunkSize;
        }
    });
const transformOutput = (output)=>{
    validateParams(output, [
        {
            name: "address",
            type: "string"
        },
        {
            name: "amount",
            type: "uint",
            required: true
        },
        {
            name: "tokenBundle",
            type: "array",
            allowEmpty: true
        },
        {
            name: "datumHash",
            type: "string"
        },
        {
            name: "format",
            type: "number"
        },
        {
            name: "inlineDatum",
            type: "string"
        },
        {
            name: "referenceScript",
            type: "string"
        }
    ]);
    const result = {
        output: {
            amount: output.amount,
            asset_groups_count: 0,
            datum_hash: output.datumHash,
            format: output.format,
            inline_datum_size: output.inlineDatum ? hexStringByteLength(output.inlineDatum) : undefined,
            reference_script_size: output.referenceScript ? hexStringByteLength(output.referenceScript) : undefined
        },
        inlineDatum: output.inlineDatum,
        referenceScript: output.referenceScript
    };
    if (output.addressParameters) {
        validateAddressParameters(output.addressParameters);
        result.output.address_parameters = addressParametersToProto(output.addressParameters);
    } else result.output.address = output.address;
    if (output.tokenBundle) {
        result.tokenBundle = tokenBundleToProto(output.tokenBundle);
        result.output.asset_groups_count = result.tokenBundle.length;
    } else result.output.asset_groups_count = 0;
    return result;
};
const sendOutput = (typedCall, outputWithData)=>__awaiter(void 0, void 0, void 0, function*() {
        const MAX_CHUNK_SIZE = 2048;
        const { output, tokenBundle, inlineDatum, referenceScript } = outputWithData;
        yield typedCall("CardanoTxOutput", "CardanoTxItemAck", output);
        if (tokenBundle) for (const assetGroup of tokenBundle){
            yield typedCall("CardanoAssetGroup", "CardanoTxItemAck", {
                policy_id: assetGroup.policyId,
                tokens_count: assetGroup.tokens.length
            });
            for (const token of assetGroup.tokens)yield typedCall("CardanoToken", "CardanoTxItemAck", token);
        }
        if (inlineDatum) yield sendChunkedHexString(typedCall, inlineDatum, MAX_CHUNK_SIZE, "CardanoTxInlineDatumChunk");
        if (referenceScript) yield sendChunkedHexString(typedCall, referenceScript, MAX_CHUNK_SIZE, "CardanoTxReferenceScriptChunk");
    });
const ipv4AddressToHex = (ipv4Address)=>Buffer.from(ipv4Address.split(".").map((ipPart)=>parseInt(ipPart, 10))).toString("hex");
const ipv6AddressToHex = (ipv6Address)=>ipv6Address.split(":").join("");
const validatePoolMargin = (margin)=>{
    validateParams(margin, [
        {
            name: "numerator",
            type: "string",
            required: true
        },
        {
            name: "denominator",
            type: "string",
            required: true
        }
    ]);
};
const validatePoolMetadata = (metadata)=>{
    validateParams(metadata, [
        {
            name: "url",
            type: "string",
            required: true
        },
        {
            name: "hash",
            type: "string",
            required: true
        }
    ]);
};
const validatePoolRelay = (relay)=>{
    validateParams(relay, [
        {
            name: "type",
            type: "number",
            required: true
        }
    ]);
    if (relay.type === hdTransport.Messages.CardanoPoolRelayType.SINGLE_HOST_IP) {
        const paramsToValidate = [
            {
                name: "port",
                type: "number",
                required: true
            }
        ];
        if (relay.ipv4Address) paramsToValidate.push({
            name: "ipv4Address",
            type: "string",
            required: false
        });
        if (relay.ipv6Address) paramsToValidate.push({
            name: "ipv6Address",
            type: "string",
            required: false
        });
        validateParams(relay, paramsToValidate);
        if (!relay.ipv4Address && !relay.ipv6Address) throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.CallMethodInvalidParameter, "Either ipv4Address or ipv6Address must be supplied");
    } else if (relay.type === hdTransport.Messages.CardanoPoolRelayType.SINGLE_HOST_NAME) validateParams(relay, [
        {
            name: "hostName",
            type: "string",
            required: true
        },
        {
            name: "port",
            type: "number",
            required: true
        }
    ]);
    else if (relay.type === hdTransport.Messages.CardanoPoolRelayType.MULTIPLE_HOST_NAME) validateParams(relay, [
        {
            name: "hostName",
            type: "string",
            required: true
        }
    ]);
};
const validatePoolOwners = (owners)=>{
    owners.forEach((owner)=>{
        if (owner.stakingKeyHash) validateParams(owner, [
            {
                name: "stakingKeyHash",
                type: "string",
                required: !owner.stakingKeyPath
            }
        ]);
        if (owner.stakingKeyPath) validatePath(owner.stakingKeyPath, 5);
        if (!owner.stakingKeyHash && !owner.stakingKeyPath) throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.CallMethodInvalidParameter, "Either stakingKeyHash or stakingKeyPath must be supplied");
    });
    const ownersAsPathCount = owners.filter((owner)=>!!owner.stakingKeyPath).length;
    if (ownersAsPathCount !== 1) throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.CallMethodInvalidParameter, "Exactly one pool owner must be given as a path");
};
const validatePoolParameters = (poolParameters)=>{
    validateParams(poolParameters, [
        {
            name: "poolId",
            type: "string",
            required: true
        },
        {
            name: "vrfKeyHash",
            type: "string",
            required: true
        },
        {
            name: "pledge",
            type: "string",
            required: true
        },
        {
            name: "cost",
            type: "string",
            required: true
        },
        {
            name: "margin",
            type: "object",
            required: true
        },
        {
            name: "rewardAccount",
            type: "string",
            required: true
        },
        {
            name: "owners",
            type: "array",
            required: true
        },
        {
            name: "relays",
            type: "array",
            required: true,
            allowEmpty: true
        },
        {
            name: "metadata",
            type: "object"
        }
    ]);
    validatePoolMargin(poolParameters.margin);
    validatePoolOwners(poolParameters.owners);
    poolParameters.relays.forEach(validatePoolRelay);
    if (poolParameters.metadata) validatePoolMetadata(poolParameters.metadata);
};
const transformPoolParameters = (poolParameters)=>{
    if (!poolParameters) return {
        poolParameters: undefined,
        poolOwners: [],
        poolRelays: []
    };
    validatePoolParameters(poolParameters);
    return {
        poolParameters: {
            pool_id: poolParameters.poolId,
            vrf_key_hash: poolParameters.vrfKeyHash,
            pledge: poolParameters.pledge,
            cost: poolParameters.cost,
            margin_numerator: poolParameters.margin.numerator,
            margin_denominator: poolParameters.margin.denominator,
            reward_account: poolParameters.rewardAccount,
            metadata: poolParameters.metadata,
            owners_count: poolParameters.owners.length,
            relays_count: poolParameters.relays.length
        },
        poolOwners: poolParameters.owners.map((owner)=>({
                staking_key_hash: owner.stakingKeyHash,
                staking_key_path: owner.stakingKeyPath ? validatePath(owner.stakingKeyPath, 5) : undefined
            })),
        poolRelays: poolParameters.relays.map((relay)=>({
                type: relay.type,
                ipv4_address: relay.ipv4Address ? ipv4AddressToHex(relay.ipv4Address) : undefined,
                ipv6_address: relay.ipv6Address ? ipv6AddressToHex(relay.ipv6Address) : undefined,
                host_name: relay.hostName,
                port: relay.port
            }))
    };
};
const transformCertificate = (certificate)=>{
    const paramsToValidate = [
        {
            name: "type",
            type: "number",
            required: true
        }
    ];
    if (certificate.type !== hdTransport.Messages.CardanoCertificateType.STAKE_POOL_REGISTRATION) {
        paramsToValidate.push({
            name: "scriptHash",
            type: "string"
        });
        paramsToValidate.push({
            name: "keyHash",
            type: "string"
        });
    }
    if (certificate.type === hdTransport.Messages.CardanoCertificateType.STAKE_DELEGATION) paramsToValidate.push({
        name: "pool",
        type: "string",
        required: true
    });
    if (certificate.type === hdTransport.Messages.CardanoCertificateType.STAKE_POOL_REGISTRATION) paramsToValidate.push({
        name: "poolParameters",
        type: "object",
        required: true
    });
    validateParams(certificate, paramsToValidate);
    const { poolParameters, poolOwners, poolRelays } = transformPoolParameters(certificate.poolParameters);
    return {
        certificate: {
            type: certificate.type,
            path: certificate.path ? validatePath(certificate.path, 5) : undefined,
            script_hash: certificate.scriptHash,
            key_hash: certificate.keyHash,
            pool: certificate.pool,
            pool_parameters: poolParameters
        },
        poolOwners,
        poolRelays
    };
};
const MAX_DELEGATION_COUNT = 32;
const transformDelegation = (delegation)=>{
    validateParams(delegation, [
        {
            name: "votingPublicKey",
            type: "string",
            required: true
        },
        {
            name: "weight",
            type: "uint",
            required: true
        }
    ]);
    return {
        voting_public_key: delegation.votingPublicKey,
        weight: delegation.weight
    };
};
const transformGovernanceRegistrationParameters = (governanceRegistrationParameters)=>{
    validateParams(governanceRegistrationParameters, [
        {
            name: "votingPublicKey",
            type: "string"
        },
        {
            name: "stakingPath",
            required: true
        },
        {
            name: "nonce",
            type: "uint",
            required: true
        },
        {
            name: "format",
            type: "number"
        },
        {
            name: "delegations",
            type: "array",
            allowEmpty: true
        },
        {
            name: "votingPurpose",
            type: "uint"
        }
    ]);
    validateAddressParameters(governanceRegistrationParameters.rewardAddressParameters);
    const { delegations } = governanceRegistrationParameters;
    if (delegations && delegations.length > MAX_DELEGATION_COUNT) throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.CallMethodInvalidParameter, `At most ${MAX_DELEGATION_COUNT} delegations are allowed in a governance registration`);
    return {
        voting_public_key: governanceRegistrationParameters.votingPublicKey,
        staking_path: validatePath(governanceRegistrationParameters.stakingPath, 3),
        reward_address_parameters: addressParametersToProto(governanceRegistrationParameters.rewardAddressParameters),
        nonce: governanceRegistrationParameters.nonce,
        format: governanceRegistrationParameters.format,
        delegations: delegations === null || delegations === void 0 ? void 0 : delegations.map(transformDelegation),
        voting_purpose: governanceRegistrationParameters.votingPurpose
    };
};
const transformAuxiliaryData = (auxiliaryData)=>{
    validateParams(auxiliaryData, [
        {
            name: "hash",
            type: "string"
        }
    ]);
    let governanceRegistrationParameters;
    if (auxiliaryData.governanceRegistrationParameters) governanceRegistrationParameters = transformGovernanceRegistrationParameters(auxiliaryData.governanceRegistrationParameters);
    return {
        hash: auxiliaryData.hash,
        governance_registration_parameters: governanceRegistrationParameters
    };
};
const modifyAuxiliaryDataForBackwardsCompatibility = (auxiliary_data)=>{
    const { governance_registration_parameters } = auxiliary_data;
    if (governance_registration_parameters) {
        governance_registration_parameters.reward_address_parameters = modifyAddressParametersForBackwardsCompatibility(governance_registration_parameters.reward_address_parameters);
        return Object.assign(Object.assign({}, auxiliary_data), {
            governance_registration_parameters
        });
    }
    return auxiliary_data;
};
const gatherWitnessPaths = (inputsWithPath, certificatesWithPoolOwnersAndRelays, withdrawals, collateralInputsWithPath, requiredSigners, additionalWitnessRequests, signingMode)=>{
    const witnessPaths = new Map();
    function _insert(path) {
        const pathKey = JSON.stringify(path);
        witnessPaths.set(pathKey, path);
    }
    if (signingMode !== hdTransport.Messages.CardanoTxSigningMode.MULTISIG_TRANSACTION) {
        inputsWithPath.forEach(({ path })=>{
            if (path) _insert(path);
        });
        certificatesWithPoolOwnersAndRelays.forEach(({ certificate, poolOwners })=>{
            if (certificate.path && (certificate.type === hdTransport.Messages.CardanoCertificateType.STAKE_DELEGATION || certificate.type === hdTransport.Messages.CardanoCertificateType.STAKE_DEREGISTRATION)) _insert(certificate.path);
            poolOwners.forEach((poolOwner)=>{
                if (poolOwner.staking_key_path) _insert(poolOwner.staking_key_path);
            });
        });
        withdrawals.forEach(({ path })=>{
            if (path) _insert(path);
        });
    }
    if (signingMode === hdTransport.Messages.CardanoTxSigningMode.PLUTUS_TRANSACTION) collateralInputsWithPath.forEach(({ path })=>{
        if (path) _insert(path);
    });
    requiredSigners.forEach(({ key_path })=>{
        if (key_path) _insert(key_path);
    });
    additionalWitnessRequests.forEach((path)=>{
        _insert(path);
    });
    return Array.from(witnessPaths.values());
};
class CardanoSignTransaction extends BaseMethod {
    getVersionRange() {
        return {
            model_mini: {
                min: "3.0.0"
            },
            model_touch: {
                min: "4.1.0"
            }
        };
    }
    init() {
        var _a;
        this.checkDeviceId = true;
        this.notAllowDeviceMode = [
            ...this.notAllowDeviceMode,
            UI_REQUEST.INITIALIZE
        ];
        this.hasBundle = !!((_a = this.payload) === null || _a === void 0 ? void 0 : _a.bundle);
        const { payload } = this;
        validateParams(payload, [
            {
                name: "signingMode",
                type: "number",
                required: true
            },
            {
                name: "inputs",
                type: "array",
                required: true
            },
            {
                name: "outputs",
                type: "array",
                required: true,
                allowEmpty: true
            },
            {
                name: "fee",
                type: "uint",
                required: true
            },
            {
                name: "ttl",
                type: "uint"
            },
            {
                name: "certificates",
                type: "array",
                allowEmpty: true
            },
            {
                name: "withdrawals",
                type: "array",
                allowEmpty: true
            },
            {
                name: "mint",
                type: "array",
                allowEmpty: true
            },
            {
                name: "validityIntervalStart",
                type: "uint"
            },
            {
                name: "scriptDataHash",
                type: "string"
            },
            {
                name: "collateralInputs",
                type: "array",
                allowEmpty: true
            },
            {
                name: "requiredSigners",
                type: "array",
                allowEmpty: true
            },
            {
                name: "totalCollateral",
                type: "uint"
            },
            {
                name: "referenceInputs",
                type: "array",
                allowEmpty: true
            },
            {
                name: "protocolMagic",
                type: "number",
                required: true
            },
            {
                name: "networkId",
                type: "number",
                required: true
            },
            {
                name: "additionalWitnessRequests",
                type: "array",
                allowEmpty: true
            },
            {
                name: "derivationType",
                type: "number"
            },
            {
                name: "includeNetworkId",
                type: "boolean"
            }
        ]);
        const inputsWithPath = payload.inputs.map(transformInput);
        const outputsWithData = payload.outputs.map(transformOutput);
        let certificatesWithPoolOwnersAndRelays = [];
        if (payload.certificates) certificatesWithPoolOwnersAndRelays = payload.certificates.map(transformCertificate);
        let withdrawals = [];
        if (payload.withdrawals) withdrawals = payload.withdrawals.map((withdrawal)=>{
            validateParams(withdrawal, [
                {
                    name: "amount",
                    type: "uint",
                    required: true
                },
                {
                    name: "scriptHash",
                    type: "string"
                },
                {
                    name: "keyHash",
                    type: "string"
                }
            ]);
            return {
                path: withdrawal.path ? validatePath(withdrawal.path, 5) : undefined,
                amount: withdrawal.amount,
                script_hash: withdrawal.scriptHash,
                key_hash: withdrawal.keyHash
            };
        });
        let mint = [];
        if (payload.mint) mint = tokenBundleToProto(payload.mint);
        let auxiliaryData;
        if (payload.auxiliaryData) auxiliaryData = transformAuxiliaryData(payload.auxiliaryData);
        let additionalWitnessRequests = [];
        if (payload.additionalWitnessRequests) additionalWitnessRequests = payload.additionalWitnessRequests.map((witnessRequest)=>validatePath(witnessRequest, 3));
        let collateralInputsWithPath = [];
        if (payload.collateralInputs) collateralInputsWithPath = payload.collateralInputs.map(transformCollateralInput);
        let requiredSigners = [];
        if (payload.requiredSigners) requiredSigners = payload.requiredSigners.map((requiredSigner)=>{
            validateParams(requiredSigner, [
                {
                    name: "keyHash",
                    type: "string"
                }
            ]);
            return {
                key_path: requiredSigner.keyPath ? validatePath(requiredSigner.keyPath, 3) : undefined,
                key_hash: requiredSigner.keyHash
            };
        });
        const collateralReturnWithData = payload.collateralReturn ? transformOutput(payload.collateralReturn) : undefined;
        let referenceInputs = [];
        if (payload.referenceInputs) referenceInputs = payload.referenceInputs.map(transformReferenceInput);
        this.params = {
            signingMode: payload.signingMode,
            inputsWithPath,
            outputsWithData,
            fee: payload.fee,
            ttl: payload.ttl,
            certificatesWithPoolOwnersAndRelays,
            withdrawals,
            mint,
            auxiliaryData,
            validityIntervalStart: payload.validityIntervalStart,
            scriptDataHash: payload.scriptDataHash,
            collateralInputsWithPath,
            requiredSigners,
            collateralReturnWithData,
            totalCollateral: payload.totalCollateral,
            referenceInputs,
            protocolMagic: payload.protocolMagic,
            networkId: payload.networkId,
            witnessPaths: gatherWitnessPaths(inputsWithPath, certificatesWithPoolOwnersAndRelays, withdrawals, collateralInputsWithPath, requiredSigners, additionalWitnessRequests, payload.signingMode),
            additionalWitnessRequests,
            derivationType: typeof payload.derivationType !== "undefined" ? payload.derivationType : hdTransport.Messages.CardanoDerivationType.ICARUS,
            includeNetworkId: payload.includeNetworkId
        };
    }
    signTx() {
        return __awaiter(this, void 0, void 0, function*() {
            const typedCall = this.device.getCommands().typedCall.bind(this.device.getCommands());
            const hasAuxiliaryData = !!this.params.auxiliaryData;
            const signTxInitMessage = {
                signing_mode: this.params.signingMode,
                protocol_magic: this.params.protocolMagic,
                network_id: this.params.networkId,
                inputs_count: this.params.inputsWithPath.length,
                outputs_count: this.params.outputsWithData.length,
                fee: this.params.fee,
                ttl: this.params.ttl,
                certificates_count: this.params.certificatesWithPoolOwnersAndRelays.length,
                withdrawals_count: this.params.withdrawals.length,
                has_auxiliary_data: hasAuxiliaryData,
                validity_interval_start: this.params.validityIntervalStart,
                witness_requests_count: this.params.witnessPaths.length,
                minting_asset_groups_count: this.params.mint.length,
                script_data_hash: this.params.scriptDataHash,
                collateral_inputs_count: this.params.collateralInputsWithPath.length,
                required_signers_count: this.params.requiredSigners.length,
                has_collateral_return: this.params.collateralReturnWithData != null,
                total_collateral: this.params.totalCollateral,
                reference_inputs_count: this.params.referenceInputs.length,
                derivation_type: this.params.derivationType,
                include_network_id: this.params.includeNetworkId
            };
            yield typedCall("CardanoSignTxInit", "CardanoTxItemAck", signTxInitMessage);
            for (const { input } of this.params.inputsWithPath)yield typedCall("CardanoTxInput", "CardanoTxItemAck", input);
            for (const outputWithData of this.params.outputsWithData)yield sendOutput(typedCall, outputWithData);
            for (const { certificate, poolOwners, poolRelays } of this.params.certificatesWithPoolOwnersAndRelays){
                yield typedCall("CardanoTxCertificate", "CardanoTxItemAck", certificate);
                for (const poolOwner of poolOwners)yield typedCall("CardanoPoolOwner", "CardanoTxItemAck", poolOwner);
                for (const poolRelay of poolRelays)yield typedCall("CardanoPoolRelayParameters", "CardanoTxItemAck", poolRelay);
            }
            for (const withdrawal of this.params.withdrawals)yield typedCall("CardanoTxWithdrawal", "CardanoTxItemAck", withdrawal);
            let auxiliaryDataSupplement;
            if (this.params.auxiliaryData) {
                const { catalyst_registration_parameters } = this.params.auxiliaryData;
                if (catalyst_registration_parameters) this.params.auxiliaryData = modifyAuxiliaryDataForBackwardsCompatibility(this.params.auxiliaryData);
                const { message } = yield typedCall("CardanoTxAuxiliaryData", "CardanoTxAuxiliaryDataSupplement", this.params.auxiliaryData);
                const auxiliaryDataType = hdTransport.Messages.CardanoTxAuxiliaryDataSupplementType[message.type];
                if (auxiliaryDataType !== hdTransport.Messages.CardanoTxAuxiliaryDataSupplementType.NONE) auxiliaryDataSupplement = {
                    type: auxiliaryDataType,
                    auxiliaryDataHash: message.auxiliary_data_hash,
                    governanceSignature: message.governance_signature,
                    catalystSignature: message.governance_signature
                };
                yield typedCall("CardanoTxHostAck", "CardanoTxItemAck");
            }
            if (this.params.mint.length > 0) {
                yield typedCall("CardanoTxMint", "CardanoTxItemAck", {
                    asset_groups_count: this.params.mint.length
                });
                for (const assetGroup of this.params.mint){
                    yield typedCall("CardanoAssetGroup", "CardanoTxItemAck", {
                        policy_id: assetGroup.policyId,
                        tokens_count: assetGroup.tokens.length
                    });
                    for (const token of assetGroup.tokens)yield typedCall("CardanoToken", "CardanoTxItemAck", token);
                }
            }
            for (const { collateralInput } of this.params.collateralInputsWithPath)yield typedCall("CardanoTxCollateralInput", "CardanoTxItemAck", collateralInput);
            for (const requiredSigner of this.params.requiredSigners)yield typedCall("CardanoTxRequiredSigner", "CardanoTxItemAck", requiredSigner);
            if (this.params.collateralReturnWithData) yield sendOutput(typedCall, this.params.collateralReturnWithData);
            for (const referenceInput of this.params.referenceInputs)yield typedCall("CardanoTxReferenceInput", "CardanoTxItemAck", referenceInput);
            const witnesses = [];
            for (const path of this.params.witnessPaths){
                const { message } = yield typedCall("CardanoTxWitnessRequest", "CardanoTxWitnessResponse", {
                    path
                });
                witnesses.push({
                    type: hdTransport.Messages.CardanoTxWitnessType[message.type],
                    pubKey: message.pub_key,
                    signature: message.signature,
                    chainCode: message.chain_code
                });
            }
            const { message: txBodyHashMessage } = yield typedCall("CardanoTxHostAck", "CardanoTxBodyHash");
            yield typedCall("CardanoTxHostAck", "CardanoSignTxFinished");
            return {
                hash: txBodyHashMessage.tx_hash,
                witnesses,
                auxiliaryDataSupplement
            };
        });
    }
    run() {
        return this.signTx();
    }
}
class CardanoSignMessage extends BaseMethod {
    init() {
        this.checkDeviceId = true;
        this.notAllowDeviceMode = [
            ...this.notAllowDeviceMode,
            UI_REQUEST.INITIALIZE
        ];
        const { payload } = this;
        validateParams(payload, [
            {
                name: "path",
                type: "string",
                required: true
            },
            {
                name: "message",
                type: "string",
                required: true
            },
            {
                name: "derivationType",
                type: "number"
            },
            {
                name: "networkId",
                type: "number",
                required: true
            }
        ]);
        const addressN = validatePath(payload.path, 3);
        this.params = {
            address_n: addressN,
            message: payload.message,
            derivation_type: typeof payload.derivationType !== "undefined" ? payload.derivationType : hdTransport.Messages.CardanoDerivationType.ICARUS,
            network_id: payload.networkId
        };
    }
    getVersionRange() {
        return {
            model_mini: {
                min: "3.0.0"
            },
            model_touch: {
                min: "4.1.0"
            }
        };
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            const res = yield this.device.commands.typedCall("CardanoSignMessage", "CardanoMessageSignature", this.params);
            return res.message;
        });
    }
}
class FilecoinGetAddress extends BaseMethod {
    constructor(){
        super(...arguments);
        this.hasBundle = false;
    }
    init() {
        var _a;
        this.checkDeviceId = true;
        this.notAllowDeviceMode = [
            ...this.notAllowDeviceMode,
            UI_REQUEST.INITIALIZE
        ];
        this.hasBundle = !!((_a = this.payload) === null || _a === void 0 ? void 0 : _a.bundle);
        const payload = this.hasBundle ? this.payload : {
            bundle: [
                this.payload
            ]
        };
        validateParams(payload, [
            {
                name: "bundle",
                type: "array"
            }
        ]);
        this.params = [];
        payload.bundle.forEach((batch)=>{
            var _a;
            const addressN = validatePath(batch.path, 3);
            validateParams(batch, [
                {
                    name: "path",
                    required: true
                },
                {
                    name: "showOnOneKey",
                    type: "boolean"
                },
                {
                    name: "isTestnet",
                    type: "boolean"
                }
            ]);
            const showOnOneKey = (_a = batch.showOnOneKey) !== null && _a !== void 0 ? _a : true;
            this.params.push({
                address_n: addressN,
                show_display: showOnOneKey,
                testnet: batch.isTestnet
            });
        });
    }
    getVersionRange() {
        return {
            model_mini: {
                min: "2.10.0"
            },
            model_touch: {
                min: "3.5.0"
            }
        };
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            const responses = [];
            for(let i = 0; i < this.params.length; i++){
                const param = this.params[i];
                const res = yield this.device.commands.typedCall("FilecoinGetAddress", "FilecoinAddress", Object.assign({}, param));
                const { address } = res.message;
                const result = {
                    path: serializedPath(param.address_n),
                    address
                };
                responses.push(result);
                this.postPreviousAddressMessage(result);
            }
            return Promise.resolve(this.hasBundle ? responses : responses[0]);
        });
    }
}
class FilecoinSignTransaction extends BaseMethod {
    constructor(){
        super(...arguments);
        this.hasBundle = false;
    }
    init() {
        this.checkDeviceId = true;
        this.notAllowDeviceMode = [
            ...this.notAllowDeviceMode
        ];
        validateParams(this.payload, [
            {
                name: "path",
                required: true
            },
            {
                name: "rawTx",
                type: "hexString",
                required: true
            },
            {
                name: "isTestnet",
                type: "boolean"
            }
        ]);
        const { path, rawTx, isTestnet } = this.payload;
        const addressN = validatePath(path, 3);
        this.params = {
            address_n: addressN,
            raw_tx: formatAnyHex(rawTx),
            testnet: isTestnet
        };
    }
    getVersionRange() {
        return {
            model_mini: {
                min: "2.10.0"
            },
            model_touch: {
                min: "3.5.0"
            }
        };
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            const res = yield this.device.commands.typedCall("FilecoinSignTx", "FilecoinSignedTx", Object.assign({}, this.params));
            const { signature } = res.message;
            return {
                path: serializedPath(this.params.address_n),
                signature
            };
        });
    }
}
class PolkadotGetAddress extends BaseMethod {
    constructor(){
        super(...arguments);
        this.hasBundle = false;
    }
    init() {
        var _a;
        this.checkDeviceId = true;
        this.notAllowDeviceMode = [
            ...this.notAllowDeviceMode
        ];
        this.hasBundle = !!((_a = this.payload) === null || _a === void 0 ? void 0 : _a.bundle);
        const payload = this.hasBundle ? this.payload : {
            bundle: [
                this.payload
            ]
        };
        validateParams(payload, [
            {
                name: "bundle",
                type: "array"
            }
        ]);
        this.params = [];
        payload.bundle.forEach((batch)=>{
            var _a;
            const addressN = validatePath(batch.path, 3);
            validateParams(batch, [
                {
                    name: "path",
                    required: true
                },
                {
                    name: "prefix",
                    required: true
                },
                {
                    name: "network",
                    required: true
                },
                {
                    name: "showOnOneKey",
                    type: "boolean"
                }
            ]);
            const showOnOneKey = (_a = batch.showOnOneKey) !== null && _a !== void 0 ? _a : true;
            const { prefix, network } = batch;
            this.params.push({
                address_n: addressN,
                prefix,
                network,
                show_display: showOnOneKey
            });
        });
    }
    getVersionRange() {
        return {
            model_mini: {
                min: "3.0.0"
            },
            model_touch: {
                min: "4.3.0"
            }
        };
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            const responses = [];
            for(let i = 0; i < this.params.length; i++){
                const param = this.params[i];
                const res = yield this.device.commands.typedCall("PolkadotGetAddress", "PolkadotAddress", Object.assign({}, param));
                const { address, public_key } = res.message;
                const path = serializedPath(param.address_n);
                responses.push({
                    path,
                    address,
                    publicKey: public_key !== null && public_key !== void 0 ? public_key : ""
                });
                this.postPreviousAddressMessage({
                    path,
                    address
                });
            }
            return Promise.resolve(this.hasBundle ? responses : responses[0]);
        });
    }
}
class PolkadotSignTransaction extends BaseMethod {
    constructor(){
        super(...arguments);
        this.hasBundle = false;
    }
    init() {
        this.checkDeviceId = true;
        this.notAllowDeviceMode = [
            ...this.notAllowDeviceMode
        ];
        validateParams(this.payload, [
            {
                name: "path",
                required: true
            },
            {
                name: "network",
                required: true
            },
            {
                name: "rawTx",
                type: "hexString",
                required: true
            }
        ]);
        const { path, rawTx, network } = this.payload;
        const addressN = validatePath(path, 3);
        this.params = {
            address_n: addressN,
            network,
            raw_tx: formatAnyHex(rawTx)
        };
    }
    getVersionRange() {
        return {
            model_mini: {
                min: "3.0.0"
            },
            model_touch: {
                min: "4.3.0"
            }
        };
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            const res = yield this.device.commands.typedCall("PolkadotSignTx", "PolkadotSignedTx", Object.assign({}, this.params));
            const { signature } = res.message;
            return {
                path: serializedPath(this.params.address_n),
                signature
            };
        });
    }
}
class KaspaGetAddress extends BaseMethod {
    constructor(){
        super(...arguments);
        this.hasBundle = false;
    }
    init() {
        var _a;
        this.checkDeviceId = true;
        this.notAllowDeviceMode = [
            ...this.notAllowDeviceMode,
            UI_REQUEST.INITIALIZE
        ];
        this.hasBundle = !!((_a = this.payload) === null || _a === void 0 ? void 0 : _a.bundle);
        const payload = this.hasBundle ? this.payload : {
            bundle: [
                this.payload
            ]
        };
        validateParams(payload, [
            {
                name: "bundle",
                type: "array"
            }
        ]);
        this.params = [];
        payload.bundle.forEach((batch)=>{
            var _a;
            const addressN = validatePath(batch.path, 3);
            validateParams(batch, [
                {
                    name: "path",
                    required: true
                },
                {
                    name: "showOnOneKey",
                    type: "boolean"
                },
                {
                    name: "prefix",
                    type: "string"
                },
                {
                    name: "scheme",
                    type: "string"
                }
            ]);
            const showOnOneKey = (_a = batch.showOnOneKey) !== null && _a !== void 0 ? _a : true;
            this.params.push({
                address_n: addressN,
                show_display: showOnOneKey,
                prefix: batch.prefix,
                scheme: batch.scheme
            });
        });
    }
    getVersionRange() {
        return {
            model_mini: {
                min: "3.0.0"
            },
            model_touch: {
                min: "4.3.0"
            }
        };
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            const responses = [];
            for(let i = 0; i < this.params.length; i++){
                const param = this.params[i];
                const res = yield this.device.commands.typedCall("KaspaGetAddress", "KaspaAddress", Object.assign({}, param));
                const { address } = res.message;
                const result = {
                    path: serializedPath(param.address_n),
                    address
                };
                responses.push(result);
                this.postPreviousAddressMessage(result);
            }
            return Promise.resolve(this.hasBundle ? responses : responses[0]);
        });
    }
}
var SignatureType;
(function(SignatureType) {
    SignatureType[SignatureType["SIGHASH_ALL"] = 1] = "SIGHASH_ALL";
    SignatureType[SignatureType["SIGHASH_NONE"] = 2] = "SIGHASH_NONE";
    SignatureType[SignatureType["SIGHASH_SINGLE"] = 3] = "SIGHASH_SINGLE";
    SignatureType[SignatureType["SIGHASH_FORKID"] = 64] = "SIGHASH_FORKID";
    SignatureType[SignatureType["SIGHASH_ANYONECANPAY"] = 128] = "SIGHASH_ANYONECANPAY";
})(SignatureType || (SignatureType = {}));
function isBuffer(arg) {
    return buffer.Buffer.isBuffer(arg) || arg instanceof Uint8Array;
}
function bigNumberToBuffer(bn, options) {
    const hex = bn.toString(16);
    const paddedHex = hex.padStart(options.size * 2, "0");
    return buffer.Buffer.from(paddedHex, "hex");
}
class BufferWriter {
    constructor(obj){
        this.bufLen = 0;
        if (obj) this.set(obj);
        else this.bufs = [];
    }
    set(obj) {
        this.bufs = obj.bufs || this.bufs || [];
        this.bufLen = this.bufs.reduce((prev, buf)=>prev + buf.length, 0);
        return this;
    }
    toBuffer() {
        return this.concat();
    }
    concat() {
        return buffer.Buffer.concat(this.bufs, this.bufLen);
    }
    write(buf) {
        if (!isBuffer(buf)) throw new Error("BufferWriter.write: Invalid type");
        this.bufs.push(buf);
        this.bufLen += buf.length;
        return this;
    }
    writeReverse(buf) {
        if (!isBuffer(buf)) throw new Error("BufferWriter.write: Invalid type");
        this.bufs.push(buf.reverse());
        this.bufLen += buf.length;
        return this;
    }
    writeVarBytes(buf) {
        if (!isBuffer(buf)) throw new Error("BufferWriter.write: Invalid type");
        this.writeUInt64LE(new BigNumber__default["default"](buf.length));
        this.write(buf);
        return this;
    }
    writeUInt8(n) {
        const buf = buffer.Buffer.alloc(1);
        buf.writeUInt8(n, 0);
        this.write(buf);
        return this;
    }
    writeUInt16BE(n) {
        const buf = buffer.Buffer.alloc(2);
        buf.writeUInt16BE(n, 0);
        this.write(buf);
        return this;
    }
    writeUInt16LE(n) {
        const buf = buffer.Buffer.alloc(2);
        buf.writeUInt16LE(n, 0);
        this.write(buf);
        return this;
    }
    writeUInt32BE(n) {
        const buf = buffer.Buffer.alloc(4);
        buf.writeUInt32BE(n, 0);
        this.write(buf);
        return this;
    }
    writeInt32LE(n) {
        const buf = buffer.Buffer.alloc(4);
        buf.writeInt32LE(n, 0);
        this.write(buf);
        return this;
    }
    writeUInt32LE(n) {
        const buf = buffer.Buffer.alloc(4);
        buf.writeUInt32LE(n, 0);
        this.write(buf);
        return this;
    }
    writeUInt64BEBN(bn) {
        const buf = bigNumberToBuffer(bn, {
            size: 8
        });
        this.write(buf);
        return this;
    }
    writeUInt64LE(bn) {
        const buf = bigNumberToBuffer(bn, {
            size: 8
        });
        this.writeReverse(buf);
        return this;
    }
    writeVarintNum(n) {
        const buf = BufferWriter.varintBufNum(n);
        this.write(buf);
        return this;
    }
    writeVarintBN(bn) {
        const buf = BufferWriter.varintBufBN(bn);
        this.write(buf);
        return this;
    }
    static varintBufNum(n) {
        let buf;
        if (n < 253) {
            buf = buffer.Buffer.alloc(1);
            buf.writeUInt8(n, 0);
        } else if (n < 0x10000) {
            buf = buffer.Buffer.alloc(3);
            buf.writeUInt8(253, 0);
            buf.writeUInt16LE(n, 1);
        } else if (n < 0x100000000) {
            buf = buffer.Buffer.alloc(5);
            buf.writeUInt8(254, 0);
            buf.writeUInt32LE(n, 1);
        } else {
            buf = buffer.Buffer.alloc(9);
            buf.writeUInt8(255, 0);
            buf.writeInt32LE(n & -1, 1);
            buf.writeUInt32LE(Math.floor(n / 0x100000000), 5);
        }
        return buf;
    }
    static varintBufBN(bn) {
        let buf;
        const n = bn.toNumber();
        if (n < 253) {
            buf = buffer.Buffer.alloc(1);
            buf.writeUInt8(n, 0);
        } else if (n < 0x10000) {
            buf = buffer.Buffer.alloc(3);
            buf.writeUInt8(253, 0);
            buf.writeUInt16LE(n, 1);
        } else if (n < 0x100000000) {
            buf = buffer.Buffer.alloc(5);
            buf.writeUInt8(254, 0);
            buf.writeUInt32LE(n, 1);
        } else {
            const bw = new BufferWriter();
            bw.writeUInt8(255);
            bw.writeUInt64LE(bn);
            buf = bw.concat();
        }
        return buf;
    }
}
const TransactionSigningHashKey = Buffer.from("TransactionSigningHash");
class HashWriter {
    constructor(){
        this.bw = new BufferWriter();
        this.blake2b = blake2b.blake2b.create({
            dkLen: 32,
            key: TransactionSigningHashKey
        });
        this.hash = {
            update: (buf)=>{
                this.bw.write(buf);
                this.blake2b.update(buf);
            },
            digest: ()=>Buffer.from(this.blake2b.digest())
        };
    }
    writeUInt8(value) {
        const buf = new BufferWriter();
        buf.writeUInt8(value);
        this.hash.update(buf.toBuffer());
    }
    writeUInt16LE(value) {
        const buf = new BufferWriter();
        buf.writeUInt16LE(value);
        this.hash.update(buf.toBuffer());
    }
    writeUInt32LE(value) {
        const buf = new BufferWriter();
        buf.writeUInt32LE(value);
        this.hash.update(buf.toBuffer());
    }
    writeUInt64LE(value) {
        const buf = new BufferWriter();
        buf.writeUInt64LE(new BigNumber__default["default"](value));
        this.hash.update(buf.toBuffer());
    }
    writeVarBytes(buf) {
        this.writeUInt64LE(buf.length);
        this.hash.update(buf);
    }
    writeHash(buf) {
        this.hash.update(buf);
    }
    finalize() {
        return this.hash.digest();
    }
    toBuffer() {
        return this.bw.toBuffer();
    }
}
function zeroHash() {
    return Buffer.alloc(32);
}
function zeroSubnetworkID() {
    return Buffer.alloc(20);
}
function isSighashAnyoneCanPay(sighashType) {
    return (sighashType & SignatureType.SIGHASH_ANYONECANPAY) === SignatureType.SIGHASH_ANYONECANPAY;
}
function isSighashSingle(sighashType) {
    return (sighashType & 31) === SignatureType.SIGHASH_SINGLE;
}
function isSighashNone(sighashType) {
    return (sighashType & 31) === SignatureType.SIGHASH_NONE;
}
function hashOutpoint(hashWriter, input) {
    hashWriter.writeHash(Buffer.from(input.prevTxId, "hex"));
    hashWriter.writeUInt32LE(input.outputIndex);
}
function getPreviousOutputsHash(transaction, sighashType) {
    if (isSighashAnyoneCanPay(sighashType)) return zeroHash();
    const hashWriter = new HashWriter();
    transaction.inputs.forEach((input)=>hashOutpoint(hashWriter, input));
    return hashWriter.finalize();
}
function getSequencesHash(transaction, sighashType) {
    if (isSighashSingle(sighashType) || isSighashAnyoneCanPay(sighashType) || isSighashNone(sighashType)) return zeroHash();
    const hashWriter = new HashWriter();
    transaction.inputs.forEach((input)=>hashWriter.writeUInt64LE(input.sequenceNumber));
    return hashWriter.finalize();
}
function getSigOpCountsHash(transaction, sighashType) {
    if (isSighashAnyoneCanPay(sighashType)) return zeroHash();
    const hashWriter = new HashWriter();
    transaction.inputs.forEach((input)=>hashWriter.writeUInt8(input.sigOpCount));
    return hashWriter.finalize();
}
function hashTxOut(hashWriter, output) {
    hashWriter.writeUInt64LE(output.satoshis);
    hashWriter.writeUInt16LE(0);
    hashWriter.writeVarBytes(Buffer.from(output.script, "hex"));
}
function getOutputsHash(transaction, inputNumber, sighashType) {
    if (isSighashNone(sighashType)) return zeroHash();
    if (isSighashSingle(sighashType)) {
        if (inputNumber >= transaction.outputs.length) return zeroHash();
        const hashWriter = new HashWriter();
        return hashWriter.finalize();
    }
    const hashWriter = new HashWriter();
    transaction.outputs.forEach((output)=>hashTxOut(hashWriter, output));
    return hashWriter.finalize();
}
function serialize(transaction, inputNumber) {
    var _a;
    const hashWriter = new HashWriter();
    hashWriter.writeUInt16LE(transaction.version);
    hashWriter.writeHash(getPreviousOutputsHash(transaction, transaction.sigHashType));
    hashWriter.writeHash(getSequencesHash(transaction, transaction.sigHashType));
    hashWriter.writeHash(getSigOpCountsHash(transaction, transaction.sigHashType));
    const input = transaction.inputs[inputNumber];
    hashOutpoint(hashWriter, input);
    hashWriter.writeUInt16LE(0);
    hashWriter.writeVarBytes(Buffer.from(input.output.script, "hex"));
    hashWriter.writeUInt64LE(input.output.satoshis);
    hashWriter.writeUInt64LE(input.sequenceNumber);
    hashWriter.writeUInt8((_a = transaction.sigOpCount) !== null && _a !== void 0 ? _a : 1);
    hashWriter.writeHash(getOutputsHash(transaction, inputNumber, transaction.sigHashType));
    hashWriter.writeUInt64LE(transaction.lockTime);
    hashWriter.writeHash(zeroSubnetworkID());
    hashWriter.writeUInt64LE(0);
    hashWriter.writeHash(zeroHash());
    hashWriter.writeUInt8(transaction.sigHashType);
    return {
        hash: hashWriter.finalize(),
        raw: hashWriter.toBuffer()
    };
}
class KaspaSignTransaction extends BaseMethod {
    constructor(){
        super(...arguments);
        this.hasBundle = false;
    }
    init() {
        var _a, _b, _c, _d, _e;
        this.checkDeviceId = true;
        this.notAllowDeviceMode = [
            ...this.notAllowDeviceMode,
            UI_REQUEST.INITIALIZE
        ];
        const payload = this.payload;
        validateParams(payload, [
            {
                name: "version",
                type: "number"
            },
            {
                name: "sigHashType",
                type: "number",
                required: true
            },
            {
                name: "inputs",
                type: "array",
                required: true
            },
            {
                name: "outputs",
                type: "array",
                required: true
            },
            {
                name: "lockTime",
                required: true
            },
            {
                name: "sigOpCount",
                type: "number"
            },
            {
                name: "subNetworkID",
                type: "string"
            }
        ]);
        const inputs = payload.inputs.map((input)=>{
            var _a;
            validateParams(input, [
                {
                    name: "path",
                    type: "string",
                    required: true
                },
                {
                    name: "prevTxId",
                    type: "string",
                    required: true
                },
                {
                    name: "outputIndex",
                    type: "number",
                    required: true
                },
                {
                    name: "sequenceNumber",
                    required: true
                }
            ]);
            const addressN = validatePath(input.path, 3);
            return Object.assign(Object.assign({}, input), {
                path: addressN,
                sigOpCount: (_a = input.sigOpCount) !== null && _a !== void 0 ? _a : 1
            });
        });
        const outputs = payload.outputs.map((output)=>{
            var _a;
            validateParams(output, [
                {
                    name: "satoshis",
                    required: true
                },
                {
                    name: "script",
                    type: "string",
                    required: true
                },
                {
                    name: "scriptVersion",
                    type: "number"
                }
            ]);
            return Object.assign(Object.assign({}, output), {
                scriptVersion: (_a = output.scriptVersion) !== null && _a !== void 0 ? _a : 0
            });
        });
        this.params = Object.assign(Object.assign({}, payload), {
            inputs,
            outputs,
            scheme: (_a = payload.scheme) !== null && _a !== void 0 ? _a : "schnorr",
            prefix: (_b = payload.prefix) !== null && _b !== void 0 ? _b : "kaspa",
            sigHashType: (_c = payload.sigHashType) !== null && _c !== void 0 ? _c : SignatureType.SIGHASH_ALL | SignatureType.SIGHASH_FORKID,
            sigOpCount: (_d = payload.sigOpCount) !== null && _d !== void 0 ? _d : 1,
            subNetworkID: (_e = payload.subNetworkID) !== null && _e !== void 0 ? _e : utils.bytesToHex(zeroSubnetworkID())
        });
    }
    getVersionRange() {
        return {
            model_mini: {
                min: "3.0.0"
            },
            model_touch: {
                min: "4.3.0"
            }
        };
    }
    processTxRequest(typedCall, res, index, signature) {
        var _a;
        return __awaiter(this, void 0, void 0, function*() {
            if (res.type === "KaspaSignedTx") {
                signature.push({
                    index,
                    signature: res.message.signature
                });
                return signature;
            }
            if (res.type === "KaspaTxInputRequest") {
                signature.push({
                    index,
                    signature: (_a = res.message.signature) !== null && _a !== void 0 ? _a : ""
                });
                const nextIndex = res.message.request_index;
                const { raw: rawMessage } = serialize(this.params, nextIndex);
                const input = this.params.inputs[nextIndex];
                const response = yield typedCall("KaspaTxInputAck", [
                    "KaspaTxInputRequest",
                    "KaspaSignedTx"
                ], {
                    address_n: input.path,
                    raw_message: utils.bytesToHex(rawMessage)
                });
                return this.processTxRequest(typedCall, response, nextIndex, signature);
            }
            return signature;
        });
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            const { raw: rawMessage } = serialize(this.params, 0);
            const input = this.params.inputs[0];
            const { device, params } = this;
            const response = yield device.commands.typedCall("KaspaSignTx", [
                "KaspaTxInputRequest",
                "KaspaSignedTx"
            ], {
                address_n: input.path,
                raw_message: utils.bytesToHex(rawMessage),
                scheme: params.scheme,
                prefix: params.prefix,
                input_count: params.inputs.length
            });
            return this.processTxRequest(device.commands.typedCall.bind(device.commands), response, 0, []);
        });
    }
}
class NexaGetAddress extends BaseMethod {
    constructor(){
        super(...arguments);
        this.hasBundle = false;
    }
    init() {
        var _a;
        this.checkDeviceId = true;
        this.notAllowDeviceMode = [
            ...this.notAllowDeviceMode,
            UI_REQUEST.INITIALIZE
        ];
        this.hasBundle = !!((_a = this.payload) === null || _a === void 0 ? void 0 : _a.bundle);
        const payload = this.hasBundle ? this.payload : {
            bundle: [
                this.payload
            ]
        };
        validateParams(payload, [
            {
                name: "bundle",
                type: "array"
            }
        ]);
        this.params = [];
        payload.bundle.forEach((batch)=>{
            var _a;
            const addressN = validatePath(batch.path, 3);
            validateParams(batch, [
                {
                    name: "path",
                    required: true
                },
                {
                    name: "showOnOneKey",
                    type: "boolean"
                },
                {
                    name: "prefix",
                    type: "string"
                },
                {
                    name: "scheme",
                    type: "string"
                }
            ]);
            const showOnOneKey = (_a = batch.showOnOneKey) !== null && _a !== void 0 ? _a : true;
            this.params.push({
                address_n: addressN,
                show_display: showOnOneKey,
                prefix: batch.prefix,
                scheme: batch.scheme
            });
        });
    }
    getVersionRange() {
        return {
            model_mini: {
                min: "3.2.0"
            },
            model_touch: {
                min: "4.4.0"
            }
        };
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            const responses = [];
            for(let i = 0; i < this.params.length; i++){
                const param = this.params[i];
                const res = yield this.device.commands.typedCall("NexaGetAddress", "NexaAddress", Object.assign({}, param));
                const { address } = res.message;
                const result = {
                    path: serializedPath(param.address_n),
                    pub: res.message.public_key,
                    address
                };
                responses.push(result);
                this.postPreviousAddressMessage(result);
            }
            return Promise.resolve(this.hasBundle ? responses : responses[0]);
        });
    }
}
class NexaSignTransaction extends BaseMethod {
    constructor(){
        super(...arguments);
        this.hasBundle = false;
    }
    init() {
        const payload = this.payload;
        payload.inputs.forEach((input)=>{
            validateParams(input, [
                {
                    name: "path",
                    type: "string",
                    required: true
                },
                {
                    name: "message",
                    type: "string",
                    required: true
                },
                {
                    name: "prefix",
                    type: "string",
                    required: true
                }
            ]);
            return input;
        });
        this.params = payload;
    }
    getVersionRange() {
        return {
            model_mini: {
                min: "3.2.0"
            },
            model_touch: {
                min: "4.4.0"
            }
        };
    }
    processTxRequest(typedCall, res, index, signatures) {
        return __awaiter(this, void 0, void 0, function*() {
            const { signature } = res.message;
            if (!signature) throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.ResponseUnexpectTypeError, "signature is not valid");
            if (res.type === "NexaSignedTx") {
                signatures.push({
                    index,
                    signature
                });
                return signatures;
            }
            if (res.type === "NexaTxInputRequest") {
                signatures.push({
                    index,
                    signature
                });
                const nextIndex = res.message.request_index;
                const input = this.params.inputs[nextIndex];
                const response = yield typedCall("NexaTxInputAck", [
                    "NexaTxInputRequest",
                    "NexaSignedTx"
                ], {
                    address_n: input.path,
                    raw_message: input.message
                });
                return this.processTxRequest(typedCall, response, nextIndex, signatures);
            }
            return signatures;
        });
    }
    run() {
        return __awaiter(this, void 0, void 0, function*() {
            const { device, params } = this;
            const input = params.inputs[0];
            const response = yield device.commands.typedCall("NexaSignTx", [
                "NexaTxInputRequest",
                "NexaSignedTx"
            ], {
                address_n: validatePath(input.path, 3),
                raw_message: input.message,
                prefix: input.prefix,
                input_count: params.inputs.length
            });
            return this.processTxRequest(device.commands.typedCall.bind(device.commands), response, 0, []);
        });
    }
}
var ApiMethods = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    searchDevices: SearchDevices,
    getFeatures: GetFeatures,
    getPassphraseState: GetPassphraseState,
    getLogs: CheckBridgeStatus$1,
    checkFirmwareRelease: CheckFirmwareRelease,
    checkBLEFirmwareRelease: CheckBLEFirmwareRelease,
    checkTransportRelease: CheckTransportRelease,
    checkBridgeStatus: CheckBridgeStatus,
    checkBridgeRelease: CheckBridgeRelease,
    checkBootloaderRelease: CheckBootloaderRelease,
    deviceBackup: DeviceBackup,
    deviceChangePin: DeviceChangePin,
    deviceFlags: DeviceFlags,
    deviceRebootToBootloader: DeviceRebootToBootloader,
    deviceRebootToBoardloader: DeviceRebootToBoardloader,
    deviceRecovery: DeviceRecovery,
    deviceReset: DeviceReset,
    deviceSettings: DeviceSettings,
    deviceUpdateReboot: DeviceUpdateReboot,
    deviceUploadResource: DeviceUploadResource,
    deviceSupportFeatures: DeviceSupportFeatures,
    deviceVerify: DeviceVerify,
    deviceWipe: DeviceWipe,
    deviceFullyUploadResource: DeviceFullyUploadResource,
    deviceUpdateBootloader: DeviceUpdateBootloader,
    firmwareUpdate: FirmwareUpdate,
    firmwareUpdateV2: FirmwareUpdateV2,
    requestWebUsbDevice: RequestWebUsbDevice,
    cipherKeyValue: CipherKeyValue,
    btcGetAddress: BTCGetAddress,
    btcGetPublicKey: BTCGetPublicKey,
    btcSignMessage: BTCSignMessage,
    btcSignTransaction: BTCSignTransaction,
    btcVerifyMessage: BTCVerifyMessage,
    confluxGetAddress: ConfluxGetAddress,
    confluxSignMessage: ConfluxSignMessage,
    confluxSignMessageCIP23: ConfluxSignMessageCIP23,
    confluxSignTransaction: ConfluxSignTransaction,
    evmGetAddress: EvmGetAddress,
    evmGetPublicKey: EVMGetPublicKey,
    evmSignMessage: EVMSignMessage$2,
    evmSignMessageEIP712: EVMSignMessageEIP712,
    evmSignTransaction: EVMSignTransaction,
    evmSignTypedData: EVMSignTypedData,
    evmVerifyMessage: EVMSignMessage$1,
    starcoinGetAddress: StarcoinGetAddress,
    starcoinGetPublicKey: StarcoinGetPublicKey,
    starcoinSignMessage: StarcoinSignMessage,
    starcoinSignTransaction: StarcoinSignTransaction,
    starcoinVerifyMessage: EVMSignMessage,
    nemGetAddress: NEMGetAddress,
    nemSignTransaction: NEMSignTransaction,
    solGetAddress: SolGetAddress,
    solSignTransaction: SolSignTransaction,
    stellarGetAddress: StellarGetAddress,
    stellarSignTransaction: StellarSignTransaction,
    tronGetAddress: TronGetAddress,
    tronSignMessage: TronSignMessage,
    tronSignTransaction: TronSignTransaction,
    nearGetAddress: NearGetAddress,
    nearSignTransaction: NearSignTransaction,
    aptosGetAddress: AptosGetAddress,
    aptosGetPublicKey: AptosGetPublicKey,
    aptosSignTransaction: AptosSignTransaction,
    aptosSignMessage: AptosSignMessage,
    algoGetAddress: AlgoGetAddress,
    algoSignTransaction: AlgoSignTransaction,
    cosmosGetAddress: CosmosGetAddress,
    cosmosGetPublicKey: CosmosGetPublicKey,
    cosmosSignTransaction: CosmosSignTransaction,
    xrpGetAddress: XrpGetAddress$1,
    xrpSignTransaction: XrpGetAddress,
    suiGetAddress: SuiGetAddress,
    suiGetPublicKey: SuiGetPublicKey,
    suiSignTransaction: SuiSignTransaction,
    cardanoGetAddress: CardanoGetAddress,
    cardanoGetPublicKey: CardanoGetPublicKey,
    cardanoSignTransaction: CardanoSignTransaction,
    cardanoSignMessage: CardanoSignMessage,
    filecoinGetAddress: FilecoinGetAddress,
    filecoinSignTransaction: FilecoinSignTransaction,
    polkadotGetAddress: PolkadotGetAddress,
    polkadotSignTransaction: PolkadotSignTransaction,
    kaspaGetAddress: KaspaGetAddress,
    kaspaSignTransaction: KaspaSignTransaction,
    nexaGetAddress: NexaGetAddress,
    nexaSignTransaction: NexaSignTransaction
});
function findMethod(message) {
    const { method } = message.payload;
    if (typeof method !== "string") throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.CallMethodInvalidParameter, "Method is not set");
    const MethodConstructor = ApiMethods[method];
    if (MethodConstructor) return new MethodConstructor(message);
    throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.CallMethodInvalidParameter, `Method ${method} is not set`);
}
const resolveAfter = (msec, value)=>new Promise((resolve)=>{
        setTimeout(resolve, msec, value);
    });
const Log$1 = getLogger(exports.LoggerNames.DeviceConnector);
class DeviceConnector {
    constructor(){
        this.listenTimestamp = 0;
        this.current = null;
        this.upcoming = [];
        this.listening = false;
        TransportManager.load();
        this.transport = TransportManager.getTransport();
        DevicePool.setConnector(this);
    }
    enumerate() {
        return __awaiter(this, void 0, void 0, function*() {
            try {
                const descriptors = yield this.transport.enumerate();
                this.upcoming = descriptors;
                this._reportDevicesChange();
                return {
                    descriptors
                };
            } catch (error) {
                safeThrowError(error);
            }
        });
    }
    listen() {
        return __awaiter(this, void 0, void 0, function*() {
            const waitForEvent = this.current !== null;
            const current = this.current || [];
            this.listening = true;
            let descriptors;
            try {
                Log$1.debug("Start listening", current);
                this.listenTimestamp = new Date().getTime();
                descriptors = waitForEvent ? yield this.transport.listen(current) : yield this.transport.enumerate();
                if (!this.listening) return;
                this.upcoming = descriptors;
                Log$1.debug("Listen result", descriptors);
                this._reportDevicesChange();
                if (this.listening) this.listen();
            } catch (error) {
                const time = new Date().getTime() - this.listenTimestamp;
                Log$1.debug("Listen error", "timestamp", time, typeof error);
                if (time > 1100) {
                    yield resolveAfter(1000, null);
                    if (this.listening) this.listen();
                } else Log$1.warn("Transport error");
            }
        });
    }
    stop() {
        this.listening = false;
    }
    acquire(path, session, forceCleanRunPromise) {
        return __awaiter(this, void 0, void 0, function*() {
            Log$1.debug("acquire", path, session);
            const env = DataManager.getSettings("env");
            try {
                let res;
                if (env === "react-native") res = yield this.transport.acquire({
                    uuid: path,
                    forceCleanRunPromise
                });
                else res = yield this.transport.acquire({
                    path,
                    previous: session !== null && session !== void 0 ? session : null
                });
                return res;
            } catch (error) {
                Log$1.debug("acquire error: ", error.message);
                safeThrowError(error);
            }
        });
    }
    release(session, onclose) {
        return __awaiter(this, void 0, void 0, function*() {
            try {
                const res = yield this.transport.release(session, onclose);
                return res;
            } catch (error) {
                safeThrowError(error);
            }
        });
    }
    _reportDevicesChange() {
        DevicePool.reportDeviceChange(this.upcoming);
    }
}
const Log = getLogger(exports.LoggerNames.Core);
const parseInitOptions = (method)=>{
    var _a;
    return {
        initSession: method === null || method === void 0 ? void 0 : method.payload.initSession,
        passphraseState: method === null || method === void 0 ? void 0 : method.payload.passphraseState,
        deviceId: method === null || method === void 0 ? void 0 : method.payload.deviceId,
        deriveCardano: (method === null || method === void 0 ? void 0 : method.name.startsWith("cardano")) || ((_a = method === null || method === void 0 ? void 0 : method.payload) === null || _a === void 0 ? void 0 : _a.deriveCardano)
    };
};
let _core;
let _deviceList;
let _connector;
let _uiPromises = [];
let _callPromise;
const callApiQueue = [];
const deviceCacheMap = new Map();
let pollingId = 1;
const pollingState = {};
let preConnectCache = {
    passphraseState: undefined
};
const callAPI = (message)=>__awaiter(void 0, void 0, void 0, function*() {
        var _a;
        if (!message.id || !message.payload || message.type !== IFRAME.CALL) return Promise.reject(hdShared.ERRORS.TypedError("on call: message.id or message.payload is missing"));
        let method;
        let messageResponse;
        try {
            method = findMethod(message);
            method.connector = _connector;
            method.postMessage = postMessage;
            method.init();
        } catch (error) {
            return Promise.reject(error);
        }
        DevicePool.emitter.on(DEVICE.CONNECT, onDeviceConnectHandler);
        if (!method.useDevice) try {
            const response = yield method.run();
            return createResponseMessage(method.responseID, true, response);
        } catch (error) {
            return createResponseMessage(method.responseID, false, {
                error
            });
        }
        callApiQueue.push(method);
        if (callApiQueue.length > 1) Log.debug("should cancel the previous method execution: ", callApiQueue.map((m)=>m.name));
        const connectStateChange = preConnectCache.passphraseState !== method.payload.passphraseState;
        preConnectCache = {
            passphraseState: method.payload.passphraseState
        };
        if (connectStateChange || method.payload.initSession) {
            Log.debug("passphrase state change, clear device cache");
            DevicePool.clearDeviceCache(method.payload.connectId);
        }
        if (pollingState[pollingId]) pollingState[pollingId] = false;
        pollingId += 1;
        let device;
        try {
            device = yield ensureConnected(method, pollingId);
        } catch (e) {
            return createResponseMessage(method.responseID, false, {
                error: e
            });
        }
        Log.debug("Call API - setDevice: ", device.mainId);
        (_a = method.setDevice) === null || _a === void 0 || _a.call(method, device);
        device.on(DEVICE.PIN, onDevicePinHandler);
        device.on(DEVICE.BUTTON, onDeviceButtonHandler);
        device.on(DEVICE.PASSPHRASE, message.payload.useEmptyPassphrase ? onEmptyPassphraseHandler : onDevicePassphraseHandler);
        device.on(DEVICE.PASSPHRASE_ON_DEVICE, onEnterPassphraseOnDeviceHandler);
        device.on(DEVICE.FEATURES, onDeviceFeaturesHandler);
        try {
            const inner = ()=>__awaiter(void 0, void 0, void 0, function*() {
                    const deviceType = getDeviceType(device.features);
                    const deviceModel = getDeviceModel(device.features);
                    const versionRangeType = method.getVersionRange()[deviceType];
                    const versionRangeModel = method.getVersionRange()[deviceModel];
                    const versionRange = versionRangeType !== null && versionRangeType !== void 0 ? versionRangeType : versionRangeModel;
                    if (device.features) {
                        yield DataManager.checkAndReloadData();
                        const newVersionStatus = DataManager.getFirmwareStatus(device.features);
                        const bleVersionStatus = DataManager.getBLEFirmwareStatus(device.features);
                        if ((newVersionStatus === "required" || bleVersionStatus === "required") && method.skipForceUpdateCheck === false) throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.NewFirmwareForceUpdate, "Device firmware version is too low, please update to the latest version", {
                            connectId: method.connectId,
                            deviceId: method.deviceId
                        });
                        if (versionRange) {
                            const currentVersion = getDeviceFirmwareVersion(device.features).join(".");
                            if (semver__default["default"].valid(versionRange.min) && semver__default["default"].lt(currentVersion, versionRange.min)) {
                                if (newVersionStatus === "none" || newVersionStatus === "valid") throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.NewFirmwareUnRelease);
                                return Promise.reject(hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.CallMethodNeedUpgradeFirmware, `Device firmware version is too low, please update to ${versionRange.min}`, {
                                    current: currentVersion,
                                    require: versionRange.min
                                }));
                            }
                            if (versionRange.max && semver__default["default"].valid(versionRange.max) && semver__default["default"].gte(currentVersion, versionRange.max)) return Promise.reject(hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.CallMethodDeprecated, `Device firmware version is too high, this method has been deprecated in ${versionRange.max}`, {
                                current: currentVersion,
                                deprecated: versionRange.max
                            }));
                        }
                    }
                    const unexpectedMode = device.hasUnexpectedMode(method.notAllowDeviceMode, method.requireDeviceMode);
                    if (unexpectedMode) {
                        if (unexpectedMode === UI_REQUEST$1.NOT_IN_BOOTLOADER) return Promise.reject(hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.DeviceUnexpectedBootloaderMode));
                        return Promise.reject(hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.DeviceUnexpectedMode, unexpectedMode));
                    }
                    if (method.deviceId && method.checkDeviceId) {
                        const isSameDeviceID = device.checkDeviceId(method.deviceId);
                        if (!isSameDeviceID) return Promise.reject(hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.DeviceCheckDeviceIdError));
                    }
                    method.checkFirmwareRelease();
                    method.checkDeviceSupportFeature();
                    if (_deviceList) yield TransportManager.reconfigure(device.features);
                    checkPassphraseSafety(method, device.features);
                    if (device.hasUsePassphrase() && method.useDevicePassphraseState) {
                        const support = supportNewPassphrase(device.features);
                        if (!support.support) return Promise.reject(hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.DeviceNotSupportPassphrase, `Device not support passphrase, please update to ${support.require}`, {
                            require: support.require
                        }));
                        const passphraseState = yield device.checkPassphraseState();
                        checkPassphraseSafety(method, device.features);
                        if (passphraseState) {
                            DevicePool.clearDeviceCache(method.payload.connectId);
                            return Promise.reject(hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.DeviceCheckPassphraseStateError));
                        }
                    }
                    try {
                        yield method.checkSafetyLevelOnTestNet();
                    } catch (e) {
                        const error = e instanceof hdShared.HardwareError ? e : hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.RuntimeError, "open safety check failed.");
                        messageResponse = createResponseMessage(method.responseID, false, {
                            error
                        });
                        _callPromise === null || _callPromise === void 0 || _callPromise.resolve(messageResponse);
                        return;
                    }
                    try {
                        const response = yield method.run();
                        Log.debug("Call API - Inner Method Run: ");
                        messageResponse = createResponseMessage(method.responseID, true, response);
                        _callPromise === null || _callPromise === void 0 || _callPromise.resolve(messageResponse);
                    } catch (error) {
                        Log.debug("Call API - Inner Method Run Error: ", error);
                        messageResponse = createResponseMessage(method.responseID, false, {
                            error
                        });
                        _callPromise === null || _callPromise === void 0 || _callPromise.resolve(messageResponse);
                    }
                });
            Log.debug("Call API - Device Run: ", device.mainId);
            const runOptions = Object.assign({
                keepSession: method.payload.keepSession
            }, parseInitOptions(method));
            const deviceRun = ()=>device.run(inner, runOptions);
            _callPromise = hdShared.createDeferred(deviceRun);
            try {
                return yield _callPromise.promise;
            } catch (e) {
                Log.debug("Device Run Error: ", e);
                return createResponseMessage(method.responseID, false, {
                    error: e
                });
            }
        } catch (error) {
            messageResponse = createResponseMessage(method.responseID, false, {
                error
            });
            _callPromise === null || _callPromise === void 0 || _callPromise.reject(hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.CallMethodError, error.message));
            Log.debug("Call API - Run Error: ", error);
        } finally{
            const response = messageResponse;
            if (response) {
                if (method) method.dispose();
            }
            const index = method.responseID ? callApiQueue.findIndex((m)=>m.responseID === method.responseID) : -1;
            if (index > -1) {
                callApiQueue.splice(index, 1);
                Log.debug("Remove the finished method from the queue： ", callApiQueue.map((m)=>m.name));
            }
            closePopup();
            cleanup();
            removeDeviceListener(device);
        }
    });
function initDeviceList(method) {
    return __awaiter(this, void 0, void 0, function*() {
        const env = DataManager.getSettings("env");
        if (env === "react-native" && method.connectId) {
            yield TransportManager.configure();
            return;
        }
        if (!_deviceList) {
            _deviceList = new DeviceList();
            yield TransportManager.configure();
            _deviceList.connector = _connector;
        }
        yield _deviceList.getDeviceLists(method.connectId, parseInitOptions(method));
    });
}
function initDevice(method) {
    if (!_deviceList) throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.DeviceListNotInitialized);
    let device;
    const allDevices = _deviceList.allDevices();
    if (method.connectId) device = _deviceList.getDevice(method.connectId);
    else if (allDevices.length === 1) [device] = allDevices;
    else if (allDevices.length > 1) throw hdShared.ERRORS.TypedError(method.name === "firmwareUpdateV2" ? hdShared.HardwareErrorCode.FirmwareUpdateLimitOneDevice : hdShared.HardwareErrorCode.SelectDevice);
    if (!device) throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.DeviceNotFound);
    device.deviceConnector = _connector;
    return device;
}
function initDeviceForBle(method) {
    if (!method.connectId && !_deviceList) throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.DeviceListNotInitialized);
    if (!method.connectId) return initDevice(method);
    let device;
    if (deviceCacheMap.has(method.connectId)) device = deviceCacheMap.get(method.connectId);
    else {
        device = Device.fromDescriptor({
            id: method.connectId
        });
        deviceCacheMap.set(method.connectId, device);
    }
    device.deviceConnector = _connector;
    return device;
}
let bleTimeoutRetry = 0;
function connectDeviceForBle(method, device) {
    return __awaiter(this, void 0, void 0, function*() {
        try {
            yield device.acquire();
            yield device.initialize(parseInitOptions(method));
        } catch (err) {
            if (err.errorCode === hdShared.HardwareErrorCode.BleTimeoutError && bleTimeoutRetry <= 5) {
                bleTimeoutRetry += 1;
                Log.debug(`Bletooth connect timeout and will retry, retry count: ${bleTimeoutRetry}`);
                yield wait(3000);
                yield connectDeviceForBle(method, device);
            } else throw err;
        }
    });
}
const ensureConnected = (method, pollingId)=>__awaiter(void 0, void 0, void 0, function*() {
        let tryCount = 0;
        const MAX_RETRY_COUNT = method.payload && method.payload.retryCount || 5;
        const POLL_INTERVAL_TIME = method.payload && method.payload.pollIntervalTime || 1000;
        const TIME_OUT = method.payload && method.payload.timeout || 10000;
        let timer = null;
        Log.debug(`EnsureConnected function start, MAX_RETRY_COUNT=${MAX_RETRY_COUNT}, POLL_INTERVAL_TIME=${POLL_INTERVAL_TIME}  `);
        const poll = (time = POLL_INTERVAL_TIME)=>__awaiter(void 0, void 0, void 0, function*() {
                return new Promise((resolve, reject)=>__awaiter(void 0, void 0, void 0, function*() {
                        if (!pollingState[pollingId]) {
                            Log.debug("EnsureConnected function stop, polling id: ", pollingId);
                            reject(hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.PollingStop));
                            return;
                        }
                        if (timer) clearTimeout(timer);
                        timer = setTimeout(()=>{
                            reject(hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.PollingTimeout));
                        }, TIME_OUT);
                        tryCount += 1;
                        Log.debug("EnsureConnected function try count: ", tryCount, " poll interval time: ", time);
                        try {
                            yield initDeviceList(method);
                        } catch (error) {
                            Log.debug("device list error: ", error);
                            if ([
                                hdShared.HardwareErrorCode.BridgeNotInstalled,
                                hdShared.HardwareErrorCode.BridgeTimeoutError
                            ].includes(error.errorCode)) {
                                _deviceList = undefined;
                                reject(error);
                                return;
                            }
                            if (error.errorCode === hdShared.HardwareErrorCode.TransportNotConfigured) yield TransportManager.configure();
                        }
                        const env = DataManager.getSettings("env");
                        let device;
                        try {
                            if (env === "react-native") device = initDeviceForBle(method);
                            else device = initDevice(method);
                            if (device) {
                                if (timer) clearTimeout(timer);
                                if (env === "react-native") {
                                    bleTimeoutRetry = 0;
                                    yield connectDeviceForBle(method, device);
                                }
                                resolve(device);
                                return;
                            }
                        } catch (error) {
                            Log.debug("device error: ", error);
                            if ([
                                hdShared.HardwareErrorCode.BlePermissionError,
                                hdShared.HardwareErrorCode.BleLocationError,
                                hdShared.HardwareErrorCode.BleLocationServicesDisabled,
                                hdShared.HardwareErrorCode.BleDeviceNotBonded,
                                hdShared.HardwareErrorCode.BleDeviceBondError,
                                hdShared.HardwareErrorCode.BleCharacteristicNotifyError,
                                hdShared.HardwareErrorCode.BleTimeoutError,
                                hdShared.HardwareErrorCode.BleWriteCharacteristicError,
                                hdShared.HardwareErrorCode.BleAlreadyConnected,
                                hdShared.HardwareErrorCode.FirmwareUpdateLimitOneDevice
                            ].includes(error.errorCode)) {
                                reject(error);
                                return;
                            }
                        }
                        if (tryCount > 5) {
                            if (timer) clearTimeout(timer);
                            Log.debug("EnsureConnected get to max try count, will return: ", tryCount);
                            reject(hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.DeviceNotFound));
                            return;
                        }
                        return setTimeout(()=>resolve(poll(time * 1.5)), time);
                    }));
            });
        pollingState[pollingId] = true;
        return poll();
    });
const cancel = (connectId)=>{
    const env = DataManager.getSettings("env");
    try {
        if (connectId) {
            let device;
            if (env === "react-native") device = initDeviceForBle({
                connectId
            });
            else device = initDevice({
                connectId
            });
            device === null || device === void 0 || device.interruptionFromUser();
        }
    } catch (e) {
        Log.error("Cancel API Error: ", e);
    }
    cleanup();
    closePopup();
};
const checkPassphraseSafety = (method, features)=>{
    if (!method.useDevicePassphraseState) return;
    if ((features === null || features === void 0 ? void 0 : features.passphrase_protection) === true && (method.payload.passphraseState == null || method.payload.passphraseState === "") && !method.payload.useEmptyPassphrase) {
        DevicePool.clearDeviceCache(method.payload.connectId);
        throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.DeviceOpenedPassphrase);
    }
    if ((features === null || features === void 0 ? void 0 : features.passphrase_protection) === false && method.payload.passphraseState) {
        DevicePool.clearDeviceCache(method.payload.connectId);
        throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.DeviceNotOpenedPassphrase);
    }
};
const cleanup = ()=>{
    _uiPromises = [];
    Log.debug("Cleanup...");
};
const removeDeviceListener = (device)=>{
    device.removeAllListeners();
    DevicePool.emitter.removeAllListeners(DEVICE.CONNECT);
};
const closePopup = ()=>{
    postMessage(createUiMessage(UI_REQUEST$1.CLOSE_UI_WINDOW));
};
const onDeviceConnectHandler = (device)=>{
    const env = DataManager.getSettings("env");
    const deviceObject = env === "react-native" ? device : device.toMessageObject();
    postMessage(createDeviceMessage(DEVICE.CONNECT, {
        device: deviceObject
    }));
};
const onDeviceDisconnectHandler = (device)=>{
    const env = DataManager.getSettings("env");
    const deviceObject = env === "react-native" ? device : device.toMessageObject();
    postMessage(createDeviceMessage(DEVICE.DISCONNECT, {
        device: deviceObject
    }));
};
const onDevicePinHandler = (...[device, type, callback])=>__awaiter(void 0, void 0, void 0, function*() {
        Log.debug("onDevicePinHandler");
        const uiPromise = createUiPromise(UI_RESPONSE.RECEIVE_PIN, device);
        postMessage(createUiMessage(UI_REQUEST$1.REQUEST_PIN, {
            device: device.toMessageObject(),
            type
        }));
        const uiResp = yield uiPromise.promise;
        callback(null, uiResp.payload);
    });
const onDeviceButtonHandler = (...[device, request])=>{
    postMessage(createDeviceMessage(DEVICE.BUTTON, Object.assign(Object.assign({}, request), {
        device: device.toMessageObject()
    })));
    if (request.code === "ButtonRequest_PinEntry") postMessage(createUiMessage(UI_REQUEST$1.REQUEST_PIN, {
        device: device.toMessageObject(),
        type: "ButtonRequest_PinEntry"
    }));
    else postMessage(createUiMessage(UI_REQUEST$1.REQUEST_BUTTON, {
        device: device.toMessageObject()
    }));
};
const onDeviceFeaturesHandler = (...[_, features])=>{
    postMessage(createDeviceMessage(DEVICE.FEATURES, Object.assign({}, features)));
};
const onDevicePassphraseHandler = (...[device, callback])=>__awaiter(void 0, void 0, void 0, function*() {
        Log.debug("onDevicePassphraseHandler");
        const uiPromise = createUiPromise(UI_RESPONSE.RECEIVE_PASSPHRASE, device);
        postMessage(createUiMessage(UI_REQUEST$1.REQUEST_PASSPHRASE, {
            device: device.toMessageObject(),
            passphraseState: device.passphraseState
        }));
        const uiResp = yield uiPromise.promise;
        const { value, passphraseOnDevice, save } = uiResp.payload;
        callback({
            passphrase: value.normalize("NFKD"),
            passphraseOnDevice,
            cache: save
        });
    });
const onEmptyPassphraseHandler = (...[_, callback])=>{
    Log.debug("onEmptyPassphraseHandler");
    callback({
        passphrase: ""
    });
};
const onEnterPassphraseOnDeviceHandler = (...[device])=>{
    postMessage(createUiMessage(UI_REQUEST$1.REQUEST_PASSPHRASE_ON_DEVICE, {
        device: device.toMessageObject(),
        passphraseState: device.passphraseState
    }));
};
const postMessage = (message)=>{
    _core.emit(CORE_EVENT, message);
};
const createUiPromise = (promiseEvent, device)=>{
    const uiPromise = hdShared.createDeferred(promiseEvent, device);
    _uiPromises.push(uiPromise);
    return uiPromise;
};
const findUiPromise = (promiseEvent)=>_uiPromises.find((p)=>p.id === promiseEvent);
const removeUiPromise = (promise)=>{
    _uiPromises = _uiPromises.filter((p)=>p !== promise);
};
class Core extends events.exports {
    handleMessage(message) {
        var _a, _b, _c, _d;
        return __awaiter(this, void 0, void 0, function*() {
            switch(message.type){
                case UI_RESPONSE.RECEIVE_PIN:
                case UI_RESPONSE.RECEIVE_PASSPHRASE:
                    {
                        const uiPromise = findUiPromise(message.type);
                        if (uiPromise) {
                            uiPromise.resolve(message);
                            removeUiPromise(uiPromise);
                        }
                        break;
                    }
                case UI_REQUEST$1.BLUETOOTH_PERMISSION:
                case UI_REQUEST$1.LOCATION_PERMISSION:
                case UI_REQUEST$1.LOCATION_SERVICE_PERMISSION:
                    postMessage(message);
                    break;
                case IFRAME.CALL:
                    {
                        const response = yield callAPI(message);
                        const { success, payload } = response;
                        if (success) return response;
                        return Object.assign(Object.assign({}, response), {
                            payload: Object.assign(Object.assign({}, payload), {
                                connectId: (_b = (_a = message.payload) === null || _a === void 0 ? void 0 : _a.connectId) !== null && _b !== void 0 ? _b : "",
                                deviceId: (_d = (_c = message.payload) === null || _c === void 0 ? void 0 : _c.deviceId) !== null && _d !== void 0 ? _d : ""
                            })
                        });
                    }
                case IFRAME.CANCEL:
                    cancel(message.payload.connectId);
                    break;
            }
            return Promise.resolve(message);
        });
    }
    dispose() {}
}
const initCore = ()=>{
    _core = new Core();
    return _core;
};
const initConnector = ()=>{
    _connector = new DeviceConnector();
    DevicePool.emitter.on(DEVICE.DISCONNECT, onDeviceDisconnectHandler);
    return _connector;
};
const initTransport = (Transport, plugin)=>{
    TransportManager.setTransport(Transport, plugin);
};
const init = (settings, Transport, plugin)=>__awaiter(void 0, void 0, void 0, function*() {
        try {
            try {
                yield DataManager.load(settings);
                initTransport(Transport, plugin);
            } catch (_b) {
                Log.error("DataManager.load error");
            }
            enableLog(DataManager.getSettings("debug"));
            if (DataManager.getSettings("env") !== "react-native") setLoggerPostMessage(postMessage);
            initCore();
            initConnector();
            return _core;
        } catch (error) {
            Log.error("core init", error);
        }
    });
const HardwareSdk = ({ init, call, dispose, eventEmitter, uiResponse, cancel, updateSettings })=>inject({
        init,
        call,
        dispose,
        eventEmitter,
        uiResponse,
        cancel,
        updateSettings
    });
const HardwareSDKLowLevel = ({ init, call, dispose, eventEmitter, addHardwareGlobalEventListener, uiResponse, cancel, updateSettings })=>lowLevelInject({
        init,
        call,
        dispose,
        eventEmitter,
        addHardwareGlobalEventListener,
        uiResponse,
        cancel,
        updateSettings
    });
const HardwareTopLevelSdk = ()=>topLevelInject();
Object.defineProperty(exports, "PROTO", {
    enumerable: true,
    get: function() {
        return hdTransport.Messages;
    }
});
exports.CORE_EVENT = CORE_EVENT;
exports.Core = Core;
exports.DEFAULT_PRIORITY = DEFAULT_PRIORITY;
exports.DEVICE = DEVICE;
exports.DEVICE_EVENT = DEVICE_EVENT;
exports.DataManager = DataManager;
exports.DeviceModelToTypes = DeviceModelToTypes;
exports.DeviceTypeToModels = DeviceTypeToModels;
exports.FIRMWARE = FIRMWARE;
exports.FIRMWARE_EVENT = FIRMWARE_EVENT;
exports.HardwareSDKLowLevel = HardwareSDKLowLevel;
exports.HardwareTopLevelSdk = HardwareTopLevelSdk;
exports.IFRAME = IFRAME;
exports.LOG = LOG;
exports.LOG_EVENT = LOG_EVENT;
exports.RESPONSE_EVENT = RESPONSE_EVENT;
exports.UI_EVENT = UI_EVENT;
exports.UI_REQUEST = UI_REQUEST$1;
exports.UI_RESPONSE = UI_RESPONSE;
exports.checkNeedUpdateBootForClassicAndMini = checkNeedUpdateBootForClassicAndMini;
exports.checkNeedUpdateBootForTouch = checkNeedUpdateBootForTouch;
exports.corsValidator = corsValidator;
exports.createDeviceMessage = createDeviceMessage;
exports.createErrorMessage = createErrorMessage;
exports.createFirmwareMessage = createFirmwareMessage;
exports.createIFrameMessage = createIFrameMessage;
exports.createLogMessage = createLogMessage;
exports.createResponseMessage = createResponseMessage;
exports.createUiMessage = createUiMessage;
exports.createUiResponse = createUiResponse;
exports["default"] = HardwareSdk;
exports.enableLog = enableLog;
exports.getDeviceLabel = getDeviceLabel;
exports.getDeviceType = getDeviceType;
exports.getDeviceTypeByBleName = getDeviceTypeByBleName;
exports.getDeviceTypeByDeviceId = getDeviceTypeByDeviceId;
exports.getDeviceUUID = getDeviceUUID;
exports.getEnv = getEnv;
exports.getFirmwareUpdateField = getFirmwareUpdateField;
exports.getHDPath = getHDPath;
exports.getHomeScreenHex = getHomeScreenHex;
exports.getLog = getLog;
exports.getLogger = getLogger;
exports.getOutputScriptType = getOutputScriptType;
exports.getSDKVersion = getSDKVersion;
exports.getScriptType = getScriptType;
exports.getTimeStamp = getTimeStamp;
exports.httpRequest = httpRequest;
exports.initCore = init;
exports.isValidVersionArray = isValidVersionArray;
exports.isValidVersionString = isValidVersionString;
exports.normalizeVersionArray = normalizeVersionArray;
exports.parseConnectSettings = parseConnectSettings;
exports.parseMessage = parseMessage;
exports.patchFeatures = patchFeatures;
exports.safeThrowError = safeThrowError;
exports.setLoggerPostMessage = setLoggerPostMessage;
exports.supportInputPinOnSoftware = supportInputPinOnSoftware;
exports.versionCompare = versionCompare;
exports.versionSplit = versionSplit;
exports.wait = wait;

},{"73edeffe60a8e68b":"6tQNr","1139e48f07fc2969":"9b0Ym","fdb5764d4d0876f4":"avzkU","69e4186655659d9f":"gIwns","fa714668eef2e075":"j5ACk","b3fd151d6b0f5809":"5WdJJ","92e338de2728c632":"1jA8a","64e524ea58cdfdf2":"4MCHQ","9f5c1708ede1ba06":"eqGp2","3838adddd7db5b5e":"1rT7D","be07e9afeed78ad8":"riw9z","75461cd0f2a64932":"jlOPZ","ded9cefc8e5c4c3e":"lkzyF","84f125717592932a":"f6K5D","c6555bb0c3dc343f":"dR2CP","a8ce48eb11c5df9f":"lXkpJ"}],"6tQNr":[function(require,module,exports) {
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */ /* eslint-disable no-proto */ "use strict";
const base64 = require("9c62938f1dccc73c");
const ieee754 = require("aceacb6a4531a9d2");
const customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" // eslint-disable-line dot-notation
 ? Symbol["for"]("nodejs.util.inspect.custom") // eslint-disable-line dot-notation
 : null;
exports.Buffer = Buffer;
exports.SlowBuffer = SlowBuffer;
exports.INSPECT_MAX_BYTES = 50;
const K_MAX_LENGTH = 0x7fffffff;
exports.kMaxLength = K_MAX_LENGTH;
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */ Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();
if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
function typedArraySupport() {
    // Can typed array instances can be augmented?
    try {
        const arr = new Uint8Array(1);
        const proto = {
            foo: function() {
                return 42;
            }
        };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
    } catch (e) {
        return false;
    }
}
Object.defineProperty(Buffer.prototype, "parent", {
    enumerable: true,
    get: function() {
        if (!Buffer.isBuffer(this)) return undefined;
        return this.buffer;
    }
});
Object.defineProperty(Buffer.prototype, "offset", {
    enumerable: true,
    get: function() {
        if (!Buffer.isBuffer(this)) return undefined;
        return this.byteOffset;
    }
});
function createBuffer(length) {
    if (length > K_MAX_LENGTH) throw new RangeError('The value "' + length + '" is invalid for option "size"');
    // Return an augmented `Uint8Array` instance
    const buf = new Uint8Array(length);
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */ function Buffer(arg, encodingOrOffset, length) {
    // Common case.
    if (typeof arg === "number") {
        if (typeof encodingOrOffset === "string") throw new TypeError('The "string" argument must be of type string. Received type number');
        return allocUnsafe(arg);
    }
    return from(arg, encodingOrOffset, length);
}
Buffer.poolSize = 8192 // not used by this implementation
;
function from(value, encodingOrOffset, length) {
    if (typeof value === "string") return fromString(value, encodingOrOffset);
    if (ArrayBuffer.isView(value)) return fromArrayView(value);
    if (value == null) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
    if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) return fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof SharedArrayBuffer !== "undefined" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) return fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof value === "number") throw new TypeError('The "value" argument must not be of type number. Received type number');
    const valueOf = value.valueOf && value.valueOf();
    if (valueOf != null && valueOf !== value) return Buffer.from(valueOf, encodingOrOffset, length);
    const b = fromObject(value);
    if (b) return b;
    if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") return Buffer.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
    throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/ Buffer.from = function(value, encodingOrOffset, length) {
    return from(value, encodingOrOffset, length);
};
// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
Object.setPrototypeOf(Buffer, Uint8Array);
function assertSize(size) {
    if (typeof size !== "number") throw new TypeError('"size" argument must be of type number');
    else if (size < 0) throw new RangeError('The value "' + size + '" is invalid for option "size"');
}
function alloc(size, fill, encoding) {
    assertSize(size);
    if (size <= 0) return createBuffer(size);
    if (fill !== undefined) // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpreted as a start offset.
    return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
    return createBuffer(size);
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/ Buffer.alloc = function(size, fill, encoding) {
    return alloc(size, fill, encoding);
};
function allocUnsafe(size) {
    assertSize(size);
    return createBuffer(size < 0 ? 0 : checked(size) | 0);
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */ Buffer.allocUnsafe = function(size) {
    return allocUnsafe(size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */ Buffer.allocUnsafeSlow = function(size) {
    return allocUnsafe(size);
};
function fromString(string, encoding) {
    if (typeof encoding !== "string" || encoding === "") encoding = "utf8";
    if (!Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
    const length = byteLength(string, encoding) | 0;
    let buf = createBuffer(length);
    const actual = buf.write(string, encoding);
    if (actual !== length) // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual);
    return buf;
}
function fromArrayLike(array) {
    const length = array.length < 0 ? 0 : checked(array.length) | 0;
    const buf = createBuffer(length);
    for(let i = 0; i < length; i += 1)buf[i] = array[i] & 255;
    return buf;
}
function fromArrayView(arrayView) {
    if (isInstance(arrayView, Uint8Array)) {
        const copy = new Uint8Array(arrayView);
        return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
    }
    return fromArrayLike(arrayView);
}
function fromArrayBuffer(array, byteOffset, length) {
    if (byteOffset < 0 || array.byteLength < byteOffset) throw new RangeError('"offset" is outside of buffer bounds');
    if (array.byteLength < byteOffset + (length || 0)) throw new RangeError('"length" is outside of buffer bounds');
    let buf;
    if (byteOffset === undefined && length === undefined) buf = new Uint8Array(array);
    else if (length === undefined) buf = new Uint8Array(array, byteOffset);
    else buf = new Uint8Array(array, byteOffset, length);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
}
function fromObject(obj) {
    if (Buffer.isBuffer(obj)) {
        const len = checked(obj.length) | 0;
        const buf = createBuffer(len);
        if (buf.length === 0) return buf;
        obj.copy(buf, 0, 0, len);
        return buf;
    }
    if (obj.length !== undefined) {
        if (typeof obj.length !== "number" || numberIsNaN(obj.length)) return createBuffer(0);
        return fromArrayLike(obj);
    }
    if (obj.type === "Buffer" && Array.isArray(obj.data)) return fromArrayLike(obj.data);
}
function checked(length) {
    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= K_MAX_LENGTH) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
    return length | 0;
}
function SlowBuffer(length) {
    if (+length != length) length = 0;
    return Buffer.alloc(+length);
}
Buffer.isBuffer = function isBuffer(b) {
    return b != null && b._isBuffer === true && b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
    ;
};
Buffer.compare = function compare(a, b) {
    if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
    if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);
    if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
    if (a === b) return 0;
    let x = a.length;
    let y = b.length;
    for(let i = 0, len = Math.min(x, y); i < len; ++i)if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
Buffer.isEncoding = function isEncoding(encoding) {
    switch(String(encoding).toLowerCase()){
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return true;
        default:
            return false;
    }
};
Buffer.concat = function concat(list, length) {
    if (!Array.isArray(list)) throw new TypeError('"list" argument must be an Array of Buffers');
    if (list.length === 0) return Buffer.alloc(0);
    let i;
    if (length === undefined) {
        length = 0;
        for(i = 0; i < list.length; ++i)length += list[i].length;
    }
    const buffer = Buffer.allocUnsafe(length);
    let pos = 0;
    for(i = 0; i < list.length; ++i){
        let buf = list[i];
        if (isInstance(buf, Uint8Array)) {
            if (pos + buf.length > buffer.length) {
                if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf);
                buf.copy(buffer, pos);
            } else Uint8Array.prototype.set.call(buffer, buf, pos);
        } else if (!Buffer.isBuffer(buf)) throw new TypeError('"list" argument must be an Array of Buffers');
        else buf.copy(buffer, pos);
        pos += buf.length;
    }
    return buffer;
};
function byteLength(string, encoding) {
    if (Buffer.isBuffer(string)) return string.length;
    if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) return string.byteLength;
    if (typeof string !== "string") throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string);
    const len = string.length;
    const mustMatch = arguments.length > 2 && arguments[2] === true;
    if (!mustMatch && len === 0) return 0;
    // Use a for loop to avoid recursion
    let loweredCase = false;
    for(;;)switch(encoding){
        case "ascii":
        case "latin1":
        case "binary":
            return len;
        case "utf8":
        case "utf-8":
            return utf8ToBytes(string).length;
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return len * 2;
        case "hex":
            return len >>> 1;
        case "base64":
            return base64ToBytes(string).length;
        default:
            if (loweredCase) return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
            ;
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
    }
}
Buffer.byteLength = byteLength;
function slowToString(encoding, start, end) {
    let loweredCase = false;
    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.
    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) start = 0;
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) return "";
    if (end === undefined || end > this.length) end = this.length;
    if (end <= 0) return "";
    // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;
    if (end <= start) return "";
    if (!encoding) encoding = "utf8";
    while(true)switch(encoding){
        case "hex":
            return hexSlice(this, start, end);
        case "utf8":
        case "utf-8":
            return utf8Slice(this, start, end);
        case "ascii":
            return asciiSlice(this, start, end);
        case "latin1":
        case "binary":
            return latin1Slice(this, start, end);
        case "base64":
            return base64Slice(this, start, end);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return utf16leSlice(this, start, end);
        default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = (encoding + "").toLowerCase();
            loweredCase = true;
    }
}
// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true;
function swap(b, n, m) {
    const i = b[n];
    b[n] = b[m];
    b[m] = i;
}
Buffer.prototype.swap16 = function swap16() {
    const len = this.length;
    if (len % 2 !== 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
    for(let i = 0; i < len; i += 2)swap(this, i, i + 1);
    return this;
};
Buffer.prototype.swap32 = function swap32() {
    const len = this.length;
    if (len % 4 !== 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
    for(let i = 0; i < len; i += 4){
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
    }
    return this;
};
Buffer.prototype.swap64 = function swap64() {
    const len = this.length;
    if (len % 8 !== 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
    for(let i = 0; i < len; i += 8){
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
    }
    return this;
};
Buffer.prototype.toString = function toString() {
    const length = this.length;
    if (length === 0) return "";
    if (arguments.length === 0) return utf8Slice(this, 0, length);
    return slowToString.apply(this, arguments);
};
Buffer.prototype.toLocaleString = Buffer.prototype.toString;
Buffer.prototype.equals = function equals(b) {
    if (!Buffer.isBuffer(b)) throw new TypeError("Argument must be a Buffer");
    if (this === b) return true;
    return Buffer.compare(this, b) === 0;
};
Buffer.prototype.inspect = function inspect() {
    let str = "";
    const max = exports.INSPECT_MAX_BYTES;
    str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
    if (this.length > max) str += " ... ";
    return "<Buffer " + str + ">";
};
if (customInspectSymbol) Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if (isInstance(target, Uint8Array)) target = Buffer.from(target, target.offset, target.byteLength);
    if (!Buffer.isBuffer(target)) throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target);
    if (start === undefined) start = 0;
    if (end === undefined) end = target ? target.length : 0;
    if (thisStart === undefined) thisStart = 0;
    if (thisEnd === undefined) thisEnd = this.length;
    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) throw new RangeError("out of range index");
    if (thisStart >= thisEnd && start >= end) return 0;
    if (thisStart >= thisEnd) return -1;
    if (start >= end) return 1;
    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target) return 0;
    let x = thisEnd - thisStart;
    let y = end - start;
    const len = Math.min(x, y);
    const thisCopy = this.slice(thisStart, thisEnd);
    const targetCopy = target.slice(start, end);
    for(let i = 0; i < len; ++i)if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1;
    // Normalize byteOffset
    if (typeof byteOffset === "string") {
        encoding = byteOffset;
        byteOffset = 0;
    } else if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff;
    else if (byteOffset < -2147483648) byteOffset = -2147483648;
    byteOffset = +byteOffset // Coerce to Number.
    ;
    if (numberIsNaN(byteOffset)) // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
        if (dir) return -1;
        else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1;
    }
    // Normalize val
    if (typeof val === "string") val = Buffer.from(val, encoding);
    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if (Buffer.isBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) return -1;
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
    } else if (typeof val === "number") {
        val = val & 0xFF // Search for a byte value [0-255]
        ;
        if (typeof Uint8Array.prototype.indexOf === "function") {
            if (dir) return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            else return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
        }
        return arrayIndexOf(buffer, [
            val
        ], byteOffset, encoding, dir);
    }
    throw new TypeError("val must be string, number or Buffer");
}
function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    let indexSize = 1;
    let arrLength = arr.length;
    let valLength = val.length;
    if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
            if (arr.length < 2 || val.length < 2) return -1;
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
        }
    }
    function read(buf, i) {
        if (indexSize === 1) return buf[i];
        else return buf.readUInt16BE(i * indexSize);
    }
    let i;
    if (dir) {
        let foundIndex = -1;
        for(i = byteOffset; i < arrLength; i++)if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1) foundIndex = i;
            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
        } else {
            if (foundIndex !== -1) i -= i - foundIndex;
            foundIndex = -1;
        }
    } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for(i = byteOffset; i >= 0; i--){
            let found = true;
            for(let j = 0; j < valLength; j++)if (read(arr, i + j) !== read(val, j)) {
                found = false;
                break;
            }
            if (found) return i;
        }
    }
    return -1;
}
Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
};
Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};
Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};
function hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    const remaining = buf.length - offset;
    if (!length) length = remaining;
    else {
        length = Number(length);
        if (length > remaining) length = remaining;
    }
    const strLen = string.length;
    if (length > strLen / 2) length = strLen / 2;
    let i;
    for(i = 0; i < length; ++i){
        const parsed = parseInt(string.substr(i * 2, 2), 16);
        if (numberIsNaN(parsed)) return i;
        buf[offset + i] = parsed;
    }
    return i;
}
function utf8Write(buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}
function asciiWrite(buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length);
}
function base64Write(buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length);
}
function ucs2Write(buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}
Buffer.prototype.write = function write(string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
        encoding = "utf8";
        length = this.length;
        offset = 0;
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === "string") {
        encoding = offset;
        length = this.length;
        offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === undefined) encoding = "utf8";
        } else {
            encoding = length;
            length = undefined;
        }
    } else throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
    const remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;
    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) throw new RangeError("Attempt to write outside buffer bounds");
    if (!encoding) encoding = "utf8";
    let loweredCase = false;
    for(;;)switch(encoding){
        case "hex":
            return hexWrite(this, string, offset, length);
        case "utf8":
        case "utf-8":
            return utf8Write(this, string, offset, length);
        case "ascii":
        case "latin1":
        case "binary":
            return asciiWrite(this, string, offset, length);
        case "base64":
            // Warning: maxLength not taken into account in base64Write
            return base64Write(this, string, offset, length);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return ucs2Write(this, string, offset, length);
        default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
    }
};
Buffer.prototype.toJSON = function toJSON() {
    return {
        type: "Buffer",
        data: Array.prototype.slice.call(this._arr || this, 0)
    };
};
function base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) return base64.fromByteArray(buf);
    else return base64.fromByteArray(buf.slice(start, end));
}
function utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    const res = [];
    let i = start;
    while(i < end){
        const firstByte = buf[i];
        let codePoint = null;
        let bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;
        if (i + bytesPerSequence <= end) {
            let secondByte, thirdByte, fourthByte, tempCodePoint;
            switch(bytesPerSequence){
                case 1:
                    if (firstByte < 0x80) codePoint = firstByte;
                    break;
                case 2:
                    secondByte = buf[i + 1];
                    if ((secondByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
                        if (tempCodePoint > 0x7F) codePoint = tempCodePoint;
                    }
                    break;
                case 3:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
                        if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) codePoint = tempCodePoint;
                    }
                    break;
                case 4:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    fourthByte = buf[i + 3];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
                        if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) codePoint = tempCodePoint;
                    }
            }
        }
        if (codePoint === null) {
            // we did not generate a valid codePoint so insert a
            // replacement char (U+FFFD) and advance only 1 byte
            codePoint = 0xFFFD;
            bytesPerSequence = 1;
        } else if (codePoint > 0xFFFF) {
            // encode to utf16 (surrogate pair dance)
            codePoint -= 0x10000;
            res.push(codePoint >>> 10 & 0x3FF | 0xD800);
            codePoint = 0xDC00 | codePoint & 0x3FF;
        }
        res.push(codePoint);
        i += bytesPerSequence;
    }
    return decodeCodePointsArray(res);
}
// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
const MAX_ARGUMENTS_LENGTH = 0x1000;
function decodeCodePointsArray(codePoints) {
    const len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    ;
    // Decode in chunks to avoid "call stack size exceeded".
    let res = "";
    let i = 0;
    while(i < len)res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
    return res;
}
function asciiSlice(buf, start, end) {
    let ret = "";
    end = Math.min(buf.length, end);
    for(let i = start; i < end; ++i)ret += String.fromCharCode(buf[i] & 0x7F);
    return ret;
}
function latin1Slice(buf, start, end) {
    let ret = "";
    end = Math.min(buf.length, end);
    for(let i = start; i < end; ++i)ret += String.fromCharCode(buf[i]);
    return ret;
}
function hexSlice(buf, start, end) {
    const len = buf.length;
    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;
    let out = "";
    for(let i = start; i < end; ++i)out += hexSliceLookupTable[buf[i]];
    return out;
}
function utf16leSlice(buf, start, end) {
    const bytes = buf.slice(start, end);
    let res = "";
    // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
    for(let i = 0; i < bytes.length - 1; i += 2)res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    return res;
}
Buffer.prototype.slice = function slice(start, end) {
    const len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;
    if (start < 0) {
        start += len;
        if (start < 0) start = 0;
    } else if (start > len) start = len;
    if (end < 0) {
        end += len;
        if (end < 0) end = 0;
    } else if (end > len) end = len;
    if (end < start) end = start;
    const newBuf = this.subarray(start, end);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(newBuf, Buffer.prototype);
    return newBuf;
};
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */ function checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
    if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
}
Buffer.prototype.readUintLE = Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    let val = this[offset];
    let mul = 1;
    let i = 0;
    while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;
    return val;
};
Buffer.prototype.readUintBE = Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    let val = this[offset + --byteLength];
    let mul = 1;
    while(byteLength > 0 && (mul *= 0x100))val += this[offset + --byteLength] * mul;
    return val;
};
Buffer.prototype.readUint8 = Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    return this[offset];
};
Buffer.prototype.readUint16LE = Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
};
Buffer.prototype.readUint16BE = Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
};
Buffer.prototype.readUint32LE = Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};
Buffer.prototype.readUint32BE = Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};
Buffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const lo = first + this[++offset] * 256 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;
    const hi = this[++offset] + this[++offset] * 256 + this[++offset] * 2 ** 16 + last * 2 ** 24;
    return BigInt(lo) + (BigInt(hi) << BigInt(32));
});
Buffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 256 + this[++offset];
    const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 256 + last;
    return (BigInt(hi) << BigInt(32)) + BigInt(lo);
});
Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    let val = this[offset];
    let mul = 1;
    let i = 0;
    while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    let i = byteLength;
    let mul = 1;
    let val = this[offset + --i];
    while(i > 0 && (mul *= 0x100))val += this[offset + --i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    if (!(this[offset] & 0x80)) return this[offset];
    return (0xff - this[offset] + 1) * -1;
};
Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    const val = this[offset] | this[offset + 1] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    const val = this[offset + 1] | this[offset] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};
Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};
Buffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const val = this[offset + 4] + this[offset + 5] * 256 + this[offset + 6] * 2 ** 16 + (last << 24 // Overflow
    );
    return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 256 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);
});
Buffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const val = (first << 24) + // Overflow
    this[++offset] * 2 ** 16 + this[++offset] * 256 + this[++offset];
    return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 256 + last);
});
Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, true, 23, 4);
};
Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, false, 23, 4);
};
Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, true, 52, 8);
};
Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, false, 52, 8);
};
function checkInt(buf, value, offset, ext, max, min) {
    if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
}
Buffer.prototype.writeUintLE = Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    let mul = 1;
    let i = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength;
};
Buffer.prototype.writeUintBE = Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    let i = byteLength - 1;
    let mul = 1;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength;
};
Buffer.prototype.writeUint8 = Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
    this[offset] = value & 0xff;
    return offset + 1;
};
Buffer.prototype.writeUint16LE = Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
Buffer.prototype.writeUint16BE = Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
Buffer.prototype.writeUint32LE = Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 0xff;
    return offset + 4;
};
Buffer.prototype.writeUint32BE = Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
function wrtBigUInt64LE(buf, value, offset, min, max) {
    checkIntBI(value, min, max, buf, offset, 7);
    let lo = Number(value & BigInt(0xffffffff));
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    return offset;
}
function wrtBigUInt64BE(buf, value, offset, min, max) {
    checkIntBI(value, min, max, buf, offset, 7);
    let lo = Number(value & BigInt(0xffffffff));
    buf[offset + 7] = lo;
    lo = lo >> 8;
    buf[offset + 6] = lo;
    lo = lo >> 8;
    buf[offset + 5] = lo;
    lo = lo >> 8;
    buf[offset + 4] = lo;
    let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
    buf[offset + 3] = hi;
    hi = hi >> 8;
    buf[offset + 2] = hi;
    hi = hi >> 8;
    buf[offset + 1] = hi;
    hi = hi >> 8;
    buf[offset] = hi;
    return offset + 8;
}
Buffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {
    return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
});
Buffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {
    return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
});
Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength - 1);
        checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    let i = 0;
    let mul = 1;
    let sub = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
};
Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength - 1);
        checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    let i = byteLength - 1;
    let mul = 1;
    let sub = 0;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
};
Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -128);
    if (value < 0) value = 0xff + value + 1;
    this[offset] = value & 0xff;
    return offset + 1;
};
Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
    return offset + 4;
};
Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    if (value < 0) value = 0xffffffff + value + 1;
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
Buffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {
    return wrtBigUInt64LE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
});
Buffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {
    return wrtBigUInt64BE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
});
function checkIEEE754(buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
    if (offset < 0) throw new RangeError("Index out of range");
}
function writeFloat(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -340282346638528860000000000000000000000);
    ieee754.write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
}
Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert);
};
Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert);
};
function writeDouble(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);
    ieee754.write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
}
Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert);
};
Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert);
};
// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy(target, targetStart, start, end) {
    if (!Buffer.isBuffer(target)) throw new TypeError("argument should be a Buffer");
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;
    // Copy 0 bytes; we're done
    if (end === start) return 0;
    if (target.length === 0 || this.length === 0) return 0;
    // Fatal error conditions
    if (targetStart < 0) throw new RangeError("targetStart out of bounds");
    if (start < 0 || start >= this.length) throw new RangeError("Index out of range");
    if (end < 0) throw new RangeError("sourceEnd out of bounds");
    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) end = target.length - targetStart + start;
    const len = end - start;
    if (this === target && typeof Uint8Array.prototype.copyWithin === "function") // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end);
    else Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
    return len;
};
// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill(val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === "string") {
        if (typeof start === "string") {
            encoding = start;
            start = 0;
            end = this.length;
        } else if (typeof end === "string") {
            encoding = end;
            end = this.length;
        }
        if (encoding !== undefined && typeof encoding !== "string") throw new TypeError("encoding must be a string");
        if (typeof encoding === "string" && !Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
        if (val.length === 1) {
            const code = val.charCodeAt(0);
            if (encoding === "utf8" && code < 128 || encoding === "latin1") // Fast path: If `val` fits into a single byte, use that numeric value.
            val = code;
        }
    } else if (typeof val === "number") val = val & 255;
    else if (typeof val === "boolean") val = Number(val);
    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) throw new RangeError("Out of range index");
    if (end <= start) return this;
    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;
    if (!val) val = 0;
    let i;
    if (typeof val === "number") for(i = start; i < end; ++i)this[i] = val;
    else {
        const bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);
        const len = bytes.length;
        if (len === 0) throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        for(i = 0; i < end - start; ++i)this[i + start] = bytes[i % len];
    }
    return this;
};
// CUSTOM ERRORS
// =============
// Simplified versions from Node, changed for Buffer-only usage
const errors = {};
function E(sym, getMessage, Base) {
    errors[sym] = class NodeError extends Base {
        constructor(){
            super();
            Object.defineProperty(this, "message", {
                value: getMessage.apply(this, arguments),
                writable: true,
                configurable: true
            });
            // Add the error code to the name to include it in the stack trace.
            this.name = `${this.name} [${sym}]`;
            // Access the stack to generate the error message including the error code
            // from the name.
            this.stack // eslint-disable-line no-unused-expressions
            ;
            // Reset the name to the actual name.
            delete this.name;
        }
        get code() {
            return sym;
        }
        set code(value) {
            Object.defineProperty(this, "code", {
                configurable: true,
                enumerable: true,
                value,
                writable: true
            });
        }
        toString() {
            return `${this.name} [${sym}]: ${this.message}`;
        }
    };
}
E("ERR_BUFFER_OUT_OF_BOUNDS", function(name) {
    if (name) return `${name} is outside of buffer bounds`;
    return "Attempt to access memory outside buffer bounds";
}, RangeError);
E("ERR_INVALID_ARG_TYPE", function(name, actual) {
    return `The "${name}" argument must be of type number. Received type ${typeof actual}`;
}, TypeError);
E("ERR_OUT_OF_RANGE", function(str, range, input) {
    let msg = `The value of "${str}" is out of range.`;
    let received = input;
    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) received = addNumericalSeparator(String(input));
    else if (typeof input === "bigint") {
        received = String(input);
        if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) received = addNumericalSeparator(received);
        received += "n";
    }
    msg += ` It must be ${range}. Received ${received}`;
    return msg;
}, RangeError);
function addNumericalSeparator(val) {
    let res = "";
    let i = val.length;
    const start = val[0] === "-" ? 1 : 0;
    for(; i >= start + 4; i -= 3)res = `_${val.slice(i - 3, i)}${res}`;
    return `${val.slice(0, i)}${res}`;
}
// CHECK FUNCTIONS
// ===============
function checkBounds(buf, offset, byteLength) {
    validateNumber(offset, "offset");
    if (buf[offset] === undefined || buf[offset + byteLength] === undefined) boundsError(offset, buf.length - (byteLength + 1));
}
function checkIntBI(value, min, max, buf, offset, byteLength) {
    if (value > max || value < min) {
        const n = typeof min === "bigint" ? "n" : "";
        let range;
        if (byteLength > 3) {
            if (min === 0 || min === BigInt(0)) range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`;
            else range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` + `${(byteLength + 1) * 8 - 1}${n}`;
        } else range = `>= ${min}${n} and <= ${max}${n}`;
        throw new errors.ERR_OUT_OF_RANGE("value", range, value);
    }
    checkBounds(buf, offset, byteLength);
}
function validateNumber(value, name) {
    if (typeof value !== "number") throw new errors.ERR_INVALID_ARG_TYPE(name, "number", value);
}
function boundsError(value, length, type) {
    if (Math.floor(value) !== value) {
        validateNumber(value, type);
        throw new errors.ERR_OUT_OF_RANGE(type || "offset", "an integer", value);
    }
    if (length < 0) throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();
    throw new errors.ERR_OUT_OF_RANGE(type || "offset", `>= ${type ? 1 : 0} and <= ${length}`, value);
}
// HELPER FUNCTIONS
// ================
const INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
function base64clean(str) {
    // Node takes equal signs as end of the Base64 encoding
    str = str.split("=")[0];
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = str.trim().replace(INVALID_BASE64_RE, "");
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return "";
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while(str.length % 4 !== 0)str = str + "=";
    return str;
}
function utf8ToBytes(string, units) {
    units = units || Infinity;
    let codePoint;
    const length = string.length;
    let leadSurrogate = null;
    const bytes = [];
    for(let i = 0; i < length; ++i){
        codePoint = string.charCodeAt(i);
        // is surrogate component
        if (codePoint > 0xD7FF && codePoint < 0xE000) {
            // last char was a lead
            if (!leadSurrogate) {
                // no lead yet
                if (codePoint > 0xDBFF) {
                    // unexpected trail
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                } else if (i + 1 === length) {
                    // unpaired lead
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                }
                // valid lead
                leadSurrogate = codePoint;
                continue;
            }
            // 2 leads in a row
            if (codePoint < 0xDC00) {
                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                leadSurrogate = codePoint;
                continue;
            }
            // valid surrogate pair
            codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
        } else if (leadSurrogate) // valid bmp char, but last char was a lead
        {
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        }
        leadSurrogate = null;
        // encode utf8
        if (codePoint < 0x80) {
            if ((units -= 1) < 0) break;
            bytes.push(codePoint);
        } else if (codePoint < 0x800) {
            if ((units -= 2) < 0) break;
            bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x10000) {
            if ((units -= 3) < 0) break;
            bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x110000) {
            if ((units -= 4) < 0) break;
            bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else throw new Error("Invalid code point");
    }
    return bytes;
}
function asciiToBytes(str) {
    const byteArray = [];
    for(let i = 0; i < str.length; ++i)// Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
    return byteArray;
}
function utf16leToBytes(str, units) {
    let c, hi, lo;
    const byteArray = [];
    for(let i = 0; i < str.length; ++i){
        if ((units -= 2) < 0) break;
        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
    }
    return byteArray;
}
function base64ToBytes(str) {
    return base64.toByteArray(base64clean(str));
}
function blitBuffer(src, dst, offset, length) {
    let i;
    for(i = 0; i < length; ++i){
        if (i + offset >= dst.length || i >= src.length) break;
        dst[i + offset] = src[i];
    }
    return i;
}
// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance(obj, type) {
    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
}
function numberIsNaN(obj) {
    // For IE11 support
    return obj !== obj // eslint-disable-line no-self-compare
    ;
}
// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
const hexSliceLookupTable = function() {
    const alphabet = "0123456789abcdef";
    const table = new Array(256);
    for(let i = 0; i < 16; ++i){
        const i16 = i * 16;
        for(let j = 0; j < 16; ++j)table[i16 + j] = alphabet[i] + alphabet[j];
    }
    return table;
}();
// Return not function with Error if BigInt not supported
function defineBigIntMethod(fn) {
    return typeof BigInt === "undefined" ? BufferBigIntNotDefined : fn;
}
function BufferBigIntNotDefined() {
    throw new Error("BigInt not supported");
}

},{"9c62938f1dccc73c":"7jAMi","aceacb6a4531a9d2":"hITcF"}],"7jAMi":[function(require,module,exports) {
"use strict";
exports.byteLength = byteLength;
exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;
var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
for(var i = 0, len = code.length; i < len; ++i){
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
}
// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup["-".charCodeAt(0)] = 62;
revLookup["_".charCodeAt(0)] = 63;
function getLens(b64) {
    var len = b64.length;
    if (len % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
    // Trim off extra bytes after placeholder bytes are found
    // See: https://github.com/beatgammit/base64-js/issues/42
    var validLen = b64.indexOf("=");
    if (validLen === -1) validLen = len;
    var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
    return [
        validLen,
        placeHoldersLen
    ];
}
// base64 is 4/3 + up to two characters of the original data
function byteLength(b64) {
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function _byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function toByteArray(b64) {
    var tmp;
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    // if there are placeholders, only get up to the last complete 4 chars
    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i;
    for(i = 0; i < len; i += 4){
        tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
        arr[curByte++] = tmp >> 16 & 0xFF;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 2) {
        tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 1) {
        tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    return arr;
}
function tripletToBase64(num) {
    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
}
function encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
    for(var i = start; i < end; i += 3){
        tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
        output.push(tripletToBase64(tmp));
    }
    return output.join("");
}
function fromByteArray(uint8) {
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
    ;
    var parts = [];
    var maxChunkLength = 16383 // must be multiple of 3
    ;
    // go through the array every three bytes, we'll deal with trailing stuff later
    for(var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength)parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
        tmp = uint8[len - 1];
        parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + "==");
    } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + "=");
    }
    return parts.join("");
}

},{}],"hITcF":[function(require,module,exports) {
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */ exports.read = function(buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? nBytes - 1 : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;
    for(; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for(; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);
    if (e === 0) e = 1 - eBias;
    else if (e === eMax) return m ? NaN : (s ? -1 : 1) * Infinity;
    else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};
exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i = isLE ? 0 : nBytes - 1;
    var d = isLE ? 1 : -1;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
    } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
        }
        if (e + eBias >= 1) value += rt / c;
        else value += rt * Math.pow(2, 1 - eBias);
        if (value * c >= 2) {
            e++;
            c /= 2;
        }
        if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
        } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
        } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
        }
    }
    for(; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);
    e = e << mLen | m;
    eLen += mLen;
    for(; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);
    buffer[offset + i - d] |= s * 128;
};

},{}],"9b0Ym":[function(require,module,exports) {
// just pre-load all the stuff that index.js lazily exports
const internalRe = require("2ef367e729437dbf");
const constants = require("15796d6f714ec7ac");
const SemVer = require("784948b06600d9b2");
const identifiers = require("70f963db887a798c");
const parse = require("3f445ade66470b21");
const valid = require("f44378b7de87a0b4");
const clean = require("7742c78cf22bae39");
const inc = require("a751dd1df28d6bbb");
const diff = require("e000803318fe9f2f");
const major = require("d290038a9a954b0a");
const minor = require("c5e4bbab325a5aae");
const patch = require("5c0bb8d32de60bb3");
const prerelease = require("323f12e5af5ebd1e");
const compare = require("29cf114a56181e64");
const rcompare = require("827db0815bb2f2cd");
const compareLoose = require("b644f26560ec8124");
const compareBuild = require("606d0e43dd66a24c");
const sort = require("1560ed361cfa42e6");
const rsort = require("f9e1f00918a8cfd7");
const gt = require("3694a9720f15d6ac");
const lt = require("4559dbda8a777185");
const eq = require("14a4b88a0b1fd3a5");
const neq = require("416d9b63c3df2ead");
const gte = require("d39630b19344a843");
const lte = require("3fb74c9a41c1cef6");
const cmp = require("3435ca1bbec7b99");
const coerce = require("d67409238c8fc031");
const Comparator = require("1d07035d00450bca");
const Range = require("b280ab3e26924ac1");
const satisfies = require("ba9d0d2a3e49b569");
const toComparators = require("e6b2802b2233287d");
const maxSatisfying = require("2bfdfb0adcbcb71b");
const minSatisfying = require("264df1ba0d261fad");
const minVersion = require("cd4980125683761f");
const validRange = require("a0319a4a98954087");
const outside = require("fc457e2bda4345b2");
const gtr = require("c885d2b556186a1a");
const ltr = require("58740c779f187b15");
const intersects = require("22421cf146448c92");
const simplifyRange = require("439ddbc649d6486");
const subset = require("f1e57a2c808f532d");
module.exports = {
    parse,
    valid,
    clean,
    inc,
    diff,
    major,
    minor,
    patch,
    prerelease,
    compare,
    rcompare,
    compareLoose,
    compareBuild,
    sort,
    rsort,
    gt,
    lt,
    eq,
    neq,
    gte,
    lte,
    cmp,
    coerce,
    Comparator,
    Range,
    satisfies,
    toComparators,
    maxSatisfying,
    minSatisfying,
    minVersion,
    validRange,
    outside,
    gtr,
    ltr,
    intersects,
    simplifyRange,
    subset,
    SemVer,
    re: internalRe.re,
    src: internalRe.src,
    tokens: internalRe.t,
    SEMVER_SPEC_VERSION: constants.SEMVER_SPEC_VERSION,
    RELEASE_TYPES: constants.RELEASE_TYPES,
    compareIdentifiers: identifiers.compareIdentifiers,
    rcompareIdentifiers: identifiers.rcompareIdentifiers
};

},{"2ef367e729437dbf":"ayIhb","15796d6f714ec7ac":"70PXx","784948b06600d9b2":"3yIAg","70f963db887a798c":"eukG3","3f445ade66470b21":"7DJy0","f44378b7de87a0b4":"4lNwR","7742c78cf22bae39":"cAENq","a751dd1df28d6bbb":"b9PYy","e000803318fe9f2f":"aXJE5","d290038a9a954b0a":"7gSOP","c5e4bbab325a5aae":"9rSzz","5c0bb8d32de60bb3":"4A4ZL","323f12e5af5ebd1e":"eqZeD","29cf114a56181e64":"cONcV","827db0815bb2f2cd":"6axVl","b644f26560ec8124":"40uju","606d0e43dd66a24c":"dgfti","1560ed361cfa42e6":"5fgYP","f9e1f00918a8cfd7":"hwxBe","3694a9720f15d6ac":"9bikf","4559dbda8a777185":"6HpKA","14a4b88a0b1fd3a5":"jnraT","416d9b63c3df2ead":"bKrrL","d39630b19344a843":"3Fb23","3fb74c9a41c1cef6":"Kyi6j","3435ca1bbec7b99":"4RxVm","d67409238c8fc031":"jSU44","1d07035d00450bca":"gpjDG","b280ab3e26924ac1":"giP7u","ba9d0d2a3e49b569":"2f9Mn","e6b2802b2233287d":"jUHRY","2bfdfb0adcbcb71b":"5mwHv","264df1ba0d261fad":"i3rTr","cd4980125683761f":"jO4tQ","a0319a4a98954087":"9J0tF","fc457e2bda4345b2":"enE98","c885d2b556186a1a":"bY2sF","58740c779f187b15":"d2qSu","22421cf146448c92":"1izkn","439ddbc649d6486":"blx2e","f1e57a2c808f532d":"5k5N6"}],"ayIhb":[function(require,module,exports) {
const { MAX_SAFE_COMPONENT_LENGTH, MAX_SAFE_BUILD_LENGTH, MAX_LENGTH } = require("9328c2484f003df4");
const debug = require("9075cfb365332427");
exports = module.exports = {};
// The actual regexps go on exports.re
const re = exports.re = [];
const safeRe = exports.safeRe = [];
const src = exports.src = [];
const t = exports.t = {};
let R = 0;
const LETTERDASHNUMBER = "[a-zA-Z0-9-]";
// Replace some greedy regex tokens to prevent regex dos issues. These regex are
// used internally via the safeRe object since all inputs in this library get
// normalized first to trim and collapse all extra whitespace. The original
// regexes are exported for userland consumption and lower level usage. A
// future breaking change could export the safer regex only with a note that
// all input should have extra whitespace removed.
const safeRegexReplacements = [
    [
        "\\s",
        1
    ],
    [
        "\\d",
        MAX_LENGTH
    ],
    [
        LETTERDASHNUMBER,
        MAX_SAFE_BUILD_LENGTH
    ]
];
const makeSafeRegex = (value)=>{
    for (const [token, max] of safeRegexReplacements)value = value.split(`${token}*`).join(`${token}{0,${max}}`).split(`${token}+`).join(`${token}{1,${max}}`);
    return value;
};
const createToken = (name, value, isGlobal)=>{
    const safe = makeSafeRegex(value);
    const index = R++;
    debug(name, index, value);
    t[name] = index;
    src[index] = value;
    re[index] = new RegExp(value, isGlobal ? "g" : undefined);
    safeRe[index] = new RegExp(safe, isGlobal ? "g" : undefined);
};
// The following Regular Expressions can be used for tokenizing,
// validating, and parsing SemVer version strings.
// ## Numeric Identifier
// A single `0`, or a non-zero digit followed by zero or more digits.
createToken("NUMERICIDENTIFIER", "0|[1-9]\\d*");
createToken("NUMERICIDENTIFIERLOOSE", "\\d+");
// ## Non-numeric Identifier
// Zero or more digits, followed by a letter or hyphen, and then zero or
// more letters, digits, or hyphens.
createToken("NONNUMERICIDENTIFIER", `\\d*[a-zA-Z-]${LETTERDASHNUMBER}*`);
// ## Main Version
// Three dot-separated numeric identifiers.
createToken("MAINVERSION", `(${src[t.NUMERICIDENTIFIER]})\\.` + `(${src[t.NUMERICIDENTIFIER]})\\.` + `(${src[t.NUMERICIDENTIFIER]})`);
createToken("MAINVERSIONLOOSE", `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.` + `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.` + `(${src[t.NUMERICIDENTIFIERLOOSE]})`);
// ## Pre-release Version Identifier
// A numeric identifier, or a non-numeric identifier.
createToken("PRERELEASEIDENTIFIER", `(?:${src[t.NUMERICIDENTIFIER]}|${src[t.NONNUMERICIDENTIFIER]})`);
createToken("PRERELEASEIDENTIFIERLOOSE", `(?:${src[t.NUMERICIDENTIFIERLOOSE]}|${src[t.NONNUMERICIDENTIFIER]})`);
// ## Pre-release Version
// Hyphen, followed by one or more dot-separated pre-release version
// identifiers.
createToken("PRERELEASE", `(?:-(${src[t.PRERELEASEIDENTIFIER]}(?:\\.${src[t.PRERELEASEIDENTIFIER]})*))`);
createToken("PRERELEASELOOSE", `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`);
// ## Build Metadata Identifier
// Any combination of digits, letters, or hyphens.
createToken("BUILDIDENTIFIER", `${LETTERDASHNUMBER}+`);
// ## Build Metadata
// Plus sign, followed by one or more period-separated build metadata
// identifiers.
createToken("BUILD", `(?:\\+(${src[t.BUILDIDENTIFIER]}(?:\\.${src[t.BUILDIDENTIFIER]})*))`);
// ## Full Version String
// A main version, followed optionally by a pre-release version and
// build metadata.
// Note that the only major, minor, patch, and pre-release sections of
// the version string are capturing groups.  The build metadata is not a
// capturing group, because it should not ever be used in version
// comparison.
createToken("FULLPLAIN", `v?${src[t.MAINVERSION]}${src[t.PRERELEASE]}?${src[t.BUILD]}?`);
createToken("FULL", `^${src[t.FULLPLAIN]}$`);
// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.
// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty
// common in the npm registry.
createToken("LOOSEPLAIN", `[v=\\s]*${src[t.MAINVERSIONLOOSE]}${src[t.PRERELEASELOOSE]}?${src[t.BUILD]}?`);
createToken("LOOSE", `^${src[t.LOOSEPLAIN]}$`);
createToken("GTLT", "((?:<|>)?=?)");
// Something like "2.*" or "1.2.x".
// Note that "x.x" is a valid xRange identifer, meaning "any version"
// Only the first item is strictly required.
createToken("XRANGEIDENTIFIERLOOSE", `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`);
createToken("XRANGEIDENTIFIER", `${src[t.NUMERICIDENTIFIER]}|x|X|\\*`);
createToken("XRANGEPLAIN", `[v=\\s]*(${src[t.XRANGEIDENTIFIER]})` + `(?:\\.(${src[t.XRANGEIDENTIFIER]})` + `(?:\\.(${src[t.XRANGEIDENTIFIER]})` + `(?:${src[t.PRERELEASE]})?${src[t.BUILD]}?` + `)?)?`);
createToken("XRANGEPLAINLOOSE", `[v=\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})` + `(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` + `(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` + `(?:${src[t.PRERELEASELOOSE]})?${src[t.BUILD]}?` + `)?)?`);
createToken("XRANGE", `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAIN]}$`);
createToken("XRANGELOOSE", `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAINLOOSE]}$`);
// Coercion.
// Extract anything that could conceivably be a part of a valid semver
createToken("COERCE", `${"(^|[^\\d])(\\d{1,"}${MAX_SAFE_COMPONENT_LENGTH}})` + `(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` + `(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` + `(?:$|[^\\d])`);
createToken("COERCERTL", src[t.COERCE], true);
// Tilde ranges.
// Meaning is "reasonably at or greater than"
createToken("LONETILDE", "(?:~>?)");
createToken("TILDETRIM", `(\\s*)${src[t.LONETILDE]}\\s+`, true);
exports.tildeTrimReplace = "$1~";
createToken("TILDE", `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`);
createToken("TILDELOOSE", `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`);
// Caret ranges.
// Meaning is "at least and backwards compatible with"
createToken("LONECARET", "(?:\\^)");
createToken("CARETTRIM", `(\\s*)${src[t.LONECARET]}\\s+`, true);
exports.caretTrimReplace = "$1^";
createToken("CARET", `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`);
createToken("CARETLOOSE", `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`);
// A simple gt/lt/eq thing, or just "" to indicate "any version"
createToken("COMPARATORLOOSE", `^${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]})$|^$`);
createToken("COMPARATOR", `^${src[t.GTLT]}\\s*(${src[t.FULLPLAIN]})$|^$`);
// An expression to strip any whitespace between the gtlt and the thing
// it modifies, so that `> 1.2.3` ==> `>1.2.3`
createToken("COMPARATORTRIM", `(\\s*)${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, true);
exports.comparatorTrimReplace = "$1$2$3";
// Something like `1.2.3 - 1.2.4`
// Note that these all use the loose form, because they'll be
// checked against either the strict or loose comparator form
// later.
createToken("HYPHENRANGE", `^\\s*(${src[t.XRANGEPLAIN]})` + `\\s+-\\s+` + `(${src[t.XRANGEPLAIN]})` + `\\s*$`);
createToken("HYPHENRANGELOOSE", `^\\s*(${src[t.XRANGEPLAINLOOSE]})` + `\\s+-\\s+` + `(${src[t.XRANGEPLAINLOOSE]})` + `\\s*$`);
// Star ranges basically just allow anything at all.
createToken("STAR", "(<|>)?=?\\s*\\*");
// >=0.0.0 is like a star
createToken("GTE0", "^\\s*>=\\s*0\\.0\\.0\\s*$");
createToken("GTE0PRE", "^\\s*>=\\s*0\\.0\\.0-0\\s*$");

},{"9328c2484f003df4":"70PXx","9075cfb365332427":"aB3UY"}],"70PXx":[function(require,module,exports) {
// Note: this is the semver.org version of the spec that it implements
// Not necessarily the package version of this code.
const SEMVER_SPEC_VERSION = "2.0.0";
const MAX_LENGTH = 256;
const MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || /* istanbul ignore next */ 9007199254740991;
// Max safe segment length for coercion.
const MAX_SAFE_COMPONENT_LENGTH = 16;
// Max safe length for a build identifier. The max length minus 6 characters for
// the shortest version with a build 0.0.0+BUILD.
const MAX_SAFE_BUILD_LENGTH = MAX_LENGTH - 6;
const RELEASE_TYPES = [
    "major",
    "premajor",
    "minor",
    "preminor",
    "patch",
    "prepatch",
    "prerelease"
];
module.exports = {
    MAX_LENGTH,
    MAX_SAFE_COMPONENT_LENGTH,
    MAX_SAFE_BUILD_LENGTH,
    MAX_SAFE_INTEGER,
    RELEASE_TYPES,
    SEMVER_SPEC_VERSION,
    FLAG_INCLUDE_PRERELEASE: 1,
    FLAG_LOOSE: 2
};

},{}],"aB3UY":[function(require,module,exports) {
var process = require("3e9ec50def946db3");
const debug = (typeof process === "object" && process.env && undefined, ()=>{});
module.exports = debug;

},{"3e9ec50def946db3":"gq3cc"}],"gq3cc":[function(require,module,exports) {
// shim for using process in browser
var process = module.exports = {};
// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.
var cachedSetTimeout;
var cachedClearTimeout;
function defaultSetTimout() {
    throw new Error("setTimeout has not been defined");
}
function defaultClearTimeout() {
    throw new Error("clearTimeout has not been defined");
}
(function() {
    try {
        if (typeof setTimeout === "function") cachedSetTimeout = setTimeout;
        else cachedSetTimeout = defaultSetTimout;
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === "function") cachedClearTimeout = clearTimeout;
        else cachedClearTimeout = defaultClearTimeout;
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) //normal enviroments in sane situations
    return setTimeout(fun, 0);
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) //normal enviroments in sane situations
    return clearTimeout(marker);
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;
function cleanUpNextTick() {
    if (!draining || !currentQueue) return;
    draining = false;
    if (currentQueue.length) queue = currentQueue.concat(queue);
    else queueIndex = -1;
    if (queue.length) drainQueue();
}
function drainQueue() {
    if (draining) return;
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;
    var len = queue.length;
    while(len){
        currentQueue = queue;
        queue = [];
        while(++queueIndex < len)if (currentQueue) currentQueue[queueIndex].run();
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}
process.nextTick = function(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) runTimeout(drainQueue);
};
// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function() {
    this.fun.apply(null, this.array);
};
process.title = "browser";
process.browser = true;
process.env = {};
process.argv = [];
process.version = ""; // empty string to avoid regexp issues
process.versions = {};
function noop() {}
process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;
process.listeners = function(name) {
    return [];
};
process.binding = function(name) {
    throw new Error("process.binding is not supported");
};
process.cwd = function() {
    return "/";
};
process.chdir = function(dir) {
    throw new Error("process.chdir is not supported");
};
process.umask = function() {
    return 0;
};

},{}],"3yIAg":[function(require,module,exports) {
const debug = require("595c172e7d863d06");
const { MAX_LENGTH, MAX_SAFE_INTEGER } = require("bd8d57fbca62978a");
const { safeRe: re, t } = require("2b364a26e67d9817");
const parseOptions = require("f1a723539d6cc9b5");
const { compareIdentifiers } = require("2451a15946a38fcd");
class SemVer {
    constructor(version, options){
        options = parseOptions(options);
        if (version instanceof SemVer) {
            if (version.loose === !!options.loose && version.includePrerelease === !!options.includePrerelease) return version;
            else version = version.version;
        } else if (typeof version !== "string") throw new TypeError(`Invalid version. Must be a string. Got type "${typeof version}".`);
        if (version.length > MAX_LENGTH) throw new TypeError(`version is longer than ${MAX_LENGTH} characters`);
        debug("SemVer", version, options);
        this.options = options;
        this.loose = !!options.loose;
        // this isn't actually relevant for versions, but keep it so that we
        // don't run into trouble passing this.options around.
        this.includePrerelease = !!options.includePrerelease;
        const m = version.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL]);
        if (!m) throw new TypeError(`Invalid Version: ${version}`);
        this.raw = version;
        // these are actually numbers
        this.major = +m[1];
        this.minor = +m[2];
        this.patch = +m[3];
        if (this.major > MAX_SAFE_INTEGER || this.major < 0) throw new TypeError("Invalid major version");
        if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) throw new TypeError("Invalid minor version");
        if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) throw new TypeError("Invalid patch version");
        // numberify any prerelease numeric ids
        if (!m[4]) this.prerelease = [];
        else this.prerelease = m[4].split(".").map((id)=>{
            if (/^[0-9]+$/.test(id)) {
                const num = +id;
                if (num >= 0 && num < MAX_SAFE_INTEGER) return num;
            }
            return id;
        });
        this.build = m[5] ? m[5].split(".") : [];
        this.format();
    }
    format() {
        this.version = `${this.major}.${this.minor}.${this.patch}`;
        if (this.prerelease.length) this.version += `-${this.prerelease.join(".")}`;
        return this.version;
    }
    toString() {
        return this.version;
    }
    compare(other) {
        debug("SemVer.compare", this.version, this.options, other);
        if (!(other instanceof SemVer)) {
            if (typeof other === "string" && other === this.version) return 0;
            other = new SemVer(other, this.options);
        }
        if (other.version === this.version) return 0;
        return this.compareMain(other) || this.comparePre(other);
    }
    compareMain(other) {
        if (!(other instanceof SemVer)) other = new SemVer(other, this.options);
        return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
    }
    comparePre(other) {
        if (!(other instanceof SemVer)) other = new SemVer(other, this.options);
        // NOT having a prerelease is > having one
        if (this.prerelease.length && !other.prerelease.length) return -1;
        else if (!this.prerelease.length && other.prerelease.length) return 1;
        else if (!this.prerelease.length && !other.prerelease.length) return 0;
        let i = 0;
        do {
            const a = this.prerelease[i];
            const b = other.prerelease[i];
            debug("prerelease compare", i, a, b);
            if (a === undefined && b === undefined) return 0;
            else if (b === undefined) return 1;
            else if (a === undefined) return -1;
            else if (a === b) continue;
            else return compareIdentifiers(a, b);
        }while (++i);
    }
    compareBuild(other) {
        if (!(other instanceof SemVer)) other = new SemVer(other, this.options);
        let i = 0;
        do {
            const a = this.build[i];
            const b = other.build[i];
            debug("prerelease compare", i, a, b);
            if (a === undefined && b === undefined) return 0;
            else if (b === undefined) return 1;
            else if (a === undefined) return -1;
            else if (a === b) continue;
            else return compareIdentifiers(a, b);
        }while (++i);
    }
    // preminor will bump the version up to the next minor release, and immediately
    // down to pre-release. premajor and prepatch work the same way.
    inc(release, identifier, identifierBase) {
        switch(release){
            case "premajor":
                this.prerelease.length = 0;
                this.patch = 0;
                this.minor = 0;
                this.major++;
                this.inc("pre", identifier, identifierBase);
                break;
            case "preminor":
                this.prerelease.length = 0;
                this.patch = 0;
                this.minor++;
                this.inc("pre", identifier, identifierBase);
                break;
            case "prepatch":
                // If this is already a prerelease, it will bump to the next version
                // drop any prereleases that might already exist, since they are not
                // relevant at this point.
                this.prerelease.length = 0;
                this.inc("patch", identifier, identifierBase);
                this.inc("pre", identifier, identifierBase);
                break;
            // If the input is a non-prerelease version, this acts the same as
            // prepatch.
            case "prerelease":
                if (this.prerelease.length === 0) this.inc("patch", identifier, identifierBase);
                this.inc("pre", identifier, identifierBase);
                break;
            case "major":
                // If this is a pre-major version, bump up to the same major version.
                // Otherwise increment major.
                // 1.0.0-5 bumps to 1.0.0
                // 1.1.0 bumps to 2.0.0
                if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) this.major++;
                this.minor = 0;
                this.patch = 0;
                this.prerelease = [];
                break;
            case "minor":
                // If this is a pre-minor version, bump up to the same minor version.
                // Otherwise increment minor.
                // 1.2.0-5 bumps to 1.2.0
                // 1.2.1 bumps to 1.3.0
                if (this.patch !== 0 || this.prerelease.length === 0) this.minor++;
                this.patch = 0;
                this.prerelease = [];
                break;
            case "patch":
                // If this is not a pre-release version, it will increment the patch.
                // If it is a pre-release it will bump up to the same patch version.
                // 1.2.0-5 patches to 1.2.0
                // 1.2.0 patches to 1.2.1
                if (this.prerelease.length === 0) this.patch++;
                this.prerelease = [];
                break;
            // This probably shouldn't be used publicly.
            // 1.0.0 'pre' would become 1.0.0-0 which is the wrong direction.
            case "pre":
                {
                    const base = Number(identifierBase) ? 1 : 0;
                    if (!identifier && identifierBase === false) throw new Error("invalid increment argument: identifier is empty");
                    if (this.prerelease.length === 0) this.prerelease = [
                        base
                    ];
                    else {
                        let i = this.prerelease.length;
                        while(--i >= 0)if (typeof this.prerelease[i] === "number") {
                            this.prerelease[i]++;
                            i = -2;
                        }
                        if (i === -1) {
                            // didn't increment anything
                            if (identifier === this.prerelease.join(".") && identifierBase === false) throw new Error("invalid increment argument: identifier already exists");
                            this.prerelease.push(base);
                        }
                    }
                    if (identifier) {
                        // 1.2.0-beta.1 bumps to 1.2.0-beta.2,
                        // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0
                        let prerelease = [
                            identifier,
                            base
                        ];
                        if (identifierBase === false) prerelease = [
                            identifier
                        ];
                        if (compareIdentifiers(this.prerelease[0], identifier) === 0) {
                            if (isNaN(this.prerelease[1])) this.prerelease = prerelease;
                        } else this.prerelease = prerelease;
                    }
                    break;
                }
            default:
                throw new Error(`invalid increment argument: ${release}`);
        }
        this.raw = this.format();
        if (this.build.length) this.raw += `+${this.build.join(".")}`;
        return this;
    }
}
module.exports = SemVer;

},{"595c172e7d863d06":"aB3UY","bd8d57fbca62978a":"70PXx","2b364a26e67d9817":"ayIhb","f1a723539d6cc9b5":"bW0qT","2451a15946a38fcd":"eukG3"}],"bW0qT":[function(require,module,exports) {
// parse out just the options we care about
const looseOption = Object.freeze({
    loose: true
});
const emptyOpts = Object.freeze({});
const parseOptions = (options)=>{
    if (!options) return emptyOpts;
    if (typeof options !== "object") return looseOption;
    return options;
};
module.exports = parseOptions;

},{}],"eukG3":[function(require,module,exports) {
const numeric = /^[0-9]+$/;
const compareIdentifiers = (a, b)=>{
    const anum = numeric.test(a);
    const bnum = numeric.test(b);
    if (anum && bnum) {
        a = +a;
        b = +b;
    }
    return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
};
const rcompareIdentifiers = (a, b)=>compareIdentifiers(b, a);
module.exports = {
    compareIdentifiers,
    rcompareIdentifiers
};

},{}],"7DJy0":[function(require,module,exports) {
const SemVer = require("575e97778d3944c0");
const parse = (version, options, throwErrors = false)=>{
    if (version instanceof SemVer) return version;
    try {
        return new SemVer(version, options);
    } catch (er) {
        if (!throwErrors) return null;
        throw er;
    }
};
module.exports = parse;

},{"575e97778d3944c0":"3yIAg"}],"4lNwR":[function(require,module,exports) {
const parse = require("6a6e19c11f3ced24");
const valid = (version, options)=>{
    const v = parse(version, options);
    return v ? v.version : null;
};
module.exports = valid;

},{"6a6e19c11f3ced24":"7DJy0"}],"cAENq":[function(require,module,exports) {
const parse = require("661ff2c6ff41830b");
const clean = (version, options)=>{
    const s = parse(version.trim().replace(/^[=v]+/, ""), options);
    return s ? s.version : null;
};
module.exports = clean;

},{"661ff2c6ff41830b":"7DJy0"}],"b9PYy":[function(require,module,exports) {
const SemVer = require("9a4ed023da196604");
const inc = (version, release, options, identifier, identifierBase)=>{
    if (typeof options === "string") {
        identifierBase = identifier;
        identifier = options;
        options = undefined;
    }
    try {
        return new SemVer(version instanceof SemVer ? version.version : version, options).inc(release, identifier, identifierBase).version;
    } catch (er) {
        return null;
    }
};
module.exports = inc;

},{"9a4ed023da196604":"3yIAg"}],"aXJE5":[function(require,module,exports) {
const parse = require("3b6d0e3ec696b30a");
const diff = (version1, version2)=>{
    const v1 = parse(version1, null, true);
    const v2 = parse(version2, null, true);
    const comparison = v1.compare(v2);
    if (comparison === 0) return null;
    const v1Higher = comparison > 0;
    const highVersion = v1Higher ? v1 : v2;
    const lowVersion = v1Higher ? v2 : v1;
    const highHasPre = !!highVersion.prerelease.length;
    const lowHasPre = !!lowVersion.prerelease.length;
    if (lowHasPre && !highHasPre) {
        // Going from prerelease -> no prerelease requires some special casing
        // If the low version has only a major, then it will always be a major
        // Some examples:
        // 1.0.0-1 -> 1.0.0
        // 1.0.0-1 -> 1.1.1
        // 1.0.0-1 -> 2.0.0
        if (!lowVersion.patch && !lowVersion.minor) return "major";
        // Otherwise it can be determined by checking the high version
        if (highVersion.patch) // anything higher than a patch bump would result in the wrong version
        return "patch";
        if (highVersion.minor) // anything higher than a minor bump would result in the wrong version
        return "minor";
        // bumping major/minor/patch all have same result
        return "major";
    }
    // add the `pre` prefix if we are going to a prerelease version
    const prefix = highHasPre ? "pre" : "";
    if (v1.major !== v2.major) return prefix + "major";
    if (v1.minor !== v2.minor) return prefix + "minor";
    if (v1.patch !== v2.patch) return prefix + "patch";
    // high and low are preleases
    return "prerelease";
};
module.exports = diff;

},{"3b6d0e3ec696b30a":"7DJy0"}],"7gSOP":[function(require,module,exports) {
const SemVer = require("53a097ab5c27a647");
const major = (a, loose)=>new SemVer(a, loose).major;
module.exports = major;

},{"53a097ab5c27a647":"3yIAg"}],"9rSzz":[function(require,module,exports) {
const SemVer = require("f130a90acb01ac10");
const minor = (a, loose)=>new SemVer(a, loose).minor;
module.exports = minor;

},{"f130a90acb01ac10":"3yIAg"}],"4A4ZL":[function(require,module,exports) {
const SemVer = require("54b9ac3bbdf83b31");
const patch = (a, loose)=>new SemVer(a, loose).patch;
module.exports = patch;

},{"54b9ac3bbdf83b31":"3yIAg"}],"eqZeD":[function(require,module,exports) {
const parse = require("ff5ab55da1933db3");
const prerelease = (version, options)=>{
    const parsed = parse(version, options);
    return parsed && parsed.prerelease.length ? parsed.prerelease : null;
};
module.exports = prerelease;

},{"ff5ab55da1933db3":"7DJy0"}],"cONcV":[function(require,module,exports) {
const SemVer = require("f16c9f4397244ee0");
const compare = (a, b, loose)=>new SemVer(a, loose).compare(new SemVer(b, loose));
module.exports = compare;

},{"f16c9f4397244ee0":"3yIAg"}],"6axVl":[function(require,module,exports) {
const compare = require("4bfcc14a9711a47b");
const rcompare = (a, b, loose)=>compare(b, a, loose);
module.exports = rcompare;

},{"4bfcc14a9711a47b":"cONcV"}],"40uju":[function(require,module,exports) {
const compare = require("95c8404dc369c13b");
const compareLoose = (a, b)=>compare(a, b, true);
module.exports = compareLoose;

},{"95c8404dc369c13b":"cONcV"}],"dgfti":[function(require,module,exports) {
const SemVer = require("3659675d95d38f3");
const compareBuild = (a, b, loose)=>{
    const versionA = new SemVer(a, loose);
    const versionB = new SemVer(b, loose);
    return versionA.compare(versionB) || versionA.compareBuild(versionB);
};
module.exports = compareBuild;

},{"3659675d95d38f3":"3yIAg"}],"5fgYP":[function(require,module,exports) {
const compareBuild = require("7c22e552e691e157");
const sort = (list, loose)=>list.sort((a, b)=>compareBuild(a, b, loose));
module.exports = sort;

},{"7c22e552e691e157":"dgfti"}],"hwxBe":[function(require,module,exports) {
const compareBuild = require("468f4992c854a69a");
const rsort = (list, loose)=>list.sort((a, b)=>compareBuild(b, a, loose));
module.exports = rsort;

},{"468f4992c854a69a":"dgfti"}],"9bikf":[function(require,module,exports) {
const compare = require("85515ef2889f4f89");
const gt = (a, b, loose)=>compare(a, b, loose) > 0;
module.exports = gt;

},{"85515ef2889f4f89":"cONcV"}],"6HpKA":[function(require,module,exports) {
const compare = require("9d2d7734c37f90e6");
const lt = (a, b, loose)=>compare(a, b, loose) < 0;
module.exports = lt;

},{"9d2d7734c37f90e6":"cONcV"}],"jnraT":[function(require,module,exports) {
const compare = require("d6abf8ed12ec38c1");
const eq = (a, b, loose)=>compare(a, b, loose) === 0;
module.exports = eq;

},{"d6abf8ed12ec38c1":"cONcV"}],"bKrrL":[function(require,module,exports) {
const compare = require("5232df27c4c4faa9");
const neq = (a, b, loose)=>compare(a, b, loose) !== 0;
module.exports = neq;

},{"5232df27c4c4faa9":"cONcV"}],"3Fb23":[function(require,module,exports) {
const compare = require("9183f7fbecba58ae");
const gte = (a, b, loose)=>compare(a, b, loose) >= 0;
module.exports = gte;

},{"9183f7fbecba58ae":"cONcV"}],"Kyi6j":[function(require,module,exports) {
const compare = require("e55eadc974580af5");
const lte = (a, b, loose)=>compare(a, b, loose) <= 0;
module.exports = lte;

},{"e55eadc974580af5":"cONcV"}],"4RxVm":[function(require,module,exports) {
const eq = require("bff7f16298b8dbaa");
const neq = require("6a1bb69c2d499261");
const gt = require("dca4b9c05150a919");
const gte = require("7b5dc70556970d6c");
const lt = require("a3a3bcc6e4d6bbdf");
const lte = require("5f1835ee4d0596f3");
const cmp = (a, op, b, loose)=>{
    switch(op){
        case "===":
            if (typeof a === "object") a = a.version;
            if (typeof b === "object") b = b.version;
            return a === b;
        case "!==":
            if (typeof a === "object") a = a.version;
            if (typeof b === "object") b = b.version;
            return a !== b;
        case "":
        case "=":
        case "==":
            return eq(a, b, loose);
        case "!=":
            return neq(a, b, loose);
        case ">":
            return gt(a, b, loose);
        case ">=":
            return gte(a, b, loose);
        case "<":
            return lt(a, b, loose);
        case "<=":
            return lte(a, b, loose);
        default:
            throw new TypeError(`Invalid operator: ${op}`);
    }
};
module.exports = cmp;

},{"bff7f16298b8dbaa":"jnraT","6a1bb69c2d499261":"bKrrL","dca4b9c05150a919":"9bikf","7b5dc70556970d6c":"3Fb23","a3a3bcc6e4d6bbdf":"6HpKA","5f1835ee4d0596f3":"Kyi6j"}],"jSU44":[function(require,module,exports) {
const SemVer = require("25529d97ade3ccdf");
const parse = require("90724e3140f56906");
const { safeRe: re, t } = require("49971e907f1359e9");
const coerce = (version, options)=>{
    if (version instanceof SemVer) return version;
    if (typeof version === "number") version = String(version);
    if (typeof version !== "string") return null;
    options = options || {};
    let match = null;
    if (!options.rtl) match = version.match(re[t.COERCE]);
    else {
        // Find the right-most coercible string that does not share
        // a terminus with a more left-ward coercible string.
        // Eg, '1.2.3.4' wants to coerce '2.3.4', not '3.4' or '4'
        //
        // Walk through the string checking with a /g regexp
        // Manually set the index so as to pick up overlapping matches.
        // Stop when we get a match that ends at the string end, since no
        // coercible string can be more right-ward without the same terminus.
        let next;
        while((next = re[t.COERCERTL].exec(version)) && (!match || match.index + match[0].length !== version.length)){
            if (!match || next.index + next[0].length !== match.index + match[0].length) match = next;
            re[t.COERCERTL].lastIndex = next.index + next[1].length + next[2].length;
        }
        // leave it in a clean state
        re[t.COERCERTL].lastIndex = -1;
    }
    if (match === null) return null;
    return parse(`${match[2]}.${match[3] || "0"}.${match[4] || "0"}`, options);
};
module.exports = coerce;

},{"25529d97ade3ccdf":"3yIAg","90724e3140f56906":"7DJy0","49971e907f1359e9":"ayIhb"}],"gpjDG":[function(require,module,exports) {
const ANY = Symbol("SemVer ANY");
// hoisted class for cyclic dependency
class Comparator {
    static get ANY() {
        return ANY;
    }
    constructor(comp, options){
        options = parseOptions(options);
        if (comp instanceof Comparator) {
            if (comp.loose === !!options.loose) return comp;
            else comp = comp.value;
        }
        comp = comp.trim().split(/\s+/).join(" ");
        debug("comparator", comp, options);
        this.options = options;
        this.loose = !!options.loose;
        this.parse(comp);
        if (this.semver === ANY) this.value = "";
        else this.value = this.operator + this.semver.version;
        debug("comp", this);
    }
    parse(comp) {
        const r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];
        const m = comp.match(r);
        if (!m) throw new TypeError(`Invalid comparator: ${comp}`);
        this.operator = m[1] !== undefined ? m[1] : "";
        if (this.operator === "=") this.operator = "";
        // if it literally is just '>' or '' then allow anything.
        if (!m[2]) this.semver = ANY;
        else this.semver = new SemVer(m[2], this.options.loose);
    }
    toString() {
        return this.value;
    }
    test(version) {
        debug("Comparator.test", version, this.options.loose);
        if (this.semver === ANY || version === ANY) return true;
        if (typeof version === "string") try {
            version = new SemVer(version, this.options);
        } catch (er) {
            return false;
        }
        return cmp(version, this.operator, this.semver, this.options);
    }
    intersects(comp, options) {
        if (!(comp instanceof Comparator)) throw new TypeError("a Comparator is required");
        if (this.operator === "") {
            if (this.value === "") return true;
            return new Range(comp.value, options).test(this.value);
        } else if (comp.operator === "") {
            if (comp.value === "") return true;
            return new Range(this.value, options).test(comp.semver);
        }
        options = parseOptions(options);
        // Special cases where nothing can possibly be lower
        if (options.includePrerelease && (this.value === "<0.0.0-0" || comp.value === "<0.0.0-0")) return false;
        if (!options.includePrerelease && (this.value.startsWith("<0.0.0") || comp.value.startsWith("<0.0.0"))) return false;
        // Same direction increasing (> or >=)
        if (this.operator.startsWith(">") && comp.operator.startsWith(">")) return true;
        // Same direction decreasing (< or <=)
        if (this.operator.startsWith("<") && comp.operator.startsWith("<")) return true;
        // same SemVer and both sides are inclusive (<= or >=)
        if (this.semver.version === comp.semver.version && this.operator.includes("=") && comp.operator.includes("=")) return true;
        // opposite directions less than
        if (cmp(this.semver, "<", comp.semver, options) && this.operator.startsWith(">") && comp.operator.startsWith("<")) return true;
        // opposite directions greater than
        if (cmp(this.semver, ">", comp.semver, options) && this.operator.startsWith("<") && comp.operator.startsWith(">")) return true;
        return false;
    }
}
module.exports = Comparator;
const parseOptions = require("b6563e9809bd921f");
const { safeRe: re, t } = require("f844ee6695e23038");
const cmp = require("e62b495d112b67cb");
const debug = require("13b490d953a8241f");
const SemVer = require("f688b7fbae163ad8");
const Range = require("b8839ba12a91a5c9");

},{"b6563e9809bd921f":"bW0qT","f844ee6695e23038":"ayIhb","e62b495d112b67cb":"4RxVm","13b490d953a8241f":"aB3UY","f688b7fbae163ad8":"3yIAg","b8839ba12a91a5c9":"giP7u"}],"giP7u":[function(require,module,exports) {
// hoisted class for cyclic dependency
class Range {
    constructor(range, options){
        options = parseOptions(options);
        if (range instanceof Range) {
            if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) return range;
            else return new Range(range.raw, options);
        }
        if (range instanceof Comparator) {
            // just put it in the set and return
            this.raw = range.value;
            this.set = [
                [
                    range
                ]
            ];
            this.format();
            return this;
        }
        this.options = options;
        this.loose = !!options.loose;
        this.includePrerelease = !!options.includePrerelease;
        // First reduce all whitespace as much as possible so we do not have to rely
        // on potentially slow regexes like \s*. This is then stored and used for
        // future error messages as well.
        this.raw = range.trim().split(/\s+/).join(" ");
        // First, split on ||
        this.set = this.raw.split("||")// map the range to a 2d array of comparators
        .map((r)=>this.parseRange(r.trim()))// throw out any comparator lists that are empty
        // this generally means that it was not a valid range, which is allowed
        // in loose mode, but will still throw if the WHOLE range is invalid.
        .filter((c)=>c.length);
        if (!this.set.length) throw new TypeError(`Invalid SemVer Range: ${this.raw}`);
        // if we have any that are not the null set, throw out null sets.
        if (this.set.length > 1) {
            // keep the first one, in case they're all null sets
            const first = this.set[0];
            this.set = this.set.filter((c)=>!isNullSet(c[0]));
            if (this.set.length === 0) this.set = [
                first
            ];
            else if (this.set.length > 1) {
                // if we have any that are *, then the range is just *
                for (const c of this.set)if (c.length === 1 && isAny(c[0])) {
                    this.set = [
                        c
                    ];
                    break;
                }
            }
        }
        this.format();
    }
    format() {
        this.range = this.set.map((comps)=>comps.join(" ").trim()).join("||").trim();
        return this.range;
    }
    toString() {
        return this.range;
    }
    parseRange(range) {
        // memoize range parsing for performance.
        // this is a very hot path, and fully deterministic.
        const memoOpts = (this.options.includePrerelease && FLAG_INCLUDE_PRERELEASE) | (this.options.loose && FLAG_LOOSE);
        const memoKey = memoOpts + ":" + range;
        const cached = cache.get(memoKey);
        if (cached) return cached;
        const loose = this.options.loose;
        // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`
        const hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE];
        range = range.replace(hr, hyphenReplace(this.options.includePrerelease));
        debug("hyphen replace", range);
        // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`
        range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace);
        debug("comparator trim", range);
        // `~ 1.2.3` => `~1.2.3`
        range = range.replace(re[t.TILDETRIM], tildeTrimReplace);
        debug("tilde trim", range);
        // `^ 1.2.3` => `^1.2.3`
        range = range.replace(re[t.CARETTRIM], caretTrimReplace);
        debug("caret trim", range);
        // At this point, the range is completely trimmed and
        // ready to be split into comparators.
        let rangeList = range.split(" ").map((comp)=>parseComparator(comp, this.options)).join(" ").split(/\s+/)// >=0.0.0 is equivalent to *
        .map((comp)=>replaceGTE0(comp, this.options));
        if (loose) // in loose mode, throw out any that are not valid comparators
        rangeList = rangeList.filter((comp)=>{
            debug("loose invalid filter", comp, this.options);
            return !!comp.match(re[t.COMPARATORLOOSE]);
        });
        debug("range list", rangeList);
        // if any comparators are the null set, then replace with JUST null set
        // if more than one comparator, remove any * comparators
        // also, don't include the same comparator more than once
        const rangeMap = new Map();
        const comparators = rangeList.map((comp)=>new Comparator(comp, this.options));
        for (const comp of comparators){
            if (isNullSet(comp)) return [
                comp
            ];
            rangeMap.set(comp.value, comp);
        }
        if (rangeMap.size > 1 && rangeMap.has("")) rangeMap.delete("");
        const result = [
            ...rangeMap.values()
        ];
        cache.set(memoKey, result);
        return result;
    }
    intersects(range, options) {
        if (!(range instanceof Range)) throw new TypeError("a Range is required");
        return this.set.some((thisComparators)=>{
            return isSatisfiable(thisComparators, options) && range.set.some((rangeComparators)=>{
                return isSatisfiable(rangeComparators, options) && thisComparators.every((thisComparator)=>{
                    return rangeComparators.every((rangeComparator)=>{
                        return thisComparator.intersects(rangeComparator, options);
                    });
                });
            });
        });
    }
    // if ANY of the sets match ALL of its comparators, then pass
    test(version) {
        if (!version) return false;
        if (typeof version === "string") try {
            version = new SemVer(version, this.options);
        } catch (er) {
            return false;
        }
        for(let i = 0; i < this.set.length; i++){
            if (testSet(this.set[i], version, this.options)) return true;
        }
        return false;
    }
}
module.exports = Range;
const LRU = require("f98d093917001b0e");
const cache = new LRU({
    max: 1000
});
const parseOptions = require("17bb122b9b0740d9");
const Comparator = require("df9131adcc191f91");
const debug = require("1c7c6c8abfe9bd3b");
const SemVer = require("d77fd978650b507f");
const { safeRe: re, t, comparatorTrimReplace, tildeTrimReplace, caretTrimReplace } = require("9bd5ca5276add1c4");
const { FLAG_INCLUDE_PRERELEASE, FLAG_LOOSE } = require("8c8074dc7fc46964");
const isNullSet = (c)=>c.value === "<0.0.0-0";
const isAny = (c)=>c.value === "";
// take a set of comparators and determine whether there
// exists a version which can satisfy it
const isSatisfiable = (comparators, options)=>{
    let result = true;
    const remainingComparators = comparators.slice();
    let testComparator = remainingComparators.pop();
    while(result && remainingComparators.length){
        result = remainingComparators.every((otherComparator)=>{
            return testComparator.intersects(otherComparator, options);
        });
        testComparator = remainingComparators.pop();
    }
    return result;
};
// comprised of xranges, tildes, stars, and gtlt's at this point.
// already replaced the hyphen ranges
// turn into a set of JUST comparators.
const parseComparator = (comp, options)=>{
    debug("comp", comp, options);
    comp = replaceCarets(comp, options);
    debug("caret", comp);
    comp = replaceTildes(comp, options);
    debug("tildes", comp);
    comp = replaceXRanges(comp, options);
    debug("xrange", comp);
    comp = replaceStars(comp, options);
    debug("stars", comp);
    return comp;
};
const isX = (id)=>!id || id.toLowerCase() === "x" || id === "*";
// ~, ~> --> * (any, kinda silly)
// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0-0
// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0-0
// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0-0
// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0-0
// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0-0
// ~0.0.1 --> >=0.0.1 <0.1.0-0
const replaceTildes = (comp, options)=>{
    return comp.trim().split(/\s+/).map((c)=>replaceTilde(c, options)).join(" ");
};
const replaceTilde = (comp, options)=>{
    const r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE];
    return comp.replace(r, (_, M, m, p, pr)=>{
        debug("tilde", comp, _, M, m, p, pr);
        let ret;
        if (isX(M)) ret = "";
        else if (isX(m)) ret = `>=${M}.0.0 <${+M + 1}.0.0-0`;
        else if (isX(p)) // ~1.2 == >=1.2.0 <1.3.0-0
        ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`;
        else if (pr) {
            debug("replaceTilde pr", pr);
            ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;
        } else // ~1.2.3 == >=1.2.3 <1.3.0-0
        ret = `>=${M}.${m}.${p} <${M}.${+m + 1}.0-0`;
        debug("tilde return", ret);
        return ret;
    });
};
// ^ --> * (any, kinda silly)
// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0-0
// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0-0
// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0-0
// ^1.2.3 --> >=1.2.3 <2.0.0-0
// ^1.2.0 --> >=1.2.0 <2.0.0-0
// ^0.0.1 --> >=0.0.1 <0.0.2-0
// ^0.1.0 --> >=0.1.0 <0.2.0-0
const replaceCarets = (comp, options)=>{
    return comp.trim().split(/\s+/).map((c)=>replaceCaret(c, options)).join(" ");
};
const replaceCaret = (comp, options)=>{
    debug("caret", comp, options);
    const r = options.loose ? re[t.CARETLOOSE] : re[t.CARET];
    const z = options.includePrerelease ? "-0" : "";
    return comp.replace(r, (_, M, m, p, pr)=>{
        debug("caret", comp, _, M, m, p, pr);
        let ret;
        if (isX(M)) ret = "";
        else if (isX(m)) ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`;
        else if (isX(p)) {
            if (M === "0") ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`;
            else ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`;
        } else if (pr) {
            debug("replaceCaret pr", pr);
            if (M === "0") {
                if (m === "0") ret = `>=${M}.${m}.${p}-${pr} <${M}.${m}.${+p + 1}-0`;
                else ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;
            } else ret = `>=${M}.${m}.${p}-${pr} <${+M + 1}.0.0-0`;
        } else {
            debug("no pr");
            if (M === "0") {
                if (m === "0") ret = `>=${M}.${m}.${p}${z} <${M}.${m}.${+p + 1}-0`;
                else ret = `>=${M}.${m}.${p}${z} <${M}.${+m + 1}.0-0`;
            } else ret = `>=${M}.${m}.${p} <${+M + 1}.0.0-0`;
        }
        debug("caret return", ret);
        return ret;
    });
};
const replaceXRanges = (comp, options)=>{
    debug("replaceXRanges", comp, options);
    return comp.split(/\s+/).map((c)=>replaceXRange(c, options)).join(" ");
};
const replaceXRange = (comp, options)=>{
    comp = comp.trim();
    const r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE];
    return comp.replace(r, (ret, gtlt, M, m, p, pr)=>{
        debug("xRange", comp, ret, gtlt, M, m, p, pr);
        const xM = isX(M);
        const xm = xM || isX(m);
        const xp = xm || isX(p);
        const anyX = xp;
        if (gtlt === "=" && anyX) gtlt = "";
        // if we're including prereleases in the match, then we need
        // to fix this to -0, the lowest possible prerelease value
        pr = options.includePrerelease ? "-0" : "";
        if (xM) {
            if (gtlt === ">" || gtlt === "<") // nothing is allowed
            ret = "<0.0.0-0";
            else // nothing is forbidden
            ret = "*";
        } else if (gtlt && anyX) {
            // we know patch is an x, because we have any x at all.
            // replace X with 0
            if (xm) m = 0;
            p = 0;
            if (gtlt === ">") {
                // >1 => >=2.0.0
                // >1.2 => >=1.3.0
                gtlt = ">=";
                if (xm) {
                    M = +M + 1;
                    m = 0;
                    p = 0;
                } else {
                    m = +m + 1;
                    p = 0;
                }
            } else if (gtlt === "<=") {
                // <=0.7.x is actually <0.8.0, since any 0.7.x should
                // pass.  Similarly, <=7.x is actually <8.0.0, etc.
                gtlt = "<";
                if (xm) M = +M + 1;
                else m = +m + 1;
            }
            if (gtlt === "<") pr = "-0";
            ret = `${gtlt + M}.${m}.${p}${pr}`;
        } else if (xm) ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`;
        else if (xp) ret = `>=${M}.${m}.0${pr} <${M}.${+m + 1}.0-0`;
        debug("xRange return", ret);
        return ret;
    });
};
// Because * is AND-ed with everything else in the comparator,
// and '' means "any version", just remove the *s entirely.
const replaceStars = (comp, options)=>{
    debug("replaceStars", comp, options);
    // Looseness is ignored here.  star is always as loose as it gets!
    return comp.trim().replace(re[t.STAR], "");
};
const replaceGTE0 = (comp, options)=>{
    debug("replaceGTE0", comp, options);
    return comp.trim().replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], "");
};
// This function is passed to string.replace(re[t.HYPHENRANGE])
// M, m, patch, prerelease, build
// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5
// 1.2.3 - 3.4 => >=1.2.0 <3.5.0-0 Any 3.4.x will do
// 1.2 - 3.4 => >=1.2.0 <3.5.0-0
const hyphenReplace = (incPr)=>($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb)=>{
        if (isX(fM)) from = "";
        else if (isX(fm)) from = `>=${fM}.0.0${incPr ? "-0" : ""}`;
        else if (isX(fp)) from = `>=${fM}.${fm}.0${incPr ? "-0" : ""}`;
        else if (fpr) from = `>=${from}`;
        else from = `>=${from}${incPr ? "-0" : ""}`;
        if (isX(tM)) to = "";
        else if (isX(tm)) to = `<${+tM + 1}.0.0-0`;
        else if (isX(tp)) to = `<${tM}.${+tm + 1}.0-0`;
        else if (tpr) to = `<=${tM}.${tm}.${tp}-${tpr}`;
        else if (incPr) to = `<${tM}.${tm}.${+tp + 1}-0`;
        else to = `<=${to}`;
        return `${from} ${to}`.trim();
    };
const testSet = (set, version, options)=>{
    for(let i = 0; i < set.length; i++){
        if (!set[i].test(version)) return false;
    }
    if (version.prerelease.length && !options.includePrerelease) {
        // Find the set of versions that are allowed to have prereleases
        // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0
        // That should allow `1.2.3-pr.2` to pass.
        // However, `1.2.4-alpha.notready` should NOT be allowed,
        // even though it's within the range set by the comparators.
        for(let i = 0; i < set.length; i++){
            debug(set[i].semver);
            if (set[i].semver === Comparator.ANY) continue;
            if (set[i].semver.prerelease.length > 0) {
                const allowed = set[i].semver;
                if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch) return true;
            }
        }
        // Version has a -pre, but it's not one of the ones we like.
        return false;
    }
    return true;
};

},{"f98d093917001b0e":"7nuXJ","17bb122b9b0740d9":"bW0qT","df9131adcc191f91":"gpjDG","1c7c6c8abfe9bd3b":"aB3UY","d77fd978650b507f":"3yIAg","9bd5ca5276add1c4":"ayIhb","8c8074dc7fc46964":"70PXx"}],"7nuXJ":[function(require,module,exports) {
"use strict";
// A linked list to keep track of recently-used-ness
const Yallist = require("f6aab322aadb8044");
const MAX = Symbol("max");
const LENGTH = Symbol("length");
const LENGTH_CALCULATOR = Symbol("lengthCalculator");
const ALLOW_STALE = Symbol("allowStale");
const MAX_AGE = Symbol("maxAge");
const DISPOSE = Symbol("dispose");
const NO_DISPOSE_ON_SET = Symbol("noDisposeOnSet");
const LRU_LIST = Symbol("lruList");
const CACHE = Symbol("cache");
const UPDATE_AGE_ON_GET = Symbol("updateAgeOnGet");
const naiveLength = ()=>1;
// lruList is a yallist where the head is the youngest
// item, and the tail is the oldest.  the list contains the Hit
// objects as the entries.
// Each Hit object has a reference to its Yallist.Node.  This
// never changes.
//
// cache is a Map (or PseudoMap) that matches the keys to
// the Yallist.Node object.
class LRUCache {
    constructor(options){
        if (typeof options === "number") options = {
            max: options
        };
        if (!options) options = {};
        if (options.max && (typeof options.max !== "number" || options.max < 0)) throw new TypeError("max must be a non-negative number");
        // Kind of weird to have a default max of Infinity, but oh well.
        const max = this[MAX] = options.max || Infinity;
        const lc = options.length || naiveLength;
        this[LENGTH_CALCULATOR] = typeof lc !== "function" ? naiveLength : lc;
        this[ALLOW_STALE] = options.stale || false;
        if (options.maxAge && typeof options.maxAge !== "number") throw new TypeError("maxAge must be a number");
        this[MAX_AGE] = options.maxAge || 0;
        this[DISPOSE] = options.dispose;
        this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false;
        this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false;
        this.reset();
    }
    // resize the cache when the max changes.
    set max(mL) {
        if (typeof mL !== "number" || mL < 0) throw new TypeError("max must be a non-negative number");
        this[MAX] = mL || Infinity;
        trim(this);
    }
    get max() {
        return this[MAX];
    }
    set allowStale(allowStale) {
        this[ALLOW_STALE] = !!allowStale;
    }
    get allowStale() {
        return this[ALLOW_STALE];
    }
    set maxAge(mA) {
        if (typeof mA !== "number") throw new TypeError("maxAge must be a non-negative number");
        this[MAX_AGE] = mA;
        trim(this);
    }
    get maxAge() {
        return this[MAX_AGE];
    }
    // resize the cache when the lengthCalculator changes.
    set lengthCalculator(lC) {
        if (typeof lC !== "function") lC = naiveLength;
        if (lC !== this[LENGTH_CALCULATOR]) {
            this[LENGTH_CALCULATOR] = lC;
            this[LENGTH] = 0;
            this[LRU_LIST].forEach((hit)=>{
                hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key);
                this[LENGTH] += hit.length;
            });
        }
        trim(this);
    }
    get lengthCalculator() {
        return this[LENGTH_CALCULATOR];
    }
    get length() {
        return this[LENGTH];
    }
    get itemCount() {
        return this[LRU_LIST].length;
    }
    rforEach(fn, thisp) {
        thisp = thisp || this;
        for(let walker = this[LRU_LIST].tail; walker !== null;){
            const prev = walker.prev;
            forEachStep(this, fn, walker, thisp);
            walker = prev;
        }
    }
    forEach(fn, thisp) {
        thisp = thisp || this;
        for(let walker = this[LRU_LIST].head; walker !== null;){
            const next = walker.next;
            forEachStep(this, fn, walker, thisp);
            walker = next;
        }
    }
    keys() {
        return this[LRU_LIST].toArray().map((k)=>k.key);
    }
    values() {
        return this[LRU_LIST].toArray().map((k)=>k.value);
    }
    reset() {
        if (this[DISPOSE] && this[LRU_LIST] && this[LRU_LIST].length) this[LRU_LIST].forEach((hit)=>this[DISPOSE](hit.key, hit.value));
        this[CACHE] = new Map() // hash of items by key
        ;
        this[LRU_LIST] = new Yallist() // list of items in order of use recency
        ;
        this[LENGTH] = 0 // length of items in the list
        ;
    }
    dump() {
        return this[LRU_LIST].map((hit)=>isStale(this, hit) ? false : {
                k: hit.key,
                v: hit.value,
                e: hit.now + (hit.maxAge || 0)
            }).toArray().filter((h)=>h);
    }
    dumpLru() {
        return this[LRU_LIST];
    }
    set(key, value, maxAge) {
        maxAge = maxAge || this[MAX_AGE];
        if (maxAge && typeof maxAge !== "number") throw new TypeError("maxAge must be a number");
        const now = maxAge ? Date.now() : 0;
        const len = this[LENGTH_CALCULATOR](value, key);
        if (this[CACHE].has(key)) {
            if (len > this[MAX]) {
                del(this, this[CACHE].get(key));
                return false;
            }
            const node = this[CACHE].get(key);
            const item = node.value;
            // dispose of the old one before overwriting
            // split out into 2 ifs for better coverage tracking
            if (this[DISPOSE]) {
                if (!this[NO_DISPOSE_ON_SET]) this[DISPOSE](key, item.value);
            }
            item.now = now;
            item.maxAge = maxAge;
            item.value = value;
            this[LENGTH] += len - item.length;
            item.length = len;
            this.get(key);
            trim(this);
            return true;
        }
        const hit = new Entry(key, value, len, now, maxAge);
        // oversized objects fall out of cache automatically.
        if (hit.length > this[MAX]) {
            if (this[DISPOSE]) this[DISPOSE](key, value);
            return false;
        }
        this[LENGTH] += hit.length;
        this[LRU_LIST].unshift(hit);
        this[CACHE].set(key, this[LRU_LIST].head);
        trim(this);
        return true;
    }
    has(key) {
        if (!this[CACHE].has(key)) return false;
        const hit = this[CACHE].get(key).value;
        return !isStale(this, hit);
    }
    get(key) {
        return get(this, key, true);
    }
    peek(key) {
        return get(this, key, false);
    }
    pop() {
        const node = this[LRU_LIST].tail;
        if (!node) return null;
        del(this, node);
        return node.value;
    }
    del(key) {
        del(this, this[CACHE].get(key));
    }
    load(arr) {
        // reset the cache
        this.reset();
        const now = Date.now();
        // A previous serialized cache has the most recent items first
        for(let l = arr.length - 1; l >= 0; l--){
            const hit = arr[l];
            const expiresAt = hit.e || 0;
            if (expiresAt === 0) // the item was created without expiration in a non aged cache
            this.set(hit.k, hit.v);
            else {
                const maxAge = expiresAt - now;
                // dont add already expired items
                if (maxAge > 0) this.set(hit.k, hit.v, maxAge);
            }
        }
    }
    prune() {
        this[CACHE].forEach((value, key)=>get(this, key, false));
    }
}
const get = (self, key, doUse)=>{
    const node = self[CACHE].get(key);
    if (node) {
        const hit = node.value;
        if (isStale(self, hit)) {
            del(self, node);
            if (!self[ALLOW_STALE]) return undefined;
        } else if (doUse) {
            if (self[UPDATE_AGE_ON_GET]) node.value.now = Date.now();
            self[LRU_LIST].unshiftNode(node);
        }
        return hit.value;
    }
};
const isStale = (self, hit)=>{
    if (!hit || !hit.maxAge && !self[MAX_AGE]) return false;
    const diff = Date.now() - hit.now;
    return hit.maxAge ? diff > hit.maxAge : self[MAX_AGE] && diff > self[MAX_AGE];
};
const trim = (self)=>{
    if (self[LENGTH] > self[MAX]) for(let walker = self[LRU_LIST].tail; self[LENGTH] > self[MAX] && walker !== null;){
        // We know that we're about to delete this one, and also
        // what the next least recently used key will be, so just
        // go ahead and set it now.
        const prev = walker.prev;
        del(self, walker);
        walker = prev;
    }
};
const del = (self, node)=>{
    if (node) {
        const hit = node.value;
        if (self[DISPOSE]) self[DISPOSE](hit.key, hit.value);
        self[LENGTH] -= hit.length;
        self[CACHE].delete(hit.key);
        self[LRU_LIST].removeNode(node);
    }
};
class Entry {
    constructor(key, value, length, now, maxAge){
        this.key = key;
        this.value = value;
        this.length = length;
        this.now = now;
        this.maxAge = maxAge || 0;
    }
}
const forEachStep = (self, fn, node, thisp)=>{
    let hit = node.value;
    if (isStale(self, hit)) {
        del(self, node);
        if (!self[ALLOW_STALE]) hit = undefined;
    }
    if (hit) fn.call(thisp, hit.value, hit.key, self);
};
module.exports = LRUCache;

},{"f6aab322aadb8044":"1HPcr"}],"1HPcr":[function(require,module,exports) {
"use strict";
module.exports = Yallist;
Yallist.Node = Node;
Yallist.create = Yallist;
function Yallist(list) {
    var self = this;
    if (!(self instanceof Yallist)) self = new Yallist();
    self.tail = null;
    self.head = null;
    self.length = 0;
    if (list && typeof list.forEach === "function") list.forEach(function(item) {
        self.push(item);
    });
    else if (arguments.length > 0) for(var i = 0, l = arguments.length; i < l; i++)self.push(arguments[i]);
    return self;
}
Yallist.prototype.removeNode = function(node) {
    if (node.list !== this) throw new Error("removing node which does not belong to this list");
    var next = node.next;
    var prev = node.prev;
    if (next) next.prev = prev;
    if (prev) prev.next = next;
    if (node === this.head) this.head = next;
    if (node === this.tail) this.tail = prev;
    node.list.length--;
    node.next = null;
    node.prev = null;
    node.list = null;
    return next;
};
Yallist.prototype.unshiftNode = function(node) {
    if (node === this.head) return;
    if (node.list) node.list.removeNode(node);
    var head = this.head;
    node.list = this;
    node.next = head;
    if (head) head.prev = node;
    this.head = node;
    if (!this.tail) this.tail = node;
    this.length++;
};
Yallist.prototype.pushNode = function(node) {
    if (node === this.tail) return;
    if (node.list) node.list.removeNode(node);
    var tail = this.tail;
    node.list = this;
    node.prev = tail;
    if (tail) tail.next = node;
    this.tail = node;
    if (!this.head) this.head = node;
    this.length++;
};
Yallist.prototype.push = function() {
    for(var i = 0, l = arguments.length; i < l; i++)push(this, arguments[i]);
    return this.length;
};
Yallist.prototype.unshift = function() {
    for(var i = 0, l = arguments.length; i < l; i++)unshift(this, arguments[i]);
    return this.length;
};
Yallist.prototype.pop = function() {
    if (!this.tail) return undefined;
    var res = this.tail.value;
    this.tail = this.tail.prev;
    if (this.tail) this.tail.next = null;
    else this.head = null;
    this.length--;
    return res;
};
Yallist.prototype.shift = function() {
    if (!this.head) return undefined;
    var res = this.head.value;
    this.head = this.head.next;
    if (this.head) this.head.prev = null;
    else this.tail = null;
    this.length--;
    return res;
};
Yallist.prototype.forEach = function(fn, thisp) {
    thisp = thisp || this;
    for(var walker = this.head, i = 0; walker !== null; i++){
        fn.call(thisp, walker.value, i, this);
        walker = walker.next;
    }
};
Yallist.prototype.forEachReverse = function(fn, thisp) {
    thisp = thisp || this;
    for(var walker = this.tail, i = this.length - 1; walker !== null; i--){
        fn.call(thisp, walker.value, i, this);
        walker = walker.prev;
    }
};
Yallist.prototype.get = function(n) {
    for(var i = 0, walker = this.head; walker !== null && i < n; i++)// abort out of the list early if we hit a cycle
    walker = walker.next;
    if (i === n && walker !== null) return walker.value;
};
Yallist.prototype.getReverse = function(n) {
    for(var i = 0, walker = this.tail; walker !== null && i < n; i++)// abort out of the list early if we hit a cycle
    walker = walker.prev;
    if (i === n && walker !== null) return walker.value;
};
Yallist.prototype.map = function(fn, thisp) {
    thisp = thisp || this;
    var res = new Yallist();
    for(var walker = this.head; walker !== null;){
        res.push(fn.call(thisp, walker.value, this));
        walker = walker.next;
    }
    return res;
};
Yallist.prototype.mapReverse = function(fn, thisp) {
    thisp = thisp || this;
    var res = new Yallist();
    for(var walker = this.tail; walker !== null;){
        res.push(fn.call(thisp, walker.value, this));
        walker = walker.prev;
    }
    return res;
};
Yallist.prototype.reduce = function(fn, initial) {
    var acc;
    var walker = this.head;
    if (arguments.length > 1) acc = initial;
    else if (this.head) {
        walker = this.head.next;
        acc = this.head.value;
    } else throw new TypeError("Reduce of empty list with no initial value");
    for(var i = 0; walker !== null; i++){
        acc = fn(acc, walker.value, i);
        walker = walker.next;
    }
    return acc;
};
Yallist.prototype.reduceReverse = function(fn, initial) {
    var acc;
    var walker = this.tail;
    if (arguments.length > 1) acc = initial;
    else if (this.tail) {
        walker = this.tail.prev;
        acc = this.tail.value;
    } else throw new TypeError("Reduce of empty list with no initial value");
    for(var i = this.length - 1; walker !== null; i--){
        acc = fn(acc, walker.value, i);
        walker = walker.prev;
    }
    return acc;
};
Yallist.prototype.toArray = function() {
    var arr = new Array(this.length);
    for(var i = 0, walker = this.head; walker !== null; i++){
        arr[i] = walker.value;
        walker = walker.next;
    }
    return arr;
};
Yallist.prototype.toArrayReverse = function() {
    var arr = new Array(this.length);
    for(var i = 0, walker = this.tail; walker !== null; i++){
        arr[i] = walker.value;
        walker = walker.prev;
    }
    return arr;
};
Yallist.prototype.slice = function(from, to) {
    to = to || this.length;
    if (to < 0) to += this.length;
    from = from || 0;
    if (from < 0) from += this.length;
    var ret = new Yallist();
    if (to < from || to < 0) return ret;
    if (from < 0) from = 0;
    if (to > this.length) to = this.length;
    for(var i = 0, walker = this.head; walker !== null && i < from; i++)walker = walker.next;
    for(; walker !== null && i < to; i++, walker = walker.next)ret.push(walker.value);
    return ret;
};
Yallist.prototype.sliceReverse = function(from, to) {
    to = to || this.length;
    if (to < 0) to += this.length;
    from = from || 0;
    if (from < 0) from += this.length;
    var ret = new Yallist();
    if (to < from || to < 0) return ret;
    if (from < 0) from = 0;
    if (to > this.length) to = this.length;
    for(var i = this.length, walker = this.tail; walker !== null && i > to; i--)walker = walker.prev;
    for(; walker !== null && i > from; i--, walker = walker.prev)ret.push(walker.value);
    return ret;
};
Yallist.prototype.splice = function(start, deleteCount, ...nodes) {
    if (start > this.length) start = this.length - 1;
    if (start < 0) start = this.length + start;
    for(var i = 0, walker = this.head; walker !== null && i < start; i++)walker = walker.next;
    var ret = [];
    for(var i = 0; walker && i < deleteCount; i++){
        ret.push(walker.value);
        walker = this.removeNode(walker);
    }
    if (walker === null) walker = this.tail;
    if (walker !== this.head && walker !== this.tail) walker = walker.prev;
    for(var i = 0; i < nodes.length; i++)walker = insert(this, walker, nodes[i]);
    return ret;
};
Yallist.prototype.reverse = function() {
    var head = this.head;
    var tail = this.tail;
    for(var walker = head; walker !== null; walker = walker.prev){
        var p = walker.prev;
        walker.prev = walker.next;
        walker.next = p;
    }
    this.head = tail;
    this.tail = head;
    return this;
};
function insert(self, node, value) {
    var inserted = node === self.head ? new Node(value, null, node, self) : new Node(value, node, node.next, self);
    if (inserted.next === null) self.tail = inserted;
    if (inserted.prev === null) self.head = inserted;
    self.length++;
    return inserted;
}
function push(self, item) {
    self.tail = new Node(item, self.tail, null, self);
    if (!self.head) self.head = self.tail;
    self.length++;
}
function unshift(self, item) {
    self.head = new Node(item, null, self.head, self);
    if (!self.tail) self.tail = self.head;
    self.length++;
}
function Node(value, prev, next, list) {
    if (!(this instanceof Node)) return new Node(value, prev, next, list);
    this.list = list;
    this.value = value;
    if (prev) {
        prev.next = this;
        this.prev = prev;
    } else this.prev = null;
    if (next) {
        next.prev = this;
        this.next = next;
    } else this.next = null;
}
try {
    // add if support for Symbol.iterator is present
    require("d680a8272731d358")(Yallist);
} catch (er) {}

},{"d680a8272731d358":"8q8Ed"}],"8q8Ed":[function(require,module,exports) {
"use strict";
module.exports = function(Yallist) {
    Yallist.prototype[Symbol.iterator] = function*() {
        for(let walker = this.head; walker; walker = walker.next)yield walker.value;
    };
};

},{}],"2f9Mn":[function(require,module,exports) {
const Range = require("b60a47303a13d107");
const satisfies = (version, range, options)=>{
    try {
        range = new Range(range, options);
    } catch (er) {
        return false;
    }
    return range.test(version);
};
module.exports = satisfies;

},{"b60a47303a13d107":"giP7u"}],"jUHRY":[function(require,module,exports) {
const Range = require("f497be9904aac7c0");
// Mostly just for testing and legacy API reasons
const toComparators = (range, options)=>new Range(range, options).set.map((comp)=>comp.map((c)=>c.value).join(" ").trim().split(" "));
module.exports = toComparators;

},{"f497be9904aac7c0":"giP7u"}],"5mwHv":[function(require,module,exports) {
const SemVer = require("96d622a81d57358d");
const Range = require("f2865e94142488ab");
const maxSatisfying = (versions, range, options)=>{
    let max = null;
    let maxSV = null;
    let rangeObj = null;
    try {
        rangeObj = new Range(range, options);
    } catch (er) {
        return null;
    }
    versions.forEach((v)=>{
        if (rangeObj.test(v)) // satisfies(v, range, options)
        {
            if (!max || maxSV.compare(v) === -1) {
                // compare(max, v, true)
                max = v;
                maxSV = new SemVer(max, options);
            }
        }
    });
    return max;
};
module.exports = maxSatisfying;

},{"96d622a81d57358d":"3yIAg","f2865e94142488ab":"giP7u"}],"i3rTr":[function(require,module,exports) {
const SemVer = require("fea3851ba09d8834");
const Range = require("9d2799b098b5c4c7");
const minSatisfying = (versions, range, options)=>{
    let min = null;
    let minSV = null;
    let rangeObj = null;
    try {
        rangeObj = new Range(range, options);
    } catch (er) {
        return null;
    }
    versions.forEach((v)=>{
        if (rangeObj.test(v)) // satisfies(v, range, options)
        {
            if (!min || minSV.compare(v) === 1) {
                // compare(min, v, true)
                min = v;
                minSV = new SemVer(min, options);
            }
        }
    });
    return min;
};
module.exports = minSatisfying;

},{"fea3851ba09d8834":"3yIAg","9d2799b098b5c4c7":"giP7u"}],"jO4tQ":[function(require,module,exports) {
const SemVer = require("4c531b1d555da497");
const Range = require("76327127dc36ed58");
const gt = require("a5ac47b45ae8684c");
const minVersion = (range, loose)=>{
    range = new Range(range, loose);
    let minver = new SemVer("0.0.0");
    if (range.test(minver)) return minver;
    minver = new SemVer("0.0.0-0");
    if (range.test(minver)) return minver;
    minver = null;
    for(let i = 0; i < range.set.length; ++i){
        const comparators = range.set[i];
        let setMin = null;
        comparators.forEach((comparator)=>{
            // Clone to avoid manipulating the comparator's semver object.
            const compver = new SemVer(comparator.semver.version);
            switch(comparator.operator){
                case ">":
                    if (compver.prerelease.length === 0) compver.patch++;
                    else compver.prerelease.push(0);
                    compver.raw = compver.format();
                /* fallthrough */ case "":
                case ">=":
                    if (!setMin || gt(compver, setMin)) setMin = compver;
                    break;
                case "<":
                case "<=":
                    break;
                /* istanbul ignore next */ default:
                    throw new Error(`Unexpected operation: ${comparator.operator}`);
            }
        });
        if (setMin && (!minver || gt(minver, setMin))) minver = setMin;
    }
    if (minver && range.test(minver)) return minver;
    return null;
};
module.exports = minVersion;

},{"4c531b1d555da497":"3yIAg","76327127dc36ed58":"giP7u","a5ac47b45ae8684c":"9bikf"}],"9J0tF":[function(require,module,exports) {
const Range = require("fd2c35053245b1fd");
const validRange = (range, options)=>{
    try {
        // Return '*' instead of '' so that truthiness works.
        // This will throw if it's invalid anyway
        return new Range(range, options).range || "*";
    } catch (er) {
        return null;
    }
};
module.exports = validRange;

},{"fd2c35053245b1fd":"giP7u"}],"enE98":[function(require,module,exports) {
const SemVer = require("65977c6c7fab41e0");
const Comparator = require("8b0890ac7a0294ed");
const { ANY } = Comparator;
const Range = require("9baad77301d611e2");
const satisfies = require("1a3d276234841886");
const gt = require("8f784c6ef2cd1972");
const lt = require("3c234e2ddd9db68a");
const lte = require("88893a74cd9f934");
const gte = require("6cccfcce37ef6329");
const outside = (version, range, hilo, options)=>{
    version = new SemVer(version, options);
    range = new Range(range, options);
    let gtfn, ltefn, ltfn, comp, ecomp;
    switch(hilo){
        case ">":
            gtfn = gt;
            ltefn = lte;
            ltfn = lt;
            comp = ">";
            ecomp = ">=";
            break;
        case "<":
            gtfn = lt;
            ltefn = gte;
            ltfn = gt;
            comp = "<";
            ecomp = "<=";
            break;
        default:
            throw new TypeError('Must provide a hilo val of "<" or ">"');
    }
    // If it satisfies the range it is not outside
    if (satisfies(version, range, options)) return false;
    // From now on, variable terms are as if we're in "gtr" mode.
    // but note that everything is flipped for the "ltr" function.
    for(let i = 0; i < range.set.length; ++i){
        const comparators = range.set[i];
        let high = null;
        let low = null;
        comparators.forEach((comparator)=>{
            if (comparator.semver === ANY) comparator = new Comparator(">=0.0.0");
            high = high || comparator;
            low = low || comparator;
            if (gtfn(comparator.semver, high.semver, options)) high = comparator;
            else if (ltfn(comparator.semver, low.semver, options)) low = comparator;
        });
        // If the edge version comparator has a operator then our version
        // isn't outside it
        if (high.operator === comp || high.operator === ecomp) return false;
        // If the lowest version comparator has an operator and our version
        // is less than it then it isn't higher than the range
        if ((!low.operator || low.operator === comp) && ltefn(version, low.semver)) return false;
        else if (low.operator === ecomp && ltfn(version, low.semver)) return false;
    }
    return true;
};
module.exports = outside;

},{"65977c6c7fab41e0":"3yIAg","8b0890ac7a0294ed":"gpjDG","9baad77301d611e2":"giP7u","1a3d276234841886":"2f9Mn","8f784c6ef2cd1972":"9bikf","3c234e2ddd9db68a":"6HpKA","88893a74cd9f934":"Kyi6j","6cccfcce37ef6329":"3Fb23"}],"bY2sF":[function(require,module,exports) {
// Determine if version is greater than all the versions possible in the range.
const outside = require("be5e984e16e512b9");
const gtr = (version, range, options)=>outside(version, range, ">", options);
module.exports = gtr;

},{"be5e984e16e512b9":"enE98"}],"d2qSu":[function(require,module,exports) {
const outside = require("b7f00e21a32b75a5");
// Determine if version is less than all the versions possible in the range
const ltr = (version, range, options)=>outside(version, range, "<", options);
module.exports = ltr;

},{"b7f00e21a32b75a5":"enE98"}],"1izkn":[function(require,module,exports) {
const Range = require("5205f80872e81710");
const intersects = (r1, r2, options)=>{
    r1 = new Range(r1, options);
    r2 = new Range(r2, options);
    return r1.intersects(r2, options);
};
module.exports = intersects;

},{"5205f80872e81710":"giP7u"}],"blx2e":[function(require,module,exports) {
// given a set of versions and a range, create a "simplified" range
// that includes the same versions that the original range does
// If the original range is shorter than the simplified one, return that.
const satisfies = require("e72123f17434788");
const compare = require("3eb9817061c82995");
module.exports = (versions, range, options)=>{
    const set = [];
    let first = null;
    let prev = null;
    const v = versions.sort((a, b)=>compare(a, b, options));
    for (const version of v){
        const included = satisfies(version, range, options);
        if (included) {
            prev = version;
            if (!first) first = version;
        } else {
            if (prev) set.push([
                first,
                prev
            ]);
            prev = null;
            first = null;
        }
    }
    if (first) set.push([
        first,
        null
    ]);
    const ranges = [];
    for (const [min, max] of set){
        if (min === max) ranges.push(min);
        else if (!max && min === v[0]) ranges.push("*");
        else if (!max) ranges.push(`>=${min}`);
        else if (min === v[0]) ranges.push(`<=${max}`);
        else ranges.push(`${min} - ${max}`);
    }
    const simplified = ranges.join(" || ");
    const original = typeof range.raw === "string" ? range.raw : String(range);
    return simplified.length < original.length ? simplified : range;
};

},{"e72123f17434788":"2f9Mn","3eb9817061c82995":"cONcV"}],"5k5N6":[function(require,module,exports) {
const Range = require("c141b0432e6ae71b");
const Comparator = require("94bed966a1054073");
const { ANY } = Comparator;
const satisfies = require("acfaf6445a9794b");
const compare = require("d9ed82a69c119cf4");
// Complex range `r1 || r2 || ...` is a subset of `R1 || R2 || ...` iff:
// - Every simple range `r1, r2, ...` is a null set, OR
// - Every simple range `r1, r2, ...` which is not a null set is a subset of
//   some `R1, R2, ...`
//
// Simple range `c1 c2 ...` is a subset of simple range `C1 C2 ...` iff:
// - If c is only the ANY comparator
//   - If C is only the ANY comparator, return true
//   - Else if in prerelease mode, return false
//   - else replace c with `[>=0.0.0]`
// - If C is only the ANY comparator
//   - if in prerelease mode, return true
//   - else replace C with `[>=0.0.0]`
// - Let EQ be the set of = comparators in c
// - If EQ is more than one, return true (null set)
// - Let GT be the highest > or >= comparator in c
// - Let LT be the lowest < or <= comparator in c
// - If GT and LT, and GT.semver > LT.semver, return true (null set)
// - If any C is a = range, and GT or LT are set, return false
// - If EQ
//   - If GT, and EQ does not satisfy GT, return true (null set)
//   - If LT, and EQ does not satisfy LT, return true (null set)
//   - If EQ satisfies every C, return true
//   - Else return false
// - If GT
//   - If GT.semver is lower than any > or >= comp in C, return false
//   - If GT is >=, and GT.semver does not satisfy every C, return false
//   - If GT.semver has a prerelease, and not in prerelease mode
//     - If no C has a prerelease and the GT.semver tuple, return false
// - If LT
//   - If LT.semver is greater than any < or <= comp in C, return false
//   - If LT is <=, and LT.semver does not satisfy every C, return false
//   - If GT.semver has a prerelease, and not in prerelease mode
//     - If no C has a prerelease and the LT.semver tuple, return false
// - Else return true
const subset = (sub, dom, options = {})=>{
    if (sub === dom) return true;
    sub = new Range(sub, options);
    dom = new Range(dom, options);
    let sawNonNull = false;
    OUTER: for (const simpleSub of sub.set){
        for (const simpleDom of dom.set){
            const isSub = simpleSubset(simpleSub, simpleDom, options);
            sawNonNull = sawNonNull || isSub !== null;
            if (isSub) continue OUTER;
        }
        // the null set is a subset of everything, but null simple ranges in
        // a complex range should be ignored.  so if we saw a non-null range,
        // then we know this isn't a subset, but if EVERY simple range was null,
        // then it is a subset.
        if (sawNonNull) return false;
    }
    return true;
};
const minimumVersionWithPreRelease = [
    new Comparator(">=0.0.0-0")
];
const minimumVersion = [
    new Comparator(">=0.0.0")
];
const simpleSubset = (sub, dom, options)=>{
    if (sub === dom) return true;
    if (sub.length === 1 && sub[0].semver === ANY) {
        if (dom.length === 1 && dom[0].semver === ANY) return true;
        else if (options.includePrerelease) sub = minimumVersionWithPreRelease;
        else sub = minimumVersion;
    }
    if (dom.length === 1 && dom[0].semver === ANY) {
        if (options.includePrerelease) return true;
        else dom = minimumVersion;
    }
    const eqSet = new Set();
    let gt, lt;
    for (const c of sub){
        if (c.operator === ">" || c.operator === ">=") gt = higherGT(gt, c, options);
        else if (c.operator === "<" || c.operator === "<=") lt = lowerLT(lt, c, options);
        else eqSet.add(c.semver);
    }
    if (eqSet.size > 1) return null;
    let gtltComp;
    if (gt && lt) {
        gtltComp = compare(gt.semver, lt.semver, options);
        if (gtltComp > 0) return null;
        else if (gtltComp === 0 && (gt.operator !== ">=" || lt.operator !== "<=")) return null;
    }
    // will iterate one or zero times
    for (const eq of eqSet){
        if (gt && !satisfies(eq, String(gt), options)) return null;
        if (lt && !satisfies(eq, String(lt), options)) return null;
        for (const c of dom){
            if (!satisfies(eq, String(c), options)) return false;
        }
        return true;
    }
    let higher, lower;
    let hasDomLT, hasDomGT;
    // if the subset has a prerelease, we need a comparator in the superset
    // with the same tuple and a prerelease, or it's not a subset
    let needDomLTPre = lt && !options.includePrerelease && lt.semver.prerelease.length ? lt.semver : false;
    let needDomGTPre = gt && !options.includePrerelease && gt.semver.prerelease.length ? gt.semver : false;
    // exception: <1.2.3-0 is the same as <1.2.3
    if (needDomLTPre && needDomLTPre.prerelease.length === 1 && lt.operator === "<" && needDomLTPre.prerelease[0] === 0) needDomLTPre = false;
    for (const c of dom){
        hasDomGT = hasDomGT || c.operator === ">" || c.operator === ">=";
        hasDomLT = hasDomLT || c.operator === "<" || c.operator === "<=";
        if (gt) {
            if (needDomGTPre) {
                if (c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomGTPre.major && c.semver.minor === needDomGTPre.minor && c.semver.patch === needDomGTPre.patch) needDomGTPre = false;
            }
            if (c.operator === ">" || c.operator === ">=") {
                higher = higherGT(gt, c, options);
                if (higher === c && higher !== gt) return false;
            } else if (gt.operator === ">=" && !satisfies(gt.semver, String(c), options)) return false;
        }
        if (lt) {
            if (needDomLTPre) {
                if (c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomLTPre.major && c.semver.minor === needDomLTPre.minor && c.semver.patch === needDomLTPre.patch) needDomLTPre = false;
            }
            if (c.operator === "<" || c.operator === "<=") {
                lower = lowerLT(lt, c, options);
                if (lower === c && lower !== lt) return false;
            } else if (lt.operator === "<=" && !satisfies(lt.semver, String(c), options)) return false;
        }
        if (!c.operator && (lt || gt) && gtltComp !== 0) return false;
    }
    // if there was a < or >, and nothing in the dom, then must be false
    // UNLESS it was limited by another range in the other direction.
    // Eg, >1.0.0 <1.0.1 is still a subset of <2.0.0
    if (gt && hasDomLT && !lt && gtltComp !== 0) return false;
    if (lt && hasDomGT && !gt && gtltComp !== 0) return false;
    // we needed a prerelease range in a specific tuple, but didn't get one
    // then this isn't a subset.  eg >=1.2.3-pre is not a subset of >=1.0.0,
    // because it includes prereleases in the 1.2.3 tuple
    if (needDomGTPre || needDomLTPre) return false;
    return true;
};
// >=1.2.3 is lower than >1.2.3
const higherGT = (a, b, options)=>{
    if (!a) return b;
    const comp = compare(a.semver, b.semver, options);
    return comp > 0 ? a : comp < 0 ? b : b.operator === ">" && a.operator === ">=" ? b : a;
};
// <=1.2.3 is higher than <1.2.3
const lowerLT = (a, b, options)=>{
    if (!a) return b;
    const comp = compare(a.semver, b.semver, options);
    return comp < 0 ? a : comp > 0 ? b : b.operator === "<" && a.operator === "<=" ? b : a;
};
module.exports = subset;

},{"c141b0432e6ae71b":"giP7u","94bed966a1054073":"gpjDG","acfaf6445a9794b":"2f9Mn","d9ed82a69c119cf4":"cONcV"}],"avzkU":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function createDeferred(arg, data) {
    let localResolve = (_t)=>{};
    let localReject = (_e)=>{};
    let id;
    const promise = new Promise((resolve, reject)=>__awaiter(this, void 0, void 0, function*() {
            localResolve = resolve;
            localReject = reject;
            if (typeof arg === "function") try {
                yield arg();
            } catch (error) {
                reject(error);
            }
            if (typeof arg === "string") id = arg;
        }));
    return {
        id,
        data,
        resolve: localResolve,
        reject: localReject,
        promise
    };
}
function fillStringWithArguments(value, object) {
    if (typeof value !== "string") return value;
    return value.replace(/\{([^}]+)\}/g, (_, arg)=>object[arg] || "?");
}
class HardwareError extends Error {
    constructor(hardwareError){
        var _a;
        super();
        this.errorCode = HardwareErrorCode.UnknownError;
        this.message = "";
        this.params = {};
        const errorMessageMapping = HardwareErrorCodeMessage;
        this.message = errorMessageMapping[HardwareErrorCode.UnknownError];
        if (typeof hardwareError === "string") {
            this.errorCode = HardwareErrorCode.UnknownError;
            this.message = hardwareError;
        } else {
            const message = (_a = hardwareError.message || errorMessageMapping[hardwareError.errorCode]) !== null && _a !== void 0 ? _a : "";
            if (message) this.message = fillStringWithArguments(message, hardwareError);
            this.params = hardwareError.params;
            this.errorCode = hardwareError.errorCode;
        }
        this.name = "HardwareError";
    }
}
const HardwareErrorCode = {
    UnknownError: 0,
    DeviceFwException: 101,
    DeviceUnexpectedMode: 102,
    DeviceListNotInitialized: 103,
    SelectDevice: 104,
    DeviceNotFound: 105,
    DeviceInitializeFailed: 106,
    DeviceInterruptedFromOutside: 107,
    DeviceUnexpectedBootloaderMode: 108,
    DeviceInterruptedFromUser: 109,
    DeviceCheckDeviceIdError: 110,
    DeviceNotSupportPassphrase: 111,
    DeviceCheckPassphraseStateError: 112,
    DeviceNotOpenedPassphrase: 113,
    DeviceOpenedPassphrase: 114,
    NotInitialized: 200,
    IFrameNotInitialized: 300,
    IFrameAleradyInitialized: 301,
    IFrameLoadFail: 302,
    IframeTimeout: 303,
    IframeBlocked: 304,
    CallMethodError: 400,
    CallMethodNotResponse: 404,
    CallMethodInvalidParameter: 405,
    FirmwareUpdateDownloadFailed: 406,
    CallMethodNeedUpgradeFirmware: 407,
    CallMethodDeprecated: 408,
    FirmwareUpdateLimitOneDevice: 409,
    FirmwareUpdateManuallyEnterBoot: 410,
    FirmwareUpdateAutoEnterBootFailure: 411,
    NewFirmwareUnRelease: 412,
    UseDesktopToUpdateFirmware: 413,
    NewFirmwareForceUpdate: 414,
    NetworkError: 500,
    TransportNotConfigured: 600,
    TransportCallInProgress: 601,
    TransportNotFound: 602,
    TransportInvalidProtobuf: 603,
    BleScanError: 700,
    BlePermissionError: 701,
    BleLocationError: 702,
    BleRequiredUUID: 703,
    BleConnectedError: 704,
    BleDeviceNotBonded: 705,
    BleServiceNotFound: 706,
    BleCharacteristicNotFound: 707,
    BleMonitorError: 708,
    BleCharacteristicNotifyError: 709,
    BleWriteCharacteristicError: 710,
    BleAlreadyConnected: 711,
    BleLocationServicesDisabled: 712,
    BleTimeoutError: 713,
    BleForceCleanRunPromise: 714,
    BleDeviceBondError: 715,
    RuntimeError: 800,
    PinInvalid: 801,
    PinCancelled: 802,
    ActionCancelled: 803,
    FirmwareError: 804,
    ResponseUnexpectTypeError: 805,
    BridgeNetworkError: 806,
    BridgeTimeoutError: 807,
    BridgeNotInstalled: 808,
    PollingTimeout: 809,
    PollingStop: 810,
    BlindSignDisabled: 811,
    UnexpectPassphrase: 812,
    FileAlreadyExists: 813,
    CheckDownloadFileError: 814,
    NotInSigningMode: 815,
    LowlevelTrasnportConnectError: 900
};
const HardwareErrorCodeMessage = {
    [HardwareErrorCode.UnknownError]: "Unknown error occurred. Check message property.",
    [HardwareErrorCode.DeviceFwException]: "Firmware version mismatch",
    [HardwareErrorCode.DeviceUnexpectedMode]: "Device unexpected mode",
    [HardwareErrorCode.DeviceListNotInitialized]: "Device list is not initialized",
    [HardwareErrorCode.SelectDevice]: "Please select the connected device",
    [HardwareErrorCode.DeviceNotFound]: "Device not found",
    [HardwareErrorCode.DeviceInitializeFailed]: "Device initialization failed",
    [HardwareErrorCode.DeviceInterruptedFromOutside]: "Device interrupted",
    [HardwareErrorCode.DeviceInterruptedFromUser]: "Device interrupted",
    [HardwareErrorCode.DeviceUnexpectedBootloaderMode]: "Device should be in bootloader mode",
    [HardwareErrorCode.DeviceCheckDeviceIdError]: "Device Id in the features is not same.",
    [HardwareErrorCode.DeviceNotSupportPassphrase]: "Device not support passphrase",
    [HardwareErrorCode.DeviceCheckPassphraseStateError]: "Device passphrase state error",
    [HardwareErrorCode.DeviceNotOpenedPassphrase]: "Device not opened passphrase",
    [HardwareErrorCode.DeviceOpenedPassphrase]: "Device opened passphrase",
    [HardwareErrorCode.NotInitialized]: "Not initialized",
    [HardwareErrorCode.IFrameNotInitialized]: "IFrame not initialized",
    [HardwareErrorCode.IFrameAleradyInitialized]: "IFrame alerady initialized",
    [HardwareErrorCode.IFrameLoadFail]: "IFrame load fail",
    [HardwareErrorCode.IframeTimeout]: "init iframe time out",
    [HardwareErrorCode.IframeBlocked]: "IFrame blocked",
    [HardwareErrorCode.CallMethodError]: "Runtime errors during method execution",
    [HardwareErrorCode.CallMethodNotResponse]: "Method does not responding",
    [HardwareErrorCode.CallMethodInvalidParameter]: "Call method invalid parameter",
    [HardwareErrorCode.FirmwareUpdateDownloadFailed]: "Firmware update download failed",
    [HardwareErrorCode.CallMethodNeedUpgradeFirmware]: "Call method need upgrade firmware",
    [HardwareErrorCode.CallMethodDeprecated]: "Call method is deprecated",
    [HardwareErrorCode.FirmwareUpdateLimitOneDevice]: "Only one device can be connected during firmware upgrade",
    [HardwareErrorCode.FirmwareUpdateManuallyEnterBoot]: "You need to manually enter boot",
    [HardwareErrorCode.FirmwareUpdateAutoEnterBootFailure]: "Description Failed to automatically enter boot",
    [HardwareErrorCode.NewFirmwareUnRelease]: "new firmware has not been released yet",
    [HardwareErrorCode.NewFirmwareForceUpdate]: "new firmware has been released, please update",
    [HardwareErrorCode.UseDesktopToUpdateFirmware]: "Please use OneKey desktop client to update the firmware",
    [HardwareErrorCode.NetworkError]: "Network request error",
    [HardwareErrorCode.TransportNotConfigured]: "Transport not configured",
    [HardwareErrorCode.TransportCallInProgress]: "Transport call in progress",
    [HardwareErrorCode.TransportNotFound]: "Transport not found",
    [HardwareErrorCode.TransportInvalidProtobuf]: "Transport invalid protobuf",
    [HardwareErrorCode.BleScanError]: "BLE scan error",
    [HardwareErrorCode.BlePermissionError]: "Bluetooth required to be turned on",
    [HardwareErrorCode.BleLocationError]: "Location permissions for the application are not available",
    [HardwareErrorCode.BleRequiredUUID]: "uuid is required",
    [HardwareErrorCode.BleConnectedError]: "connected error is always runtime error",
    [HardwareErrorCode.BleDeviceNotBonded]: "device is not bonded",
    [HardwareErrorCode.BleServiceNotFound]: "BLEServiceNotFound: service not found",
    [HardwareErrorCode.BleCharacteristicNotFound]: "BLEServiceNotFound: service not found",
    [HardwareErrorCode.BleMonitorError]: "Monitor Error: characteristic not found",
    [HardwareErrorCode.BleCharacteristicNotifyError]: "Characteristic Notify Error",
    [HardwareErrorCode.BleWriteCharacteristicError]: "Write Characteristic Error",
    [HardwareErrorCode.BleAlreadyConnected]: "Already connected to device",
    [HardwareErrorCode.BleLocationServicesDisabled]: "Location Services disabled",
    [HardwareErrorCode.BleTimeoutError]: "The connection has timed out unexpectedly.",
    [HardwareErrorCode.BleForceCleanRunPromise]: "Force clean Bluetooth run promise",
    [HardwareErrorCode.BleDeviceBondError]: "Bluetooth pairing failed",
    [HardwareErrorCode.RuntimeError]: "Runtime error",
    [HardwareErrorCode.PinInvalid]: "Pin invalid",
    [HardwareErrorCode.PinCancelled]: "Pin cancelled",
    [HardwareErrorCode.ActionCancelled]: "Action cancelled by user",
    [HardwareErrorCode.FirmwareError]: "Firmware installation failed",
    [HardwareErrorCode.ResponseUnexpectTypeError]: "Response type is not expected",
    [HardwareErrorCode.BridgeNetworkError]: "Bridge network error",
    [HardwareErrorCode.BridgeTimeoutError]: "Bridge network timeout",
    [HardwareErrorCode.BridgeNotInstalled]: "Bridge not installed",
    [HardwareErrorCode.PollingTimeout]: "Polling timeout",
    [HardwareErrorCode.PollingStop]: "Polling stop",
    [HardwareErrorCode.BlindSignDisabled]: "Please confirm the BlindSign enabled",
    [HardwareErrorCode.UnexpectPassphrase]: "Unexpect passphrase",
    [HardwareErrorCode.FileAlreadyExists]: "File already exists",
    [HardwareErrorCode.CheckDownloadFileError]: "Check download file error",
    [HardwareErrorCode.NotInSigningMode]: "not in signing mode",
    [HardwareErrorCode.LowlevelTrasnportConnectError]: "Lowlevel transport connect error"
};
const TypedError = (hardwareError, message, params)=>{
    if (typeof hardwareError === "string") return new HardwareError(hardwareError);
    return new HardwareError({
        errorCode: hardwareError,
        message: message !== null && message !== void 0 ? message : "",
        params
    });
};
const serializeError = (payload)=>{
    if (payload && payload.error instanceof HardwareError) return {
        error: payload.error.message,
        code: payload.error.errorCode,
        params: payload.error.params
    };
    if (payload && payload.error instanceof Error) return {
        error: payload.error.message,
        code: payload.error.code
    };
    return payload;
};
const CreateErrorByMessage = (message)=>{
    for (const code of Object.values(HardwareErrorCode)){
        if (HardwareErrorCodeMessage[code] === message) return TypedError(code);
    }
    return new HardwareError(message);
};
var HardwareError$1 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    HardwareError: HardwareError,
    HardwareErrorCode: HardwareErrorCode,
    HardwareErrorCodeMessage: HardwareErrorCodeMessage,
    TypedError: TypedError,
    serializeError: serializeError,
    CreateErrorByMessage: CreateErrorByMessage
});
exports.CreateErrorByMessage = CreateErrorByMessage;
exports.ERRORS = HardwareError$1;
exports.HardwareError = HardwareError;
exports.HardwareErrorCode = HardwareErrorCode;
exports.HardwareErrorCodeMessage = HardwareErrorCodeMessage;
exports.TypedError = TypedError;
exports.createDeferred = createDeferred;
exports.serializeError = serializeError;

},{}],"gIwns":[function(require,module,exports) {
module.exports = require("9f37cef8b0e13afc");

},{"9f37cef8b0e13afc":"lNH3U"}],"lNH3U":[function(require,module,exports) {
"use strict";
var utils = require("1137fef34918bf53");
var bind = require("ce63a8247a300202");
var Axios = require("c14c66f4c3ec48a2");
var mergeConfig = require("345f9ec0ee8efc80");
var defaults = require("27bdb15d131780c5");
/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */ function createInstance(defaultConfig) {
    var context = new Axios(defaultConfig);
    var instance = bind(Axios.prototype.request, context);
    // Copy axios.prototype to instance
    utils.extend(instance, Axios.prototype, context);
    // Copy context to instance
    utils.extend(instance, context);
    // Factory for creating new instances
    instance.create = function create(instanceConfig) {
        return createInstance(mergeConfig(defaultConfig, instanceConfig));
    };
    return instance;
}
// Create the default instance to be exported
var axios = createInstance(defaults);
// Expose Axios class to allow class inheritance
axios.Axios = Axios;
// Expose Cancel & CancelToken
axios.CanceledError = require("99821b4fc0ba2f69");
axios.CancelToken = require("853fec7db7d524b4");
axios.isCancel = require("322a636c3e2325e1");
axios.VERSION = require("3d6b2db6c802d85d").version;
axios.toFormData = require("ef33bb7abb9fa67d");
// Expose AxiosError class
axios.AxiosError = require("a5206ee4d751b44");
// alias for CanceledError for backward compatibility
axios.Cancel = axios.CanceledError;
// Expose all/spread
axios.all = function all(promises) {
    return Promise.all(promises);
};
axios.spread = require("75c7c70e55d88256");
// Expose isAxiosError
axios.isAxiosError = require("543a1da09311ae9b");
module.exports = axios;
// Allow use of default import syntax in TypeScript
module.exports.default = axios;

},{"1137fef34918bf53":"lbtnr","ce63a8247a300202":"cVXCT","c14c66f4c3ec48a2":"gwL4I","345f9ec0ee8efc80":"1ogTa","27bdb15d131780c5":"kgCsl","99821b4fc0ba2f69":"6k8Ga","853fec7db7d524b4":"fsLds","322a636c3e2325e1":"gz0Pv","3d6b2db6c802d85d":"4oEjm","ef33bb7abb9fa67d":"jJQ5Z","a5206ee4d751b44":"fxYQp","75c7c70e55d88256":"cwX15","543a1da09311ae9b":"bsdyt"}],"lbtnr":[function(require,module,exports) {
"use strict";
var bind = require("a7c7b4094caa86ac");
// utils is a library of generic helper functions non-specific to axios
var toString = Object.prototype.toString;
// eslint-disable-next-line func-names
var kindOf = function(cache) {
    // eslint-disable-next-line func-names
    return function(thing) {
        var str = toString.call(thing);
        return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
    };
}(Object.create(null));
function kindOfTest(type) {
    type = type.toLowerCase();
    return function isKindOf(thing) {
        return kindOf(thing) === type;
    };
}
/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */ function isArray(val) {
    return Array.isArray(val);
}
/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */ function isUndefined(val) {
    return typeof val === "undefined";
}
/**
 * Determine if a value is a Buffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Buffer, otherwise false
 */ function isBuffer(val) {
    return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === "function" && val.constructor.isBuffer(val);
}
/**
 * Determine if a value is an ArrayBuffer
 *
 * @function
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */ var isArrayBuffer = kindOfTest("ArrayBuffer");
/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */ function isArrayBufferView(val) {
    var result;
    if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) result = ArrayBuffer.isView(val);
    else result = val && val.buffer && isArrayBuffer(val.buffer);
    return result;
}
/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */ function isString(val) {
    return typeof val === "string";
}
/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */ function isNumber(val) {
    return typeof val === "number";
}
/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */ function isObject(val) {
    return val !== null && typeof val === "object";
}
/**
 * Determine if a value is a plain Object
 *
 * @param {Object} val The value to test
 * @return {boolean} True if value is a plain Object, otherwise false
 */ function isPlainObject(val) {
    if (kindOf(val) !== "object") return false;
    var prototype = Object.getPrototypeOf(val);
    return prototype === null || prototype === Object.prototype;
}
/**
 * Determine if a value is a Date
 *
 * @function
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */ var isDate = kindOfTest("Date");
/**
 * Determine if a value is a File
 *
 * @function
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */ var isFile = kindOfTest("File");
/**
 * Determine if a value is a Blob
 *
 * @function
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */ var isBlob = kindOfTest("Blob");
/**
 * Determine if a value is a FileList
 *
 * @function
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */ var isFileList = kindOfTest("FileList");
/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */ function isFunction(val) {
    return toString.call(val) === "[object Function]";
}
/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */ function isStream(val) {
    return isObject(val) && isFunction(val.pipe);
}
/**
 * Determine if a value is a FormData
 *
 * @param {Object} thing The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */ function isFormData(thing) {
    var pattern = "[object FormData]";
    return thing && (typeof FormData === "function" && thing instanceof FormData || toString.call(thing) === pattern || isFunction(thing.toString) && thing.toString() === pattern);
}
/**
 * Determine if a value is a URLSearchParams object
 * @function
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */ var isURLSearchParams = kindOfTest("URLSearchParams");
/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */ function trim(str) {
    return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, "");
}
/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */ function isStandardBrowserEnv() {
    if (typeof navigator !== "undefined" && (navigator.product === "ReactNative" || navigator.product === "NativeScript" || navigator.product === "NS")) return false;
    return typeof window !== "undefined" && typeof document !== "undefined";
}
/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */ function forEach(obj, fn) {
    // Don't bother if no value provided
    if (obj === null || typeof obj === "undefined") return;
    // Force an array if not already something iterable
    if (typeof obj !== "object") /*eslint no-param-reassign:0*/ obj = [
        obj
    ];
    if (isArray(obj)) // Iterate over array values
    for(var i = 0, l = obj.length; i < l; i++)fn.call(null, obj[i], i, obj);
    else {
        // Iterate over object keys
        for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) fn.call(null, obj[key], key, obj);
    }
}
/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */ function merge() {
    var result = {};
    function assignValue(val, key) {
        if (isPlainObject(result[key]) && isPlainObject(val)) result[key] = merge(result[key], val);
        else if (isPlainObject(val)) result[key] = merge({}, val);
        else if (isArray(val)) result[key] = val.slice();
        else result[key] = val;
    }
    for(var i = 0, l = arguments.length; i < l; i++)forEach(arguments[i], assignValue);
    return result;
}
/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */ function extend(a, b, thisArg) {
    forEach(b, function assignValue(val, key) {
        if (thisArg && typeof val === "function") a[key] = bind(val, thisArg);
        else a[key] = val;
    });
    return a;
}
/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 * @return {string} content value without BOM
 */ function stripBOM(content) {
    if (content.charCodeAt(0) === 0xFEFF) content = content.slice(1);
    return content;
}
/**
 * Inherit the prototype methods from one constructor into another
 * @param {function} constructor
 * @param {function} superConstructor
 * @param {object} [props]
 * @param {object} [descriptors]
 */ function inherits(constructor, superConstructor, props, descriptors) {
    constructor.prototype = Object.create(superConstructor.prototype, descriptors);
    constructor.prototype.constructor = constructor;
    props && Object.assign(constructor.prototype, props);
}
/**
 * Resolve object with deep prototype chain to a flat object
 * @param {Object} sourceObj source object
 * @param {Object} [destObj]
 * @param {Function} [filter]
 * @returns {Object}
 */ function toFlatObject(sourceObj, destObj, filter) {
    var props;
    var i;
    var prop;
    var merged = {};
    destObj = destObj || {};
    do {
        props = Object.getOwnPropertyNames(sourceObj);
        i = props.length;
        while(i-- > 0){
            prop = props[i];
            if (!merged[prop]) {
                destObj[prop] = sourceObj[prop];
                merged[prop] = true;
            }
        }
        sourceObj = Object.getPrototypeOf(sourceObj);
    }while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);
    return destObj;
}
/*
 * determines whether a string ends with the characters of a specified string
 * @param {String} str
 * @param {String} searchString
 * @param {Number} [position= 0]
 * @returns {boolean}
 */ function endsWith(str, searchString, position) {
    str = String(str);
    if (position === undefined || position > str.length) position = str.length;
    position -= searchString.length;
    var lastIndex = str.indexOf(searchString, position);
    return lastIndex !== -1 && lastIndex === position;
}
/**
 * Returns new array from array like object
 * @param {*} [thing]
 * @returns {Array}
 */ function toArray(thing) {
    if (!thing) return null;
    var i = thing.length;
    if (isUndefined(i)) return null;
    var arr = new Array(i);
    while(i-- > 0)arr[i] = thing[i];
    return arr;
}
// eslint-disable-next-line func-names
var isTypedArray = function(TypedArray) {
    // eslint-disable-next-line func-names
    return function(thing) {
        return TypedArray && thing instanceof TypedArray;
    };
}(typeof Uint8Array !== "undefined" && Object.getPrototypeOf(Uint8Array));
module.exports = {
    isArray: isArray,
    isArrayBuffer: isArrayBuffer,
    isBuffer: isBuffer,
    isFormData: isFormData,
    isArrayBufferView: isArrayBufferView,
    isString: isString,
    isNumber: isNumber,
    isObject: isObject,
    isPlainObject: isPlainObject,
    isUndefined: isUndefined,
    isDate: isDate,
    isFile: isFile,
    isBlob: isBlob,
    isFunction: isFunction,
    isStream: isStream,
    isURLSearchParams: isURLSearchParams,
    isStandardBrowserEnv: isStandardBrowserEnv,
    forEach: forEach,
    merge: merge,
    extend: extend,
    trim: trim,
    stripBOM: stripBOM,
    inherits: inherits,
    toFlatObject: toFlatObject,
    kindOf: kindOf,
    kindOfTest: kindOfTest,
    endsWith: endsWith,
    toArray: toArray,
    isTypedArray: isTypedArray,
    isFileList: isFileList
};

},{"a7c7b4094caa86ac":"cVXCT"}],"cVXCT":[function(require,module,exports) {
"use strict";
module.exports = function bind(fn, thisArg) {
    return function wrap() {
        var args = new Array(arguments.length);
        for(var i = 0; i < args.length; i++)args[i] = arguments[i];
        return fn.apply(thisArg, args);
    };
};

},{}],"gwL4I":[function(require,module,exports) {
"use strict";
var utils = require("2cd2d0baba832579");
var buildURL = require("945ebba9256ed84f");
var InterceptorManager = require("fc2d71ae77ba798e");
var dispatchRequest = require("77b4f57f4d663a9b");
var mergeConfig = require("5db81a4f62f8927d");
var buildFullPath = require("bba783c05a4f93f7");
var validator = require("d0f5147a00cee7c5");
var validators = validator.validators;
/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */ function Axios(instanceConfig) {
    this.defaults = instanceConfig;
    this.interceptors = {
        request: new InterceptorManager(),
        response: new InterceptorManager()
    };
}
/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */ Axios.prototype.request = function request(configOrUrl, config) {
    /*eslint no-param-reassign:0*/ // Allow for axios('example/url'[, config]) a la fetch API
    if (typeof configOrUrl === "string") {
        config = config || {};
        config.url = configOrUrl;
    } else config = configOrUrl || {};
    config = mergeConfig(this.defaults, config);
    // Set config.method
    if (config.method) config.method = config.method.toLowerCase();
    else if (this.defaults.method) config.method = this.defaults.method.toLowerCase();
    else config.method = "get";
    var transitional = config.transitional;
    if (transitional !== undefined) validator.assertOptions(transitional, {
        silentJSONParsing: validators.transitional(validators.boolean),
        forcedJSONParsing: validators.transitional(validators.boolean),
        clarifyTimeoutError: validators.transitional(validators.boolean)
    }, false);
    // filter out skipped interceptors
    var requestInterceptorChain = [];
    var synchronousRequestInterceptors = true;
    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) return;
        synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
        requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
    });
    var responseInterceptorChain = [];
    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
    });
    var promise;
    if (!synchronousRequestInterceptors) {
        var chain = [
            dispatchRequest,
            undefined
        ];
        Array.prototype.unshift.apply(chain, requestInterceptorChain);
        chain = chain.concat(responseInterceptorChain);
        promise = Promise.resolve(config);
        while(chain.length)promise = promise.then(chain.shift(), chain.shift());
        return promise;
    }
    var newConfig = config;
    while(requestInterceptorChain.length){
        var onFulfilled = requestInterceptorChain.shift();
        var onRejected = requestInterceptorChain.shift();
        try {
            newConfig = onFulfilled(newConfig);
        } catch (error) {
            onRejected(error);
            break;
        }
    }
    try {
        promise = dispatchRequest(newConfig);
    } catch (error) {
        return Promise.reject(error);
    }
    while(responseInterceptorChain.length)promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
    return promise;
};
Axios.prototype.getUri = function getUri(config) {
    config = mergeConfig(this.defaults, config);
    var fullPath = buildFullPath(config.baseURL, config.url);
    return buildURL(fullPath, config.params, config.paramsSerializer);
};
// Provide aliases for supported request methods
utils.forEach([
    "delete",
    "get",
    "head",
    "options"
], function forEachMethodNoData(method) {
    /*eslint func-names:0*/ Axios.prototype[method] = function(url, config) {
        return this.request(mergeConfig(config || {}, {
            method: method,
            url: url,
            data: (config || {}).data
        }));
    };
});
utils.forEach([
    "post",
    "put",
    "patch"
], function forEachMethodWithData(method) {
    /*eslint func-names:0*/ function generateHTTPMethod(isForm) {
        return function httpMethod(url, data, config) {
            return this.request(mergeConfig(config || {}, {
                method: method,
                headers: isForm ? {
                    "Content-Type": "multipart/form-data"
                } : {},
                url: url,
                data: data
            }));
        };
    }
    Axios.prototype[method] = generateHTTPMethod();
    Axios.prototype[method + "Form"] = generateHTTPMethod(true);
});
module.exports = Axios;

},{"2cd2d0baba832579":"lbtnr","945ebba9256ed84f":"adWtE","fc2d71ae77ba798e":"gGizQ","77b4f57f4d663a9b":"8uQRh","5db81a4f62f8927d":"1ogTa","bba783c05a4f93f7":"bxNKA","d0f5147a00cee7c5":"isK1r"}],"adWtE":[function(require,module,exports) {
"use strict";
var utils = require("d198994ea2a45305");
function encode(val) {
    return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
}
/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */ module.exports = function buildURL(url, params, paramsSerializer) {
    /*eslint no-param-reassign:0*/ if (!params) return url;
    var serializedParams;
    if (paramsSerializer) serializedParams = paramsSerializer(params);
    else if (utils.isURLSearchParams(params)) serializedParams = params.toString();
    else {
        var parts = [];
        utils.forEach(params, function serialize(val, key) {
            if (val === null || typeof val === "undefined") return;
            if (utils.isArray(val)) key = key + "[]";
            else val = [
                val
            ];
            utils.forEach(val, function parseValue(v) {
                if (utils.isDate(v)) v = v.toISOString();
                else if (utils.isObject(v)) v = JSON.stringify(v);
                parts.push(encode(key) + "=" + encode(v));
            });
        });
        serializedParams = parts.join("&");
    }
    if (serializedParams) {
        var hashmarkIndex = url.indexOf("#");
        if (hashmarkIndex !== -1) url = url.slice(0, hashmarkIndex);
        url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
    }
    return url;
};

},{"d198994ea2a45305":"lbtnr"}],"gGizQ":[function(require,module,exports) {
"use strict";
var utils = require("982be9ba543c1801");
function InterceptorManager() {
    this.handlers = [];
}
/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */ InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
    this.handlers.push({
        fulfilled: fulfilled,
        rejected: rejected,
        synchronous: options ? options.synchronous : false,
        runWhen: options ? options.runWhen : null
    });
    return this.handlers.length - 1;
};
/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */ InterceptorManager.prototype.eject = function eject(id) {
    if (this.handlers[id]) this.handlers[id] = null;
};
/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */ InterceptorManager.prototype.forEach = function forEach(fn) {
    utils.forEach(this.handlers, function forEachHandler(h) {
        if (h !== null) fn(h);
    });
};
module.exports = InterceptorManager;

},{"982be9ba543c1801":"lbtnr"}],"8uQRh":[function(require,module,exports) {
"use strict";
var utils = require("dccb83262660ba2a");
var transformData = require("670a836c9c5a1abe");
var isCancel = require("9b938a75c8452b2f");
var defaults = require("293260d2186f65fb");
var CanceledError = require("babe605ae6871369");
/**
 * Throws a `CanceledError` if cancellation has been requested.
 */ function throwIfCancellationRequested(config) {
    if (config.cancelToken) config.cancelToken.throwIfRequested();
    if (config.signal && config.signal.aborted) throw new CanceledError();
}
/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */ module.exports = function dispatchRequest(config) {
    throwIfCancellationRequested(config);
    // Ensure headers exist
    config.headers = config.headers || {};
    // Transform request data
    config.data = transformData.call(config, config.data, config.headers, config.transformRequest);
    // Flatten headers
    config.headers = utils.merge(config.headers.common || {}, config.headers[config.method] || {}, config.headers);
    utils.forEach([
        "delete",
        "get",
        "head",
        "post",
        "put",
        "patch",
        "common"
    ], function cleanHeaderConfig(method) {
        delete config.headers[method];
    });
    var adapter = config.adapter || defaults.adapter;
    return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);
        // Transform response data
        response.data = transformData.call(config, response.data, response.headers, config.transformResponse);
        return response;
    }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
            throwIfCancellationRequested(config);
            // Transform response data
            if (reason && reason.response) reason.response.data = transformData.call(config, reason.response.data, reason.response.headers, config.transformResponse);
        }
        return Promise.reject(reason);
    });
};

},{"dccb83262660ba2a":"lbtnr","670a836c9c5a1abe":"fQ8XG","9b938a75c8452b2f":"gz0Pv","293260d2186f65fb":"kgCsl","babe605ae6871369":"6k8Ga"}],"fQ8XG":[function(require,module,exports) {
"use strict";
var utils = require("506225f7f22ee5b3");
var defaults = require("933dc4966aff4cbe");
/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */ module.exports = function transformData(data, headers, fns) {
    var context = this || defaults;
    /*eslint no-param-reassign:0*/ utils.forEach(fns, function transform(fn) {
        data = fn.call(context, data, headers);
    });
    return data;
};

},{"506225f7f22ee5b3":"lbtnr","933dc4966aff4cbe":"kgCsl"}],"kgCsl":[function(require,module,exports) {
var process = require("8191483f14ddb73c");
"use strict";
var utils = require("e81e3dbd1959aa01");
var normalizeHeaderName = require("753007ee6e6399c7");
var AxiosError = require("e9c38e32fac9e03e");
var transitionalDefaults = require("5a1b45724cbabfe9");
var toFormData = require("ce7605268fbf7e42");
var DEFAULT_CONTENT_TYPE = {
    "Content-Type": "application/x-www-form-urlencoded"
};
function setContentTypeIfUnset(headers, value) {
    if (!utils.isUndefined(headers) && utils.isUndefined(headers["Content-Type"])) headers["Content-Type"] = value;
}
function getDefaultAdapter() {
    var adapter;
    if (typeof XMLHttpRequest !== "undefined") // For browsers use XHR adapter
    adapter = require("96a55d646cd53040");
    else if (typeof process !== "undefined" && Object.prototype.toString.call(process) === "[object process]") // For node use HTTP adapter
    adapter = require("3d0364fd0ce54db5");
    return adapter;
}
function stringifySafely(rawValue, parser, encoder) {
    if (utils.isString(rawValue)) try {
        (parser || JSON.parse)(rawValue);
        return utils.trim(rawValue);
    } catch (e) {
        if (e.name !== "SyntaxError") throw e;
    }
    return (encoder || JSON.stringify)(rawValue);
}
var defaults = {
    transitional: transitionalDefaults,
    adapter: getDefaultAdapter(),
    transformRequest: [
        function transformRequest(data, headers) {
            normalizeHeaderName(headers, "Accept");
            normalizeHeaderName(headers, "Content-Type");
            if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) return data;
            if (utils.isArrayBufferView(data)) return data.buffer;
            if (utils.isURLSearchParams(data)) {
                setContentTypeIfUnset(headers, "application/x-www-form-urlencoded;charset=utf-8");
                return data.toString();
            }
            var isObjectPayload = utils.isObject(data);
            var contentType = headers && headers["Content-Type"];
            var isFileList;
            if ((isFileList = utils.isFileList(data)) || isObjectPayload && contentType === "multipart/form-data") {
                var _FormData = this.env && this.env.FormData;
                return toFormData(isFileList ? {
                    "files[]": data
                } : data, _FormData && new _FormData());
            } else if (isObjectPayload || contentType === "application/json") {
                setContentTypeIfUnset(headers, "application/json");
                return stringifySafely(data);
            }
            return data;
        }
    ],
    transformResponse: [
        function transformResponse(data) {
            var transitional = this.transitional || defaults.transitional;
            var silentJSONParsing = transitional && transitional.silentJSONParsing;
            var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
            var strictJSONParsing = !silentJSONParsing && this.responseType === "json";
            if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) try {
                return JSON.parse(data);
            } catch (e) {
                if (strictJSONParsing) {
                    if (e.name === "SyntaxError") throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);
                    throw e;
                }
            }
            return data;
        }
    ],
    /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */ timeout: 0,
    xsrfCookieName: "XSRF-TOKEN",
    xsrfHeaderName: "X-XSRF-TOKEN",
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
        FormData: require("2c6a31d8df55e92a")
    },
    validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
    },
    headers: {
        common: {
            "Accept": "application/json, text/plain, */*"
        }
    }
};
utils.forEach([
    "delete",
    "get",
    "head"
], function forEachMethodNoData(method) {
    defaults.headers[method] = {};
});
utils.forEach([
    "post",
    "put",
    "patch"
], function forEachMethodWithData(method) {
    defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});
module.exports = defaults;

},{"8191483f14ddb73c":"gq3cc","e81e3dbd1959aa01":"lbtnr","753007ee6e6399c7":"988ye","e9c38e32fac9e03e":"fxYQp","5a1b45724cbabfe9":"5audw","ce7605268fbf7e42":"jJQ5Z","96a55d646cd53040":"csj5T","3d0364fd0ce54db5":"csj5T","2c6a31d8df55e92a":"eDh7d"}],"988ye":[function(require,module,exports) {
"use strict";
var utils = require("5f8afca0889a63e1");
module.exports = function normalizeHeaderName(headers, normalizedName) {
    utils.forEach(headers, function processHeader(value, name) {
        if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
            headers[normalizedName] = value;
            delete headers[name];
        }
    });
};

},{"5f8afca0889a63e1":"lbtnr"}],"fxYQp":[function(require,module,exports) {
"use strict";
var utils = require("90d7c965e732ce33");
/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [config] The config.
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */ function AxiosError(message, code, config, request, response) {
    Error.call(this);
    this.message = message;
    this.name = "AxiosError";
    code && (this.code = code);
    config && (this.config = config);
    request && (this.request = request);
    response && (this.response = response);
}
utils.inherits(AxiosError, Error, {
    toJSON: function toJSON() {
        return {
            // Standard
            message: this.message,
            name: this.name,
            // Microsoft
            description: this.description,
            number: this.number,
            // Mozilla
            fileName: this.fileName,
            lineNumber: this.lineNumber,
            columnNumber: this.columnNumber,
            stack: this.stack,
            // Axios
            config: this.config,
            code: this.code,
            status: this.response && this.response.status ? this.response.status : null
        };
    }
});
var prototype = AxiosError.prototype;
var descriptors = {};
[
    "ERR_BAD_OPTION_VALUE",
    "ERR_BAD_OPTION",
    "ECONNABORTED",
    "ETIMEDOUT",
    "ERR_NETWORK",
    "ERR_FR_TOO_MANY_REDIRECTS",
    "ERR_DEPRECATED",
    "ERR_BAD_RESPONSE",
    "ERR_BAD_REQUEST",
    "ERR_CANCELED"
].forEach(function(code) {
    descriptors[code] = {
        value: code
    };
});
Object.defineProperties(AxiosError, descriptors);
Object.defineProperty(prototype, "isAxiosError", {
    value: true
});
// eslint-disable-next-line func-names
AxiosError.from = function(error, code, config, request, response, customProps) {
    var axiosError = Object.create(prototype);
    utils.toFlatObject(error, axiosError, function filter(obj) {
        return obj !== Error.prototype;
    });
    AxiosError.call(axiosError, error.message, code, config, request, response);
    axiosError.name = error.name;
    customProps && Object.assign(axiosError, customProps);
    return axiosError;
};
module.exports = AxiosError;

},{"90d7c965e732ce33":"lbtnr"}],"5audw":[function(require,module,exports) {
"use strict";
module.exports = {
    silentJSONParsing: true,
    forcedJSONParsing: true,
    clarifyTimeoutError: false
};

},{}],"jJQ5Z":[function(require,module,exports) {
var Buffer = require("adfd9b103875c2dd").Buffer;
"use strict";
var utils = require("3a99ebcd36a8733f");
/**
 * Convert a data object to FormData
 * @param {Object} obj
 * @param {?Object} [formData]
 * @returns {Object}
 **/ function toFormData(obj, formData) {
    // eslint-disable-next-line no-param-reassign
    formData = formData || new FormData();
    var stack = [];
    function convertValue(value) {
        if (value === null) return "";
        if (utils.isDate(value)) return value.toISOString();
        if (utils.isArrayBuffer(value) || utils.isTypedArray(value)) return typeof Blob === "function" ? new Blob([
            value
        ]) : Buffer.from(value);
        return value;
    }
    function build(data, parentKey) {
        if (utils.isPlainObject(data) || utils.isArray(data)) {
            if (stack.indexOf(data) !== -1) throw Error("Circular reference detected in " + parentKey);
            stack.push(data);
            utils.forEach(data, function each(value, key) {
                if (utils.isUndefined(value)) return;
                var fullKey = parentKey ? parentKey + "." + key : key;
                var arr;
                if (value && !parentKey && typeof value === "object") {
                    if (utils.endsWith(key, "{}")) // eslint-disable-next-line no-param-reassign
                    value = JSON.stringify(value);
                    else if (utils.endsWith(key, "[]") && (arr = utils.toArray(value))) {
                        // eslint-disable-next-line func-names
                        arr.forEach(function(el) {
                            !utils.isUndefined(el) && formData.append(fullKey, convertValue(el));
                        });
                        return;
                    }
                }
                build(value, fullKey);
            });
            stack.pop();
        } else formData.append(parentKey, convertValue(data));
    }
    build(obj);
    return formData;
}
module.exports = toFormData;

},{"adfd9b103875c2dd":"6tQNr","3a99ebcd36a8733f":"lbtnr"}],"csj5T":[function(require,module,exports) {
"use strict";
var utils = require("2bb8b5f6db10dd6d");
var settle = require("a7b983c12bb9f77f");
var cookies = require("19bdb320f45f036e");
var buildURL = require("568f70ee55491398");
var buildFullPath = require("a1fd5a6807469b6d");
var parseHeaders = require("f197d20bdfdcd5a4");
var isURLSameOrigin = require("32737c301de74bf5");
var transitionalDefaults = require("acf3ae0da9073396");
var AxiosError = require("5cdb5bed725b4b9d");
var CanceledError = require("4bb5ca1319af05c5");
var parseProtocol = require("edff7382320539d7");
module.exports = function xhrAdapter(config) {
    return new Promise(function dispatchXhrRequest(resolve, reject) {
        var requestData = config.data;
        var requestHeaders = config.headers;
        var responseType = config.responseType;
        var onCanceled;
        function done() {
            if (config.cancelToken) config.cancelToken.unsubscribe(onCanceled);
            if (config.signal) config.signal.removeEventListener("abort", onCanceled);
        }
        if (utils.isFormData(requestData) && utils.isStandardBrowserEnv()) delete requestHeaders["Content-Type"]; // Let the browser set it
        var request = new XMLHttpRequest();
        // HTTP basic authentication
        if (config.auth) {
            var username = config.auth.username || "";
            var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : "";
            requestHeaders.Authorization = "Basic " + btoa(username + ":" + password);
        }
        var fullPath = buildFullPath(config.baseURL, config.url);
        request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
        // Set the request timeout in MS
        request.timeout = config.timeout;
        function onloadend() {
            if (!request) return;
            // Prepare the response
            var responseHeaders = "getAllResponseHeaders" in request ? parseHeaders(request.getAllResponseHeaders()) : null;
            var responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
            var response = {
                data: responseData,
                status: request.status,
                statusText: request.statusText,
                headers: responseHeaders,
                config: config,
                request: request
            };
            settle(function _resolve(value) {
                resolve(value);
                done();
            }, function _reject(err) {
                reject(err);
                done();
            }, response);
            // Clean up request
            request = null;
        }
        if ("onloadend" in request) // Use onloadend if available
        request.onloadend = onloadend;
        else // Listen for ready state to emulate onloadend
        request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) return;
            // The request errored out and we didn't get a response, this will be
            // handled by onerror instead
            // With one exception: request that using file: protocol, most browsers
            // will return status as 0 even though it's a successful request
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) return;
            // readystate handler is calling before onerror or ontimeout handlers,
            // so we should call onloadend on the next 'tick'
            setTimeout(onloadend);
        };
        // Handle browser request cancellation (as opposed to a manual cancellation)
        request.onabort = function handleAbort() {
            if (!request) return;
            reject(new AxiosError("Request aborted", AxiosError.ECONNABORTED, config, request));
            // Clean up request
            request = null;
        };
        // Handle low level network errors
        request.onerror = function handleError() {
            // Real errors are hidden from us by the browser
            // onerror should only fire if it's a network error
            reject(new AxiosError("Network Error", AxiosError.ERR_NETWORK, config, request, request));
            // Clean up request
            request = null;
        };
        // Handle timeout
        request.ontimeout = function handleTimeout() {
            var timeoutErrorMessage = config.timeout ? "timeout of " + config.timeout + "ms exceeded" : "timeout exceeded";
            var transitional = config.transitional || transitionalDefaults;
            if (config.timeoutErrorMessage) timeoutErrorMessage = config.timeoutErrorMessage;
            reject(new AxiosError(timeoutErrorMessage, transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED, config, request));
            // Clean up request
            request = null;
        };
        // Add xsrf header
        // This is only done if running in a standard browser environment.
        // Specifically not if we're in a web worker, or react-native.
        if (utils.isStandardBrowserEnv()) {
            // Add xsrf header
            var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : undefined;
            if (xsrfValue) requestHeaders[config.xsrfHeaderName] = xsrfValue;
        }
        // Add headers to the request
        if ("setRequestHeader" in request) utils.forEach(requestHeaders, function setRequestHeader(val, key) {
            if (typeof requestData === "undefined" && key.toLowerCase() === "content-type") // Remove Content-Type if data is undefined
            delete requestHeaders[key];
            else // Otherwise add header to the request
            request.setRequestHeader(key, val);
        });
        // Add withCredentials to request if needed
        if (!utils.isUndefined(config.withCredentials)) request.withCredentials = !!config.withCredentials;
        // Add responseType to request if needed
        if (responseType && responseType !== "json") request.responseType = config.responseType;
        // Handle progress if needed
        if (typeof config.onDownloadProgress === "function") request.addEventListener("progress", config.onDownloadProgress);
        // Not all browsers support upload events
        if (typeof config.onUploadProgress === "function" && request.upload) request.upload.addEventListener("progress", config.onUploadProgress);
        if (config.cancelToken || config.signal) {
            // Handle cancellation
            // eslint-disable-next-line func-names
            onCanceled = function(cancel) {
                if (!request) return;
                reject(!cancel || cancel && cancel.type ? new CanceledError() : cancel);
                request.abort();
                request = null;
            };
            config.cancelToken && config.cancelToken.subscribe(onCanceled);
            if (config.signal) config.signal.aborted ? onCanceled() : config.signal.addEventListener("abort", onCanceled);
        }
        if (!requestData) requestData = null;
        var protocol = parseProtocol(fullPath);
        if (protocol && [
            "http",
            "https",
            "file"
        ].indexOf(protocol) === -1) {
            reject(new AxiosError("Unsupported protocol " + protocol + ":", AxiosError.ERR_BAD_REQUEST, config));
            return;
        }
        // Send the request
        request.send(requestData);
    });
};

},{"2bb8b5f6db10dd6d":"lbtnr","a7b983c12bb9f77f":"kjUFy","19bdb320f45f036e":"1yi5d","568f70ee55491398":"adWtE","a1fd5a6807469b6d":"bxNKA","f197d20bdfdcd5a4":"iWnAZ","32737c301de74bf5":"f8WRp","acf3ae0da9073396":"5audw","5cdb5bed725b4b9d":"fxYQp","4bb5ca1319af05c5":"6k8Ga","edff7382320539d7":"jdRXE"}],"kjUFy":[function(require,module,exports) {
"use strict";
var AxiosError = require("99b767d0f87e1d33");
/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */ module.exports = function settle(resolve, reject, response) {
    var validateStatus = response.config.validateStatus;
    if (!response.status || !validateStatus || validateStatus(response.status)) resolve(response);
    else reject(new AxiosError("Request failed with status code " + response.status, [
        AxiosError.ERR_BAD_REQUEST,
        AxiosError.ERR_BAD_RESPONSE
    ][Math.floor(response.status / 100) - 4], response.config, response.request, response));
};

},{"99b767d0f87e1d33":"fxYQp"}],"1yi5d":[function(require,module,exports) {
"use strict";
var utils = require("c987331427b8b2ad");
module.exports = utils.isStandardBrowserEnv() ? // Standard browser envs support document.cookie
function standardBrowserEnv() {
    return {
        write: function write(name, value, expires, path, domain, secure) {
            var cookie = [];
            cookie.push(name + "=" + encodeURIComponent(value));
            if (utils.isNumber(expires)) cookie.push("expires=" + new Date(expires).toGMTString());
            if (utils.isString(path)) cookie.push("path=" + path);
            if (utils.isString(domain)) cookie.push("domain=" + domain);
            if (secure === true) cookie.push("secure");
            document.cookie = cookie.join("; ");
        },
        read: function read(name) {
            var match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
            return match ? decodeURIComponent(match[3]) : null;
        },
        remove: function remove(name) {
            this.write(name, "", Date.now() - 86400000);
        }
    };
}() : // Non standard browser env (web workers, react-native) lack needed support.
function nonStandardBrowserEnv() {
    return {
        write: function write() {},
        read: function read() {
            return null;
        },
        remove: function remove() {}
    };
}();

},{"c987331427b8b2ad":"lbtnr"}],"bxNKA":[function(require,module,exports) {
"use strict";
var isAbsoluteURL = require("5ff0e8c05aa13380");
var combineURLs = require("e1ac36eef7d02fa4");
/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 * @returns {string} The combined full path
 */ module.exports = function buildFullPath(baseURL, requestedURL) {
    if (baseURL && !isAbsoluteURL(requestedURL)) return combineURLs(baseURL, requestedURL);
    return requestedURL;
};

},{"5ff0e8c05aa13380":"caZL3","e1ac36eef7d02fa4":"gHjEZ"}],"caZL3":[function(require,module,exports) {
"use strict";
/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */ module.exports = function isAbsoluteURL(url) {
    // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
    // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
    // by any combination of letters, digits, plus, period, or hyphen.
    return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
};

},{}],"gHjEZ":[function(require,module,exports) {
"use strict";
/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */ module.exports = function combineURLs(baseURL, relativeURL) {
    return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
};

},{}],"iWnAZ":[function(require,module,exports) {
"use strict";
var utils = require("5802dc5113a634d0");
// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
var ignoreDuplicateOf = [
    "age",
    "authorization",
    "content-length",
    "content-type",
    "etag",
    "expires",
    "from",
    "host",
    "if-modified-since",
    "if-unmodified-since",
    "last-modified",
    "location",
    "max-forwards",
    "proxy-authorization",
    "referer",
    "retry-after",
    "user-agent"
];
/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */ module.exports = function parseHeaders(headers) {
    var parsed = {};
    var key;
    var val;
    var i;
    if (!headers) return parsed;
    utils.forEach(headers.split("\n"), function parser(line) {
        i = line.indexOf(":");
        key = utils.trim(line.substr(0, i)).toLowerCase();
        val = utils.trim(line.substr(i + 1));
        if (key) {
            if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) return;
            if (key === "set-cookie") parsed[key] = (parsed[key] ? parsed[key] : []).concat([
                val
            ]);
            else parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
        }
    });
    return parsed;
};

},{"5802dc5113a634d0":"lbtnr"}],"f8WRp":[function(require,module,exports) {
"use strict";
var utils = require("c8f79893fd676b4c");
module.exports = utils.isStandardBrowserEnv() ? // Standard browser envs have full support of the APIs needed to test
// whether the request URL is of the same origin as current location.
function standardBrowserEnv() {
    var msie = /(msie|trident)/i.test(navigator.userAgent);
    var urlParsingNode = document.createElement("a");
    var originURL;
    /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */ function resolveURL(url) {
        var href = url;
        if (msie) {
            // IE needs attribute set twice to normalize properties
            urlParsingNode.setAttribute("href", href);
            href = urlParsingNode.href;
        }
        urlParsingNode.setAttribute("href", href);
        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
        return {
            href: urlParsingNode.href,
            protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
            host: urlParsingNode.host,
            search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
            hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
            hostname: urlParsingNode.hostname,
            port: urlParsingNode.port,
            pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
        };
    }
    originURL = resolveURL(window.location.href);
    /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */ return function isURLSameOrigin(requestURL) {
        var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
        return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
    };
}() : // Non standard browser envs (web workers, react-native) lack needed support.
function nonStandardBrowserEnv() {
    return function isURLSameOrigin() {
        return true;
    };
}();

},{"c8f79893fd676b4c":"lbtnr"}],"6k8Ga":[function(require,module,exports) {
"use strict";
var AxiosError = require("d49629127e21c372");
var utils = require("a3a18563c2683e33");
/**
 * A `CanceledError` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */ function CanceledError(message) {
    // eslint-disable-next-line no-eq-null,eqeqeq
    AxiosError.call(this, message == null ? "canceled" : message, AxiosError.ERR_CANCELED);
    this.name = "CanceledError";
}
utils.inherits(CanceledError, AxiosError, {
    __CANCEL__: true
});
module.exports = CanceledError;

},{"d49629127e21c372":"fxYQp","a3a18563c2683e33":"lbtnr"}],"jdRXE":[function(require,module,exports) {
"use strict";
module.exports = function parseProtocol(url) {
    var match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
    return match && match[1] || "";
};

},{}],"eDh7d":[function(require,module,exports) {
// eslint-disable-next-line strict
module.exports = null;

},{}],"gz0Pv":[function(require,module,exports) {
"use strict";
module.exports = function isCancel(value) {
    return !!(value && value.__CANCEL__);
};

},{}],"1ogTa":[function(require,module,exports) {
"use strict";
var utils = require("99adbff39af8f677");
/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */ module.exports = function mergeConfig(config1, config2) {
    // eslint-disable-next-line no-param-reassign
    config2 = config2 || {};
    var config = {};
    function getMergedValue(target, source) {
        if (utils.isPlainObject(target) && utils.isPlainObject(source)) return utils.merge(target, source);
        else if (utils.isPlainObject(source)) return utils.merge({}, source);
        else if (utils.isArray(source)) return source.slice();
        return source;
    }
    // eslint-disable-next-line consistent-return
    function mergeDeepProperties(prop) {
        if (!utils.isUndefined(config2[prop])) return getMergedValue(config1[prop], config2[prop]);
        else if (!utils.isUndefined(config1[prop])) return getMergedValue(undefined, config1[prop]);
    }
    // eslint-disable-next-line consistent-return
    function valueFromConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) return getMergedValue(undefined, config2[prop]);
    }
    // eslint-disable-next-line consistent-return
    function defaultToConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) return getMergedValue(undefined, config2[prop]);
        else if (!utils.isUndefined(config1[prop])) return getMergedValue(undefined, config1[prop]);
    }
    // eslint-disable-next-line consistent-return
    function mergeDirectKeys(prop) {
        if (prop in config2) return getMergedValue(config1[prop], config2[prop]);
        else if (prop in config1) return getMergedValue(undefined, config1[prop]);
    }
    var mergeMap = {
        "url": valueFromConfig2,
        "method": valueFromConfig2,
        "data": valueFromConfig2,
        "baseURL": defaultToConfig2,
        "transformRequest": defaultToConfig2,
        "transformResponse": defaultToConfig2,
        "paramsSerializer": defaultToConfig2,
        "timeout": defaultToConfig2,
        "timeoutMessage": defaultToConfig2,
        "withCredentials": defaultToConfig2,
        "adapter": defaultToConfig2,
        "responseType": defaultToConfig2,
        "xsrfCookieName": defaultToConfig2,
        "xsrfHeaderName": defaultToConfig2,
        "onUploadProgress": defaultToConfig2,
        "onDownloadProgress": defaultToConfig2,
        "decompress": defaultToConfig2,
        "maxContentLength": defaultToConfig2,
        "maxBodyLength": defaultToConfig2,
        "beforeRedirect": defaultToConfig2,
        "transport": defaultToConfig2,
        "httpAgent": defaultToConfig2,
        "httpsAgent": defaultToConfig2,
        "cancelToken": defaultToConfig2,
        "socketPath": defaultToConfig2,
        "responseEncoding": defaultToConfig2,
        "validateStatus": mergeDirectKeys
    };
    utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
        var merge = mergeMap[prop] || mergeDeepProperties;
        var configValue = merge(prop);
        utils.isUndefined(configValue) && merge !== mergeDirectKeys || (config[prop] = configValue);
    });
    return config;
};

},{"99adbff39af8f677":"lbtnr"}],"isK1r":[function(require,module,exports) {
"use strict";
var VERSION = require("e9aa819e853e8a05").version;
var AxiosError = require("d650eba95d68de74");
var validators = {};
// eslint-disable-next-line func-names
[
    "object",
    "boolean",
    "number",
    "function",
    "string",
    "symbol"
].forEach(function(type, i) {
    validators[type] = function validator(thing) {
        return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
    };
});
var deprecatedWarnings = {};
/**
 * Transitional option validator
 * @param {function|boolean?} validator - set to false if the transitional option has been removed
 * @param {string?} version - deprecated version / removed since version
 * @param {string?} message - some message with additional info
 * @returns {function}
 */ validators.transitional = function transitional(validator, version, message) {
    function formatMessage(opt, desc) {
        return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
    }
    // eslint-disable-next-line func-names
    return function(value, opt, opts) {
        if (validator === false) throw new AxiosError(formatMessage(opt, " has been removed" + (version ? " in " + version : "")), AxiosError.ERR_DEPRECATED);
        if (version && !deprecatedWarnings[opt]) {
            deprecatedWarnings[opt] = true;
            // eslint-disable-next-line no-console
            console.warn(formatMessage(opt, " has been deprecated since v" + version + " and will be removed in the near future"));
        }
        return validator ? validator(value, opt, opts) : true;
    };
};
/**
 * Assert object's properties type
 * @param {object} options
 * @param {object} schema
 * @param {boolean?} allowUnknown
 */ function assertOptions(options, schema, allowUnknown) {
    if (typeof options !== "object") throw new AxiosError("options must be an object", AxiosError.ERR_BAD_OPTION_VALUE);
    var keys = Object.keys(options);
    var i = keys.length;
    while(i-- > 0){
        var opt = keys[i];
        var validator = schema[opt];
        if (validator) {
            var value = options[opt];
            var result = value === undefined || validator(value, opt, options);
            if (result !== true) throw new AxiosError("option " + opt + " must be " + result, AxiosError.ERR_BAD_OPTION_VALUE);
            continue;
        }
        if (allowUnknown !== true) throw new AxiosError("Unknown option " + opt, AxiosError.ERR_BAD_OPTION);
    }
}
module.exports = {
    assertOptions: assertOptions,
    validators: validators
};

},{"e9aa819e853e8a05":"4oEjm","d650eba95d68de74":"fxYQp"}],"4oEjm":[function(require,module,exports) {
module.exports = {
    "version": "0.27.2"
};

},{}],"fsLds":[function(require,module,exports) {
"use strict";
var CanceledError = require("b6a43aee12b81881");
/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */ function CancelToken(executor) {
    if (typeof executor !== "function") throw new TypeError("executor must be a function.");
    var resolvePromise;
    this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
    });
    var token = this;
    // eslint-disable-next-line func-names
    this.promise.then(function(cancel) {
        if (!token._listeners) return;
        var i;
        var l = token._listeners.length;
        for(i = 0; i < l; i++)token._listeners[i](cancel);
        token._listeners = null;
    });
    // eslint-disable-next-line func-names
    this.promise.then = function(onfulfilled) {
        var _resolve;
        // eslint-disable-next-line func-names
        var promise = new Promise(function(resolve) {
            token.subscribe(resolve);
            _resolve = resolve;
        }).then(onfulfilled);
        promise.cancel = function reject() {
            token.unsubscribe(_resolve);
        };
        return promise;
    };
    executor(function cancel(message) {
        if (token.reason) // Cancellation has already been requested
        return;
        token.reason = new CanceledError(message);
        resolvePromise(token.reason);
    });
}
/**
 * Throws a `CanceledError` if cancellation has been requested.
 */ CancelToken.prototype.throwIfRequested = function throwIfRequested() {
    if (this.reason) throw this.reason;
};
/**
 * Subscribe to the cancel signal
 */ CancelToken.prototype.subscribe = function subscribe(listener) {
    if (this.reason) {
        listener(this.reason);
        return;
    }
    if (this._listeners) this._listeners.push(listener);
    else this._listeners = [
        listener
    ];
};
/**
 * Unsubscribe from the cancel signal
 */ CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
    if (!this._listeners) return;
    var index = this._listeners.indexOf(listener);
    if (index !== -1) this._listeners.splice(index, 1);
};
/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */ CancelToken.source = function source() {
    var cancel;
    var token = new CancelToken(function executor(c) {
        cancel = c;
    });
    return {
        token: token,
        cancel: cancel
    };
};
module.exports = CancelToken;

},{"b6a43aee12b81881":"6k8Ga"}],"cwX15":[function(require,module,exports) {
"use strict";
/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */ module.exports = function spread(callback) {
    return function wrap(arr) {
        return callback.apply(null, arr);
    };
};

},{}],"bsdyt":[function(require,module,exports) {
"use strict";
var utils = require("231ee4a1ecb1dc47");
/**
 * Determines whether the payload is an error thrown by Axios
 *
 * @param {*} payload The value to test
 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
 */ module.exports = function isAxiosError(payload) {
    return utils.isObject(payload) && payload.isAxiosError === true;
};

},{"231ee4a1ecb1dc47":"lbtnr"}],"j5ACk":[function(require,module,exports) {
/*
 Copyright 2013-2014 Daniel Wirtz <dcode@dcode.io>

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */ /**
 * @license bytebuffer.js (c) 2015 Daniel Wirtz <dcode@dcode.io>
 * Backing buffer: ArrayBuffer, Accessor: Uint8Array
 * Released under the Apache License, Version 2.0
 * see: https://github.com/dcodeIO/bytebuffer.js for details
 */ (function(global, factory) {
    /* AMD */ if (typeof define === "function" && define["amd"]) define([
        "long"
    ], factory);
    else if (module && module["exports"]) module["exports"] = function() {
        var Long;
        try {
            Long = require("704c3fe1485416e9");
        } catch (e) {}
        return factory(Long);
    }();
    else (global["dcodeIO"] = global["dcodeIO"] || {})["ByteBuffer"] = factory(global["dcodeIO"]["Long"]);
})(this, function(Long) {
    "use strict";
    /**
     * Constructs a new ByteBuffer.
     * @class The swiss army knife for binary data in JavaScript.
     * @exports ByteBuffer
     * @constructor
     * @param {number=} capacity Initial capacity. Defaults to {@link ByteBuffer.DEFAULT_CAPACITY}.
     * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
     *  {@link ByteBuffer.DEFAULT_ENDIAN}.
     * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to
     *  {@link ByteBuffer.DEFAULT_NOASSERT}.
     * @expose
     */ var ByteBuffer = function(capacity, littleEndian, noAssert) {
        if (typeof capacity === "undefined") capacity = ByteBuffer.DEFAULT_CAPACITY;
        if (typeof littleEndian === "undefined") littleEndian = ByteBuffer.DEFAULT_ENDIAN;
        if (typeof noAssert === "undefined") noAssert = ByteBuffer.DEFAULT_NOASSERT;
        if (!noAssert) {
            capacity = capacity | 0;
            if (capacity < 0) throw RangeError("Illegal capacity");
            littleEndian = !!littleEndian;
            noAssert = !!noAssert;
        }
        /**
         * Backing ArrayBuffer.
         * @type {!ArrayBuffer}
         * @expose
         */ this.buffer = capacity === 0 ? EMPTY_BUFFER : new ArrayBuffer(capacity);
        /**
         * Uint8Array utilized to manipulate the backing buffer. Becomes `null` if the backing buffer has a capacity of `0`.
         * @type {?Uint8Array}
         * @expose
         */ this.view = capacity === 0 ? null : new Uint8Array(this.buffer);
        /**
         * Absolute read/write offset.
         * @type {number}
         * @expose
         * @see ByteBuffer#flip
         * @see ByteBuffer#clear
         */ this.offset = 0;
        /**
         * Marked offset.
         * @type {number}
         * @expose
         * @see ByteBuffer#mark
         * @see ByteBuffer#reset
         */ this.markedOffset = -1;
        /**
         * Absolute limit of the contained data. Set to the backing buffer's capacity upon allocation.
         * @type {number}
         * @expose
         * @see ByteBuffer#flip
         * @see ByteBuffer#clear
         */ this.limit = capacity;
        /**
         * Whether to use little endian byte order, defaults to `false` for big endian.
         * @type {boolean}
         * @expose
         */ this.littleEndian = littleEndian;
        /**
         * Whether to skip assertions of offsets and values, defaults to `false`.
         * @type {boolean}
         * @expose
         */ this.noAssert = noAssert;
    };
    /**
     * ByteBuffer version.
     * @type {string}
     * @const
     * @expose
     */ ByteBuffer.VERSION = "5.0.1";
    /**
     * Little endian constant that can be used instead of its boolean value. Evaluates to `true`.
     * @type {boolean}
     * @const
     * @expose
     */ ByteBuffer.LITTLE_ENDIAN = true;
    /**
     * Big endian constant that can be used instead of its boolean value. Evaluates to `false`.
     * @type {boolean}
     * @const
     * @expose
     */ ByteBuffer.BIG_ENDIAN = false;
    /**
     * Default initial capacity of `16`.
     * @type {number}
     * @expose
     */ ByteBuffer.DEFAULT_CAPACITY = 16;
    /**
     * Default endianess of `false` for big endian.
     * @type {boolean}
     * @expose
     */ ByteBuffer.DEFAULT_ENDIAN = ByteBuffer.BIG_ENDIAN;
    /**
     * Default no assertions flag of `false`.
     * @type {boolean}
     * @expose
     */ ByteBuffer.DEFAULT_NOASSERT = false;
    /**
     * A `Long` class for representing a 64-bit two's-complement integer value. May be `null` if Long.js has not been loaded
     *  and int64 support is not available.
     * @type {?Long}
     * @const
     * @see https://github.com/dcodeIO/long.js
     * @expose
     */ ByteBuffer.Long = Long || null;
    /**
     * @alias ByteBuffer.prototype
     * @inner
     */ var ByteBufferPrototype = ByteBuffer.prototype;
    /**
     * An indicator used to reliably determine if an object is a ByteBuffer or not.
     * @type {boolean}
     * @const
     * @expose
     * @private
     */ ByteBufferPrototype.__isByteBuffer__;
    Object.defineProperty(ByteBufferPrototype, "__isByteBuffer__", {
        value: true,
        enumerable: false,
        configurable: false
    });
    // helpers
    /**
     * @type {!ArrayBuffer}
     * @inner
     */ var EMPTY_BUFFER = new ArrayBuffer(0);
    /**
     * String.fromCharCode reference for compile-time renaming.
     * @type {function(...number):string}
     * @inner
     */ var stringFromCharCode = String.fromCharCode;
    /**
     * Creates a source function for a string.
     * @param {string} s String to read from
     * @returns {function():number|null} Source function returning the next char code respectively `null` if there are
     *  no more characters left.
     * @throws {TypeError} If the argument is invalid
     * @inner
     */ function stringSource(s) {
        var i = 0;
        return function() {
            return i < s.length ? s.charCodeAt(i++) : null;
        };
    }
    /**
     * Creates a destination function for a string.
     * @returns {function(number=):undefined|string} Destination function successively called with the next char code.
     *  Returns the final string when called without arguments.
     * @inner
     */ function stringDestination() {
        var cs = [], ps = [];
        return function() {
            if (arguments.length === 0) return ps.join("") + stringFromCharCode.apply(String, cs);
            if (cs.length + arguments.length > 1024) ps.push(stringFromCharCode.apply(String, cs)), cs.length = 0;
            Array.prototype.push.apply(cs, arguments);
        };
    }
    /**
     * Gets the accessor type.
     * @returns {Function} `Buffer` under node.js, `Uint8Array` respectively `DataView` in the browser (classes)
     * @expose
     */ ByteBuffer.accessor = function() {
        return Uint8Array;
    };
    /**
     * Allocates a new ByteBuffer backed by a buffer of the specified capacity.
     * @param {number=} capacity Initial capacity. Defaults to {@link ByteBuffer.DEFAULT_CAPACITY}.
     * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
     *  {@link ByteBuffer.DEFAULT_ENDIAN}.
     * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to
     *  {@link ByteBuffer.DEFAULT_NOASSERT}.
     * @returns {!ByteBuffer}
     * @expose
     */ ByteBuffer.allocate = function(capacity, littleEndian, noAssert) {
        return new ByteBuffer(capacity, littleEndian, noAssert);
    };
    /**
     * Concatenates multiple ByteBuffers into one.
     * @param {!Array.<!ByteBuffer|!ArrayBuffer|!Uint8Array|string>} buffers Buffers to concatenate
     * @param {(string|boolean)=} encoding String encoding if `buffers` contains a string ("base64", "hex", "binary",
     *  defaults to "utf8")
     * @param {boolean=} littleEndian Whether to use little or big endian byte order for the resulting ByteBuffer. Defaults
     *  to {@link ByteBuffer.DEFAULT_ENDIAN}.
     * @param {boolean=} noAssert Whether to skip assertions of offsets and values for the resulting ByteBuffer. Defaults to
     *  {@link ByteBuffer.DEFAULT_NOASSERT}.
     * @returns {!ByteBuffer} Concatenated ByteBuffer
     * @expose
     */ ByteBuffer.concat = function(buffers, encoding, littleEndian, noAssert) {
        if (typeof encoding === "boolean" || typeof encoding !== "string") {
            noAssert = littleEndian;
            littleEndian = encoding;
            encoding = undefined;
        }
        var capacity = 0;
        for(var i = 0, k = buffers.length, length; i < k; ++i){
            if (!ByteBuffer.isByteBuffer(buffers[i])) buffers[i] = ByteBuffer.wrap(buffers[i], encoding);
            length = buffers[i].limit - buffers[i].offset;
            if (length > 0) capacity += length;
        }
        if (capacity === 0) return new ByteBuffer(0, littleEndian, noAssert);
        var bb = new ByteBuffer(capacity, littleEndian, noAssert), bi;
        i = 0;
        while(i < k){
            bi = buffers[i++];
            length = bi.limit - bi.offset;
            if (length <= 0) continue;
            bb.view.set(bi.view.subarray(bi.offset, bi.limit), bb.offset);
            bb.offset += length;
        }
        bb.limit = bb.offset;
        bb.offset = 0;
        return bb;
    };
    /**
     * Tests if the specified type is a ByteBuffer.
     * @param {*} bb ByteBuffer to test
     * @returns {boolean} `true` if it is a ByteBuffer, otherwise `false`
     * @expose
     */ ByteBuffer.isByteBuffer = function(bb) {
        return (bb && bb["__isByteBuffer__"]) === true;
    };
    /**
     * Gets the backing buffer type.
     * @returns {Function} `Buffer` under node.js, `ArrayBuffer` in the browser (classes)
     * @expose
     */ ByteBuffer.type = function() {
        return ArrayBuffer;
    };
    /**
     * Wraps a buffer or a string. Sets the allocated ByteBuffer's {@link ByteBuffer#offset} to `0` and its
     *  {@link ByteBuffer#limit} to the length of the wrapped data.
     * @param {!ByteBuffer|!ArrayBuffer|!Uint8Array|string|!Array.<number>} buffer Anything that can be wrapped
     * @param {(string|boolean)=} encoding String encoding if `buffer` is a string ("base64", "hex", "binary", defaults to
     *  "utf8")
     * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
     *  {@link ByteBuffer.DEFAULT_ENDIAN}.
     * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to
     *  {@link ByteBuffer.DEFAULT_NOASSERT}.
     * @returns {!ByteBuffer} A ByteBuffer wrapping `buffer`
     * @expose
     */ ByteBuffer.wrap = function(buffer, encoding, littleEndian, noAssert) {
        if (typeof encoding !== "string") {
            noAssert = littleEndian;
            littleEndian = encoding;
            encoding = undefined;
        }
        if (typeof buffer === "string") {
            if (typeof encoding === "undefined") encoding = "utf8";
            switch(encoding){
                case "base64":
                    return ByteBuffer.fromBase64(buffer, littleEndian);
                case "hex":
                    return ByteBuffer.fromHex(buffer, littleEndian);
                case "binary":
                    return ByteBuffer.fromBinary(buffer, littleEndian);
                case "utf8":
                    return ByteBuffer.fromUTF8(buffer, littleEndian);
                case "debug":
                    return ByteBuffer.fromDebug(buffer, littleEndian);
                default:
                    throw Error("Unsupported encoding: " + encoding);
            }
        }
        if (buffer === null || typeof buffer !== "object") throw TypeError("Illegal buffer");
        var bb;
        if (ByteBuffer.isByteBuffer(buffer)) {
            bb = ByteBufferPrototype.clone.call(buffer);
            bb.markedOffset = -1;
            return bb;
        }
        if (buffer instanceof Uint8Array) {
            bb = new ByteBuffer(0, littleEndian, noAssert);
            if (buffer.length > 0) {
                bb.buffer = buffer.buffer;
                bb.offset = buffer.byteOffset;
                bb.limit = buffer.byteOffset + buffer.byteLength;
                bb.view = new Uint8Array(buffer.buffer);
            }
        } else if (buffer instanceof ArrayBuffer) {
            bb = new ByteBuffer(0, littleEndian, noAssert);
            if (buffer.byteLength > 0) {
                bb.buffer = buffer;
                bb.offset = 0;
                bb.limit = buffer.byteLength;
                bb.view = buffer.byteLength > 0 ? new Uint8Array(buffer) : null;
            }
        } else if (Object.prototype.toString.call(buffer) === "[object Array]") {
            bb = new ByteBuffer(buffer.length, littleEndian, noAssert);
            bb.limit = buffer.length;
            for(var i = 0; i < buffer.length; ++i)bb.view[i] = buffer[i];
        } else throw TypeError("Illegal buffer"); // Otherwise fail
        return bb;
    };
    /**
     * Writes the array as a bitset.
     * @param {Array<boolean>} value Array of booleans to write
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `length` if omitted.
     * @returns {!ByteBuffer}
     * @expose
     */ ByteBufferPrototype.writeBitSet = function(value, offset) {
        var relative = typeof offset === "undefined";
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (!(value instanceof Array)) throw TypeError("Illegal BitSet: Not an array");
            if (typeof offset !== "number" || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
        }
        var start = offset, bits = value.length, bytes = bits >> 3, bit = 0, k;
        offset += this.writeVarint32(bits, offset);
        while(bytes--){
            k = !!value[bit++] & 1 | (!!value[bit++] & 1) << 1 | (!!value[bit++] & 1) << 2 | (!!value[bit++] & 1) << 3 | (!!value[bit++] & 1) << 4 | (!!value[bit++] & 1) << 5 | (!!value[bit++] & 1) << 6 | (!!value[bit++] & 1) << 7;
            this.writeByte(k, offset++);
        }
        if (bit < bits) {
            var m = 0;
            k = 0;
            while(bit < bits)k = k | (!!value[bit++] & 1) << m++;
            this.writeByte(k, offset++);
        }
        if (relative) {
            this.offset = offset;
            return this;
        }
        return offset - start;
    };
    /**
     * Reads a BitSet as an array of booleans.
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `length` if omitted.
     * @returns {Array<boolean>
     * @expose
     */ ByteBufferPrototype.readBitSet = function(offset) {
        var relative = typeof offset === "undefined";
        if (relative) offset = this.offset;
        var ret = this.readVarint32(offset), bits = ret.value, bytes = bits >> 3, bit = 0, value = [], k;
        offset += ret.length;
        while(bytes--){
            k = this.readByte(offset++);
            value[bit++] = !!(k & 0x01);
            value[bit++] = !!(k & 0x02);
            value[bit++] = !!(k & 0x04);
            value[bit++] = !!(k & 0x08);
            value[bit++] = !!(k & 0x10);
            value[bit++] = !!(k & 0x20);
            value[bit++] = !!(k & 0x40);
            value[bit++] = !!(k & 0x80);
        }
        if (bit < bits) {
            var m = 0;
            k = this.readByte(offset++);
            while(bit < bits)value[bit++] = !!(k >> m++ & 1);
        }
        if (relative) this.offset = offset;
        return value;
    };
    /**
     * Reads the specified number of bytes.
     * @param {number} length Number of bytes to read
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `length` if omitted.
     * @returns {!ByteBuffer}
     * @expose
     */ ByteBufferPrototype.readBytes = function(length, offset) {
        var relative = typeof offset === "undefined";
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof offset !== "number" || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + length > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + length + ") <= " + this.buffer.byteLength);
        }
        var slice = this.slice(offset, offset + length);
        if (relative) this.offset += length;
        return slice;
    };
    /**
     * Writes a payload of bytes. This is an alias of {@link ByteBuffer#append}.
     * @function
     * @param {!ByteBuffer|!ArrayBuffer|!Uint8Array|string} source Data to write. If `source` is a ByteBuffer, its offsets
     *  will be modified according to the performed read operation.
     * @param {(string|number)=} encoding Encoding if `data` is a string ("base64", "hex", "binary", defaults to "utf8")
     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
     *  written if omitted.
     * @returns {!ByteBuffer} this
     * @expose
     */ ByteBufferPrototype.writeBytes = ByteBufferPrototype.append;
    // types/ints/int8
    /**
     * Writes an 8bit signed integer.
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
     * @returns {!ByteBuffer} this
     * @expose
     */ ByteBufferPrototype.writeInt8 = function(value, offset) {
        var relative = typeof offset === "undefined";
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof value !== "number" || value % 1 !== 0) throw TypeError("Illegal value: " + value + " (not an integer)");
            value |= 0;
            if (typeof offset !== "number" || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
        }
        offset += 1;
        var capacity0 = this.buffer.byteLength;
        if (offset > capacity0) this.resize((capacity0 *= 2) > offset ? capacity0 : offset);
        offset -= 1;
        this.view[offset] = value;
        if (relative) this.offset += 1;
        return this;
    };
    /**
     * Writes an 8bit signed integer. This is an alias of {@link ByteBuffer#writeInt8}.
     * @function
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
     * @returns {!ByteBuffer} this
     * @expose
     */ ByteBufferPrototype.writeByte = ByteBufferPrototype.writeInt8;
    /**
     * Reads an 8bit signed integer.
     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
     * @returns {number} Value read
     * @expose
     */ ByteBufferPrototype.readInt8 = function(offset) {
        var relative = typeof offset === "undefined";
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof offset !== "number" || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 1 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 1 + ") <= " + this.buffer.byteLength);
        }
        var value = this.view[offset];
        if ((value & 0x80) === 0x80) value = -(0xFF - value + 1); // Cast to signed
        if (relative) this.offset += 1;
        return value;
    };
    /**
     * Reads an 8bit signed integer. This is an alias of {@link ByteBuffer#readInt8}.
     * @function
     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
     * @returns {number} Value read
     * @expose
     */ ByteBufferPrototype.readByte = ByteBufferPrototype.readInt8;
    /**
     * Writes an 8bit unsigned integer.
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
     * @returns {!ByteBuffer} this
     * @expose
     */ ByteBufferPrototype.writeUint8 = function(value, offset) {
        var relative = typeof offset === "undefined";
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof value !== "number" || value % 1 !== 0) throw TypeError("Illegal value: " + value + " (not an integer)");
            value >>>= 0;
            if (typeof offset !== "number" || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
        }
        offset += 1;
        var capacity1 = this.buffer.byteLength;
        if (offset > capacity1) this.resize((capacity1 *= 2) > offset ? capacity1 : offset);
        offset -= 1;
        this.view[offset] = value;
        if (relative) this.offset += 1;
        return this;
    };
    /**
     * Writes an 8bit unsigned integer. This is an alias of {@link ByteBuffer#writeUint8}.
     * @function
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
     * @returns {!ByteBuffer} this
     * @expose
     */ ByteBufferPrototype.writeUInt8 = ByteBufferPrototype.writeUint8;
    /**
     * Reads an 8bit unsigned integer.
     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
     * @returns {number} Value read
     * @expose
     */ ByteBufferPrototype.readUint8 = function(offset) {
        var relative = typeof offset === "undefined";
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof offset !== "number" || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 1 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 1 + ") <= " + this.buffer.byteLength);
        }
        var value = this.view[offset];
        if (relative) this.offset += 1;
        return value;
    };
    /**
     * Reads an 8bit unsigned integer. This is an alias of {@link ByteBuffer#readUint8}.
     * @function
     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
     * @returns {number} Value read
     * @expose
     */ ByteBufferPrototype.readUInt8 = ByteBufferPrototype.readUint8;
    // types/ints/int16
    /**
     * Writes a 16bit signed integer.
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
     * @throws {TypeError} If `offset` or `value` is not a valid number
     * @throws {RangeError} If `offset` is out of bounds
     * @expose
     */ ByteBufferPrototype.writeInt16 = function(value, offset) {
        var relative = typeof offset === "undefined";
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof value !== "number" || value % 1 !== 0) throw TypeError("Illegal value: " + value + " (not an integer)");
            value |= 0;
            if (typeof offset !== "number" || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
        }
        offset += 2;
        var capacity2 = this.buffer.byteLength;
        if (offset > capacity2) this.resize((capacity2 *= 2) > offset ? capacity2 : offset);
        offset -= 2;
        if (this.littleEndian) {
            this.view[offset + 1] = (value & 0xFF00) >>> 8;
            this.view[offset] = value & 0x00FF;
        } else {
            this.view[offset] = (value & 0xFF00) >>> 8;
            this.view[offset + 1] = value & 0x00FF;
        }
        if (relative) this.offset += 2;
        return this;
    };
    /**
     * Writes a 16bit signed integer. This is an alias of {@link ByteBuffer#writeInt16}.
     * @function
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
     * @throws {TypeError} If `offset` or `value` is not a valid number
     * @throws {RangeError} If `offset` is out of bounds
     * @expose
     */ ByteBufferPrototype.writeShort = ByteBufferPrototype.writeInt16;
    /**
     * Reads a 16bit signed integer.
     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
     * @returns {number} Value read
     * @throws {TypeError} If `offset` is not a valid number
     * @throws {RangeError} If `offset` is out of bounds
     * @expose
     */ ByteBufferPrototype.readInt16 = function(offset) {
        var relative = typeof offset === "undefined";
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof offset !== "number" || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 2 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 2 + ") <= " + this.buffer.byteLength);
        }
        var value = 0;
        if (this.littleEndian) {
            value = this.view[offset];
            value |= this.view[offset + 1] << 8;
        } else {
            value = this.view[offset] << 8;
            value |= this.view[offset + 1];
        }
        if ((value & 0x8000) === 0x8000) value = -(0xFFFF - value + 1); // Cast to signed
        if (relative) this.offset += 2;
        return value;
    };
    /**
     * Reads a 16bit signed integer. This is an alias of {@link ByteBuffer#readInt16}.
     * @function
     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
     * @returns {number} Value read
     * @throws {TypeError} If `offset` is not a valid number
     * @throws {RangeError} If `offset` is out of bounds
     * @expose
     */ ByteBufferPrototype.readShort = ByteBufferPrototype.readInt16;
    /**
     * Writes a 16bit unsigned integer.
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
     * @throws {TypeError} If `offset` or `value` is not a valid number
     * @throws {RangeError} If `offset` is out of bounds
     * @expose
     */ ByteBufferPrototype.writeUint16 = function(value, offset) {
        var relative = typeof offset === "undefined";
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof value !== "number" || value % 1 !== 0) throw TypeError("Illegal value: " + value + " (not an integer)");
            value >>>= 0;
            if (typeof offset !== "number" || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
        }
        offset += 2;
        var capacity3 = this.buffer.byteLength;
        if (offset > capacity3) this.resize((capacity3 *= 2) > offset ? capacity3 : offset);
        offset -= 2;
        if (this.littleEndian) {
            this.view[offset + 1] = (value & 0xFF00) >>> 8;
            this.view[offset] = value & 0x00FF;
        } else {
            this.view[offset] = (value & 0xFF00) >>> 8;
            this.view[offset + 1] = value & 0x00FF;
        }
        if (relative) this.offset += 2;
        return this;
    };
    /**
     * Writes a 16bit unsigned integer. This is an alias of {@link ByteBuffer#writeUint16}.
     * @function
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
     * @throws {TypeError} If `offset` or `value` is not a valid number
     * @throws {RangeError} If `offset` is out of bounds
     * @expose
     */ ByteBufferPrototype.writeUInt16 = ByteBufferPrototype.writeUint16;
    /**
     * Reads a 16bit unsigned integer.
     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
     * @returns {number} Value read
     * @throws {TypeError} If `offset` is not a valid number
     * @throws {RangeError} If `offset` is out of bounds
     * @expose
     */ ByteBufferPrototype.readUint16 = function(offset) {
        var relative = typeof offset === "undefined";
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof offset !== "number" || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 2 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 2 + ") <= " + this.buffer.byteLength);
        }
        var value = 0;
        if (this.littleEndian) {
            value = this.view[offset];
            value |= this.view[offset + 1] << 8;
        } else {
            value = this.view[offset] << 8;
            value |= this.view[offset + 1];
        }
        if (relative) this.offset += 2;
        return value;
    };
    /**
     * Reads a 16bit unsigned integer. This is an alias of {@link ByteBuffer#readUint16}.
     * @function
     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
     * @returns {number} Value read
     * @throws {TypeError} If `offset` is not a valid number
     * @throws {RangeError} If `offset` is out of bounds
     * @expose
     */ ByteBufferPrototype.readUInt16 = ByteBufferPrototype.readUint16;
    // types/ints/int32
    /**
     * Writes a 32bit signed integer.
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
     * @expose
     */ ByteBufferPrototype.writeInt32 = function(value, offset) {
        var relative = typeof offset === "undefined";
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof value !== "number" || value % 1 !== 0) throw TypeError("Illegal value: " + value + " (not an integer)");
            value |= 0;
            if (typeof offset !== "number" || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
        }
        offset += 4;
        var capacity4 = this.buffer.byteLength;
        if (offset > capacity4) this.resize((capacity4 *= 2) > offset ? capacity4 : offset);
        offset -= 4;
        if (this.littleEndian) {
            this.view[offset + 3] = value >>> 24 & 0xFF;
            this.view[offset + 2] = value >>> 16 & 0xFF;
            this.view[offset + 1] = value >>> 8 & 0xFF;
            this.view[offset] = value & 0xFF;
        } else {
            this.view[offset] = value >>> 24 & 0xFF;
            this.view[offset + 1] = value >>> 16 & 0xFF;
            this.view[offset + 2] = value >>> 8 & 0xFF;
            this.view[offset + 3] = value & 0xFF;
        }
        if (relative) this.offset += 4;
        return this;
    };
    /**
     * Writes a 32bit signed integer. This is an alias of {@link ByteBuffer#writeInt32}.
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
     * @expose
     */ ByteBufferPrototype.writeInt = ByteBufferPrototype.writeInt32;
    /**
     * Reads a 32bit signed integer.
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
     * @returns {number} Value read
     * @expose
     */ ByteBufferPrototype.readInt32 = function(offset) {
        var relative = typeof offset === "undefined";
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof offset !== "number" || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 4 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 4 + ") <= " + this.buffer.byteLength);
        }
        var value = 0;
        if (this.littleEndian) {
            value = this.view[offset + 2] << 16;
            value |= this.view[offset + 1] << 8;
            value |= this.view[offset];
            value += this.view[offset + 3] << 24 >>> 0;
        } else {
            value = this.view[offset + 1] << 16;
            value |= this.view[offset + 2] << 8;
            value |= this.view[offset + 3];
            value += this.view[offset] << 24 >>> 0;
        }
        value |= 0; // Cast to signed
        if (relative) this.offset += 4;
        return value;
    };
    /**
     * Reads a 32bit signed integer. This is an alias of {@link ByteBuffer#readInt32}.
     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `4` if omitted.
     * @returns {number} Value read
     * @expose
     */ ByteBufferPrototype.readInt = ByteBufferPrototype.readInt32;
    /**
     * Writes a 32bit unsigned integer.
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
     * @expose
     */ ByteBufferPrototype.writeUint32 = function(value, offset) {
        var relative = typeof offset === "undefined";
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof value !== "number" || value % 1 !== 0) throw TypeError("Illegal value: " + value + " (not an integer)");
            value >>>= 0;
            if (typeof offset !== "number" || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
        }
        offset += 4;
        var capacity5 = this.buffer.byteLength;
        if (offset > capacity5) this.resize((capacity5 *= 2) > offset ? capacity5 : offset);
        offset -= 4;
        if (this.littleEndian) {
            this.view[offset + 3] = value >>> 24 & 0xFF;
            this.view[offset + 2] = value >>> 16 & 0xFF;
            this.view[offset + 1] = value >>> 8 & 0xFF;
            this.view[offset] = value & 0xFF;
        } else {
            this.view[offset] = value >>> 24 & 0xFF;
            this.view[offset + 1] = value >>> 16 & 0xFF;
            this.view[offset + 2] = value >>> 8 & 0xFF;
            this.view[offset + 3] = value & 0xFF;
        }
        if (relative) this.offset += 4;
        return this;
    };
    /**
     * Writes a 32bit unsigned integer. This is an alias of {@link ByteBuffer#writeUint32}.
     * @function
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
     * @expose
     */ ByteBufferPrototype.writeUInt32 = ByteBufferPrototype.writeUint32;
    /**
     * Reads a 32bit unsigned integer.
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
     * @returns {number} Value read
     * @expose
     */ ByteBufferPrototype.readUint32 = function(offset) {
        var relative = typeof offset === "undefined";
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof offset !== "number" || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 4 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 4 + ") <= " + this.buffer.byteLength);
        }
        var value = 0;
        if (this.littleEndian) {
            value = this.view[offset + 2] << 16;
            value |= this.view[offset + 1] << 8;
            value |= this.view[offset];
            value += this.view[offset + 3] << 24 >>> 0;
        } else {
            value = this.view[offset + 1] << 16;
            value |= this.view[offset + 2] << 8;
            value |= this.view[offset + 3];
            value += this.view[offset] << 24 >>> 0;
        }
        if (relative) this.offset += 4;
        return value;
    };
    /**
     * Reads a 32bit unsigned integer. This is an alias of {@link ByteBuffer#readUint32}.
     * @function
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
     * @returns {number} Value read
     * @expose
     */ ByteBufferPrototype.readUInt32 = ByteBufferPrototype.readUint32;
    // types/ints/int64
    if (Long) {
        /**
         * Writes a 64bit signed integer.
         * @param {number|!Long} value Value to write
         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
         * @returns {!ByteBuffer} this
         * @expose
         */ ByteBufferPrototype.writeInt64 = function(value, offset) {
            var relative = typeof offset === "undefined";
            if (relative) offset = this.offset;
            if (!this.noAssert) {
                if (typeof value === "number") value = Long.fromNumber(value);
                else if (typeof value === "string") value = Long.fromString(value);
                else if (!(value && value instanceof Long)) throw TypeError("Illegal value: " + value + " (not an integer or Long)");
                if (typeof offset !== "number" || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
                offset >>>= 0;
                if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
            }
            if (typeof value === "number") value = Long.fromNumber(value);
            else if (typeof value === "string") value = Long.fromString(value);
            offset += 8;
            var capacity6 = this.buffer.byteLength;
            if (offset > capacity6) this.resize((capacity6 *= 2) > offset ? capacity6 : offset);
            offset -= 8;
            var lo = value.low, hi = value.high;
            if (this.littleEndian) {
                this.view[offset + 3] = lo >>> 24 & 0xFF;
                this.view[offset + 2] = lo >>> 16 & 0xFF;
                this.view[offset + 1] = lo >>> 8 & 0xFF;
                this.view[offset] = lo & 0xFF;
                offset += 4;
                this.view[offset + 3] = hi >>> 24 & 0xFF;
                this.view[offset + 2] = hi >>> 16 & 0xFF;
                this.view[offset + 1] = hi >>> 8 & 0xFF;
                this.view[offset] = hi & 0xFF;
            } else {
                this.view[offset] = hi >>> 24 & 0xFF;
                this.view[offset + 1] = hi >>> 16 & 0xFF;
                this.view[offset + 2] = hi >>> 8 & 0xFF;
                this.view[offset + 3] = hi & 0xFF;
                offset += 4;
                this.view[offset] = lo >>> 24 & 0xFF;
                this.view[offset + 1] = lo >>> 16 & 0xFF;
                this.view[offset + 2] = lo >>> 8 & 0xFF;
                this.view[offset + 3] = lo & 0xFF;
            }
            if (relative) this.offset += 8;
            return this;
        };
        /**
         * Writes a 64bit signed integer. This is an alias of {@link ByteBuffer#writeInt64}.
         * @param {number|!Long} value Value to write
         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
         * @returns {!ByteBuffer} this
         * @expose
         */ ByteBufferPrototype.writeLong = ByteBufferPrototype.writeInt64;
        /**
         * Reads a 64bit signed integer.
         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
         * @returns {!Long}
         * @expose
         */ ByteBufferPrototype.readInt64 = function(offset) {
            var relative = typeof offset === "undefined";
            if (relative) offset = this.offset;
            if (!this.noAssert) {
                if (typeof offset !== "number" || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
                offset >>>= 0;
                if (offset < 0 || offset + 8 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 8 + ") <= " + this.buffer.byteLength);
            }
            var lo = 0, hi = 0;
            if (this.littleEndian) {
                lo = this.view[offset + 2] << 16;
                lo |= this.view[offset + 1] << 8;
                lo |= this.view[offset];
                lo += this.view[offset + 3] << 24 >>> 0;
                offset += 4;
                hi = this.view[offset + 2] << 16;
                hi |= this.view[offset + 1] << 8;
                hi |= this.view[offset];
                hi += this.view[offset + 3] << 24 >>> 0;
            } else {
                hi = this.view[offset + 1] << 16;
                hi |= this.view[offset + 2] << 8;
                hi |= this.view[offset + 3];
                hi += this.view[offset] << 24 >>> 0;
                offset += 4;
                lo = this.view[offset + 1] << 16;
                lo |= this.view[offset + 2] << 8;
                lo |= this.view[offset + 3];
                lo += this.view[offset] << 24 >>> 0;
            }
            var value = new Long(lo, hi, false);
            if (relative) this.offset += 8;
            return value;
        };
        /**
         * Reads a 64bit signed integer. This is an alias of {@link ByteBuffer#readInt64}.
         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
         * @returns {!Long}
         * @expose
         */ ByteBufferPrototype.readLong = ByteBufferPrototype.readInt64;
        /**
         * Writes a 64bit unsigned integer.
         * @param {number|!Long} value Value to write
         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
         * @returns {!ByteBuffer} this
         * @expose
         */ ByteBufferPrototype.writeUint64 = function(value, offset) {
            var relative = typeof offset === "undefined";
            if (relative) offset = this.offset;
            if (!this.noAssert) {
                if (typeof value === "number") value = Long.fromNumber(value);
                else if (typeof value === "string") value = Long.fromString(value);
                else if (!(value && value instanceof Long)) throw TypeError("Illegal value: " + value + " (not an integer or Long)");
                if (typeof offset !== "number" || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
                offset >>>= 0;
                if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
            }
            if (typeof value === "number") value = Long.fromNumber(value);
            else if (typeof value === "string") value = Long.fromString(value);
            offset += 8;
            var capacity7 = this.buffer.byteLength;
            if (offset > capacity7) this.resize((capacity7 *= 2) > offset ? capacity7 : offset);
            offset -= 8;
            var lo = value.low, hi = value.high;
            if (this.littleEndian) {
                this.view[offset + 3] = lo >>> 24 & 0xFF;
                this.view[offset + 2] = lo >>> 16 & 0xFF;
                this.view[offset + 1] = lo >>> 8 & 0xFF;
                this.view[offset] = lo & 0xFF;
                offset += 4;
                this.view[offset + 3] = hi >>> 24 & 0xFF;
                this.view[offset + 2] = hi >>> 16 & 0xFF;
                this.view[offset + 1] = hi >>> 8 & 0xFF;
                this.view[offset] = hi & 0xFF;
            } else {
                this.view[offset] = hi >>> 24 & 0xFF;
                this.view[offset + 1] = hi >>> 16 & 0xFF;
                this.view[offset + 2] = hi >>> 8 & 0xFF;
                this.view[offset + 3] = hi & 0xFF;
                offset += 4;
                this.view[offset] = lo >>> 24 & 0xFF;
                this.view[offset + 1] = lo >>> 16 & 0xFF;
                this.view[offset + 2] = lo >>> 8 & 0xFF;
                this.view[offset + 3] = lo & 0xFF;
            }
            if (relative) this.offset += 8;
            return this;
        };
        /**
         * Writes a 64bit unsigned integer. This is an alias of {@link ByteBuffer#writeUint64}.
         * @function
         * @param {number|!Long} value Value to write
         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
         * @returns {!ByteBuffer} this
         * @expose
         */ ByteBufferPrototype.writeUInt64 = ByteBufferPrototype.writeUint64;
        /**
         * Reads a 64bit unsigned integer.
         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
         * @returns {!Long}
         * @expose
         */ ByteBufferPrototype.readUint64 = function(offset) {
            var relative = typeof offset === "undefined";
            if (relative) offset = this.offset;
            if (!this.noAssert) {
                if (typeof offset !== "number" || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
                offset >>>= 0;
                if (offset < 0 || offset + 8 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 8 + ") <= " + this.buffer.byteLength);
            }
            var lo = 0, hi = 0;
            if (this.littleEndian) {
                lo = this.view[offset + 2] << 16;
                lo |= this.view[offset + 1] << 8;
                lo |= this.view[offset];
                lo += this.view[offset + 3] << 24 >>> 0;
                offset += 4;
                hi = this.view[offset + 2] << 16;
                hi |= this.view[offset + 1] << 8;
                hi |= this.view[offset];
                hi += this.view[offset + 3] << 24 >>> 0;
            } else {
                hi = this.view[offset + 1] << 16;
                hi |= this.view[offset + 2] << 8;
                hi |= this.view[offset + 3];
                hi += this.view[offset] << 24 >>> 0;
                offset += 4;
                lo = this.view[offset + 1] << 16;
                lo |= this.view[offset + 2] << 8;
                lo |= this.view[offset + 3];
                lo += this.view[offset] << 24 >>> 0;
            }
            var value = new Long(lo, hi, true);
            if (relative) this.offset += 8;
            return value;
        };
        /**
         * Reads a 64bit unsigned integer. This is an alias of {@link ByteBuffer#readUint64}.
         * @function
         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
         * @returns {!Long}
         * @expose
         */ ByteBufferPrototype.readUInt64 = ByteBufferPrototype.readUint64;
    } // Long
    // types/floats/float32
    /*
     ieee754 - https://github.com/feross/ieee754

     The MIT License (MIT)

     Copyright (c) Feross Aboukhadijeh

     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated documentation files (the "Software"), to deal
     in the Software without restriction, including without limitation the rights
     to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     copies of the Software, and to permit persons to whom the Software is
     furnished to do so, subject to the following conditions:

     The above copyright notice and this permission notice shall be included in
     all copies or substantial portions of the Software.

     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
    */ /**
     * Reads an IEEE754 float from a byte array.
     * @param {!Array} buffer
     * @param {number} offset
     * @param {boolean} isLE
     * @param {number} mLen
     * @param {number} nBytes
     * @returns {number}
     * @inner
     */ function ieee754_read(buffer, offset, isLE, mLen, nBytes) {
        var e, m, eLen = nBytes * 8 - mLen - 1, eMax = (1 << eLen) - 1, eBias = eMax >> 1, nBits = -7, i = isLE ? nBytes - 1 : 0, d = isLE ? -1 : 1, s = buffer[offset + i];
        i += d;
        e = s & (1 << -nBits) - 1;
        s >>= -nBits;
        nBits += eLen;
        for(; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);
        m = e & (1 << -nBits) - 1;
        e >>= -nBits;
        nBits += mLen;
        for(; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);
        if (e === 0) e = 1 - eBias;
        else if (e === eMax) return m ? NaN : (s ? -1 : 1) * Infinity;
        else {
            m = m + Math.pow(2, mLen);
            e = e - eBias;
        }
        return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
    }
    /**
     * Writes an IEEE754 float to a byte array.
     * @param {!Array} buffer
     * @param {number} value
     * @param {number} offset
     * @param {boolean} isLE
     * @param {number} mLen
     * @param {number} nBytes
     * @inner
     */ function ieee754_write(buffer, value, offset, isLE, mLen, nBytes) {
        var e, m, c, eLen = nBytes * 8 - mLen - 1, eMax = (1 << eLen) - 1, eBias = eMax >> 1, rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0, i = isLE ? 0 : nBytes - 1, d = isLE ? 1 : -1, s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
        value = Math.abs(value);
        if (isNaN(value) || value === Infinity) {
            m = isNaN(value) ? 1 : 0;
            e = eMax;
        } else {
            e = Math.floor(Math.log(value) / Math.LN2);
            if (value * (c = Math.pow(2, -e)) < 1) {
                e--;
                c *= 2;
            }
            if (e + eBias >= 1) value += rt / c;
            else value += rt * Math.pow(2, 1 - eBias);
            if (value * c >= 2) {
                e++;
                c /= 2;
            }
            if (e + eBias >= eMax) {
                m = 0;
                e = eMax;
            } else if (e + eBias >= 1) {
                m = (value * c - 1) * Math.pow(2, mLen);
                e = e + eBias;
            } else {
                m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
                e = 0;
            }
        }
        for(; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);
        e = e << mLen | m;
        eLen += mLen;
        for(; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);
        buffer[offset + i - d] |= s * 128;
    }
    /**
     * Writes a 32bit float.
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
     * @returns {!ByteBuffer} this
     * @expose
     */ ByteBufferPrototype.writeFloat32 = function(value, offset) {
        var relative = typeof offset === "undefined";
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof value !== "number") throw TypeError("Illegal value: " + value + " (not a number)");
            if (typeof offset !== "number" || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
        }
        offset += 4;
        var capacity8 = this.buffer.byteLength;
        if (offset > capacity8) this.resize((capacity8 *= 2) > offset ? capacity8 : offset);
        offset -= 4;
        ieee754_write(this.view, value, offset, this.littleEndian, 23, 4);
        if (relative) this.offset += 4;
        return this;
    };
    /**
     * Writes a 32bit float. This is an alias of {@link ByteBuffer#writeFloat32}.
     * @function
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
     * @returns {!ByteBuffer} this
     * @expose
     */ ByteBufferPrototype.writeFloat = ByteBufferPrototype.writeFloat32;
    /**
     * Reads a 32bit float.
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
     * @returns {number}
     * @expose
     */ ByteBufferPrototype.readFloat32 = function(offset) {
        var relative = typeof offset === "undefined";
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof offset !== "number" || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 4 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 4 + ") <= " + this.buffer.byteLength);
        }
        var value = ieee754_read(this.view, offset, this.littleEndian, 23, 4);
        if (relative) this.offset += 4;
        return value;
    };
    /**
     * Reads a 32bit float. This is an alias of {@link ByteBuffer#readFloat32}.
     * @function
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
     * @returns {number}
     * @expose
     */ ByteBufferPrototype.readFloat = ByteBufferPrototype.readFloat32;
    // types/floats/float64
    /**
     * Writes a 64bit float.
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
     * @returns {!ByteBuffer} this
     * @expose
     */ ByteBufferPrototype.writeFloat64 = function(value, offset) {
        var relative = typeof offset === "undefined";
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof value !== "number") throw TypeError("Illegal value: " + value + " (not a number)");
            if (typeof offset !== "number" || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
        }
        offset += 8;
        var capacity9 = this.buffer.byteLength;
        if (offset > capacity9) this.resize((capacity9 *= 2) > offset ? capacity9 : offset);
        offset -= 8;
        ieee754_write(this.view, value, offset, this.littleEndian, 52, 8);
        if (relative) this.offset += 8;
        return this;
    };
    /**
     * Writes a 64bit float. This is an alias of {@link ByteBuffer#writeFloat64}.
     * @function
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
     * @returns {!ByteBuffer} this
     * @expose
     */ ByteBufferPrototype.writeDouble = ByteBufferPrototype.writeFloat64;
    /**
     * Reads a 64bit float.
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
     * @returns {number}
     * @expose
     */ ByteBufferPrototype.readFloat64 = function(offset) {
        var relative = typeof offset === "undefined";
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof offset !== "number" || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 8 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 8 + ") <= " + this.buffer.byteLength);
        }
        var value = ieee754_read(this.view, offset, this.littleEndian, 52, 8);
        if (relative) this.offset += 8;
        return value;
    };
    /**
     * Reads a 64bit float. This is an alias of {@link ByteBuffer#readFloat64}.
     * @function
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
     * @returns {number}
     * @expose
     */ ByteBufferPrototype.readDouble = ByteBufferPrototype.readFloat64;
    // types/varints/varint32
    /**
     * Maximum number of bytes required to store a 32bit base 128 variable-length integer.
     * @type {number}
     * @const
     * @expose
     */ ByteBuffer.MAX_VARINT32_BYTES = 5;
    /**
     * Calculates the actual number of bytes required to store a 32bit base 128 variable-length integer.
     * @param {number} value Value to encode
     * @returns {number} Number of bytes required. Capped to {@link ByteBuffer.MAX_VARINT32_BYTES}
     * @expose
     */ ByteBuffer.calculateVarint32 = function(value) {
        // ref: src/google/protobuf/io/coded_stream.cc
        value = value >>> 0;
        if (value < 128) return 1;
        else if (value < 16384) return 2;
        else if (value < 2097152) return 3;
        else if (value < 268435456) return 4;
        else return 5;
    };
    /**
     * Zigzag encodes a signed 32bit integer so that it can be effectively used with varint encoding.
     * @param {number} n Signed 32bit integer
     * @returns {number} Unsigned zigzag encoded 32bit integer
     * @expose
     */ ByteBuffer.zigZagEncode32 = function(n) {
        return ((n |= 0) << 1 ^ n >> 31) >>> 0; // ref: src/google/protobuf/wire_format_lite.h
    };
    /**
     * Decodes a zigzag encoded signed 32bit integer.
     * @param {number} n Unsigned zigzag encoded 32bit integer
     * @returns {number} Signed 32bit integer
     * @expose
     */ ByteBuffer.zigZagDecode32 = function(n) {
        return n >>> 1 ^ -(n & 1) | 0; // // ref: src/google/protobuf/wire_format_lite.h
    };
    /**
     * Writes a 32bit base 128 variable-length integer.
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
     *  written if omitted.
     * @returns {!ByteBuffer|number} this if `offset` is omitted, else the actual number of bytes written
     * @expose
     */ ByteBufferPrototype.writeVarint32 = function(value, offset) {
        var relative = typeof offset === "undefined";
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof value !== "number" || value % 1 !== 0) throw TypeError("Illegal value: " + value + " (not an integer)");
            value |= 0;
            if (typeof offset !== "number" || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
        }
        var size = ByteBuffer.calculateVarint32(value), b;
        offset += size;
        var capacity10 = this.buffer.byteLength;
        if (offset > capacity10) this.resize((capacity10 *= 2) > offset ? capacity10 : offset);
        offset -= size;
        value >>>= 0;
        while(value >= 0x80){
            b = value & 0x7f | 0x80;
            this.view[offset++] = b;
            value >>>= 7;
        }
        this.view[offset++] = value;
        if (relative) {
            this.offset = offset;
            return this;
        }
        return size;
    };
    /**
     * Writes a zig-zag encoded (signed) 32bit base 128 variable-length integer.
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
     *  written if omitted.
     * @returns {!ByteBuffer|number} this if `offset` is omitted, else the actual number of bytes written
     * @expose
     */ ByteBufferPrototype.writeVarint32ZigZag = function(value, offset) {
        return this.writeVarint32(ByteBuffer.zigZagEncode32(value), offset);
    };
    /**
     * Reads a 32bit base 128 variable-length integer.
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
     *  written if omitted.
     * @returns {number|!{value: number, length: number}} The value read if offset is omitted, else the value read
     *  and the actual number of bytes read.
     * @throws {Error} If it's not a valid varint. Has a property `truncated = true` if there is not enough data available
     *  to fully decode the varint.
     * @expose
     */ ByteBufferPrototype.readVarint32 = function(offset) {
        var relative = typeof offset === "undefined";
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof offset !== "number" || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 1 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 1 + ") <= " + this.buffer.byteLength);
        }
        var c = 0, value = 0, b;
        do {
            if (!this.noAssert && offset > this.limit) {
                var err = Error("Truncated");
                err["truncated"] = true;
                throw err;
            }
            b = this.view[offset++];
            if (c < 5) value |= (b & 0x7f) << 7 * c;
            ++c;
        }while ((b & 0x80) !== 0);
        value |= 0;
        if (relative) {
            this.offset = offset;
            return value;
        }
        return {
            "value": value,
            "length": c
        };
    };
    /**
     * Reads a zig-zag encoded (signed) 32bit base 128 variable-length integer.
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
     *  written if omitted.
     * @returns {number|!{value: number, length: number}} The value read if offset is omitted, else the value read
     *  and the actual number of bytes read.
     * @throws {Error} If it's not a valid varint
     * @expose
     */ ByteBufferPrototype.readVarint32ZigZag = function(offset) {
        var val = this.readVarint32(offset);
        if (typeof val === "object") val["value"] = ByteBuffer.zigZagDecode32(val["value"]);
        else val = ByteBuffer.zigZagDecode32(val);
        return val;
    };
    // types/varints/varint64
    if (Long) {
        /**
         * Maximum number of bytes required to store a 64bit base 128 variable-length integer.
         * @type {number}
         * @const
         * @expose
         */ ByteBuffer.MAX_VARINT64_BYTES = 10;
        /**
         * Calculates the actual number of bytes required to store a 64bit base 128 variable-length integer.
         * @param {number|!Long} value Value to encode
         * @returns {number} Number of bytes required. Capped to {@link ByteBuffer.MAX_VARINT64_BYTES}
         * @expose
         */ ByteBuffer.calculateVarint64 = function(value) {
            if (typeof value === "number") value = Long.fromNumber(value);
            else if (typeof value === "string") value = Long.fromString(value);
            // ref: src/google/protobuf/io/coded_stream.cc
            var part0 = value.toInt() >>> 0, part1 = value.shiftRightUnsigned(28).toInt() >>> 0, part2 = value.shiftRightUnsigned(56).toInt() >>> 0;
            if (part2 == 0) {
                if (part1 == 0) {
                    if (part0 < 16384) return part0 < 128 ? 1 : 2;
                    else return part0 < 2097152 ? 3 : 4;
                } else {
                    if (part1 < 16384) return part1 < 128 ? 5 : 6;
                    else return part1 < 2097152 ? 7 : 8;
                }
            } else return part2 < 128 ? 9 : 10;
        };
        /**
         * Zigzag encodes a signed 64bit integer so that it can be effectively used with varint encoding.
         * @param {number|!Long} value Signed long
         * @returns {!Long} Unsigned zigzag encoded long
         * @expose
         */ ByteBuffer.zigZagEncode64 = function(value) {
            if (typeof value === "number") value = Long.fromNumber(value, false);
            else if (typeof value === "string") value = Long.fromString(value, false);
            else if (value.unsigned !== false) value = value.toSigned();
            // ref: src/google/protobuf/wire_format_lite.h
            return value.shiftLeft(1).xor(value.shiftRight(63)).toUnsigned();
        };
        /**
         * Decodes a zigzag encoded signed 64bit integer.
         * @param {!Long|number} value Unsigned zigzag encoded long or JavaScript number
         * @returns {!Long} Signed long
         * @expose
         */ ByteBuffer.zigZagDecode64 = function(value) {
            if (typeof value === "number") value = Long.fromNumber(value, false);
            else if (typeof value === "string") value = Long.fromString(value, false);
            else if (value.unsigned !== false) value = value.toSigned();
            // ref: src/google/protobuf/wire_format_lite.h
            return value.shiftRightUnsigned(1).xor(value.and(Long.ONE).toSigned().negate()).toSigned();
        };
        /**
         * Writes a 64bit base 128 variable-length integer.
         * @param {number|Long} value Value to write
         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
         *  written if omitted.
         * @returns {!ByteBuffer|number} `this` if offset is omitted, else the actual number of bytes written.
         * @expose
         */ ByteBufferPrototype.writeVarint64 = function(value, offset) {
            var relative = typeof offset === "undefined";
            if (relative) offset = this.offset;
            if (!this.noAssert) {
                if (typeof value === "number") value = Long.fromNumber(value);
                else if (typeof value === "string") value = Long.fromString(value);
                else if (!(value && value instanceof Long)) throw TypeError("Illegal value: " + value + " (not an integer or Long)");
                if (typeof offset !== "number" || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
                offset >>>= 0;
                if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
            }
            if (typeof value === "number") value = Long.fromNumber(value, false);
            else if (typeof value === "string") value = Long.fromString(value, false);
            else if (value.unsigned !== false) value = value.toSigned();
            var size = ByteBuffer.calculateVarint64(value), part0 = value.toInt() >>> 0, part1 = value.shiftRightUnsigned(28).toInt() >>> 0, part2 = value.shiftRightUnsigned(56).toInt() >>> 0;
            offset += size;
            var capacity11 = this.buffer.byteLength;
            if (offset > capacity11) this.resize((capacity11 *= 2) > offset ? capacity11 : offset);
            offset -= size;
            switch(size){
                case 10:
                    this.view[offset + 9] = part2 >>> 7 & 0x01;
                case 9:
                    this.view[offset + 8] = size !== 9 ? part2 | 0x80 : part2 & 0x7F;
                case 8:
                    this.view[offset + 7] = size !== 8 ? part1 >>> 21 | 0x80 : part1 >>> 21 & 0x7F;
                case 7:
                    this.view[offset + 6] = size !== 7 ? part1 >>> 14 | 0x80 : part1 >>> 14 & 0x7F;
                case 6:
                    this.view[offset + 5] = size !== 6 ? part1 >>> 7 | 0x80 : part1 >>> 7 & 0x7F;
                case 5:
                    this.view[offset + 4] = size !== 5 ? part1 | 0x80 : part1 & 0x7F;
                case 4:
                    this.view[offset + 3] = size !== 4 ? part0 >>> 21 | 0x80 : part0 >>> 21 & 0x7F;
                case 3:
                    this.view[offset + 2] = size !== 3 ? part0 >>> 14 | 0x80 : part0 >>> 14 & 0x7F;
                case 2:
                    this.view[offset + 1] = size !== 2 ? part0 >>> 7 | 0x80 : part0 >>> 7 & 0x7F;
                case 1:
                    this.view[offset] = size !== 1 ? part0 | 0x80 : part0 & 0x7F;
            }
            if (relative) {
                this.offset += size;
                return this;
            } else return size;
        };
        /**
         * Writes a zig-zag encoded 64bit base 128 variable-length integer.
         * @param {number|Long} value Value to write
         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
         *  written if omitted.
         * @returns {!ByteBuffer|number} `this` if offset is omitted, else the actual number of bytes written.
         * @expose
         */ ByteBufferPrototype.writeVarint64ZigZag = function(value, offset) {
            return this.writeVarint64(ByteBuffer.zigZagEncode64(value), offset);
        };
        /**
         * Reads a 64bit base 128 variable-length integer. Requires Long.js.
         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
         *  read if omitted.
         * @returns {!Long|!{value: Long, length: number}} The value read if offset is omitted, else the value read and
         *  the actual number of bytes read.
         * @throws {Error} If it's not a valid varint
         * @expose
         */ ByteBufferPrototype.readVarint64 = function(offset) {
            var relative = typeof offset === "undefined";
            if (relative) offset = this.offset;
            if (!this.noAssert) {
                if (typeof offset !== "number" || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
                offset >>>= 0;
                if (offset < 0 || offset + 1 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 1 + ") <= " + this.buffer.byteLength);
            }
            // ref: src/google/protobuf/io/coded_stream.cc
            var start = offset, part0 = 0, part1 = 0, part2 = 0, b = 0;
            b = this.view[offset++];
            part0 = b & 0x7F;
            if (b & 0x80) {
                b = this.view[offset++];
                part0 |= (b & 0x7F) << 7;
                if (b & 0x80 || this.noAssert && typeof b === "undefined") {
                    b = this.view[offset++];
                    part0 |= (b & 0x7F) << 14;
                    if (b & 0x80 || this.noAssert && typeof b === "undefined") {
                        b = this.view[offset++];
                        part0 |= (b & 0x7F) << 21;
                        if (b & 0x80 || this.noAssert && typeof b === "undefined") {
                            b = this.view[offset++];
                            part1 = b & 0x7F;
                            if (b & 0x80 || this.noAssert && typeof b === "undefined") {
                                b = this.view[offset++];
                                part1 |= (b & 0x7F) << 7;
                                if (b & 0x80 || this.noAssert && typeof b === "undefined") {
                                    b = this.view[offset++];
                                    part1 |= (b & 0x7F) << 14;
                                    if (b & 0x80 || this.noAssert && typeof b === "undefined") {
                                        b = this.view[offset++];
                                        part1 |= (b & 0x7F) << 21;
                                        if (b & 0x80 || this.noAssert && typeof b === "undefined") {
                                            b = this.view[offset++];
                                            part2 = b & 0x7F;
                                            if (b & 0x80 || this.noAssert && typeof b === "undefined") {
                                                b = this.view[offset++];
                                                part2 |= (b & 0x7F) << 7;
                                                if (b & 0x80 || this.noAssert && typeof b === "undefined") throw Error("Buffer overrun");
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            var value = Long.fromBits(part0 | part1 << 28, part1 >>> 4 | part2 << 24, false);
            if (relative) {
                this.offset = offset;
                return value;
            } else return {
                "value": value,
                "length": offset - start
            };
        };
        /**
         * Reads a zig-zag encoded 64bit base 128 variable-length integer. Requires Long.js.
         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
         *  read if omitted.
         * @returns {!Long|!{value: Long, length: number}} The value read if offset is omitted, else the value read and
         *  the actual number of bytes read.
         * @throws {Error} If it's not a valid varint
         * @expose
         */ ByteBufferPrototype.readVarint64ZigZag = function(offset) {
            var val = this.readVarint64(offset);
            if (val && val["value"] instanceof Long) val["value"] = ByteBuffer.zigZagDecode64(val["value"]);
            else val = ByteBuffer.zigZagDecode64(val);
            return val;
        };
    } // Long
    // types/strings/cstring
    /**
     * Writes a NULL-terminated UTF8 encoded string. For this to work the specified string must not contain any NULL
     *  characters itself.
     * @param {string} str String to write
     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
     *  contained in `str` + 1 if omitted.
     * @returns {!ByteBuffer|number} this if offset is omitted, else the actual number of bytes written
     * @expose
     */ ByteBufferPrototype.writeCString = function(str, offset) {
        var relative = typeof offset === "undefined";
        if (relative) offset = this.offset;
        var i, k = str.length;
        if (!this.noAssert) {
            if (typeof str !== "string") throw TypeError("Illegal str: Not a string");
            for(i = 0; i < k; ++i){
                if (str.charCodeAt(i) === 0) throw RangeError("Illegal str: Contains NULL-characters");
            }
            if (typeof offset !== "number" || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
        }
        // UTF8 strings do not contain zero bytes in between except for the zero character, so:
        k = utfx.calculateUTF16asUTF8(stringSource(str))[1];
        offset += k + 1;
        var capacity12 = this.buffer.byteLength;
        if (offset > capacity12) this.resize((capacity12 *= 2) > offset ? capacity12 : offset);
        offset -= k + 1;
        utfx.encodeUTF16toUTF8(stringSource(str), (function(b) {
            this.view[offset++] = b;
        }).bind(this));
        this.view[offset++] = 0;
        if (relative) {
            this.offset = offset;
            return this;
        }
        return k;
    };
    /**
     * Reads a NULL-terminated UTF8 encoded string. For this to work the string read must not contain any NULL characters
     *  itself.
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
     *  read if omitted.
     * @returns {string|!{string: string, length: number}} The string read if offset is omitted, else the string
     *  read and the actual number of bytes read.
     * @expose
     */ ByteBufferPrototype.readCString = function(offset) {
        var relative = typeof offset === "undefined";
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof offset !== "number" || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 1 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 1 + ") <= " + this.buffer.byteLength);
        }
        var start = offset, temp;
        // UTF8 strings do not contain zero bytes in between except for the zero character itself, so:
        var sd, b = -1;
        utfx.decodeUTF8toUTF16((function() {
            if (b === 0) return null;
            if (offset >= this.limit) throw RangeError("Illegal range: Truncated data, " + offset + " < " + this.limit);
            b = this.view[offset++];
            return b === 0 ? null : b;
        }).bind(this), sd = stringDestination(), true);
        if (relative) {
            this.offset = offset;
            return sd();
        } else return {
            "string": sd(),
            "length": offset - start
        };
    };
    // types/strings/istring
    /**
     * Writes a length as uint32 prefixed UTF8 encoded string.
     * @param {string} str String to write
     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
     *  written if omitted.
     * @returns {!ByteBuffer|number} `this` if `offset` is omitted, else the actual number of bytes written
     * @expose
     * @see ByteBuffer#writeVarint32
     */ ByteBufferPrototype.writeIString = function(str, offset) {
        var relative = typeof offset === "undefined";
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof str !== "string") throw TypeError("Illegal str: Not a string");
            if (typeof offset !== "number" || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
        }
        var start = offset, k;
        k = utfx.calculateUTF16asUTF8(stringSource(str), this.noAssert)[1];
        offset += 4 + k;
        var capacity13 = this.buffer.byteLength;
        if (offset > capacity13) this.resize((capacity13 *= 2) > offset ? capacity13 : offset);
        offset -= 4 + k;
        if (this.littleEndian) {
            this.view[offset + 3] = k >>> 24 & 0xFF;
            this.view[offset + 2] = k >>> 16 & 0xFF;
            this.view[offset + 1] = k >>> 8 & 0xFF;
            this.view[offset] = k & 0xFF;
        } else {
            this.view[offset] = k >>> 24 & 0xFF;
            this.view[offset + 1] = k >>> 16 & 0xFF;
            this.view[offset + 2] = k >>> 8 & 0xFF;
            this.view[offset + 3] = k & 0xFF;
        }
        offset += 4;
        utfx.encodeUTF16toUTF8(stringSource(str), (function(b) {
            this.view[offset++] = b;
        }).bind(this));
        if (offset !== start + 4 + k) throw RangeError("Illegal range: Truncated data, " + offset + " == " + (offset + 4 + k));
        if (relative) {
            this.offset = offset;
            return this;
        }
        return offset - start;
    };
    /**
     * Reads a length as uint32 prefixed UTF8 encoded string.
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
     *  read if omitted.
     * @returns {string|!{string: string, length: number}} The string read if offset is omitted, else the string
     *  read and the actual number of bytes read.
     * @expose
     * @see ByteBuffer#readVarint32
     */ ByteBufferPrototype.readIString = function(offset) {
        var relative = typeof offset === "undefined";
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof offset !== "number" || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 4 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 4 + ") <= " + this.buffer.byteLength);
        }
        var start = offset;
        var len = this.readUint32(offset);
        var str = this.readUTF8String(len, ByteBuffer.METRICS_BYTES, offset += 4);
        offset += str["length"];
        if (relative) {
            this.offset = offset;
            return str["string"];
        } else return {
            "string": str["string"],
            "length": offset - start
        };
    };
    // types/strings/utf8string
    /**
     * Metrics representing number of UTF8 characters. Evaluates to `c`.
     * @type {string}
     * @const
     * @expose
     */ ByteBuffer.METRICS_CHARS = "c";
    /**
     * Metrics representing number of bytes. Evaluates to `b`.
     * @type {string}
     * @const
     * @expose
     */ ByteBuffer.METRICS_BYTES = "b";
    /**
     * Writes an UTF8 encoded string.
     * @param {string} str String to write
     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} if omitted.
     * @returns {!ByteBuffer|number} this if offset is omitted, else the actual number of bytes written.
     * @expose
     */ ByteBufferPrototype.writeUTF8String = function(str, offset) {
        var relative = typeof offset === "undefined";
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof offset !== "number" || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
        }
        var k;
        var start = offset;
        k = utfx.calculateUTF16asUTF8(stringSource(str))[1];
        offset += k;
        var capacity14 = this.buffer.byteLength;
        if (offset > capacity14) this.resize((capacity14 *= 2) > offset ? capacity14 : offset);
        offset -= k;
        utfx.encodeUTF16toUTF8(stringSource(str), (function(b) {
            this.view[offset++] = b;
        }).bind(this));
        if (relative) {
            this.offset = offset;
            return this;
        }
        return offset - start;
    };
    /**
     * Writes an UTF8 encoded string. This is an alias of {@link ByteBuffer#writeUTF8String}.
     * @function
     * @param {string} str String to write
     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} if omitted.
     * @returns {!ByteBuffer|number} this if offset is omitted, else the actual number of bytes written.
     * @expose
     */ ByteBufferPrototype.writeString = ByteBufferPrototype.writeUTF8String;
    /**
     * Calculates the number of UTF8 characters of a string. JavaScript itself uses UTF-16, so that a string's
     *  `length` property does not reflect its actual UTF8 size if it contains code points larger than 0xFFFF.
     * @param {string} str String to calculate
     * @returns {number} Number of UTF8 characters
     * @expose
     */ ByteBuffer.calculateUTF8Chars = function(str) {
        return utfx.calculateUTF16asUTF8(stringSource(str))[0];
    };
    /**
     * Calculates the number of UTF8 bytes of a string.
     * @param {string} str String to calculate
     * @returns {number} Number of UTF8 bytes
     * @expose
     */ ByteBuffer.calculateUTF8Bytes = function(str) {
        return utfx.calculateUTF16asUTF8(stringSource(str))[1];
    };
    /**
     * Calculates the number of UTF8 bytes of a string. This is an alias of {@link ByteBuffer.calculateUTF8Bytes}.
     * @function
     * @param {string} str String to calculate
     * @returns {number} Number of UTF8 bytes
     * @expose
     */ ByteBuffer.calculateString = ByteBuffer.calculateUTF8Bytes;
    /**
     * Reads an UTF8 encoded string.
     * @param {number} length Number of characters or bytes to read.
     * @param {string=} metrics Metrics specifying what `length` is meant to count. Defaults to
     *  {@link ByteBuffer.METRICS_CHARS}.
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
     *  read if omitted.
     * @returns {string|!{string: string, length: number}} The string read if offset is omitted, else the string
     *  read and the actual number of bytes read.
     * @expose
     */ ByteBufferPrototype.readUTF8String = function(length, metrics, offset) {
        if (typeof metrics === "number") {
            offset = metrics;
            metrics = undefined;
        }
        var relative = typeof offset === "undefined";
        if (relative) offset = this.offset;
        if (typeof metrics === "undefined") metrics = ByteBuffer.METRICS_CHARS;
        if (!this.noAssert) {
            if (typeof length !== "number" || length % 1 !== 0) throw TypeError("Illegal length: " + length + " (not an integer)");
            length |= 0;
            if (typeof offset !== "number" || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
        }
        var i = 0, start = offset, sd;
        if (metrics === ByteBuffer.METRICS_CHARS) {
            sd = stringDestination();
            utfx.decodeUTF8((function() {
                return i < length && offset < this.limit ? this.view[offset++] : null;
            }).bind(this), function(cp) {
                ++i;
                utfx.UTF8toUTF16(cp, sd);
            });
            if (i !== length) throw RangeError("Illegal range: Truncated data, " + i + " == " + length);
            if (relative) {
                this.offset = offset;
                return sd();
            } else return {
                "string": sd(),
                "length": offset - start
            };
        } else if (metrics === ByteBuffer.METRICS_BYTES) {
            if (!this.noAssert) {
                if (typeof offset !== "number" || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
                offset >>>= 0;
                if (offset < 0 || offset + length > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + length + ") <= " + this.buffer.byteLength);
            }
            var k = offset + length;
            utfx.decodeUTF8toUTF16((function() {
                return offset < k ? this.view[offset++] : null;
            }).bind(this), sd = stringDestination(), this.noAssert);
            if (offset !== k) throw RangeError("Illegal range: Truncated data, " + offset + " == " + k);
            if (relative) {
                this.offset = offset;
                return sd();
            } else return {
                "string": sd(),
                "length": offset - start
            };
        } else throw TypeError("Unsupported metrics: " + metrics);
    };
    /**
     * Reads an UTF8 encoded string. This is an alias of {@link ByteBuffer#readUTF8String}.
     * @function
     * @param {number} length Number of characters or bytes to read
     * @param {number=} metrics Metrics specifying what `n` is meant to count. Defaults to
     *  {@link ByteBuffer.METRICS_CHARS}.
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
     *  read if omitted.
     * @returns {string|!{string: string, length: number}} The string read if offset is omitted, else the string
     *  read and the actual number of bytes read.
     * @expose
     */ ByteBufferPrototype.readString = ByteBufferPrototype.readUTF8String;
    // types/strings/vstring
    /**
     * Writes a length as varint32 prefixed UTF8 encoded string.
     * @param {string} str String to write
     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
     *  written if omitted.
     * @returns {!ByteBuffer|number} `this` if `offset` is omitted, else the actual number of bytes written
     * @expose
     * @see ByteBuffer#writeVarint32
     */ ByteBufferPrototype.writeVString = function(str, offset) {
        var relative = typeof offset === "undefined";
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof str !== "string") throw TypeError("Illegal str: Not a string");
            if (typeof offset !== "number" || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
        }
        var start = offset, k, l;
        k = utfx.calculateUTF16asUTF8(stringSource(str), this.noAssert)[1];
        l = ByteBuffer.calculateVarint32(k);
        offset += l + k;
        var capacity15 = this.buffer.byteLength;
        if (offset > capacity15) this.resize((capacity15 *= 2) > offset ? capacity15 : offset);
        offset -= l + k;
        offset += this.writeVarint32(k, offset);
        utfx.encodeUTF16toUTF8(stringSource(str), (function(b) {
            this.view[offset++] = b;
        }).bind(this));
        if (offset !== start + k + l) throw RangeError("Illegal range: Truncated data, " + offset + " == " + (offset + k + l));
        if (relative) {
            this.offset = offset;
            return this;
        }
        return offset - start;
    };
    /**
     * Reads a length as varint32 prefixed UTF8 encoded string.
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
     *  read if omitted.
     * @returns {string|!{string: string, length: number}} The string read if offset is omitted, else the string
     *  read and the actual number of bytes read.
     * @expose
     * @see ByteBuffer#readVarint32
     */ ByteBufferPrototype.readVString = function(offset) {
        var relative = typeof offset === "undefined";
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof offset !== "number" || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 1 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 1 + ") <= " + this.buffer.byteLength);
        }
        var start = offset;
        var len = this.readVarint32(offset);
        var str = this.readUTF8String(len["value"], ByteBuffer.METRICS_BYTES, offset += len["length"]);
        offset += str["length"];
        if (relative) {
            this.offset = offset;
            return str["string"];
        } else return {
            "string": str["string"],
            "length": offset - start
        };
    };
    /**
     * Appends some data to this ByteBuffer. This will overwrite any contents behind the specified offset up to the appended
     *  data's length.
     * @param {!ByteBuffer|!ArrayBuffer|!Uint8Array|string} source Data to append. If `source` is a ByteBuffer, its offsets
     *  will be modified according to the performed read operation.
     * @param {(string|number)=} encoding Encoding if `data` is a string ("base64", "hex", "binary", defaults to "utf8")
     * @param {number=} offset Offset to append at. Will use and increase {@link ByteBuffer#offset} by the number of bytes
     *  written if omitted.
     * @returns {!ByteBuffer} this
     * @expose
     * @example A relative `<01 02>03.append(<04 05>)` will result in `<01 02 04 05>, 04 05|`
     * @example An absolute `<01 02>03.append(04 05>, 1)` will result in `<01 04>05, 04 05|`
     */ ByteBufferPrototype.append = function(source, encoding, offset) {
        if (typeof encoding === "number" || typeof encoding !== "string") {
            offset = encoding;
            encoding = undefined;
        }
        var relative = typeof offset === "undefined";
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof offset !== "number" || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
        }
        if (!(source instanceof ByteBuffer)) source = ByteBuffer.wrap(source, encoding);
        var length = source.limit - source.offset;
        if (length <= 0) return this; // Nothing to append
        offset += length;
        var capacity16 = this.buffer.byteLength;
        if (offset > capacity16) this.resize((capacity16 *= 2) > offset ? capacity16 : offset);
        offset -= length;
        this.view.set(source.view.subarray(source.offset, source.limit), offset);
        source.offset += length;
        if (relative) this.offset += length;
        return this;
    };
    /**
     * Appends this ByteBuffer's contents to another ByteBuffer. This will overwrite any contents at and after the
        specified offset up to the length of this ByteBuffer's data.
     * @param {!ByteBuffer} target Target ByteBuffer
     * @param {number=} offset Offset to append to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
     *  read if omitted.
     * @returns {!ByteBuffer} this
     * @expose
     * @see ByteBuffer#append
     */ ByteBufferPrototype.appendTo = function(target, offset) {
        target.append(this, offset);
        return this;
    };
    /**
     * Enables or disables assertions of argument types and offsets. Assertions are enabled by default but you can opt to
     *  disable them if your code already makes sure that everything is valid.
     * @param {boolean} assert `true` to enable assertions, otherwise `false`
     * @returns {!ByteBuffer} this
     * @expose
     */ ByteBufferPrototype.assert = function(assert) {
        this.noAssert = !assert;
        return this;
    };
    /**
     * Gets the capacity of this ByteBuffer's backing buffer.
     * @returns {number} Capacity of the backing buffer
     * @expose
     */ ByteBufferPrototype.capacity = function() {
        return this.buffer.byteLength;
    };
    /**
     * Clears this ByteBuffer's offsets by setting {@link ByteBuffer#offset} to `0` and {@link ByteBuffer#limit} to the
     *  backing buffer's capacity. Discards {@link ByteBuffer#markedOffset}.
     * @returns {!ByteBuffer} this
     * @expose
     */ ByteBufferPrototype.clear = function() {
        this.offset = 0;
        this.limit = this.buffer.byteLength;
        this.markedOffset = -1;
        return this;
    };
    /**
     * Creates a cloned instance of this ByteBuffer, preset with this ByteBuffer's values for {@link ByteBuffer#offset},
     *  {@link ByteBuffer#markedOffset} and {@link ByteBuffer#limit}.
     * @param {boolean=} copy Whether to copy the backing buffer or to return another view on the same, defaults to `false`
     * @returns {!ByteBuffer} Cloned instance
     * @expose
     */ ByteBufferPrototype.clone = function(copy) {
        var bb = new ByteBuffer(0, this.littleEndian, this.noAssert);
        if (copy) {
            bb.buffer = new ArrayBuffer(this.buffer.byteLength);
            bb.view = new Uint8Array(bb.buffer);
        } else {
            bb.buffer = this.buffer;
            bb.view = this.view;
        }
        bb.offset = this.offset;
        bb.markedOffset = this.markedOffset;
        bb.limit = this.limit;
        return bb;
    };
    /**
     * Compacts this ByteBuffer to be backed by a {@link ByteBuffer#buffer} of its contents' length. Contents are the bytes
     *  between {@link ByteBuffer#offset} and {@link ByteBuffer#limit}. Will set `offset = 0` and `limit = capacity` and
     *  adapt {@link ByteBuffer#markedOffset} to the same relative position if set.
     * @param {number=} begin Offset to start at, defaults to {@link ByteBuffer#offset}
     * @param {number=} end Offset to end at, defaults to {@link ByteBuffer#limit}
     * @returns {!ByteBuffer} this
     * @expose
     */ ByteBufferPrototype.compact = function(begin, end) {
        if (typeof begin === "undefined") begin = this.offset;
        if (typeof end === "undefined") end = this.limit;
        if (!this.noAssert) {
            if (typeof begin !== "number" || begin % 1 !== 0) throw TypeError("Illegal begin: Not an integer");
            begin >>>= 0;
            if (typeof end !== "number" || end % 1 !== 0) throw TypeError("Illegal end: Not an integer");
            end >>>= 0;
            if (begin < 0 || begin > end || end > this.buffer.byteLength) throw RangeError("Illegal range: 0 <= " + begin + " <= " + end + " <= " + this.buffer.byteLength);
        }
        if (begin === 0 && end === this.buffer.byteLength) return this; // Already compacted
        var len = end - begin;
        if (len === 0) {
            this.buffer = EMPTY_BUFFER;
            this.view = null;
            if (this.markedOffset >= 0) this.markedOffset -= begin;
            this.offset = 0;
            this.limit = 0;
            return this;
        }
        var buffer = new ArrayBuffer(len);
        var view = new Uint8Array(buffer);
        view.set(this.view.subarray(begin, end));
        this.buffer = buffer;
        this.view = view;
        if (this.markedOffset >= 0) this.markedOffset -= begin;
        this.offset = 0;
        this.limit = len;
        return this;
    };
    /**
     * Creates a copy of this ByteBuffer's contents. Contents are the bytes between {@link ByteBuffer#offset} and
     *  {@link ByteBuffer#limit}.
     * @param {number=} begin Begin offset, defaults to {@link ByteBuffer#offset}.
     * @param {number=} end End offset, defaults to {@link ByteBuffer#limit}.
     * @returns {!ByteBuffer} Copy
     * @expose
     */ ByteBufferPrototype.copy = function(begin, end) {
        if (typeof begin === "undefined") begin = this.offset;
        if (typeof end === "undefined") end = this.limit;
        if (!this.noAssert) {
            if (typeof begin !== "number" || begin % 1 !== 0) throw TypeError("Illegal begin: Not an integer");
            begin >>>= 0;
            if (typeof end !== "number" || end % 1 !== 0) throw TypeError("Illegal end: Not an integer");
            end >>>= 0;
            if (begin < 0 || begin > end || end > this.buffer.byteLength) throw RangeError("Illegal range: 0 <= " + begin + " <= " + end + " <= " + this.buffer.byteLength);
        }
        if (begin === end) return new ByteBuffer(0, this.littleEndian, this.noAssert);
        var capacity = end - begin, bb = new ByteBuffer(capacity, this.littleEndian, this.noAssert);
        bb.offset = 0;
        bb.limit = capacity;
        if (bb.markedOffset >= 0) bb.markedOffset -= begin;
        this.copyTo(bb, 0, begin, end);
        return bb;
    };
    /**
     * Copies this ByteBuffer's contents to another ByteBuffer. Contents are the bytes between {@link ByteBuffer#offset} and
     *  {@link ByteBuffer#limit}.
     * @param {!ByteBuffer} target Target ByteBuffer
     * @param {number=} targetOffset Offset to copy to. Will use and increase the target's {@link ByteBuffer#offset}
     *  by the number of bytes copied if omitted.
     * @param {number=} sourceOffset Offset to start copying from. Will use and increase {@link ByteBuffer#offset} by the
     *  number of bytes copied if omitted.
     * @param {number=} sourceLimit Offset to end copying from, defaults to {@link ByteBuffer#limit}
     * @returns {!ByteBuffer} this
     * @expose
     */ ByteBufferPrototype.copyTo = function(target, targetOffset, sourceOffset, sourceLimit) {
        var relative, targetRelative;
        if (!this.noAssert) {
            if (!ByteBuffer.isByteBuffer(target)) throw TypeError("Illegal target: Not a ByteBuffer");
        }
        targetOffset = (targetRelative = typeof targetOffset === "undefined") ? target.offset : targetOffset | 0;
        sourceOffset = (relative = typeof sourceOffset === "undefined") ? this.offset : sourceOffset | 0;
        sourceLimit = typeof sourceLimit === "undefined" ? this.limit : sourceLimit | 0;
        if (targetOffset < 0 || targetOffset > target.buffer.byteLength) throw RangeError("Illegal target range: 0 <= " + targetOffset + " <= " + target.buffer.byteLength);
        if (sourceOffset < 0 || sourceLimit > this.buffer.byteLength) throw RangeError("Illegal source range: 0 <= " + sourceOffset + " <= " + this.buffer.byteLength);
        var len = sourceLimit - sourceOffset;
        if (len === 0) return target; // Nothing to copy
        target.ensureCapacity(targetOffset + len);
        target.view.set(this.view.subarray(sourceOffset, sourceLimit), targetOffset);
        if (relative) this.offset += len;
        if (targetRelative) target.offset += len;
        return this;
    };
    /**
     * Makes sure that this ByteBuffer is backed by a {@link ByteBuffer#buffer} of at least the specified capacity. If the
     *  current capacity is exceeded, it will be doubled. If double the current capacity is less than the required capacity,
     *  the required capacity will be used instead.
     * @param {number} capacity Required capacity
     * @returns {!ByteBuffer} this
     * @expose
     */ ByteBufferPrototype.ensureCapacity = function(capacity) {
        var current = this.buffer.byteLength;
        if (current < capacity) return this.resize((current *= 2) > capacity ? current : capacity);
        return this;
    };
    /**
     * Overwrites this ByteBuffer's contents with the specified value. Contents are the bytes between
     *  {@link ByteBuffer#offset} and {@link ByteBuffer#limit}.
     * @param {number|string} value Byte value to fill with. If given as a string, the first character is used.
     * @param {number=} begin Begin offset. Will use and increase {@link ByteBuffer#offset} by the number of bytes
     *  written if omitted. defaults to {@link ByteBuffer#offset}.
     * @param {number=} end End offset, defaults to {@link ByteBuffer#limit}.
     * @returns {!ByteBuffer} this
     * @expose
     * @example `someByteBuffer.clear().fill(0)` fills the entire backing buffer with zeroes
     */ ByteBufferPrototype.fill = function(value, begin, end) {
        var relative = typeof begin === "undefined";
        if (relative) begin = this.offset;
        if (typeof value === "string" && value.length > 0) value = value.charCodeAt(0);
        if (typeof begin === "undefined") begin = this.offset;
        if (typeof end === "undefined") end = this.limit;
        if (!this.noAssert) {
            if (typeof value !== "number" || value % 1 !== 0) throw TypeError("Illegal value: " + value + " (not an integer)");
            value |= 0;
            if (typeof begin !== "number" || begin % 1 !== 0) throw TypeError("Illegal begin: Not an integer");
            begin >>>= 0;
            if (typeof end !== "number" || end % 1 !== 0) throw TypeError("Illegal end: Not an integer");
            end >>>= 0;
            if (begin < 0 || begin > end || end > this.buffer.byteLength) throw RangeError("Illegal range: 0 <= " + begin + " <= " + end + " <= " + this.buffer.byteLength);
        }
        if (begin >= end) return this; // Nothing to fill
        while(begin < end)this.view[begin++] = value;
        if (relative) this.offset = begin;
        return this;
    };
    /**
     * Makes this ByteBuffer ready for a new sequence of write or relative read operations. Sets `limit = offset` and
     *  `offset = 0`. Make sure always to flip a ByteBuffer when all relative read or write operations are complete.
     * @returns {!ByteBuffer} this
     * @expose
     */ ByteBufferPrototype.flip = function() {
        this.limit = this.offset;
        this.offset = 0;
        return this;
    };
    /**
     * Marks an offset on this ByteBuffer to be used later.
     * @param {number=} offset Offset to mark. Defaults to {@link ByteBuffer#offset}.
     * @returns {!ByteBuffer} this
     * @throws {TypeError} If `offset` is not a valid number
     * @throws {RangeError} If `offset` is out of bounds
     * @see ByteBuffer#reset
     * @expose
     */ ByteBufferPrototype.mark = function(offset) {
        offset = typeof offset === "undefined" ? this.offset : offset;
        if (!this.noAssert) {
            if (typeof offset !== "number" || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
        }
        this.markedOffset = offset;
        return this;
    };
    /**
     * Sets the byte order.
     * @param {boolean} littleEndian `true` for little endian byte order, `false` for big endian
     * @returns {!ByteBuffer} this
     * @expose
     */ ByteBufferPrototype.order = function(littleEndian) {
        if (!this.noAssert) {
            if (typeof littleEndian !== "boolean") throw TypeError("Illegal littleEndian: Not a boolean");
        }
        this.littleEndian = !!littleEndian;
        return this;
    };
    /**
     * Switches (to) little endian byte order.
     * @param {boolean=} littleEndian Defaults to `true`, otherwise uses big endian
     * @returns {!ByteBuffer} this
     * @expose
     */ ByteBufferPrototype.LE = function(littleEndian) {
        this.littleEndian = typeof littleEndian !== "undefined" ? !!littleEndian : true;
        return this;
    };
    /**
     * Switches (to) big endian byte order.
     * @param {boolean=} bigEndian Defaults to `true`, otherwise uses little endian
     * @returns {!ByteBuffer} this
     * @expose
     */ ByteBufferPrototype.BE = function(bigEndian) {
        this.littleEndian = typeof bigEndian !== "undefined" ? !bigEndian : false;
        return this;
    };
    /**
     * Prepends some data to this ByteBuffer. This will overwrite any contents before the specified offset up to the
     *  prepended data's length. If there is not enough space available before the specified `offset`, the backing buffer
     *  will be resized and its contents moved accordingly.
     * @param {!ByteBuffer|string|!ArrayBuffer} source Data to prepend. If `source` is a ByteBuffer, its offset will be
     *  modified according to the performed read operation.
     * @param {(string|number)=} encoding Encoding if `data` is a string ("base64", "hex", "binary", defaults to "utf8")
     * @param {number=} offset Offset to prepend at. Will use and decrease {@link ByteBuffer#offset} by the number of bytes
     *  prepended if omitted.
     * @returns {!ByteBuffer} this
     * @expose
     * @example A relative `00<01 02 03>.prepend(<04 05>)` results in `<04 05 01 02 03>, 04 05|`
     * @example An absolute `00<01 02 03>.prepend(<04 05>, 2)` results in `04<05 02 03>, 04 05|`
     */ ByteBufferPrototype.prepend = function(source, encoding, offset) {
        if (typeof encoding === "number" || typeof encoding !== "string") {
            offset = encoding;
            encoding = undefined;
        }
        var relative = typeof offset === "undefined";
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof offset !== "number" || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
        }
        if (!(source instanceof ByteBuffer)) source = ByteBuffer.wrap(source, encoding);
        var len = source.limit - source.offset;
        if (len <= 0) return this; // Nothing to prepend
        var diff = len - offset;
        if (diff > 0) {
            var buffer = new ArrayBuffer(this.buffer.byteLength + diff);
            var view = new Uint8Array(buffer);
            view.set(this.view.subarray(offset, this.buffer.byteLength), len);
            this.buffer = buffer;
            this.view = view;
            this.offset += diff;
            if (this.markedOffset >= 0) this.markedOffset += diff;
            this.limit += diff;
            offset += diff;
        } else var arrayView = new Uint8Array(this.buffer);
        this.view.set(source.view.subarray(source.offset, source.limit), offset - len);
        source.offset = source.limit;
        if (relative) this.offset -= len;
        return this;
    };
    /**
     * Prepends this ByteBuffer to another ByteBuffer. This will overwrite any contents before the specified offset up to the
     *  prepended data's length. If there is not enough space available before the specified `offset`, the backing buffer
     *  will be resized and its contents moved accordingly.
     * @param {!ByteBuffer} target Target ByteBuffer
     * @param {number=} offset Offset to prepend at. Will use and decrease {@link ByteBuffer#offset} by the number of bytes
     *  prepended if omitted.
     * @returns {!ByteBuffer} this
     * @expose
     * @see ByteBuffer#prepend
     */ ByteBufferPrototype.prependTo = function(target, offset) {
        target.prepend(this, offset);
        return this;
    };
    /**
     * Prints debug information about this ByteBuffer's contents.
     * @param {function(string)=} out Output function to call, defaults to console.log
     * @expose
     */ ByteBufferPrototype.printDebug = function(out) {
        if (typeof out !== "function") out = console.log.bind(console);
        out(this.toString() + "\n" + "-------------------------------------------------------------------\n" + this.toDebug(/* columns */ true));
    };
    /**
     * Gets the number of remaining readable bytes. Contents are the bytes between {@link ByteBuffer#offset} and
     *  {@link ByteBuffer#limit}, so this returns `limit - offset`.
     * @returns {number} Remaining readable bytes. May be negative if `offset > limit`.
     * @expose
     */ ByteBufferPrototype.remaining = function() {
        return this.limit - this.offset;
    };
    /**
     * Resets this ByteBuffer's {@link ByteBuffer#offset}. If an offset has been marked through {@link ByteBuffer#mark}
     *  before, `offset` will be set to {@link ByteBuffer#markedOffset}, which will then be discarded. If no offset has been
     *  marked, sets `offset = 0`.
     * @returns {!ByteBuffer} this
     * @see ByteBuffer#mark
     * @expose
     */ ByteBufferPrototype.reset = function() {
        if (this.markedOffset >= 0) {
            this.offset = this.markedOffset;
            this.markedOffset = -1;
        } else this.offset = 0;
        return this;
    };
    /**
     * Resizes this ByteBuffer to be backed by a buffer of at least the given capacity. Will do nothing if already that
     *  large or larger.
     * @param {number} capacity Capacity required
     * @returns {!ByteBuffer} this
     * @throws {TypeError} If `capacity` is not a number
     * @throws {RangeError} If `capacity < 0`
     * @expose
     */ ByteBufferPrototype.resize = function(capacity) {
        if (!this.noAssert) {
            if (typeof capacity !== "number" || capacity % 1 !== 0) throw TypeError("Illegal capacity: " + capacity + " (not an integer)");
            capacity |= 0;
            if (capacity < 0) throw RangeError("Illegal capacity: 0 <= " + capacity);
        }
        if (this.buffer.byteLength < capacity) {
            var buffer = new ArrayBuffer(capacity);
            var view = new Uint8Array(buffer);
            view.set(this.view);
            this.buffer = buffer;
            this.view = view;
        }
        return this;
    };
    /**
     * Reverses this ByteBuffer's contents.
     * @param {number=} begin Offset to start at, defaults to {@link ByteBuffer#offset}
     * @param {number=} end Offset to end at, defaults to {@link ByteBuffer#limit}
     * @returns {!ByteBuffer} this
     * @expose
     */ ByteBufferPrototype.reverse = function(begin, end) {
        if (typeof begin === "undefined") begin = this.offset;
        if (typeof end === "undefined") end = this.limit;
        if (!this.noAssert) {
            if (typeof begin !== "number" || begin % 1 !== 0) throw TypeError("Illegal begin: Not an integer");
            begin >>>= 0;
            if (typeof end !== "number" || end % 1 !== 0) throw TypeError("Illegal end: Not an integer");
            end >>>= 0;
            if (begin < 0 || begin > end || end > this.buffer.byteLength) throw RangeError("Illegal range: 0 <= " + begin + " <= " + end + " <= " + this.buffer.byteLength);
        }
        if (begin === end) return this; // Nothing to reverse
        Array.prototype.reverse.call(this.view.subarray(begin, end));
        return this;
    };
    /**
     * Skips the next `length` bytes. This will just advance
     * @param {number} length Number of bytes to skip. May also be negative to move the offset back.
     * @returns {!ByteBuffer} this
     * @expose
     */ ByteBufferPrototype.skip = function(length) {
        if (!this.noAssert) {
            if (typeof length !== "number" || length % 1 !== 0) throw TypeError("Illegal length: " + length + " (not an integer)");
            length |= 0;
        }
        var offset = this.offset + length;
        if (!this.noAssert) {
            if (offset < 0 || offset > this.buffer.byteLength) throw RangeError("Illegal length: 0 <= " + this.offset + " + " + length + " <= " + this.buffer.byteLength);
        }
        this.offset = offset;
        return this;
    };
    /**
     * Slices this ByteBuffer by creating a cloned instance with `offset = begin` and `limit = end`.
     * @param {number=} begin Begin offset, defaults to {@link ByteBuffer#offset}.
     * @param {number=} end End offset, defaults to {@link ByteBuffer#limit}.
     * @returns {!ByteBuffer} Clone of this ByteBuffer with slicing applied, backed by the same {@link ByteBuffer#buffer}
     * @expose
     */ ByteBufferPrototype.slice = function(begin, end) {
        if (typeof begin === "undefined") begin = this.offset;
        if (typeof end === "undefined") end = this.limit;
        if (!this.noAssert) {
            if (typeof begin !== "number" || begin % 1 !== 0) throw TypeError("Illegal begin: Not an integer");
            begin >>>= 0;
            if (typeof end !== "number" || end % 1 !== 0) throw TypeError("Illegal end: Not an integer");
            end >>>= 0;
            if (begin < 0 || begin > end || end > this.buffer.byteLength) throw RangeError("Illegal range: 0 <= " + begin + " <= " + end + " <= " + this.buffer.byteLength);
        }
        var bb = this.clone();
        bb.offset = begin;
        bb.limit = end;
        return bb;
    };
    /**
     * Returns a copy of the backing buffer that contains this ByteBuffer's contents. Contents are the bytes between
     *  {@link ByteBuffer#offset} and {@link ByteBuffer#limit}.
     * @param {boolean=} forceCopy If `true` returns a copy, otherwise returns a view referencing the same memory if
     *  possible. Defaults to `false`
     * @returns {!ArrayBuffer} Contents as an ArrayBuffer
     * @expose
     */ ByteBufferPrototype.toBuffer = function(forceCopy) {
        var offset = this.offset, limit = this.limit;
        if (!this.noAssert) {
            if (typeof offset !== "number" || offset % 1 !== 0) throw TypeError("Illegal offset: Not an integer");
            offset >>>= 0;
            if (typeof limit !== "number" || limit % 1 !== 0) throw TypeError("Illegal limit: Not an integer");
            limit >>>= 0;
            if (offset < 0 || offset > limit || limit > this.buffer.byteLength) throw RangeError("Illegal range: 0 <= " + offset + " <= " + limit + " <= " + this.buffer.byteLength);
        }
        // NOTE: It's not possible to have another ArrayBuffer reference the same memory as the backing buffer. This is
        // possible with Uint8Array#subarray only, but we have to return an ArrayBuffer by contract. So:
        if (!forceCopy && offset === 0 && limit === this.buffer.byteLength) return this.buffer;
        if (offset === limit) return EMPTY_BUFFER;
        var buffer = new ArrayBuffer(limit - offset);
        new Uint8Array(buffer).set(new Uint8Array(this.buffer).subarray(offset, limit), 0);
        return buffer;
    };
    /**
     * Returns a raw buffer compacted to contain this ByteBuffer's contents. Contents are the bytes between
     *  {@link ByteBuffer#offset} and {@link ByteBuffer#limit}. This is an alias of {@link ByteBuffer#toBuffer}.
     * @function
     * @param {boolean=} forceCopy If `true` returns a copy, otherwise returns a view referencing the same memory.
     *  Defaults to `false`
     * @returns {!ArrayBuffer} Contents as an ArrayBuffer
     * @expose
     */ ByteBufferPrototype.toArrayBuffer = ByteBufferPrototype.toBuffer;
    /**
     * Converts the ByteBuffer's contents to a string.
     * @param {string=} encoding Output encoding. Returns an informative string representation if omitted but also allows
     *  direct conversion to "utf8", "hex", "base64" and "binary" encoding. "debug" returns a hex representation with
     *  highlighted offsets.
     * @param {number=} begin Offset to begin at, defaults to {@link ByteBuffer#offset}
     * @param {number=} end Offset to end at, defaults to {@link ByteBuffer#limit}
     * @returns {string} String representation
     * @throws {Error} If `encoding` is invalid
     * @expose
     */ ByteBufferPrototype.toString = function(encoding, begin, end) {
        if (typeof encoding === "undefined") return "ByteBufferAB(offset=" + this.offset + ",markedOffset=" + this.markedOffset + ",limit=" + this.limit + ",capacity=" + this.capacity() + ")";
        if (typeof encoding === "number") encoding = "utf8", begin = encoding, end = begin;
        switch(encoding){
            case "utf8":
                return this.toUTF8(begin, end);
            case "base64":
                return this.toBase64(begin, end);
            case "hex":
                return this.toHex(begin, end);
            case "binary":
                return this.toBinary(begin, end);
            case "debug":
                return this.toDebug();
            case "columns":
                return this.toColumns();
            default:
                throw Error("Unsupported encoding: " + encoding);
        }
    };
    // lxiv-embeddable
    /**
     * lxiv-embeddable (c) 2014 Daniel Wirtz <dcode@dcode.io>
     * Released under the Apache License, Version 2.0
     * see: https://github.com/dcodeIO/lxiv for details
     */ var lxiv = function() {
        "use strict";
        /**
         * lxiv namespace.
         * @type {!Object.<string,*>}
         * @exports lxiv
         */ var lxiv = {};
        /**
         * Character codes for output.
         * @type {!Array.<number>}
         * @inner
         */ var aout = [
            65,
            66,
            67,
            68,
            69,
            70,
            71,
            72,
            73,
            74,
            75,
            76,
            77,
            78,
            79,
            80,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            89,
            90,
            97,
            98,
            99,
            100,
            101,
            102,
            103,
            104,
            105,
            106,
            107,
            108,
            109,
            110,
            111,
            112,
            113,
            114,
            115,
            116,
            117,
            118,
            119,
            120,
            121,
            122,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            43,
            47
        ];
        /**
         * Character codes for input.
         * @type {!Array.<number>}
         * @inner
         */ var ain = [];
        for(var i = 0, k = aout.length; i < k; ++i)ain[aout[i]] = i;
        /**
         * Encodes bytes to base64 char codes.
         * @param {!function():number|null} src Bytes source as a function returning the next byte respectively `null` if
         *  there are no more bytes left.
         * @param {!function(number)} dst Characters destination as a function successively called with each encoded char
         *  code.
         */ lxiv.encode = function(src, dst) {
            var b, t;
            while((b = src()) !== null){
                dst(aout[b >> 2 & 0x3f]);
                t = (b & 0x3) << 4;
                if ((b = src()) !== null) {
                    t |= b >> 4 & 0xf;
                    dst(aout[(t | b >> 4 & 0xf) & 0x3f]);
                    t = (b & 0xf) << 2;
                    if ((b = src()) !== null) dst(aout[(t | b >> 6 & 0x3) & 0x3f]), dst(aout[b & 0x3f]);
                    else dst(aout[t & 0x3f]), dst(61);
                } else dst(aout[t & 0x3f]), dst(61), dst(61);
            }
        };
        /**
         * Decodes base64 char codes to bytes.
         * @param {!function():number|null} src Characters source as a function returning the next char code respectively
         *  `null` if there are no more characters left.
         * @param {!function(number)} dst Bytes destination as a function successively called with the next byte.
         * @throws {Error} If a character code is invalid
         */ lxiv.decode = function(src, dst) {
            var c, t1, t2;
            function fail(c) {
                throw Error("Illegal character code: " + c);
            }
            while((c = src()) !== null){
                t1 = ain[c];
                if (typeof t1 === "undefined") fail(c);
                if ((c = src()) !== null) {
                    t2 = ain[c];
                    if (typeof t2 === "undefined") fail(c);
                    dst(t1 << 2 >>> 0 | (t2 & 0x30) >> 4);
                    if ((c = src()) !== null) {
                        t1 = ain[c];
                        if (typeof t1 === "undefined") {
                            if (c === 61) break;
                            else fail(c);
                        }
                        dst((t2 & 0xf) << 4 >>> 0 | (t1 & 0x3c) >> 2);
                        if ((c = src()) !== null) {
                            t2 = ain[c];
                            if (typeof t2 === "undefined") {
                                if (c === 61) break;
                                else fail(c);
                            }
                            dst((t1 & 0x3) << 6 >>> 0 | t2);
                        }
                    }
                }
            }
        };
        /**
         * Tests if a string is valid base64.
         * @param {string} str String to test
         * @returns {boolean} `true` if valid, otherwise `false`
         */ lxiv.test = function(str) {
            return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(str);
        };
        return lxiv;
    }();
    // encodings/base64
    /**
     * Encodes this ByteBuffer's contents to a base64 encoded string.
     * @param {number=} begin Offset to begin at, defaults to {@link ByteBuffer#offset}.
     * @param {number=} end Offset to end at, defaults to {@link ByteBuffer#limit}.
     * @returns {string} Base64 encoded string
     * @throws {RangeError} If `begin` or `end` is out of bounds
     * @expose
     */ ByteBufferPrototype.toBase64 = function(begin, end) {
        if (typeof begin === "undefined") begin = this.offset;
        if (typeof end === "undefined") end = this.limit;
        begin = begin | 0;
        end = end | 0;
        if (begin < 0 || end > this.capacity || begin > end) throw RangeError("begin, end");
        var sd;
        lxiv.encode((function() {
            return begin < end ? this.view[begin++] : null;
        }).bind(this), sd = stringDestination());
        return sd();
    };
    /**
     * Decodes a base64 encoded string to a ByteBuffer.
     * @param {string} str String to decode
     * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
     *  {@link ByteBuffer.DEFAULT_ENDIAN}.
     * @returns {!ByteBuffer} ByteBuffer
     * @expose
     */ ByteBuffer.fromBase64 = function(str, littleEndian) {
        if (typeof str !== "string") throw TypeError("str");
        var bb = new ByteBuffer(str.length / 4 * 3, littleEndian), i = 0;
        lxiv.decode(stringSource(str), function(b) {
            bb.view[i++] = b;
        });
        bb.limit = i;
        return bb;
    };
    /**
     * Encodes a binary string to base64 like `window.btoa` does.
     * @param {string} str Binary string
     * @returns {string} Base64 encoded string
     * @see https://developer.mozilla.org/en-US/docs/Web/API/Window.btoa
     * @expose
     */ ByteBuffer.btoa = function(str) {
        return ByteBuffer.fromBinary(str).toBase64();
    };
    /**
     * Decodes a base64 encoded string to binary like `window.atob` does.
     * @param {string} b64 Base64 encoded string
     * @returns {string} Binary string
     * @see https://developer.mozilla.org/en-US/docs/Web/API/Window.atob
     * @expose
     */ ByteBuffer.atob = function(b64) {
        return ByteBuffer.fromBase64(b64).toBinary();
    };
    // encodings/binary
    /**
     * Encodes this ByteBuffer to a binary encoded string, that is using only characters 0x00-0xFF as bytes.
     * @param {number=} begin Offset to begin at. Defaults to {@link ByteBuffer#offset}.
     * @param {number=} end Offset to end at. Defaults to {@link ByteBuffer#limit}.
     * @returns {string} Binary encoded string
     * @throws {RangeError} If `offset > limit`
     * @expose
     */ ByteBufferPrototype.toBinary = function(begin, end) {
        if (typeof begin === "undefined") begin = this.offset;
        if (typeof end === "undefined") end = this.limit;
        begin |= 0;
        end |= 0;
        if (begin < 0 || end > this.capacity() || begin > end) throw RangeError("begin, end");
        if (begin === end) return "";
        var chars = [], parts = [];
        while(begin < end){
            chars.push(this.view[begin++]);
            if (chars.length >= 1024) parts.push(String.fromCharCode.apply(String, chars)), chars = [];
        }
        return parts.join("") + String.fromCharCode.apply(String, chars);
    };
    /**
     * Decodes a binary encoded string, that is using only characters 0x00-0xFF as bytes, to a ByteBuffer.
     * @param {string} str String to decode
     * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
     *  {@link ByteBuffer.DEFAULT_ENDIAN}.
     * @returns {!ByteBuffer} ByteBuffer
     * @expose
     */ ByteBuffer.fromBinary = function(str, littleEndian) {
        if (typeof str !== "string") throw TypeError("str");
        var i = 0, k = str.length, charCode, bb = new ByteBuffer(k, littleEndian);
        while(i < k){
            charCode = str.charCodeAt(i);
            if (charCode > 0xff) throw RangeError("illegal char code: " + charCode);
            bb.view[i++] = charCode;
        }
        bb.limit = k;
        return bb;
    };
    // encodings/debug
    /**
     * Encodes this ByteBuffer to a hex encoded string with marked offsets. Offset symbols are:
     * * `<` : offset,
     * * `'` : markedOffset,
     * * `>` : limit,
     * * `|` : offset and limit,
     * * `[` : offset and markedOffset,
     * * `]` : markedOffset and limit,
     * * `!` : offset, markedOffset and limit
     * @param {boolean=} columns If `true` returns two columns hex + ascii, defaults to `false`
     * @returns {string|!Array.<string>} Debug string or array of lines if `asArray = true`
     * @expose
     * @example `>00'01 02<03` contains four bytes with `limit=0, markedOffset=1, offset=3`
     * @example `00[01 02 03>` contains four bytes with `offset=markedOffset=1, limit=4`
     * @example `00|01 02 03` contains four bytes with `offset=limit=1, markedOffset=-1`
     * @example `|` contains zero bytes with `offset=limit=0, markedOffset=-1`
     */ ByteBufferPrototype.toDebug = function(columns) {
        var i = -1, k = this.buffer.byteLength, b, hex = "", asc = "", out = "";
        while(i < k){
            if (i !== -1) {
                b = this.view[i];
                if (b < 0x10) hex += "0" + b.toString(16).toUpperCase();
                else hex += b.toString(16).toUpperCase();
                if (columns) asc += b > 32 && b < 127 ? String.fromCharCode(b) : ".";
            }
            ++i;
            if (columns) {
                if (i > 0 && i % 16 === 0 && i !== k) {
                    while(hex.length < 51)hex += " ";
                    out += hex + asc + "\n";
                    hex = asc = "";
                }
            }
            if (i === this.offset && i === this.limit) hex += i === this.markedOffset ? "!" : "|";
            else if (i === this.offset) hex += i === this.markedOffset ? "[" : "<";
            else if (i === this.limit) hex += i === this.markedOffset ? "]" : ">";
            else hex += i === this.markedOffset ? "'" : columns || i !== 0 && i !== k ? " " : "";
        }
        if (columns && hex !== " ") {
            while(hex.length < 51)hex += " ";
            out += hex + asc + "\n";
        }
        return columns ? out : hex;
    };
    /**
     * Decodes a hex encoded string with marked offsets to a ByteBuffer.
     * @param {string} str Debug string to decode (not be generated with `columns = true`)
     * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
     *  {@link ByteBuffer.DEFAULT_ENDIAN}.
     * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to
     *  {@link ByteBuffer.DEFAULT_NOASSERT}.
     * @returns {!ByteBuffer} ByteBuffer
     * @expose
     * @see ByteBuffer#toDebug
     */ ByteBuffer.fromDebug = function(str, littleEndian, noAssert) {
        var k = str.length, bb = new ByteBuffer((k + 1) / 3 | 0, littleEndian, noAssert);
        var i = 0, j = 0, ch, b, rs = false, ho = false, hm = false, hl = false, fail = false;
        while(i < k){
            switch(ch = str.charAt(i++)){
                case "!":
                    if (!noAssert) {
                        if (ho || hm || hl) {
                            fail = true;
                            break;
                        }
                        ho = hm = hl = true;
                    }
                    bb.offset = bb.markedOffset = bb.limit = j;
                    rs = false;
                    break;
                case "|":
                    if (!noAssert) {
                        if (ho || hl) {
                            fail = true;
                            break;
                        }
                        ho = hl = true;
                    }
                    bb.offset = bb.limit = j;
                    rs = false;
                    break;
                case "[":
                    if (!noAssert) {
                        if (ho || hm) {
                            fail = true;
                            break;
                        }
                        ho = hm = true;
                    }
                    bb.offset = bb.markedOffset = j;
                    rs = false;
                    break;
                case "<":
                    if (!noAssert) {
                        if (ho) {
                            fail = true;
                            break;
                        }
                        ho = true;
                    }
                    bb.offset = j;
                    rs = false;
                    break;
                case "]":
                    if (!noAssert) {
                        if (hl || hm) {
                            fail = true;
                            break;
                        }
                        hl = hm = true;
                    }
                    bb.limit = bb.markedOffset = j;
                    rs = false;
                    break;
                case ">":
                    if (!noAssert) {
                        if (hl) {
                            fail = true;
                            break;
                        }
                        hl = true;
                    }
                    bb.limit = j;
                    rs = false;
                    break;
                case "'":
                    if (!noAssert) {
                        if (hm) {
                            fail = true;
                            break;
                        }
                        hm = true;
                    }
                    bb.markedOffset = j;
                    rs = false;
                    break;
                case " ":
                    rs = false;
                    break;
                default:
                    if (!noAssert) {
                        if (rs) {
                            fail = true;
                            break;
                        }
                    }
                    b = parseInt(ch + str.charAt(i++), 16);
                    if (!noAssert) {
                        if (isNaN(b) || b < 0 || b > 255) throw TypeError("Illegal str: Not a debug encoded string");
                    }
                    bb.view[j++] = b;
                    rs = true;
            }
            if (fail) throw TypeError("Illegal str: Invalid symbol at " + i);
        }
        if (!noAssert) {
            if (!ho || !hl) throw TypeError("Illegal str: Missing offset or limit");
            if (j < bb.buffer.byteLength) throw TypeError("Illegal str: Not a debug encoded string (is it hex?) " + j + " < " + k);
        }
        return bb;
    };
    // encodings/hex
    /**
     * Encodes this ByteBuffer's contents to a hex encoded string.
     * @param {number=} begin Offset to begin at. Defaults to {@link ByteBuffer#offset}.
     * @param {number=} end Offset to end at. Defaults to {@link ByteBuffer#limit}.
     * @returns {string} Hex encoded string
     * @expose
     */ ByteBufferPrototype.toHex = function(begin, end) {
        begin = typeof begin === "undefined" ? this.offset : begin;
        end = typeof end === "undefined" ? this.limit : end;
        if (!this.noAssert) {
            if (typeof begin !== "number" || begin % 1 !== 0) throw TypeError("Illegal begin: Not an integer");
            begin >>>= 0;
            if (typeof end !== "number" || end % 1 !== 0) throw TypeError("Illegal end: Not an integer");
            end >>>= 0;
            if (begin < 0 || begin > end || end > this.buffer.byteLength) throw RangeError("Illegal range: 0 <= " + begin + " <= " + end + " <= " + this.buffer.byteLength);
        }
        var out = new Array(end - begin), b;
        while(begin < end){
            b = this.view[begin++];
            if (b < 0x10) out.push("0", b.toString(16));
            else out.push(b.toString(16));
        }
        return out.join("");
    };
    /**
     * Decodes a hex encoded string to a ByteBuffer.
     * @param {string} str String to decode
     * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
     *  {@link ByteBuffer.DEFAULT_ENDIAN}.
     * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to
     *  {@link ByteBuffer.DEFAULT_NOASSERT}.
     * @returns {!ByteBuffer} ByteBuffer
     * @expose
     */ ByteBuffer.fromHex = function(str, littleEndian, noAssert) {
        if (!noAssert) {
            if (typeof str !== "string") throw TypeError("Illegal str: Not a string");
            if (str.length % 2 !== 0) throw TypeError("Illegal str: Length not a multiple of 2");
        }
        var k = str.length, bb = new ByteBuffer(k / 2 | 0, littleEndian), b;
        for(var i = 0, j = 0; i < k; i += 2){
            b = parseInt(str.substring(i, i + 2), 16);
            if (!noAssert) {
                if (!isFinite(b) || b < 0 || b > 255) throw TypeError("Illegal str: Contains non-hex characters");
            }
            bb.view[j++] = b;
        }
        bb.limit = j;
        return bb;
    };
    // utfx-embeddable
    /**
     * utfx-embeddable (c) 2014 Daniel Wirtz <dcode@dcode.io>
     * Released under the Apache License, Version 2.0
     * see: https://github.com/dcodeIO/utfx for details
     */ var utfx = function() {
        "use strict";
        /**
         * utfx namespace.
         * @inner
         * @type {!Object.<string,*>}
         */ var utfx = {};
        /**
         * Maximum valid code point.
         * @type {number}
         * @const
         */ utfx.MAX_CODEPOINT = 0x10FFFF;
        /**
         * Encodes UTF8 code points to UTF8 bytes.
         * @param {(!function():number|null) | number} src Code points source, either as a function returning the next code point
         *  respectively `null` if there are no more code points left or a single numeric code point.
         * @param {!function(number)} dst Bytes destination as a function successively called with the next byte
         */ utfx.encodeUTF8 = function(src, dst) {
            var cp = null;
            if (typeof src === "number") cp = src, src = function() {
                return null;
            };
            while(cp !== null || (cp = src()) !== null){
                if (cp < 0x80) dst(cp & 0x7F);
                else if (cp < 0x800) dst(cp >> 6 & 0x1F | 0xC0), dst(cp & 0x3F | 0x80);
                else if (cp < 0x10000) dst(cp >> 12 & 0x0F | 0xE0), dst(cp >> 6 & 0x3F | 0x80), dst(cp & 0x3F | 0x80);
                else dst(cp >> 18 & 0x07 | 0xF0), dst(cp >> 12 & 0x3F | 0x80), dst(cp >> 6 & 0x3F | 0x80), dst(cp & 0x3F | 0x80);
                cp = null;
            }
        };
        /**
         * Decodes UTF8 bytes to UTF8 code points.
         * @param {!function():number|null} src Bytes source as a function returning the next byte respectively `null` if there
         *  are no more bytes left.
         * @param {!function(number)} dst Code points destination as a function successively called with each decoded code point.
         * @throws {RangeError} If a starting byte is invalid in UTF8
         * @throws {Error} If the last sequence is truncated. Has an array property `bytes` holding the
         *  remaining bytes.
         */ utfx.decodeUTF8 = function(src, dst) {
            var a, b, c, d, fail = function(b) {
                b = b.slice(0, b.indexOf(null));
                var err = Error(b.toString());
                err.name = "TruncatedError";
                err["bytes"] = b;
                throw err;
            };
            while((a = src()) !== null){
                if ((a & 0x80) === 0) dst(a);
                else if ((a & 0xE0) === 0xC0) (b = src()) === null && fail([
                    a,
                    b
                ]), dst((a & 0x1F) << 6 | b & 0x3F);
                else if ((a & 0xF0) === 0xE0) ((b = src()) === null || (c = src()) === null) && fail([
                    a,
                    b,
                    c
                ]), dst((a & 0x0F) << 12 | (b & 0x3F) << 6 | c & 0x3F);
                else if ((a & 0xF8) === 0xF0) ((b = src()) === null || (c = src()) === null || (d = src()) === null) && fail([
                    a,
                    b,
                    c,
                    d
                ]), dst((a & 0x07) << 18 | (b & 0x3F) << 12 | (c & 0x3F) << 6 | d & 0x3F);
                else throw RangeError("Illegal starting byte: " + a);
            }
        };
        /**
         * Converts UTF16 characters to UTF8 code points.
         * @param {!function():number|null} src Characters source as a function returning the next char code respectively
         *  `null` if there are no more characters left.
         * @param {!function(number)} dst Code points destination as a function successively called with each converted code
         *  point.
         */ utfx.UTF16toUTF8 = function(src, dst) {
            var c1, c2 = null;
            while(true){
                if ((c1 = c2 !== null ? c2 : src()) === null) break;
                if (c1 >= 0xD800 && c1 <= 0xDFFF) {
                    if ((c2 = src()) !== null) {
                        if (c2 >= 0xDC00 && c2 <= 0xDFFF) {
                            dst((c1 - 0xD800) * 0x400 + c2 - 0xDC00 + 0x10000);
                            c2 = null;
                            continue;
                        }
                    }
                }
                dst(c1);
            }
            if (c2 !== null) dst(c2);
        };
        /**
         * Converts UTF8 code points to UTF16 characters.
         * @param {(!function():number|null) | number} src Code points source, either as a function returning the next code point
         *  respectively `null` if there are no more code points left or a single numeric code point.
         * @param {!function(number)} dst Characters destination as a function successively called with each converted char code.
         * @throws {RangeError} If a code point is out of range
         */ utfx.UTF8toUTF16 = function(src, dst) {
            var cp = null;
            if (typeof src === "number") cp = src, src = function() {
                return null;
            };
            while(cp !== null || (cp = src()) !== null){
                if (cp <= 0xFFFF) dst(cp);
                else cp -= 0x10000, dst((cp >> 10) + 0xD800), dst(cp % 0x400 + 0xDC00);
                cp = null;
            }
        };
        /**
         * Converts and encodes UTF16 characters to UTF8 bytes.
         * @param {!function():number|null} src Characters source as a function returning the next char code respectively `null`
         *  if there are no more characters left.
         * @param {!function(number)} dst Bytes destination as a function successively called with the next byte.
         */ utfx.encodeUTF16toUTF8 = function(src, dst) {
            utfx.UTF16toUTF8(src, function(cp) {
                utfx.encodeUTF8(cp, dst);
            });
        };
        /**
         * Decodes and converts UTF8 bytes to UTF16 characters.
         * @param {!function():number|null} src Bytes source as a function returning the next byte respectively `null` if there
         *  are no more bytes left.
         * @param {!function(number)} dst Characters destination as a function successively called with each converted char code.
         * @throws {RangeError} If a starting byte is invalid in UTF8
         * @throws {Error} If the last sequence is truncated. Has an array property `bytes` holding the remaining bytes.
         */ utfx.decodeUTF8toUTF16 = function(src, dst) {
            utfx.decodeUTF8(src, function(cp) {
                utfx.UTF8toUTF16(cp, dst);
            });
        };
        /**
         * Calculates the byte length of an UTF8 code point.
         * @param {number} cp UTF8 code point
         * @returns {number} Byte length
         */ utfx.calculateCodePoint = function(cp) {
            return cp < 0x80 ? 1 : cp < 0x800 ? 2 : cp < 0x10000 ? 3 : 4;
        };
        /**
         * Calculates the number of UTF8 bytes required to store UTF8 code points.
         * @param {(!function():number|null)} src Code points source as a function returning the next code point respectively
         *  `null` if there are no more code points left.
         * @returns {number} The number of UTF8 bytes required
         */ utfx.calculateUTF8 = function(src) {
            var cp, l = 0;
            while((cp = src()) !== null)l += cp < 0x80 ? 1 : cp < 0x800 ? 2 : cp < 0x10000 ? 3 : 4;
            return l;
        };
        /**
         * Calculates the number of UTF8 code points respectively UTF8 bytes required to store UTF16 char codes.
         * @param {(!function():number|null)} src Characters source as a function returning the next char code respectively
         *  `null` if there are no more characters left.
         * @returns {!Array.<number>} The number of UTF8 code points at index 0 and the number of UTF8 bytes required at index 1.
         */ utfx.calculateUTF16asUTF8 = function(src) {
            var n = 0, l = 0;
            utfx.UTF16toUTF8(src, function(cp) {
                ++n;
                l += cp < 0x80 ? 1 : cp < 0x800 ? 2 : cp < 0x10000 ? 3 : 4;
            });
            return [
                n,
                l
            ];
        };
        return utfx;
    }();
    // encodings/utf8
    /**
     * Encodes this ByteBuffer's contents between {@link ByteBuffer#offset} and {@link ByteBuffer#limit} to an UTF8 encoded
     *  string.
     * @returns {string} Hex encoded string
     * @throws {RangeError} If `offset > limit`
     * @expose
     */ ByteBufferPrototype.toUTF8 = function(begin, end) {
        if (typeof begin === "undefined") begin = this.offset;
        if (typeof end === "undefined") end = this.limit;
        if (!this.noAssert) {
            if (typeof begin !== "number" || begin % 1 !== 0) throw TypeError("Illegal begin: Not an integer");
            begin >>>= 0;
            if (typeof end !== "number" || end % 1 !== 0) throw TypeError("Illegal end: Not an integer");
            end >>>= 0;
            if (begin < 0 || begin > end || end > this.buffer.byteLength) throw RangeError("Illegal range: 0 <= " + begin + " <= " + end + " <= " + this.buffer.byteLength);
        }
        var sd;
        try {
            utfx.decodeUTF8toUTF16((function() {
                return begin < end ? this.view[begin++] : null;
            }).bind(this), sd = stringDestination());
        } catch (e) {
            if (begin !== end) throw RangeError("Illegal range: Truncated data, " + begin + " != " + end);
        }
        return sd();
    };
    /**
     * Decodes an UTF8 encoded string to a ByteBuffer.
     * @param {string} str String to decode
     * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
     *  {@link ByteBuffer.DEFAULT_ENDIAN}.
     * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to
     *  {@link ByteBuffer.DEFAULT_NOASSERT}.
     * @returns {!ByteBuffer} ByteBuffer
     * @expose
     */ ByteBuffer.fromUTF8 = function(str, littleEndian, noAssert) {
        if (!noAssert) {
            if (typeof str !== "string") throw TypeError("Illegal str: Not a string");
        }
        var bb = new ByteBuffer(utfx.calculateUTF16asUTF8(stringSource(str), true)[1], littleEndian, noAssert), i = 0;
        utfx.encodeUTF16toUTF8(stringSource(str), function(b) {
            bb.view[i++] = b;
        });
        bb.limit = i;
        return bb;
    };
    return ByteBuffer;
});

},{"704c3fe1485416e9":"bf0yc"}],"bf0yc":[function(require,module,exports) {
/*
 Copyright 2013 Daniel Wirtz <dcode@dcode.io>
 Copyright 2009 The Closure Library Authors. All Rights Reserved.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS-IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */ /**
 * @license long.js (c) 2013 Daniel Wirtz <dcode@dcode.io>
 * Released under the Apache License, Version 2.0
 * see: https://github.com/dcodeIO/long.js for details
 */ (function(global, factory) {
    /* AMD */ if (typeof define === "function" && define["amd"]) define([], factory);
    else if (module && module["exports"]) module["exports"] = factory();
    else (global["dcodeIO"] = global["dcodeIO"] || {})["Long"] = factory();
})(this, function() {
    "use strict";
    /**
     * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.
     *  See the from* functions below for more convenient ways of constructing Longs.
     * @exports Long
     * @class A Long class for representing a 64 bit two's-complement integer value.
     * @param {number} low The low (signed) 32 bits of the long
     * @param {number} high The high (signed) 32 bits of the long
     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed
     * @constructor
     */ function Long(low, high, unsigned) {
        /**
         * The low 32 bits as a signed value.
         * @type {number}
         */ this.low = low | 0;
        /**
         * The high 32 bits as a signed value.
         * @type {number}
         */ this.high = high | 0;
        /**
         * Whether unsigned or not.
         * @type {boolean}
         */ this.unsigned = !!unsigned;
    }
    // The internal representation of a long is the two given signed, 32-bit values.
    // We use 32-bit pieces because these are the size of integers on which
    // Javascript performs bit-operations.  For operations like addition and
    // multiplication, we split each number into 16 bit pieces, which can easily be
    // multiplied within Javascript's floating-point representation without overflow
    // or change in sign.
    //
    // In the algorithms below, we frequently reduce the negative case to the
    // positive case by negating the input(s) and then post-processing the result.
    // Note that we must ALWAYS check specially whether those values are MIN_VALUE
    // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
    // a positive number, it overflows back into a negative).  Not handling this
    // case would often result in infinite recursion.
    //
    // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*
    // methods on which they depend.
    /**
     * An indicator used to reliably determine if an object is a Long or not.
     * @type {boolean}
     * @const
     * @private
     */ Long.prototype.__isLong__;
    Object.defineProperty(Long.prototype, "__isLong__", {
        value: true,
        enumerable: false,
        configurable: false
    });
    /**
     * @function
     * @param {*} obj Object
     * @returns {boolean}
     * @inner
     */ function isLong(obj) {
        return (obj && obj["__isLong__"]) === true;
    }
    /**
     * Tests if the specified object is a Long.
     * @function
     * @param {*} obj Object
     * @returns {boolean}
     */ Long.isLong = isLong;
    /**
     * A cache of the Long representations of small integer values.
     * @type {!Object}
     * @inner
     */ var INT_CACHE = {};
    /**
     * A cache of the Long representations of small unsigned integer values.
     * @type {!Object}
     * @inner
     */ var UINT_CACHE = {};
    /**
     * @param {number} value
     * @param {boolean=} unsigned
     * @returns {!Long}
     * @inner
     */ function fromInt(value, unsigned) {
        var obj, cachedObj, cache;
        if (unsigned) {
            value >>>= 0;
            if (cache = 0 <= value && value < 256) {
                cachedObj = UINT_CACHE[value];
                if (cachedObj) return cachedObj;
            }
            obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);
            if (cache) UINT_CACHE[value] = obj;
            return obj;
        } else {
            value |= 0;
            if (cache = -128 <= value && value < 128) {
                cachedObj = INT_CACHE[value];
                if (cachedObj) return cachedObj;
            }
            obj = fromBits(value, value < 0 ? -1 : 0, false);
            if (cache) INT_CACHE[value] = obj;
            return obj;
        }
    }
    /**
     * Returns a Long representing the given 32 bit integer value.
     * @function
     * @param {number} value The 32 bit integer in question
     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed
     * @returns {!Long} The corresponding Long value
     */ Long.fromInt = fromInt;
    /**
     * @param {number} value
     * @param {boolean=} unsigned
     * @returns {!Long}
     * @inner
     */ function fromNumber(value, unsigned) {
        if (isNaN(value) || !isFinite(value)) return unsigned ? UZERO : ZERO;
        if (unsigned) {
            if (value < 0) return UZERO;
            if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;
        } else {
            if (value <= -TWO_PWR_63_DBL) return MIN_VALUE;
            if (value + 1 >= TWO_PWR_63_DBL) return MAX_VALUE;
        }
        if (value < 0) return fromNumber(-value, unsigned).neg();
        return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);
    }
    /**
     * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.
     * @function
     * @param {number} value The number in question
     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed
     * @returns {!Long} The corresponding Long value
     */ Long.fromNumber = fromNumber;
    /**
     * @param {number} lowBits
     * @param {number} highBits
     * @param {boolean=} unsigned
     * @returns {!Long}
     * @inner
     */ function fromBits(lowBits, highBits, unsigned) {
        return new Long(lowBits, highBits, unsigned);
    }
    /**
     * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is
     *  assumed to use 32 bits.
     * @function
     * @param {number} lowBits The low 32 bits
     * @param {number} highBits The high 32 bits
     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed
     * @returns {!Long} The corresponding Long value
     */ Long.fromBits = fromBits;
    /**
     * @function
     * @param {number} base
     * @param {number} exponent
     * @returns {number}
     * @inner
     */ var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)
    /**
     * @param {string} str
     * @param {(boolean|number)=} unsigned
     * @param {number=} radix
     * @returns {!Long}
     * @inner
     */ function fromString(str, unsigned, radix) {
        if (str.length === 0) throw Error("empty string");
        if (str === "NaN" || str === "Infinity" || str === "+Infinity" || str === "-Infinity") return ZERO;
        if (typeof unsigned === "number") // For goog.math.long compatibility
        radix = unsigned, unsigned = false;
        else unsigned = !!unsigned;
        radix = radix || 10;
        if (radix < 2 || 36 < radix) throw RangeError("radix");
        var p;
        if ((p = str.indexOf("-")) > 0) throw Error("interior hyphen");
        else if (p === 0) return fromString(str.substring(1), unsigned, radix).neg();
        // Do several (8) digits each time through the loop, so as to
        // minimize the calls to the very expensive emulated div.
        var radixToPower = fromNumber(pow_dbl(radix, 8));
        var result = ZERO;
        for(var i = 0; i < str.length; i += 8){
            var size = Math.min(8, str.length - i), value = parseInt(str.substring(i, i + size), radix);
            if (size < 8) {
                var power = fromNumber(pow_dbl(radix, size));
                result = result.mul(power).add(fromNumber(value));
            } else {
                result = result.mul(radixToPower);
                result = result.add(fromNumber(value));
            }
        }
        result.unsigned = unsigned;
        return result;
    }
    /**
     * Returns a Long representation of the given string, written using the specified radix.
     * @function
     * @param {string} str The textual representation of the Long
     * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to `false` for signed
     * @param {number=} radix The radix in which the text is written (2-36), defaults to 10
     * @returns {!Long} The corresponding Long value
     */ Long.fromString = fromString;
    /**
     * @function
     * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val
     * @returns {!Long}
     * @inner
     */ function fromValue(val) {
        if (val /* is compatible */  instanceof Long) return val;
        if (typeof val === "number") return fromNumber(val);
        if (typeof val === "string") return fromString(val);
        // Throws for non-objects, converts non-instanceof Long:
        return fromBits(val.low, val.high, val.unsigned);
    }
    /**
     * Converts the specified value to a Long.
     * @function
     * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value
     * @returns {!Long}
     */ Long.fromValue = fromValue;
    // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be
    // no runtime penalty for these.
    /**
     * @type {number}
     * @const
     * @inner
     */ var TWO_PWR_16_DBL = 65536;
    /**
     * @type {number}
     * @const
     * @inner
     */ var TWO_PWR_24_DBL = 16777216;
    /**
     * @type {number}
     * @const
     * @inner
     */ var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;
    /**
     * @type {number}
     * @const
     * @inner
     */ var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;
    /**
     * @type {number}
     * @const
     * @inner
     */ var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;
    /**
     * @type {!Long}
     * @const
     * @inner
     */ var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);
    /**
     * @type {!Long}
     * @inner
     */ var ZERO = fromInt(0);
    /**
     * Signed zero.
     * @type {!Long}
     */ Long.ZERO = ZERO;
    /**
     * @type {!Long}
     * @inner
     */ var UZERO = fromInt(0, true);
    /**
     * Unsigned zero.
     * @type {!Long}
     */ Long.UZERO = UZERO;
    /**
     * @type {!Long}
     * @inner
     */ var ONE = fromInt(1);
    /**
     * Signed one.
     * @type {!Long}
     */ Long.ONE = ONE;
    /**
     * @type {!Long}
     * @inner
     */ var UONE = fromInt(1, true);
    /**
     * Unsigned one.
     * @type {!Long}
     */ Long.UONE = UONE;
    /**
     * @type {!Long}
     * @inner
     */ var NEG_ONE = fromInt(-1);
    /**
     * Signed negative one.
     * @type {!Long}
     */ Long.NEG_ONE = NEG_ONE;
    /**
     * @type {!Long}
     * @inner
     */ var MAX_VALUE = fromBits(-1, 2147483647, false);
    /**
     * Maximum signed value.
     * @type {!Long}
     */ Long.MAX_VALUE = MAX_VALUE;
    /**
     * @type {!Long}
     * @inner
     */ var MAX_UNSIGNED_VALUE = fromBits(-1, -1, true);
    /**
     * Maximum unsigned value.
     * @type {!Long}
     */ Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;
    /**
     * @type {!Long}
     * @inner
     */ var MIN_VALUE = fromBits(0, -2147483648, false);
    /**
     * Minimum signed value.
     * @type {!Long}
     */ Long.MIN_VALUE = MIN_VALUE;
    /**
     * @alias Long.prototype
     * @inner
     */ var LongPrototype = Long.prototype;
    /**
     * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.
     * @returns {number}
     */ LongPrototype.toInt = function toInt() {
        return this.unsigned ? this.low >>> 0 : this.low;
    };
    /**
     * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).
     * @returns {number}
     */ LongPrototype.toNumber = function toNumber() {
        if (this.unsigned) return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);
        return this.high * TWO_PWR_32_DBL + (this.low >>> 0);
    };
    /**
     * Converts the Long to a string written in the specified radix.
     * @param {number=} radix Radix (2-36), defaults to 10
     * @returns {string}
     * @override
     * @throws {RangeError} If `radix` is out of range
     */ LongPrototype.toString = function toString(radix) {
        radix = radix || 10;
        if (radix < 2 || 36 < radix) throw RangeError("radix");
        if (this.isZero()) return "0";
        if (this.isNegative()) {
            if (this.eq(MIN_VALUE)) {
                // We need to change the Long value before it can be negated, so we remove
                // the bottom-most digit in this base and then recurse to do the rest.
                var radixLong = fromNumber(radix), div = this.div(radixLong), rem1 = div.mul(radixLong).sub(this);
                return div.toString(radix) + rem1.toInt().toString(radix);
            } else return "-" + this.neg().toString(radix);
        }
        // Do several (6) digits each time through the loop, so as to
        // minimize the calls to the very expensive emulated div.
        var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned), rem = this;
        var result = "";
        while(true){
            var remDiv = rem.div(radixToPower), intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0, digits = intval.toString(radix);
            rem = remDiv;
            if (rem.isZero()) return digits + result;
            else {
                while(digits.length < 6)digits = "0" + digits;
                result = "" + digits + result;
            }
        }
    };
    /**
     * Gets the high 32 bits as a signed integer.
     * @returns {number} Signed high bits
     */ LongPrototype.getHighBits = function getHighBits() {
        return this.high;
    };
    /**
     * Gets the high 32 bits as an unsigned integer.
     * @returns {number} Unsigned high bits
     */ LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {
        return this.high >>> 0;
    };
    /**
     * Gets the low 32 bits as a signed integer.
     * @returns {number} Signed low bits
     */ LongPrototype.getLowBits = function getLowBits() {
        return this.low;
    };
    /**
     * Gets the low 32 bits as an unsigned integer.
     * @returns {number} Unsigned low bits
     */ LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {
        return this.low >>> 0;
    };
    /**
     * Gets the number of bits needed to represent the absolute value of this Long.
     * @returns {number}
     */ LongPrototype.getNumBitsAbs = function getNumBitsAbs() {
        if (this.isNegative()) return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();
        var val = this.high != 0 ? this.high : this.low;
        for(var bit = 31; bit > 0; bit--)if ((val & 1 << bit) != 0) break;
        return this.high != 0 ? bit + 33 : bit + 1;
    };
    /**
     * Tests if this Long's value equals zero.
     * @returns {boolean}
     */ LongPrototype.isZero = function isZero() {
        return this.high === 0 && this.low === 0;
    };
    /**
     * Tests if this Long's value is negative.
     * @returns {boolean}
     */ LongPrototype.isNegative = function isNegative() {
        return !this.unsigned && this.high < 0;
    };
    /**
     * Tests if this Long's value is positive.
     * @returns {boolean}
     */ LongPrototype.isPositive = function isPositive() {
        return this.unsigned || this.high >= 0;
    };
    /**
     * Tests if this Long's value is odd.
     * @returns {boolean}
     */ LongPrototype.isOdd = function isOdd() {
        return (this.low & 1) === 1;
    };
    /**
     * Tests if this Long's value is even.
     * @returns {boolean}
     */ LongPrototype.isEven = function isEven() {
        return (this.low & 1) === 0;
    };
    /**
     * Tests if this Long's value equals the specified's.
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */ LongPrototype.equals = function equals(other) {
        if (!isLong(other)) other = fromValue(other);
        if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;
        return this.high === other.high && this.low === other.low;
    };
    /**
     * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.
     * @function
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */ LongPrototype.eq = LongPrototype.equals;
    /**
     * Tests if this Long's value differs from the specified's.
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */ LongPrototype.notEquals = function notEquals(other) {
        return !this.eq(/* validates */ other);
    };
    /**
     * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
     * @function
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */ LongPrototype.neq = LongPrototype.notEquals;
    /**
     * Tests if this Long's value is less than the specified's.
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */ LongPrototype.lessThan = function lessThan(other) {
        return this.comp(/* validates */ other) < 0;
    };
    /**
     * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.
     * @function
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */ LongPrototype.lt = LongPrototype.lessThan;
    /**
     * Tests if this Long's value is less than or equal the specified's.
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */ LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {
        return this.comp(/* validates */ other) <= 0;
    };
    /**
     * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
     * @function
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */ LongPrototype.lte = LongPrototype.lessThanOrEqual;
    /**
     * Tests if this Long's value is greater than the specified's.
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */ LongPrototype.greaterThan = function greaterThan(other) {
        return this.comp(/* validates */ other) > 0;
    };
    /**
     * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.
     * @function
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */ LongPrototype.gt = LongPrototype.greaterThan;
    /**
     * Tests if this Long's value is greater than or equal the specified's.
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */ LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {
        return this.comp(/* validates */ other) >= 0;
    };
    /**
     * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
     * @function
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */ LongPrototype.gte = LongPrototype.greaterThanOrEqual;
    /**
     * Compares this Long's value with the specified's.
     * @param {!Long|number|string} other Other value
     * @returns {number} 0 if they are the same, 1 if the this is greater and -1
     *  if the given one is greater
     */ LongPrototype.compare = function compare(other) {
        if (!isLong(other)) other = fromValue(other);
        if (this.eq(other)) return 0;
        var thisNeg = this.isNegative(), otherNeg = other.isNegative();
        if (thisNeg && !otherNeg) return -1;
        if (!thisNeg && otherNeg) return 1;
        // At this point the sign bits are the same
        if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1;
        // Both are positive if at least one is unsigned
        return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;
    };
    /**
     * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.
     * @function
     * @param {!Long|number|string} other Other value
     * @returns {number} 0 if they are the same, 1 if the this is greater and -1
     *  if the given one is greater
     */ LongPrototype.comp = LongPrototype.compare;
    /**
     * Negates this Long's value.
     * @returns {!Long} Negated Long
     */ LongPrototype.negate = function negate() {
        if (!this.unsigned && this.eq(MIN_VALUE)) return MIN_VALUE;
        return this.not().add(ONE);
    };
    /**
     * Negates this Long's value. This is an alias of {@link Long#negate}.
     * @function
     * @returns {!Long} Negated Long
     */ LongPrototype.neg = LongPrototype.negate;
    /**
     * Returns the sum of this and the specified Long.
     * @param {!Long|number|string} addend Addend
     * @returns {!Long} Sum
     */ LongPrototype.add = function add(addend) {
        if (!isLong(addend)) addend = fromValue(addend);
        // Divide each number into 4 chunks of 16 bits, and then sum the chunks.
        var a48 = this.high >>> 16;
        var a32 = this.high & 0xFFFF;
        var a16 = this.low >>> 16;
        var a00 = this.low & 0xFFFF;
        var b48 = addend.high >>> 16;
        var b32 = addend.high & 0xFFFF;
        var b16 = addend.low >>> 16;
        var b00 = addend.low & 0xFFFF;
        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
        c00 += a00 + b00;
        c16 += c00 >>> 16;
        c00 &= 0xFFFF;
        c16 += a16 + b16;
        c32 += c16 >>> 16;
        c16 &= 0xFFFF;
        c32 += a32 + b32;
        c48 += c32 >>> 16;
        c32 &= 0xFFFF;
        c48 += a48 + b48;
        c48 &= 0xFFFF;
        return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);
    };
    /**
     * Returns the difference of this and the specified Long.
     * @param {!Long|number|string} subtrahend Subtrahend
     * @returns {!Long} Difference
     */ LongPrototype.subtract = function subtract(subtrahend) {
        if (!isLong(subtrahend)) subtrahend = fromValue(subtrahend);
        return this.add(subtrahend.neg());
    };
    /**
     * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.
     * @function
     * @param {!Long|number|string} subtrahend Subtrahend
     * @returns {!Long} Difference
     */ LongPrototype.sub = LongPrototype.subtract;
    /**
     * Returns the product of this and the specified Long.
     * @param {!Long|number|string} multiplier Multiplier
     * @returns {!Long} Product
     */ LongPrototype.multiply = function multiply(multiplier) {
        if (this.isZero()) return ZERO;
        if (!isLong(multiplier)) multiplier = fromValue(multiplier);
        if (multiplier.isZero()) return ZERO;
        if (this.eq(MIN_VALUE)) return multiplier.isOdd() ? MIN_VALUE : ZERO;
        if (multiplier.eq(MIN_VALUE)) return this.isOdd() ? MIN_VALUE : ZERO;
        if (this.isNegative()) {
            if (multiplier.isNegative()) return this.neg().mul(multiplier.neg());
            else return this.neg().mul(multiplier).neg();
        } else if (multiplier.isNegative()) return this.mul(multiplier.neg()).neg();
        // If both longs are small, use float multiplication
        if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24)) return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);
        // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
        // We can skip products that would overflow.
        var a48 = this.high >>> 16;
        var a32 = this.high & 0xFFFF;
        var a16 = this.low >>> 16;
        var a00 = this.low & 0xFFFF;
        var b48 = multiplier.high >>> 16;
        var b32 = multiplier.high & 0xFFFF;
        var b16 = multiplier.low >>> 16;
        var b00 = multiplier.low & 0xFFFF;
        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
        c00 += a00 * b00;
        c16 += c00 >>> 16;
        c00 &= 0xFFFF;
        c16 += a16 * b00;
        c32 += c16 >>> 16;
        c16 &= 0xFFFF;
        c16 += a00 * b16;
        c32 += c16 >>> 16;
        c16 &= 0xFFFF;
        c32 += a32 * b00;
        c48 += c32 >>> 16;
        c32 &= 0xFFFF;
        c32 += a16 * b16;
        c48 += c32 >>> 16;
        c32 &= 0xFFFF;
        c32 += a00 * b32;
        c48 += c32 >>> 16;
        c32 &= 0xFFFF;
        c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
        c48 &= 0xFFFF;
        return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);
    };
    /**
     * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.
     * @function
     * @param {!Long|number|string} multiplier Multiplier
     * @returns {!Long} Product
     */ LongPrototype.mul = LongPrototype.multiply;
    /**
     * Returns this Long divided by the specified. The result is signed if this Long is signed or
     *  unsigned if this Long is unsigned.
     * @param {!Long|number|string} divisor Divisor
     * @returns {!Long} Quotient
     */ LongPrototype.divide = function divide(divisor) {
        if (!isLong(divisor)) divisor = fromValue(divisor);
        if (divisor.isZero()) throw Error("division by zero");
        if (this.isZero()) return this.unsigned ? UZERO : ZERO;
        var approx, rem, res;
        if (!this.unsigned) {
            // This section is only relevant for signed longs and is derived from the
            // closure library as a whole.
            if (this.eq(MIN_VALUE)) {
                if (divisor.eq(ONE) || divisor.eq(NEG_ONE)) return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE
                else if (divisor.eq(MIN_VALUE)) return ONE;
                else {
                    // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
                    var halfThis = this.shr(1);
                    approx = halfThis.div(divisor).shl(1);
                    if (approx.eq(ZERO)) return divisor.isNegative() ? ONE : NEG_ONE;
                    else {
                        rem = this.sub(divisor.mul(approx));
                        res = approx.add(rem.div(divisor));
                        return res;
                    }
                }
            } else if (divisor.eq(MIN_VALUE)) return this.unsigned ? UZERO : ZERO;
            if (this.isNegative()) {
                if (divisor.isNegative()) return this.neg().div(divisor.neg());
                return this.neg().div(divisor).neg();
            } else if (divisor.isNegative()) return this.div(divisor.neg()).neg();
            res = ZERO;
        } else {
            // The algorithm below has not been made for unsigned longs. It's therefore
            // required to take special care of the MSB prior to running it.
            if (!divisor.unsigned) divisor = divisor.toUnsigned();
            if (divisor.gt(this)) return UZERO;
            if (divisor.gt(this.shru(1))) return UONE;
            res = UZERO;
        }
        // Repeat the following until the remainder is less than other:  find a
        // floating-point that approximates remainder / other *from below*, add this
        // into the result, and subtract it from the remainder.  It is critical that
        // the approximate value is less than or equal to the real value so that the
        // remainder never becomes negative.
        rem = this;
        while(rem.gte(divisor)){
            // Approximate the result of division. This may be a little greater or
            // smaller than the actual value.
            approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));
            // We will tweak the approximate result by changing it in the 48-th digit or
            // the smallest non-fractional digit, whichever is larger.
            var log2 = Math.ceil(Math.log(approx) / Math.LN2), delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48), // Decrease the approximation until it is smaller than the remainder.  Note
            // that if it is too large, the product overflows and is negative.
            approxRes = fromNumber(approx), approxRem = approxRes.mul(divisor);
            while(approxRem.isNegative() || approxRem.gt(rem)){
                approx -= delta;
                approxRes = fromNumber(approx, this.unsigned);
                approxRem = approxRes.mul(divisor);
            }
            // We know the answer can't be zero... and actually, zero would cause
            // infinite recursion since we would make no progress.
            if (approxRes.isZero()) approxRes = ONE;
            res = res.add(approxRes);
            rem = rem.sub(approxRem);
        }
        return res;
    };
    /**
     * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.
     * @function
     * @param {!Long|number|string} divisor Divisor
     * @returns {!Long} Quotient
     */ LongPrototype.div = LongPrototype.divide;
    /**
     * Returns this Long modulo the specified.
     * @param {!Long|number|string} divisor Divisor
     * @returns {!Long} Remainder
     */ LongPrototype.modulo = function modulo(divisor) {
        if (!isLong(divisor)) divisor = fromValue(divisor);
        return this.sub(this.div(divisor).mul(divisor));
    };
    /**
     * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
     * @function
     * @param {!Long|number|string} divisor Divisor
     * @returns {!Long} Remainder
     */ LongPrototype.mod = LongPrototype.modulo;
    /**
     * Returns the bitwise NOT of this Long.
     * @returns {!Long}
     */ LongPrototype.not = function not() {
        return fromBits(~this.low, ~this.high, this.unsigned);
    };
    /**
     * Returns the bitwise AND of this Long and the specified.
     * @param {!Long|number|string} other Other Long
     * @returns {!Long}
     */ LongPrototype.and = function and(other) {
        if (!isLong(other)) other = fromValue(other);
        return fromBits(this.low & other.low, this.high & other.high, this.unsigned);
    };
    /**
     * Returns the bitwise OR of this Long and the specified.
     * @param {!Long|number|string} other Other Long
     * @returns {!Long}
     */ LongPrototype.or = function or(other) {
        if (!isLong(other)) other = fromValue(other);
        return fromBits(this.low | other.low, this.high | other.high, this.unsigned);
    };
    /**
     * Returns the bitwise XOR of this Long and the given one.
     * @param {!Long|number|string} other Other Long
     * @returns {!Long}
     */ LongPrototype.xor = function xor(other) {
        if (!isLong(other)) other = fromValue(other);
        return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);
    };
    /**
     * Returns this Long with bits shifted to the left by the given amount.
     * @param {number|!Long} numBits Number of bits
     * @returns {!Long} Shifted Long
     */ LongPrototype.shiftLeft = function shiftLeft(numBits) {
        if (isLong(numBits)) numBits = numBits.toInt();
        if ((numBits &= 63) === 0) return this;
        else if (numBits < 32) return fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);
        else return fromBits(0, this.low << numBits - 32, this.unsigned);
    };
    /**
     * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.
     * @function
     * @param {number|!Long} numBits Number of bits
     * @returns {!Long} Shifted Long
     */ LongPrototype.shl = LongPrototype.shiftLeft;
    /**
     * Returns this Long with bits arithmetically shifted to the right by the given amount.
     * @param {number|!Long} numBits Number of bits
     * @returns {!Long} Shifted Long
     */ LongPrototype.shiftRight = function shiftRight(numBits) {
        if (isLong(numBits)) numBits = numBits.toInt();
        if ((numBits &= 63) === 0) return this;
        else if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);
        else return fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);
    };
    /**
     * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.
     * @function
     * @param {number|!Long} numBits Number of bits
     * @returns {!Long} Shifted Long
     */ LongPrototype.shr = LongPrototype.shiftRight;
    /**
     * Returns this Long with bits logically shifted to the right by the given amount.
     * @param {number|!Long} numBits Number of bits
     * @returns {!Long} Shifted Long
     */ LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {
        if (isLong(numBits)) numBits = numBits.toInt();
        numBits &= 63;
        if (numBits === 0) return this;
        else {
            var high = this.high;
            if (numBits < 32) {
                var low = this.low;
                return fromBits(low >>> numBits | high << 32 - numBits, high >>> numBits, this.unsigned);
            } else if (numBits === 32) return fromBits(high, 0, this.unsigned);
            else return fromBits(high >>> numBits - 32, 0, this.unsigned);
        }
    };
    /**
     * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
     * @function
     * @param {number|!Long} numBits Number of bits
     * @returns {!Long} Shifted Long
     */ LongPrototype.shru = LongPrototype.shiftRightUnsigned;
    /**
     * Converts this Long to signed.
     * @returns {!Long} Signed long
     */ LongPrototype.toSigned = function toSigned() {
        if (!this.unsigned) return this;
        return fromBits(this.low, this.high, false);
    };
    /**
     * Converts this Long to unsigned.
     * @returns {!Long} Unsigned long
     */ LongPrototype.toUnsigned = function toUnsigned() {
        if (this.unsigned) return this;
        return fromBits(this.low, this.high, true);
    };
    /**
     * Converts this Long to its byte representation.
     * @param {boolean=} le Whether little or big endian, defaults to big endian
     * @returns {!Array.<number>} Byte representation
     */ LongPrototype.toBytes = function(le) {
        return le ? this.toBytesLE() : this.toBytesBE();
    };
    /**
     * Converts this Long to its little endian byte representation.
     * @returns {!Array.<number>} Little endian byte representation
     */ LongPrototype.toBytesLE = function() {
        var hi = this.high, lo = this.low;
        return [
            lo & 0xff,
            lo >>> 8 & 0xff,
            lo >>> 16 & 0xff,
            lo >>> 24 & 0xff,
            hi & 0xff,
            hi >>> 8 & 0xff,
            hi >>> 16 & 0xff,
            hi >>> 24 & 0xff
        ];
    };
    /**
     * Converts this Long to its big endian byte representation.
     * @returns {!Array.<number>} Big endian byte representation
     */ LongPrototype.toBytesBE = function() {
        var hi = this.high, lo = this.low;
        return [
            hi >>> 24 & 0xff,
            hi >>> 16 & 0xff,
            hi >>> 8 & 0xff,
            hi & 0xff,
            lo >>> 24 & 0xff,
            lo >>> 16 & 0xff,
            lo >>> 8 & 0xff,
            lo & 0xff
        ];
    };
    return Long;
});

},{}],"5WdJJ":[function(require,module,exports) {
(function(globalObject) {
    "use strict";
    /*
 *      bignumber.js v9.1.1
 *      A JavaScript library for arbitrary-precision arithmetic.
 *      https://github.com/MikeMcl/bignumber.js
 *      Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>
 *      MIT Licensed.
 *
 *      BigNumber.prototype methods     |  BigNumber methods
 *                                      |
 *      absoluteValue            abs    |  clone
 *      comparedTo                      |  config               set
 *      decimalPlaces            dp     |      DECIMAL_PLACES
 *      dividedBy                div    |      ROUNDING_MODE
 *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT
 *      exponentiatedBy          pow    |      RANGE
 *      integerValue                    |      CRYPTO
 *      isEqualTo                eq     |      MODULO_MODE
 *      isFinite                        |      POW_PRECISION
 *      isGreaterThan            gt     |      FORMAT
 *      isGreaterThanOrEqualTo   gte    |      ALPHABET
 *      isInteger                       |  isBigNumber
 *      isLessThan               lt     |  maximum              max
 *      isLessThanOrEqualTo      lte    |  minimum              min
 *      isNaN                           |  random
 *      isNegative                      |  sum
 *      isPositive                      |
 *      isZero                          |
 *      minus                           |
 *      modulo                   mod    |
 *      multipliedBy             times  |
 *      negated                         |
 *      plus                            |
 *      precision                sd     |
 *      shiftedBy                       |
 *      squareRoot               sqrt   |
 *      toExponential                   |
 *      toFixed                         |
 *      toFormat                        |
 *      toFraction                      |
 *      toJSON                          |
 *      toNumber                        |
 *      toPrecision                     |
 *      toString                        |
 *      valueOf                         |
 *
 */ var BigNumber, isNumeric = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i, mathceil = Math.ceil, mathfloor = Math.floor, bignumberError = "[BigNumber Error] ", tooManyDigits = bignumberError + "Number primitive has more than 15 significant digits: ", BASE = 1e14, LOG_BASE = 14, MAX_SAFE_INTEGER = 0x1fffffffffffff, // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1
    POWS_TEN = [
        1,
        10,
        100,
        1e3,
        1e4,
        1e5,
        1e6,
        1e7,
        1e8,
        1e9,
        1e10,
        1e11,
        1e12,
        1e13
    ], SQRT_BASE = 1e7, // EDITABLE
    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and
    // the arguments to toExponential, toFixed, toFormat, and toPrecision.
    MAX = 1E9; // 0 to MAX_INT32
    /*
   * Create and return a BigNumber constructor.
   */ function clone(configObject) {
        var div, convertBase, parseNumeric, P = BigNumber.prototype = {
            constructor: BigNumber,
            toString: null,
            valueOf: null
        }, ONE = new BigNumber(1), //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------
        // The default values below must be integers within the inclusive ranges stated.
        // The values can also be changed at run-time using BigNumber.set.
        // The maximum number of decimal places for operations involving division.
        DECIMAL_PLACES = 20, // The rounding mode used when rounding to the above decimal places, and when using
        // toExponential, toFixed, toFormat and toPrecision, and round (default value).
        // UP         0 Away from zero.
        // DOWN       1 Towards zero.
        // CEIL       2 Towards +Infinity.
        // FLOOR      3 Towards -Infinity.
        // HALF_UP    4 Towards nearest neighbour. If equidistant, up.
        // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
        // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
        // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
        // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
        ROUNDING_MODE = 4, // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]
        // The exponent value at and beneath which toString returns exponential notation.
        // Number type: -7
        TO_EXP_NEG = -7, // The exponent value at and above which toString returns exponential notation.
        // Number type: 21
        TO_EXP_POS = 21, // RANGE : [MIN_EXP, MAX_EXP]
        // The minimum exponent value, beneath which underflow to zero occurs.
        // Number type: -324  (5e-324)
        MIN_EXP = -10000000, // The maximum exponent value, above which overflow to Infinity occurs.
        // Number type:  308  (1.7976931348623157e+308)
        // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.
        MAX_EXP = 1e7, // Whether to use cryptographically-secure random number generation, if available.
        CRYPTO = false, // The modulo mode used when calculating the modulus: a mod n.
        // The quotient (q = a / n) is calculated according to the corresponding rounding mode.
        // The remainder (r) is calculated as: r = a - n * q.
        //
        // UP        0 The remainder is positive if the dividend is negative, else is negative.
        // DOWN      1 The remainder has the same sign as the dividend.
        //             This modulo mode is commonly known as 'truncated division' and is
        //             equivalent to (a % n) in JavaScript.
        // FLOOR     3 The remainder has the same sign as the divisor (Python %).
        // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.
        // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).
        //             The remainder is always positive.
        //
        // The truncated division, floored division, Euclidian division and IEEE 754 remainder
        // modes are commonly used for the modulus operation.
        // Although the other rounding modes can also be used, they may not give useful results.
        MODULO_MODE = 1, // The maximum number of significant digits of the result of the exponentiatedBy operation.
        // If POW_PRECISION is 0, there will be unlimited significant digits.
        POW_PRECISION = 0, // The format specification used by the BigNumber.prototype.toFormat method.
        FORMAT = {
            prefix: "",
            groupSize: 3,
            secondaryGroupSize: 0,
            groupSeparator: ",",
            decimalSeparator: ".",
            fractionGroupSize: 0,
            fractionGroupSeparator: "\xa0",
            suffix: ""
        }, // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',
        // '-', '.', whitespace, or repeated character.
        // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'
        ALPHABET = "0123456789abcdefghijklmnopqrstuvwxyz", alphabetHasNormalDecimalDigits = true;
        //------------------------------------------------------------------------------------------
        // CONSTRUCTOR
        /*
     * The BigNumber constructor and exported function.
     * Create and return a new instance of a BigNumber object.
     *
     * v {number|string|BigNumber} A numeric value.
     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.
     */ function BigNumber(v, b) {
            var alphabet, c, caseChanged, e, i, isNum, len, str, x = this;
            // Enable constructor call without `new`.
            if (!(x instanceof BigNumber)) return new BigNumber(v, b);
            if (b == null) {
                if (v && v._isBigNumber === true) {
                    x.s = v.s;
                    if (!v.c || v.e > MAX_EXP) x.c = x.e = null;
                    else if (v.e < MIN_EXP) x.c = [
                        x.e = 0
                    ];
                    else {
                        x.e = v.e;
                        x.c = v.c.slice();
                    }
                    return;
                }
                if ((isNum = typeof v == "number") && v * 0 == 0) {
                    // Use `1 / n` to handle minus zero also.
                    x.s = 1 / v < 0 ? (v = -v, -1) : 1;
                    // Fast path for integers, where n < 2147483648 (2**31).
                    if (v === ~~v) {
                        for(e = 0, i = v; i >= 10; i /= 10, e++);
                        if (e > MAX_EXP) x.c = x.e = null;
                        else {
                            x.e = e;
                            x.c = [
                                v
                            ];
                        }
                        return;
                    }
                    str = String(v);
                } else {
                    if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);
                    x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;
                }
                // Decimal point?
                if ((e = str.indexOf(".")) > -1) str = str.replace(".", "");
                // Exponential form?
                if ((i = str.search(/e/i)) > 0) {
                    // Determine exponent.
                    if (e < 0) e = i;
                    e += +str.slice(i + 1);
                    str = str.substring(0, i);
                } else if (e < 0) // Integer.
                e = str.length;
            } else {
                // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
                intCheck(b, 2, ALPHABET.length, "Base");
                // Allow exponential notation to be used with base 10 argument, while
                // also rounding to DECIMAL_PLACES as with other bases.
                if (b == 10 && alphabetHasNormalDecimalDigits) {
                    x = new BigNumber(v);
                    return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);
                }
                str = String(v);
                if (isNum = typeof v == "number") {
                    // Avoid potential interpretation of Infinity and NaN as base 44+ values.
                    if (v * 0 != 0) return parseNumeric(x, str, isNum, b);
                    x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;
                    // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
                    if (BigNumber.DEBUG && str.replace(/^0\.0*|\./, "").length > 15) throw Error(tooManyDigits + v);
                } else x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
                alphabet = ALPHABET.slice(0, b);
                e = i = 0;
                // Check that str is a valid base b number.
                // Don't use RegExp, so alphabet can contain special characters.
                for(len = str.length; i < len; i++)if (alphabet.indexOf(c = str.charAt(i)) < 0) {
                    if (c == ".") // If '.' is not the first character and it has not be found before.
                    {
                        if (i > e) {
                            e = len;
                            continue;
                        }
                    } else if (!caseChanged) // Allow e.g. hexadecimal 'FF' as well as 'ff'.
                    {
                        if (str == str.toUpperCase() && (str = str.toLowerCase()) || str == str.toLowerCase() && (str = str.toUpperCase())) {
                            caseChanged = true;
                            i = -1;
                            e = 0;
                            continue;
                        }
                    }
                    return parseNumeric(x, String(v), isNum, b);
                }
                // Prevent later check for length on converted number.
                isNum = false;
                str = convertBase(str, b, 10, x.s);
                // Decimal point?
                if ((e = str.indexOf(".")) > -1) str = str.replace(".", "");
                else e = str.length;
            }
            // Determine leading zeros.
            for(i = 0; str.charCodeAt(i) === 48; i++);
            // Determine trailing zeros.
            for(len = str.length; str.charCodeAt(--len) === 48;);
            if (str = str.slice(i, ++len)) {
                len -= i;
                // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
                if (isNum && BigNumber.DEBUG && len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) throw Error(tooManyDigits + x.s * v);
                // Overflow?
                if ((e = e - i - 1) > MAX_EXP) // Infinity.
                x.c = x.e = null;
                else if (e < MIN_EXP) // Zero.
                x.c = [
                    x.e = 0
                ];
                else {
                    x.e = e;
                    x.c = [];
                    // Transform base
                    // e is the base 10 exponent.
                    // i is where to slice str to get the first element of the coefficient array.
                    i = (e + 1) % LOG_BASE;
                    if (e < 0) i += LOG_BASE; // i < 1
                    if (i < len) {
                        if (i) x.c.push(+str.slice(0, i));
                        for(len -= LOG_BASE; i < len;)x.c.push(+str.slice(i, i += LOG_BASE));
                        i = LOG_BASE - (str = str.slice(i)).length;
                    } else i -= len;
                    for(; i--; str += "0");
                    x.c.push(+str);
                }
            } else // Zero.
            x.c = [
                x.e = 0
            ];
        }
        // CONSTRUCTOR PROPERTIES
        BigNumber.clone = clone;
        BigNumber.ROUND_UP = 0;
        BigNumber.ROUND_DOWN = 1;
        BigNumber.ROUND_CEIL = 2;
        BigNumber.ROUND_FLOOR = 3;
        BigNumber.ROUND_HALF_UP = 4;
        BigNumber.ROUND_HALF_DOWN = 5;
        BigNumber.ROUND_HALF_EVEN = 6;
        BigNumber.ROUND_HALF_CEIL = 7;
        BigNumber.ROUND_HALF_FLOOR = 8;
        BigNumber.EUCLID = 9;
        /*
     * Configure infrequently-changing library-wide settings.
     *
     * Accept an object with the following optional properties (if the value of a property is
     * a number, it must be an integer within the inclusive range stated):
     *
     *   DECIMAL_PLACES   {number}           0 to MAX
     *   ROUNDING_MODE    {number}           0 to 8
     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]
     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]
     *   CRYPTO           {boolean}          true or false
     *   MODULO_MODE      {number}           0 to 9
     *   POW_PRECISION       {number}           0 to MAX
     *   ALPHABET         {string}           A string of two or more unique characters which does
     *                                       not contain '.'.
     *   FORMAT           {object}           An object with some of the following properties:
     *     prefix                 {string}
     *     groupSize              {number}
     *     secondaryGroupSize     {number}
     *     groupSeparator         {string}
     *     decimalSeparator       {string}
     *     fractionGroupSize      {number}
     *     fractionGroupSeparator {string}
     *     suffix                 {string}
     *
     * (The values assigned to the above FORMAT object properties are not checked for validity.)
     *
     * E.g.
     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })
     *
     * Ignore properties/parameters set to null or undefined, except for ALPHABET.
     *
     * Return an object with the properties current values.
     */ BigNumber.config = BigNumber.set = function(obj) {
            var p, v;
            if (obj != null) {
                if (typeof obj == "object") {
                    // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.
                    // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'
                    if (obj.hasOwnProperty(p = "DECIMAL_PLACES")) {
                        v = obj[p];
                        intCheck(v, 0, MAX, p);
                        DECIMAL_PLACES = v;
                    }
                    // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.
                    // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'
                    if (obj.hasOwnProperty(p = "ROUNDING_MODE")) {
                        v = obj[p];
                        intCheck(v, 0, 8, p);
                        ROUNDING_MODE = v;
                    }
                    // EXPONENTIAL_AT {number|number[]}
                    // Integer, -MAX to MAX inclusive or
                    // [integer -MAX to 0 inclusive, 0 to MAX inclusive].
                    // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'
                    if (obj.hasOwnProperty(p = "EXPONENTIAL_AT")) {
                        v = obj[p];
                        if (v && v.pop) {
                            intCheck(v[0], -MAX, 0, p);
                            intCheck(v[1], 0, MAX, p);
                            TO_EXP_NEG = v[0];
                            TO_EXP_POS = v[1];
                        } else {
                            intCheck(v, -MAX, MAX, p);
                            TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);
                        }
                    }
                    // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or
                    // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].
                    // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'
                    if (obj.hasOwnProperty(p = "RANGE")) {
                        v = obj[p];
                        if (v && v.pop) {
                            intCheck(v[0], -MAX, -1, p);
                            intCheck(v[1], 1, MAX, p);
                            MIN_EXP = v[0];
                            MAX_EXP = v[1];
                        } else {
                            intCheck(v, -MAX, MAX, p);
                            if (v) MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);
                            else throw Error(bignumberError + p + " cannot be zero: " + v);
                        }
                    }
                    // CRYPTO {boolean} true or false.
                    // '[BigNumber Error] CRYPTO not true or false: {v}'
                    // '[BigNumber Error] crypto unavailable'
                    if (obj.hasOwnProperty(p = "CRYPTO")) {
                        v = obj[p];
                        if (v === !!v) {
                            if (v) {
                                if (typeof crypto != "undefined" && crypto && (crypto.getRandomValues || crypto.randomBytes)) CRYPTO = v;
                                else {
                                    CRYPTO = !v;
                                    throw Error(bignumberError + "crypto unavailable");
                                }
                            } else CRYPTO = v;
                        } else throw Error(bignumberError + p + " not true or false: " + v);
                    }
                    // MODULO_MODE {number} Integer, 0 to 9 inclusive.
                    // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'
                    if (obj.hasOwnProperty(p = "MODULO_MODE")) {
                        v = obj[p];
                        intCheck(v, 0, 9, p);
                        MODULO_MODE = v;
                    }
                    // POW_PRECISION {number} Integer, 0 to MAX inclusive.
                    // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'
                    if (obj.hasOwnProperty(p = "POW_PRECISION")) {
                        v = obj[p];
                        intCheck(v, 0, MAX, p);
                        POW_PRECISION = v;
                    }
                    // FORMAT {object}
                    // '[BigNumber Error] FORMAT not an object: {v}'
                    if (obj.hasOwnProperty(p = "FORMAT")) {
                        v = obj[p];
                        if (typeof v == "object") FORMAT = v;
                        else throw Error(bignumberError + p + " not an object: " + v);
                    }
                    // ALPHABET {string}
                    // '[BigNumber Error] ALPHABET invalid: {v}'
                    if (obj.hasOwnProperty(p = "ALPHABET")) {
                        v = obj[p];
                        // Disallow if less than two characters,
                        // or if it contains '+', '-', '.', whitespace, or a repeated character.
                        if (typeof v == "string" && !/^.?$|[+\-.\s]|(.).*\1/.test(v)) {
                            alphabetHasNormalDecimalDigits = v.slice(0, 10) == "0123456789";
                            ALPHABET = v;
                        } else throw Error(bignumberError + p + " invalid: " + v);
                    }
                } else // '[BigNumber Error] Object expected: {v}'
                throw Error(bignumberError + "Object expected: " + obj);
            }
            return {
                DECIMAL_PLACES: DECIMAL_PLACES,
                ROUNDING_MODE: ROUNDING_MODE,
                EXPONENTIAL_AT: [
                    TO_EXP_NEG,
                    TO_EXP_POS
                ],
                RANGE: [
                    MIN_EXP,
                    MAX_EXP
                ],
                CRYPTO: CRYPTO,
                MODULO_MODE: MODULO_MODE,
                POW_PRECISION: POW_PRECISION,
                FORMAT: FORMAT,
                ALPHABET: ALPHABET
            };
        };
        /*
     * Return true if v is a BigNumber instance, otherwise return false.
     *
     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.
     *
     * v {any}
     *
     * '[BigNumber Error] Invalid BigNumber: {v}'
     */ BigNumber.isBigNumber = function(v) {
            if (!v || v._isBigNumber !== true) return false;
            if (!BigNumber.DEBUG) return true;
            var i, n, c = v.c, e = v.e, s = v.s;
            out: if (({}).toString.call(c) == "[object Array]") {
                if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {
                    // If the first element is zero, the BigNumber value must be zero.
                    if (c[0] === 0) {
                        if (e === 0 && c.length === 1) return true;
                        break out;
                    }
                    // Calculate number of digits that c[0] should have, based on the exponent.
                    i = (e + 1) % LOG_BASE;
                    if (i < 1) i += LOG_BASE;
                    // Calculate number of digits of c[0].
                    //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {
                    if (String(c[0]).length == i) {
                        for(i = 0; i < c.length; i++){
                            n = c[i];
                            if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;
                        }
                        // Last element cannot be zero, unless it is the only element.
                        if (n !== 0) return true;
                    }
                }
            } else if (c === null && e === null && (s === null || s === 1 || s === -1)) return true;
            throw Error(bignumberError + "Invalid BigNumber: " + v);
        };
        /*
     * Return a new BigNumber whose value is the maximum of the arguments.
     *
     * arguments {number|string|BigNumber}
     */ BigNumber.maximum = BigNumber.max = function() {
            return maxOrMin(arguments, P.lt);
        };
        /*
     * Return a new BigNumber whose value is the minimum of the arguments.
     *
     * arguments {number|string|BigNumber}
     */ BigNumber.minimum = BigNumber.min = function() {
            return maxOrMin(arguments, P.gt);
        };
        /*
     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,
     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing
     * zeros are produced).
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'
     * '[BigNumber Error] crypto unavailable'
     */ BigNumber.random = function() {
            var pow2_53 = 0x20000000000000;
            // Return a 53 bit integer n, where 0 <= n < 9007199254740992.
            // Check if Math.random() produces more than 32 bits of randomness.
            // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.
            // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.
            var random53bitInt = Math.random() * pow2_53 & 0x1fffff ? function() {
                return mathfloor(Math.random() * pow2_53);
            } : function() {
                return (Math.random() * 0x40000000 | 0) * 0x800000 + (Math.random() * 0x800000 | 0);
            };
            return function(dp) {
                var a, b, e, k, v, i = 0, c = [], rand = new BigNumber(ONE);
                if (dp == null) dp = DECIMAL_PLACES;
                else intCheck(dp, 0, MAX);
                k = mathceil(dp / LOG_BASE);
                if (CRYPTO) {
                    // Browsers supporting crypto.getRandomValues.
                    if (crypto.getRandomValues) {
                        a = crypto.getRandomValues(new Uint32Array(k *= 2));
                        for(; i < k;){
                            // 53 bits:
                            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)
                            // 11111 11111111 11111111 11111111 11100000 00000000 00000000
                            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)
                            //                                     11111 11111111 11111111
                            // 0x20000 is 2^21.
                            v = a[i] * 0x20000 + (a[i + 1] >>> 11);
                            // Rejection sampling:
                            // 0 <= v < 9007199254740992
                            // Probability that v >= 9e15, is
                            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251
                            if (v >= 9e15) {
                                b = crypto.getRandomValues(new Uint32Array(2));
                                a[i] = b[0];
                                a[i + 1] = b[1];
                            } else {
                                // 0 <= v <= 8999999999999999
                                // 0 <= (v % 1e14) <= 99999999999999
                                c.push(v % 1e14);
                                i += 2;
                            }
                        }
                        i = k / 2;
                    // Node.js supporting crypto.randomBytes.
                    } else if (crypto.randomBytes) {
                        // buffer
                        a = crypto.randomBytes(k *= 7);
                        for(; i < k;){
                            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40
                            // 0x100000000 is 2^32, 0x1000000 is 2^24
                            // 11111 11111111 11111111 11111111 11111111 11111111 11111111
                            // 0 <= v < 9007199254740992
                            v = (a[i] & 31) * 0x1000000000000 + a[i + 1] * 0x10000000000 + a[i + 2] * 0x100000000 + a[i + 3] * 0x1000000 + (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];
                            if (v >= 9e15) crypto.randomBytes(7).copy(a, i);
                            else {
                                // 0 <= (v % 1e14) <= 99999999999999
                                c.push(v % 1e14);
                                i += 7;
                            }
                        }
                        i = k / 7;
                    } else {
                        CRYPTO = false;
                        throw Error(bignumberError + "crypto unavailable");
                    }
                }
                // Use Math.random.
                if (!CRYPTO) for(; i < k;){
                    v = random53bitInt();
                    if (v < 9e15) c[i++] = v % 1e14;
                }
                k = c[--i];
                dp %= LOG_BASE;
                // Convert trailing digits to zeros according to dp.
                if (k && dp) {
                    v = POWS_TEN[LOG_BASE - dp];
                    c[i] = mathfloor(k / v) * v;
                }
                // Remove trailing elements which are zero.
                for(; c[i] === 0; c.pop(), i--);
                // Zero?
                if (i < 0) c = [
                    e = 0
                ];
                else {
                    // Remove leading elements which are zero and adjust exponent accordingly.
                    for(e = -1; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);
                    // Count the digits of the first element of c to determine leading zeros, and...
                    for(i = 1, v = c[0]; v >= 10; v /= 10, i++);
                    // adjust the exponent accordingly.
                    if (i < LOG_BASE) e -= LOG_BASE - i;
                }
                rand.e = e;
                rand.c = c;
                return rand;
            };
        }();
        /*
     * Return a BigNumber whose value is the sum of the arguments.
     *
     * arguments {number|string|BigNumber}
     */ BigNumber.sum = function() {
            var i = 1, args = arguments, sum = new BigNumber(args[0]);
            for(; i < args.length;)sum = sum.plus(args[i++]);
            return sum;
        };
        // PRIVATE FUNCTIONS
        // Called by BigNumber and BigNumber.prototype.toString.
        convertBase = function() {
            var decimal = "0123456789";
            /*
       * Convert string of baseIn to an array of numbers of baseOut.
       * Eg. toBaseOut('255', 10, 16) returns [15, 15].
       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].
       */ function toBaseOut(str, baseIn, baseOut, alphabet) {
                var j, arr = [
                    0
                ], arrL, i = 0, len = str.length;
                for(; i < len;){
                    for(arrL = arr.length; arrL--; arr[arrL] *= baseIn);
                    arr[0] += alphabet.indexOf(str.charAt(i++));
                    for(j = 0; j < arr.length; j++)if (arr[j] > baseOut - 1) {
                        if (arr[j + 1] == null) arr[j + 1] = 0;
                        arr[j + 1] += arr[j] / baseOut | 0;
                        arr[j] %= baseOut;
                    }
                }
                return arr.reverse();
            }
            // Convert a numeric string of baseIn to a numeric string of baseOut.
            // If the caller is toString, we are converting from base 10 to baseOut.
            // If the caller is BigNumber, we are converting from baseIn to base 10.
            return function(str, baseIn, baseOut, sign, callerIsToString) {
                var alphabet, d, e, k, r, x, xc, y, i = str.indexOf("."), dp = DECIMAL_PLACES, rm = ROUNDING_MODE;
                // Non-integer.
                if (i >= 0) {
                    k = POW_PRECISION;
                    // Unlimited precision.
                    POW_PRECISION = 0;
                    str = str.replace(".", "");
                    y = new BigNumber(baseIn);
                    x = y.pow(str.length - i);
                    POW_PRECISION = k;
                    // Convert str as if an integer, then restore the fraction part by dividing the
                    // result by its base raised to a power.
                    y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, "0"), 10, baseOut, decimal);
                    y.e = y.c.length;
                }
                // Convert the number as integer.
                xc = toBaseOut(str, baseIn, baseOut, callerIsToString ? (alphabet = ALPHABET, decimal) : (alphabet = decimal, ALPHABET));
                // xc now represents str as an integer and converted to baseOut. e is the exponent.
                e = k = xc.length;
                // Remove trailing zeros.
                for(; xc[--k] == 0; xc.pop());
                // Zero?
                if (!xc[0]) return alphabet.charAt(0);
                // Does str represent an integer? If so, no need for the division.
                if (i < 0) --e;
                else {
                    x.c = xc;
                    x.e = e;
                    // The sign is needed for correct rounding.
                    x.s = sign;
                    x = div(x, y, dp, rm, baseOut);
                    xc = x.c;
                    r = x.r;
                    e = x.e;
                }
                // xc now represents str converted to baseOut.
                // THe index of the rounding digit.
                d = e + dp + 1;
                // The rounding digit: the digit to the right of the digit that may be rounded up.
                i = xc[d];
                // Look at the rounding digits and mode to determine whether to round up.
                k = baseOut / 2;
                r = r || d < 0 || xc[d + 1] != null;
                r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : i > k || i == k && (rm == 4 || r || rm == 6 && xc[d - 1] & 1 || rm == (x.s < 0 ? 8 : 7));
                // If the index of the rounding digit is not greater than zero, or xc represents
                // zero, then the result of the base conversion is zero or, if rounding up, a value
                // such as 0.00001.
                if (d < 1 || !xc[0]) // 1^-dp or 0
                str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);
                else {
                    // Truncate xc to the required number of decimal places.
                    xc.length = d;
                    // Round up?
                    if (r) // Rounding up may mean the previous digit has to be rounded up and so on.
                    for(--baseOut; ++xc[--d] > baseOut;){
                        xc[d] = 0;
                        if (!d) {
                            ++e;
                            xc = [
                                1
                            ].concat(xc);
                        }
                    }
                    // Determine trailing zeros.
                    for(k = xc.length; !xc[--k];);
                    // E.g. [4, 11, 15] becomes 4bf.
                    for(i = 0, str = ""; i <= k; str += alphabet.charAt(xc[i++]));
                    // Add leading zeros, decimal point and trailing zeros as required.
                    str = toFixedPoint(str, e, alphabet.charAt(0));
                }
                // The caller will add the sign.
                return str;
            };
        }();
        // Perform division in the specified base. Called by div and convertBase.
        div = function() {
            // Assume non-zero x and k.
            function multiply(x, k, base) {
                var m, temp, xlo, xhi, carry = 0, i = x.length, klo = k % SQRT_BASE, khi = k / SQRT_BASE | 0;
                for(x = x.slice(); i--;){
                    xlo = x[i] % SQRT_BASE;
                    xhi = x[i] / SQRT_BASE | 0;
                    m = khi * xlo + xhi * klo;
                    temp = klo * xlo + m % SQRT_BASE * SQRT_BASE + carry;
                    carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;
                    x[i] = temp % base;
                }
                if (carry) x = [
                    carry
                ].concat(x);
                return x;
            }
            function compare(a, b, aL, bL) {
                var i, cmp;
                if (aL != bL) cmp = aL > bL ? 1 : -1;
                else {
                    for(i = cmp = 0; i < aL; i++)if (a[i] != b[i]) {
                        cmp = a[i] > b[i] ? 1 : -1;
                        break;
                    }
                }
                return cmp;
            }
            function subtract(a, b, aL, base) {
                var i = 0;
                // Subtract b from a.
                for(; aL--;){
                    a[aL] -= i;
                    i = a[aL] < b[aL] ? 1 : 0;
                    a[aL] = i * base + a[aL] - b[aL];
                }
                // Remove leading zeros.
                for(; !a[0] && a.length > 1; a.splice(0, 1));
            }
            // x: dividend, y: divisor.
            return function(x, y, dp, rm, base) {
                var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0, yL, yz, s = x.s == y.s ? 1 : -1, xc = x.c, yc = y.c;
                // Either NaN, Infinity or 0?
                if (!xc || !xc[0] || !yc || !yc[0]) return new BigNumber(// Return NaN if either NaN, or both Infinity or 0.
                !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN : // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
                xc && xc[0] == 0 || !yc ? s * 0 : s / 0);
                q = new BigNumber(s);
                qc = q.c = [];
                e = x.e - y.e;
                s = dp + e + 1;
                if (!base) {
                    base = BASE;
                    e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);
                    s = s / LOG_BASE | 0;
                }
                // Result exponent may be one less then the current value of e.
                // The coefficients of the BigNumbers from convertBase may have trailing zeros.
                for(i = 0; yc[i] == (xc[i] || 0); i++);
                if (yc[i] > (xc[i] || 0)) e--;
                if (s < 0) {
                    qc.push(1);
                    more = true;
                } else {
                    xL = xc.length;
                    yL = yc.length;
                    i = 0;
                    s += 2;
                    // Normalise xc and yc so highest order digit of yc is >= base / 2.
                    n = mathfloor(base / (yc[0] + 1));
                    // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.
                    // if (n > 1 || n++ == 1 && yc[0] < base / 2) {
                    if (n > 1) {
                        yc = multiply(yc, n, base);
                        xc = multiply(xc, n, base);
                        yL = yc.length;
                        xL = xc.length;
                    }
                    xi = yL;
                    rem = xc.slice(0, yL);
                    remL = rem.length;
                    // Add zeros to make remainder as long as divisor.
                    for(; remL < yL; rem[remL++] = 0);
                    yz = yc.slice();
                    yz = [
                        0
                    ].concat(yz);
                    yc0 = yc[0];
                    if (yc[1] >= base / 2) yc0++;
                    // Not necessary, but to prevent trial digit n > base, when using base 3.
                    // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;
                    do {
                        n = 0;
                        // Compare divisor and remainder.
                        cmp = compare(yc, rem, yL, remL);
                        // If divisor < remainder.
                        if (cmp < 0) {
                            // Calculate trial digit, n.
                            rem0 = rem[0];
                            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);
                            // n is how many times the divisor goes into the current remainder.
                            n = mathfloor(rem0 / yc0);
                            //  Algorithm:
                            //  product = divisor multiplied by trial digit (n).
                            //  Compare product and remainder.
                            //  If product is greater than remainder:
                            //    Subtract divisor from product, decrement trial digit.
                            //  Subtract product from remainder.
                            //  If product was less than remainder at the last compare:
                            //    Compare new remainder and divisor.
                            //    If remainder is greater than divisor:
                            //      Subtract divisor from remainder, increment trial digit.
                            if (n > 1) {
                                // n may be > base only when base is 3.
                                if (n >= base) n = base - 1;
                                // product = divisor * trial digit.
                                prod = multiply(yc, n, base);
                                prodL = prod.length;
                                remL = rem.length;
                                // Compare product and remainder.
                                // If product > remainder then trial digit n too high.
                                // n is 1 too high about 5% of the time, and is not known to have
                                // ever been more than 1 too high.
                                while(compare(prod, rem, prodL, remL) == 1){
                                    n--;
                                    // Subtract divisor from product.
                                    subtract(prod, yL < prodL ? yz : yc, prodL, base);
                                    prodL = prod.length;
                                    cmp = 1;
                                }
                            } else {
                                // n is 0 or 1, cmp is -1.
                                // If n is 0, there is no need to compare yc and rem again below,
                                // so change cmp to 1 to avoid it.
                                // If n is 1, leave cmp as -1, so yc and rem are compared again.
                                if (n == 0) // divisor < remainder, so n must be at least 1.
                                cmp = n = 1;
                                // product = divisor
                                prod = yc.slice();
                                prodL = prod.length;
                            }
                            if (prodL < remL) prod = [
                                0
                            ].concat(prod);
                            // Subtract product from remainder.
                            subtract(rem, prod, remL, base);
                            remL = rem.length;
                            // If product was < remainder.
                            if (cmp == -1) // Compare divisor and new remainder.
                            // If divisor < new remainder, subtract divisor from remainder.
                            // Trial digit n too low.
                            // n is 1 too low about 5% of the time, and very rarely 2 too low.
                            while(compare(yc, rem, yL, remL) < 1){
                                n++;
                                // Subtract divisor from remainder.
                                subtract(rem, yL < remL ? yz : yc, remL, base);
                                remL = rem.length;
                            }
                        } else if (cmp === 0) {
                            n++;
                            rem = [
                                0
                            ];
                        } // else cmp === 1 and n will be 0
                        // Add the next digit, n, to the result array.
                        qc[i++] = n;
                        // Update the remainder.
                        if (rem[0]) rem[remL++] = xc[xi] || 0;
                        else {
                            rem = [
                                xc[xi]
                            ];
                            remL = 1;
                        }
                    }while ((xi++ < xL || rem[0] != null) && s--);
                    more = rem[0] != null;
                    // Leading zero?
                    if (!qc[0]) qc.splice(0, 1);
                }
                if (base == BASE) {
                    // To calculate q.e, first get the number of digits of qc[0].
                    for(i = 1, s = qc[0]; s >= 10; s /= 10, i++);
                    round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);
                // Caller is convertBase.
                } else {
                    q.e = e;
                    q.r = +more;
                }
                return q;
            };
        }();
        /*
     * Return a string representing the value of BigNumber n in fixed-point or exponential
     * notation rounded to the specified decimal places or significant digits.
     *
     * n: a BigNumber.
     * i: the index of the last digit required (i.e. the digit that may be rounded up).
     * rm: the rounding mode.
     * id: 1 (toExponential) or 2 (toPrecision).
     */ function format(n, i, rm, id) {
            var c0, e, ne, len, str;
            if (rm == null) rm = ROUNDING_MODE;
            else intCheck(rm, 0, 8);
            if (!n.c) return n.toString();
            c0 = n.c[0];
            ne = n.e;
            if (i == null) {
                str = coeffToString(n.c);
                str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS) ? toExponential(str, ne) : toFixedPoint(str, ne, "0");
            } else {
                n = round(new BigNumber(n), i, rm);
                // n.e may have changed if the value was rounded up.
                e = n.e;
                str = coeffToString(n.c);
                len = str.length;
                // toPrecision returns exponential notation if the number of significant digits
                // specified is less than the number of digits necessary to represent the integer
                // part of the value in fixed-point notation.
                // Exponential notation.
                if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {
                    // Append zeros?
                    for(; len < i; str += "0", len++);
                    str = toExponential(str, e);
                // Fixed-point notation.
                } else {
                    i -= ne;
                    str = toFixedPoint(str, e, "0");
                    // Append zeros?
                    if (e + 1 > len) {
                        if (--i > 0) for(str += "."; i--; str += "0");
                    } else {
                        i += e - len;
                        if (i > 0) {
                            if (e + 1 == len) str += ".";
                            for(; i--; str += "0");
                        }
                    }
                }
            }
            return n.s < 0 && c0 ? "-" + str : str;
        }
        // Handle BigNumber.max and BigNumber.min.
        function maxOrMin(args, method) {
            var n, i = 1, m = new BigNumber(args[0]);
            for(; i < args.length; i++){
                n = new BigNumber(args[i]);
                // If any number is NaN, return NaN.
                if (!n.s) {
                    m = n;
                    break;
                } else if (method.call(m, n)) m = n;
            }
            return m;
        }
        /*
     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.
     * Called by minus, plus and times.
     */ function normalise(n, c, e) {
            var i = 1, j = c.length;
            // Remove trailing zeros.
            for(; !c[--j]; c.pop());
            // Calculate the base 10 exponent. First get the number of digits of c[0].
            for(j = c[0]; j >= 10; j /= 10, i++);
            // Overflow?
            if ((e = i + e * LOG_BASE - 1) > MAX_EXP) // Infinity.
            n.c = n.e = null;
            else if (e < MIN_EXP) // Zero.
            n.c = [
                n.e = 0
            ];
            else {
                n.e = e;
                n.c = c;
            }
            return n;
        }
        // Handle values that fail the validity test in BigNumber.
        parseNumeric = function() {
            var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i, dotAfter = /^([^.]+)\.$/, dotBefore = /^\.([^.]+)$/, isInfinityOrNaN = /^-?(Infinity|NaN)$/, whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;
            return function(x, str, isNum, b) {
                var base, s = isNum ? str : str.replace(whitespaceOrPlus, "");
                // No exception on ±Infinity or NaN.
                if (isInfinityOrNaN.test(s)) x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
                else {
                    if (!isNum) {
                        // basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i
                        s = s.replace(basePrefix, function(m, p1, p2) {
                            base = (p2 = p2.toLowerCase()) == "x" ? 16 : p2 == "b" ? 2 : 8;
                            return !b || b == base ? p1 : m;
                        });
                        if (b) {
                            base = b;
                            // E.g. '1.' to '1', '.1' to '0.1'
                            s = s.replace(dotAfter, "$1").replace(dotBefore, "0.$1");
                        }
                        if (str != s) return new BigNumber(s, base);
                    }
                    // '[BigNumber Error] Not a number: {n}'
                    // '[BigNumber Error] Not a base {b} number: {n}'
                    if (BigNumber.DEBUG) throw Error(bignumberError + "Not a" + (b ? " base " + b : "") + " number: " + str);
                    // NaN
                    x.s = null;
                }
                x.c = x.e = null;
            };
        }();
        /*
     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.
     * If r is truthy, it is known that there are more digits after the rounding digit.
     */ function round(x, sd, rm, r) {
            var d, i, j, k, n, ni, rd, xc = x.c, pows10 = POWS_TEN;
            // if x is not Infinity or NaN...
            if (xc) {
                // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.
                // n is a base 1e14 number, the value of the element of array x.c containing rd.
                // ni is the index of n within x.c.
                // d is the number of digits of n.
                // i is the index of rd within n including leading zeros.
                // j is the actual index of rd within n (if < 0, rd is a leading zero).
                out: {
                    // Get the number of digits of the first element of xc.
                    for(d = 1, k = xc[0]; k >= 10; k /= 10, d++);
                    i = sd - d;
                    // If the rounding digit is in the first element of xc...
                    if (i < 0) {
                        i += LOG_BASE;
                        j = sd;
                        n = xc[ni = 0];
                        // Get the rounding digit at index j of n.
                        rd = n / pows10[d - j - 1] % 10 | 0;
                    } else {
                        ni = mathceil((i + 1) / LOG_BASE);
                        if (ni >= xc.length) {
                            if (r) {
                                // Needed by sqrt.
                                for(; xc.length <= ni; xc.push(0));
                                n = rd = 0;
                                d = 1;
                                i %= LOG_BASE;
                                j = i - LOG_BASE + 1;
                            } else break out;
                        } else {
                            n = k = xc[ni];
                            // Get the number of digits of n.
                            for(d = 1; k >= 10; k /= 10, d++);
                            // Get the index of rd within n.
                            i %= LOG_BASE;
                            // Get the index of rd within n, adjusted for leading zeros.
                            // The number of leading zeros of n is given by LOG_BASE - d.
                            j = i - LOG_BASE + d;
                            // Get the rounding digit at index j of n.
                            rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;
                        }
                    }
                    r = r || sd < 0 || // Are there any non-zero digits after the rounding digit?
                    // The expression  n % pows10[d - j - 1]  returns all digits of n to the right
                    // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
                    xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);
                    r = rm < 4 ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 && (i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));
                    if (sd < 1 || !xc[0]) {
                        xc.length = 0;
                        if (r) {
                            // Convert sd to decimal places.
                            sd -= x.e + 1;
                            // 1, 0.1, 0.01, 0.001, 0.0001 etc.
                            xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];
                            x.e = -sd || 0;
                        } else // Zero.
                        xc[0] = x.e = 0;
                        return x;
                    }
                    // Remove excess digits.
                    if (i == 0) {
                        xc.length = ni;
                        k = 1;
                        ni--;
                    } else {
                        xc.length = ni + 1;
                        k = pows10[LOG_BASE - i];
                        // E.g. 56700 becomes 56000 if 7 is the rounding digit.
                        // j > 0 means i > number of leading zeros of n.
                        xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;
                    }
                    // Round up?
                    if (r) {
                        for(;;)// If the digit to be rounded up is in the first element of xc...
                        if (ni == 0) {
                            // i will be the length of xc[0] before k is added.
                            for(i = 1, j = xc[0]; j >= 10; j /= 10, i++);
                            j = xc[0] += k;
                            for(k = 1; j >= 10; j /= 10, k++);
                            // if i != k the length has increased.
                            if (i != k) {
                                x.e++;
                                if (xc[0] == BASE) xc[0] = 1;
                            }
                            break;
                        } else {
                            xc[ni] += k;
                            if (xc[ni] != BASE) break;
                            xc[ni--] = 0;
                            k = 1;
                        }
                    }
                    // Remove trailing zeros.
                    for(i = xc.length; xc[--i] === 0; xc.pop());
                }
                // Overflow? Infinity.
                if (x.e > MAX_EXP) x.c = x.e = null;
                else if (x.e < MIN_EXP) x.c = [
                    x.e = 0
                ];
            }
            return x;
        }
        function valueOf(n) {
            var str, e = n.e;
            if (e === null) return n.toString();
            str = coeffToString(n.c);
            str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e, "0");
            return n.s < 0 ? "-" + str : str;
        }
        // PROTOTYPE/INSTANCE METHODS
        /*
     * Return a new BigNumber whose value is the absolute value of this BigNumber.
     */ P.absoluteValue = P.abs = function() {
            var x = new BigNumber(this);
            if (x.s < 0) x.s = 1;
            return x;
        };
        /*
     * Return
     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),
     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),
     *   0 if they have the same value,
     *   or null if the value of either is NaN.
     */ P.comparedTo = function(y, b) {
            return compare(this, new BigNumber(y, b));
        };
        /*
     * If dp is undefined or null or true or false, return the number of decimal places of the
     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
     *
     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this
     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or
     * ROUNDING_MODE if rm is omitted.
     *
     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
     */ P.decimalPlaces = P.dp = function(dp, rm) {
            var c, n, v, x = this;
            if (dp != null) {
                intCheck(dp, 0, MAX);
                if (rm == null) rm = ROUNDING_MODE;
                else intCheck(rm, 0, 8);
                return round(new BigNumber(x), dp + x.e + 1, rm);
            }
            if (!(c = x.c)) return null;
            n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;
            // Subtract the number of trailing zeros of the last number.
            if (v = c[v]) for(; v % 10 == 0; v /= 10, n--);
            if (n < 0) n = 0;
            return n;
        };
        /*
     *  n / 0 = I
     *  n / N = N
     *  n / I = 0
     *  0 / n = 0
     *  0 / 0 = N
     *  0 / N = N
     *  0 / I = 0
     *  N / n = N
     *  N / 0 = N
     *  N / N = N
     *  N / I = N
     *  I / n = I
     *  I / 0 = I
     *  I / N = N
     *  I / I = N
     *
     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of
     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.
     */ P.dividedBy = P.div = function(y, b) {
            return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);
        };
        /*
     * Return a new BigNumber whose value is the integer part of dividing the value of this
     * BigNumber by the value of BigNumber(y, b).
     */ P.dividedToIntegerBy = P.idiv = function(y, b) {
            return div(this, new BigNumber(y, b), 0, 1);
        };
        /*
     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.
     *
     * If m is present, return the result modulo m.
     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.
     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.
     *
     * The modular power operation works efficiently when x, n, and m are integers, otherwise it
     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.
     *
     * n {number|string|BigNumber} The exponent. An integer.
     * [m] {number|string|BigNumber} The modulus.
     *
     * '[BigNumber Error] Exponent not an integer: {n}'
     */ P.exponentiatedBy = P.pow = function(n, m) {
            var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y, x = this;
            n = new BigNumber(n);
            // Allow NaN and ±Infinity, but not other non-integers.
            if (n.c && !n.isInteger()) throw Error(bignumberError + "Exponent not an integer: " + valueOf(n));
            if (m != null) m = new BigNumber(m);
            // Exponent of MAX_SAFE_INTEGER is 15.
            nIsBig = n.e > 14;
            // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.
            if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {
                // The sign of the result of pow when x is negative depends on the evenness of n.
                // If +n overflows to ±Infinity, the evenness of n would be not be known.
                y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? n.s * (2 - isOdd(n)) : +valueOf(n)));
                return m ? y.mod(m) : y;
            }
            nIsNeg = n.s < 0;
            if (m) {
                // x % m returns NaN if abs(m) is zero, or m is NaN.
                if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);
                isModExp = !nIsNeg && x.isInteger() && m.isInteger();
                if (isModExp) x = x.mod(m);
            // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.
            // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.
            } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0 ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7 : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {
                // If x is negative and n is odd, k = -0, else k = 0.
                k = x.s < 0 && isOdd(n) ? -0 : 0;
                // If x >= 1, k = ±Infinity.
                if (x.e > -1) k = 1 / k;
                // If n is negative return ±0, else return ±Infinity.
                return new BigNumber(nIsNeg ? 1 / k : k);
            } else if (POW_PRECISION) // Truncating each coefficient array to a length of k after each multiplication
            // equates to truncating significant digits to POW_PRECISION + [28, 41],
            // i.e. there will be a minimum of 28 guard digits retained.
            k = mathceil(POW_PRECISION / LOG_BASE + 2);
            if (nIsBig) {
                half = new BigNumber(0.5);
                if (nIsNeg) n.s = 1;
                nIsOdd = isOdd(n);
            } else {
                i = Math.abs(+valueOf(n));
                nIsOdd = i % 2;
            }
            y = new BigNumber(ONE);
            // Performs 54 loop iterations for n of 9007199254740991.
            for(;;){
                if (nIsOdd) {
                    y = y.times(x);
                    if (!y.c) break;
                    if (k) {
                        if (y.c.length > k) y.c.length = k;
                    } else if (isModExp) y = y.mod(m); //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));
                }
                if (i) {
                    i = mathfloor(i / 2);
                    if (i === 0) break;
                    nIsOdd = i % 2;
                } else {
                    n = n.times(half);
                    round(n, n.e + 1, 1);
                    if (n.e > 14) nIsOdd = isOdd(n);
                    else {
                        i = +valueOf(n);
                        if (i === 0) break;
                        nIsOdd = i % 2;
                    }
                }
                x = x.times(x);
                if (k) {
                    if (x.c && x.c.length > k) x.c.length = k;
                } else if (isModExp) x = x.mod(m); //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));
            }
            if (isModExp) return y;
            if (nIsNeg) y = ONE.div(y);
            return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;
        };
        /*
     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer
     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.
     *
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'
     */ P.integerValue = function(rm) {
            var n = new BigNumber(this);
            if (rm == null) rm = ROUNDING_MODE;
            else intCheck(rm, 0, 8);
            return round(n, n.e + 1, rm);
        };
        /*
     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),
     * otherwise return false.
     */ P.isEqualTo = P.eq = function(y, b) {
            return compare(this, new BigNumber(y, b)) === 0;
        };
        /*
     * Return true if the value of this BigNumber is a finite number, otherwise return false.
     */ P.isFinite = function() {
            return !!this.c;
        };
        /*
     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),
     * otherwise return false.
     */ P.isGreaterThan = P.gt = function(y, b) {
            return compare(this, new BigNumber(y, b)) > 0;
        };
        /*
     * Return true if the value of this BigNumber is greater than or equal to the value of
     * BigNumber(y, b), otherwise return false.
     */ P.isGreaterThanOrEqualTo = P.gte = function(y, b) {
            return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;
        };
        /*
     * Return true if the value of this BigNumber is an integer, otherwise return false.
     */ P.isInteger = function() {
            return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
        };
        /*
     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),
     * otherwise return false.
     */ P.isLessThan = P.lt = function(y, b) {
            return compare(this, new BigNumber(y, b)) < 0;
        };
        /*
     * Return true if the value of this BigNumber is less than or equal to the value of
     * BigNumber(y, b), otherwise return false.
     */ P.isLessThanOrEqualTo = P.lte = function(y, b) {
            return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;
        };
        /*
     * Return true if the value of this BigNumber is NaN, otherwise return false.
     */ P.isNaN = function() {
            return !this.s;
        };
        /*
     * Return true if the value of this BigNumber is negative, otherwise return false.
     */ P.isNegative = function() {
            return this.s < 0;
        };
        /*
     * Return true if the value of this BigNumber is positive, otherwise return false.
     */ P.isPositive = function() {
            return this.s > 0;
        };
        /*
     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.
     */ P.isZero = function() {
            return !!this.c && this.c[0] == 0;
        };
        /*
     *  n - 0 = n
     *  n - N = N
     *  n - I = -I
     *  0 - n = -n
     *  0 - 0 = 0
     *  0 - N = N
     *  0 - I = -I
     *  N - n = N
     *  N - 0 = N
     *  N - N = N
     *  N - I = N
     *  I - n = I
     *  I - 0 = I
     *  I - N = N
     *  I - I = N
     *
     * Return a new BigNumber whose value is the value of this BigNumber minus the value of
     * BigNumber(y, b).
     */ P.minus = function(y, b) {
            var i, j, t, xLTy, x = this, a = x.s;
            y = new BigNumber(y, b);
            b = y.s;
            // Either NaN?
            if (!a || !b) return new BigNumber(NaN);
            // Signs differ?
            if (a != b) {
                y.s = -b;
                return x.plus(y);
            }
            var xe = x.e / LOG_BASE, ye = y.e / LOG_BASE, xc = x.c, yc = y.c;
            if (!xe || !ye) {
                // Either Infinity?
                if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);
                // Either zero?
                if (!xc[0] || !yc[0]) // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
                return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x : // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
                ROUNDING_MODE == 3 ? -0 : 0);
            }
            xe = bitFloor(xe);
            ye = bitFloor(ye);
            xc = xc.slice();
            // Determine which is the bigger number.
            if (a = xe - ye) {
                if (xLTy = a < 0) {
                    a = -a;
                    t = xc;
                } else {
                    ye = xe;
                    t = yc;
                }
                t.reverse();
                // Prepend zeros to equalise exponents.
                for(b = a; b--; t.push(0));
                t.reverse();
            } else {
                // Exponents equal. Check digit by digit.
                j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;
                for(a = b = 0; b < j; b++)if (xc[b] != yc[b]) {
                    xLTy = xc[b] < yc[b];
                    break;
                }
            }
            // x < y? Point xc to the array of the bigger number.
            if (xLTy) {
                t = xc;
                xc = yc;
                yc = t;
                y.s = -y.s;
            }
            b = (j = yc.length) - (i = xc.length);
            // Append zeros to xc if shorter.
            // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.
            if (b > 0) for(; b--; xc[i++] = 0);
            b = BASE - 1;
            // Subtract yc from xc.
            for(; j > a;){
                if (xc[--j] < yc[j]) {
                    for(i = j; i && !xc[--i]; xc[i] = b);
                    --xc[i];
                    xc[j] += BASE;
                }
                xc[j] -= yc[j];
            }
            // Remove leading zeros and adjust exponent accordingly.
            for(; xc[0] == 0; xc.splice(0, 1), --ye);
            // Zero?
            if (!xc[0]) {
                // Following IEEE 754 (2008) 6.3,
                // n - n = +0  but  n - n = -0  when rounding towards -Infinity.
                y.s = ROUNDING_MODE == 3 ? -1 : 1;
                y.c = [
                    y.e = 0
                ];
                return y;
            }
            // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity
            // for finite x and y.
            return normalise(y, xc, ye);
        };
        /*
     *   n % 0 =  N
     *   n % N =  N
     *   n % I =  n
     *   0 % n =  0
     *  -0 % n = -0
     *   0 % 0 =  N
     *   0 % N =  N
     *   0 % I =  0
     *   N % n =  N
     *   N % 0 =  N
     *   N % N =  N
     *   N % I =  N
     *   I % n =  N
     *   I % 0 =  N
     *   I % N =  N
     *   I % I =  N
     *
     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of
     * BigNumber(y, b). The result depends on the value of MODULO_MODE.
     */ P.modulo = P.mod = function(y, b) {
            var q, s, x = this;
            y = new BigNumber(y, b);
            // Return NaN if x is Infinity or NaN, or y is NaN or zero.
            if (!x.c || !y.s || y.c && !y.c[0]) return new BigNumber(NaN);
            else if (!y.c || x.c && !x.c[0]) return new BigNumber(x);
            if (MODULO_MODE == 9) {
                // Euclidian division: q = sign(y) * floor(x / abs(y))
                // r = x - qy    where  0 <= r < abs(y)
                s = y.s;
                y.s = 1;
                q = div(x, y, 0, 3);
                y.s = s;
                q.s *= s;
            } else q = div(x, y, 0, MODULO_MODE);
            y = x.minus(q.times(y));
            // To match JavaScript %, ensure sign of zero is sign of dividend.
            if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;
            return y;
        };
        /*
     *  n * 0 = 0
     *  n * N = N
     *  n * I = I
     *  0 * n = 0
     *  0 * 0 = 0
     *  0 * N = N
     *  0 * I = N
     *  N * n = N
     *  N * 0 = N
     *  N * N = N
     *  N * I = N
     *  I * n = I
     *  I * 0 = N
     *  I * N = N
     *  I * I = I
     *
     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value
     * of BigNumber(y, b).
     */ P.multipliedBy = P.times = function(y, b) {
            var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc, base, sqrtBase, x = this, xc = x.c, yc = (y = new BigNumber(y, b)).c;
            // Either NaN, ±Infinity or ±0?
            if (!xc || !yc || !xc[0] || !yc[0]) {
                // Return NaN if either is NaN, or one is 0 and the other is Infinity.
                if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) y.c = y.e = y.s = null;
                else {
                    y.s *= x.s;
                    // Return ±Infinity if either is ±Infinity.
                    if (!xc || !yc) y.c = y.e = null;
                    else {
                        y.c = [
                            0
                        ];
                        y.e = 0;
                    }
                }
                return y;
            }
            e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);
            y.s *= x.s;
            xcL = xc.length;
            ycL = yc.length;
            // Ensure xc points to longer array and xcL to its length.
            if (xcL < ycL) {
                zc = xc;
                xc = yc;
                yc = zc;
                i = xcL;
                xcL = ycL;
                ycL = i;
            }
            // Initialise the result array with zeros.
            for(i = xcL + ycL, zc = []; i--; zc.push(0));
            base = BASE;
            sqrtBase = SQRT_BASE;
            for(i = ycL; --i >= 0;){
                c = 0;
                ylo = yc[i] % sqrtBase;
                yhi = yc[i] / sqrtBase | 0;
                for(k = xcL, j = i + k; j > i;){
                    xlo = xc[--k] % sqrtBase;
                    xhi = xc[k] / sqrtBase | 0;
                    m = yhi * xlo + xhi * ylo;
                    xlo = ylo * xlo + m % sqrtBase * sqrtBase + zc[j] + c;
                    c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;
                    zc[j--] = xlo % base;
                }
                zc[j] = c;
            }
            if (c) ++e;
            else zc.splice(0, 1);
            return normalise(y, zc, e);
        };
        /*
     * Return a new BigNumber whose value is the value of this BigNumber negated,
     * i.e. multiplied by -1.
     */ P.negated = function() {
            var x = new BigNumber(this);
            x.s = -x.s || null;
            return x;
        };
        /*
     *  n + 0 = n
     *  n + N = N
     *  n + I = I
     *  0 + n = n
     *  0 + 0 = 0
     *  0 + N = N
     *  0 + I = I
     *  N + n = N
     *  N + 0 = N
     *  N + N = N
     *  N + I = N
     *  I + n = I
     *  I + 0 = I
     *  I + N = N
     *  I + I = I
     *
     * Return a new BigNumber whose value is the value of this BigNumber plus the value of
     * BigNumber(y, b).
     */ P.plus = function(y, b) {
            var t, x = this, a = x.s;
            y = new BigNumber(y, b);
            b = y.s;
            // Either NaN?
            if (!a || !b) return new BigNumber(NaN);
            // Signs differ?
            if (a != b) {
                y.s = -b;
                return x.minus(y);
            }
            var xe = x.e / LOG_BASE, ye = y.e / LOG_BASE, xc = x.c, yc = y.c;
            if (!xe || !ye) {
                // Return ±Infinity if either ±Infinity.
                if (!xc || !yc) return new BigNumber(a / 0);
                // Either zero?
                // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
                if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);
            }
            xe = bitFloor(xe);
            ye = bitFloor(ye);
            xc = xc.slice();
            // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.
            if (a = xe - ye) {
                if (a > 0) {
                    ye = xe;
                    t = yc;
                } else {
                    a = -a;
                    t = xc;
                }
                t.reverse();
                for(; a--; t.push(0));
                t.reverse();
            }
            a = xc.length;
            b = yc.length;
            // Point xc to the longer array, and b to the shorter length.
            if (a - b < 0) {
                t = yc;
                yc = xc;
                xc = t;
                b = a;
            }
            // Only start adding at yc.length - 1 as the further digits of xc can be ignored.
            for(a = 0; b;){
                a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;
                xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;
            }
            if (a) {
                xc = [
                    a
                ].concat(xc);
                ++ye;
            }
            // No need to check for zero, as +x + +y != 0 && -x + -y != 0
            // ye = MAX_EXP + 1 possible
            return normalise(y, xc, ye);
        };
        /*
     * If sd is undefined or null or true or false, return the number of significant digits of
     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
     * If sd is true include integer-part trailing zeros in the count.
     *
     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this
     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or
     * ROUNDING_MODE if rm is omitted.
     *
     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.
     *                     boolean: whether to count integer-part trailing zeros: true or false.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
     */ P.precision = P.sd = function(sd, rm) {
            var c, n, v, x = this;
            if (sd != null && sd !== !!sd) {
                intCheck(sd, 1, MAX);
                if (rm == null) rm = ROUNDING_MODE;
                else intCheck(rm, 0, 8);
                return round(new BigNumber(x), sd, rm);
            }
            if (!(c = x.c)) return null;
            v = c.length - 1;
            n = v * LOG_BASE + 1;
            if (v = c[v]) {
                // Subtract the number of trailing zeros of the last element.
                for(; v % 10 == 0; v /= 10, n--);
                // Add the number of digits of the first element.
                for(v = c[0]; v >= 10; v /= 10, n++);
            }
            if (sd && x.e + 1 > n) n = x.e + 1;
            return n;
        };
        /*
     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places
     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.
     *
     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'
     */ P.shiftedBy = function(k) {
            intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
            return this.times("1e" + k);
        };
        /*
     *  sqrt(-n) =  N
     *  sqrt(N) =  N
     *  sqrt(-I) =  N
     *  sqrt(I) =  I
     *  sqrt(0) =  0
     *  sqrt(-0) = -0
     *
     * Return a new BigNumber whose value is the square root of the value of this BigNumber,
     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.
     */ P.squareRoot = P.sqrt = function() {
            var m, n, r, rep, t, x = this, c = x.c, s = x.s, e = x.e, dp = DECIMAL_PLACES + 4, half = new BigNumber("0.5");
            // Negative/NaN/Infinity/zero?
            if (s !== 1 || !c || !c[0]) return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);
            // Initial estimate.
            s = Math.sqrt(+valueOf(x));
            // Math.sqrt underflow/overflow?
            // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
            if (s == 0 || s == 1 / 0) {
                n = coeffToString(c);
                if ((n.length + e) % 2 == 0) n += "0";
                s = Math.sqrt(+n);
                e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);
                if (s == 1 / 0) n = "5e" + e;
                else {
                    n = s.toExponential();
                    n = n.slice(0, n.indexOf("e") + 1) + e;
                }
                r = new BigNumber(n);
            } else r = new BigNumber(s + "");
            // Check for zero.
            // r could be zero if MIN_EXP is changed after the this value was created.
            // This would cause a division by zero (x/t) and hence Infinity below, which would cause
            // coeffToString to throw.
            if (r.c[0]) {
                e = r.e;
                s = e + dp;
                if (s < 3) s = 0;
                // Newton-Raphson iteration.
                for(;;){
                    t = r;
                    r = half.times(t.plus(div(x, t, dp, 1)));
                    if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {
                        // The exponent of r may here be one less than the final result exponent,
                        // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits
                        // are indexed correctly.
                        if (r.e < e) --s;
                        n = n.slice(s - 3, s + 1);
                        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits
                        // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the
                        // iteration.
                        if (n == "9999" || !rep && n == "4999") {
                            // On the first iteration only, check to see if rounding up gives the
                            // exact result as the nines may infinitely repeat.
                            if (!rep) {
                                round(t, t.e + DECIMAL_PLACES + 2, 0);
                                if (t.times(t).eq(x)) {
                                    r = t;
                                    break;
                                }
                            }
                            dp += 4;
                            s += 4;
                            rep = 1;
                        } else {
                            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact
                            // result. If not, then there are further digits and m will be truthy.
                            if (!+n || !+n.slice(1) && n.charAt(0) == "5") {
                                // Truncate to the first rounding digit.
                                round(r, r.e + DECIMAL_PLACES + 2, 1);
                                m = !r.times(r).eq(x);
                            }
                            break;
                        }
                    }
                }
            }
            return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);
        };
        /*
     * Return a string representing the value of this BigNumber in exponential notation and
     * rounded using ROUNDING_MODE to dp fixed decimal places.
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
     */ P.toExponential = function(dp, rm) {
            if (dp != null) {
                intCheck(dp, 0, MAX);
                dp++;
            }
            return format(this, dp, rm, 1);
        };
        /*
     * Return a string representing the value of this BigNumber in fixed-point notation rounding
     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.
     *
     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',
     * but e.g. (-0.00001).toFixed(0) is '-0'.
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
     */ P.toFixed = function(dp, rm) {
            if (dp != null) {
                intCheck(dp, 0, MAX);
                dp = dp + this.e + 1;
            }
            return format(this, dp, rm);
        };
        /*
     * Return a string representing the value of this BigNumber in fixed-point notation rounded
     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties
     * of the format or FORMAT object (see BigNumber.set).
     *
     * The formatting object may contain some or all of the properties shown below.
     *
     * FORMAT = {
     *   prefix: '',
     *   groupSize: 3,
     *   secondaryGroupSize: 0,
     *   groupSeparator: ',',
     *   decimalSeparator: '.',
     *   fractionGroupSize: 0,
     *   fractionGroupSeparator: '\xA0',      // non-breaking space
     *   suffix: ''
     * };
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     * [format] {object} Formatting options. See FORMAT pbject above.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
     * '[BigNumber Error] Argument not an object: {format}'
     */ P.toFormat = function(dp, rm, format) {
            var str, x = this;
            if (format == null) {
                if (dp != null && rm && typeof rm == "object") {
                    format = rm;
                    rm = null;
                } else if (dp && typeof dp == "object") {
                    format = dp;
                    dp = rm = null;
                } else format = FORMAT;
            } else if (typeof format != "object") throw Error(bignumberError + "Argument not an object: " + format);
            str = x.toFixed(dp, rm);
            if (x.c) {
                var i, arr = str.split("."), g1 = +format.groupSize, g2 = +format.secondaryGroupSize, groupSeparator = format.groupSeparator || "", intPart = arr[0], fractionPart = arr[1], isNeg = x.s < 0, intDigits = isNeg ? intPart.slice(1) : intPart, len = intDigits.length;
                if (g2) {
                    i = g1;
                    g1 = g2;
                    g2 = i;
                    len -= i;
                }
                if (g1 > 0 && len > 0) {
                    i = len % g1 || g1;
                    intPart = intDigits.substr(0, i);
                    for(; i < len; i += g1)intPart += groupSeparator + intDigits.substr(i, g1);
                    if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);
                    if (isNeg) intPart = "-" + intPart;
                }
                str = fractionPart ? intPart + (format.decimalSeparator || "") + ((g2 = +format.fractionGroupSize) ? fractionPart.replace(new RegExp("\\d{" + g2 + "}\\B", "g"), "$&" + (format.fractionGroupSeparator || "")) : fractionPart) : intPart;
            }
            return (format.prefix || "") + str + (format.suffix || "");
        };
        /*
     * Return an array of two BigNumbers representing the value of this BigNumber as a simple
     * fraction with an integer numerator and an integer denominator.
     * The denominator will be a positive non-zero value less than or equal to the specified
     * maximum denominator. If a maximum denominator is not specified, the denominator will be
     * the lowest value necessary to represent the number exactly.
     *
     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.
     *
     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'
     */ P.toFraction = function(md) {
            var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s, x = this, xc = x.c;
            if (md != null) {
                n = new BigNumber(md);
                // Throw if md is less than one or is not an integer, unless it is Infinity.
                if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) throw Error(bignumberError + "Argument " + (n.isInteger() ? "out of range: " : "not an integer: ") + valueOf(n));
            }
            if (!xc) return new BigNumber(x);
            d = new BigNumber(ONE);
            n1 = d0 = new BigNumber(ONE);
            d1 = n0 = new BigNumber(ONE);
            s = coeffToString(xc);
            // Determine initial denominator.
            // d is a power of 10 and the minimum max denominator that specifies the value exactly.
            e = d.e = s.length - x.e - 1;
            d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
            md = !md || n.comparedTo(d) > 0 ? e > 0 ? d : n1 : n;
            exp = MAX_EXP;
            MAX_EXP = 1 / 0;
            n = new BigNumber(s);
            // n0 = d1 = 0
            n0.c[0] = 0;
            for(;;){
                q = div(n, d, 0, 1);
                d2 = d0.plus(q.times(d1));
                if (d2.comparedTo(md) == 1) break;
                d0 = d1;
                d1 = d2;
                n1 = n0.plus(q.times(d2 = n1));
                n0 = d2;
                d = n.minus(q.times(d2 = d));
                n = d2;
            }
            d2 = div(md.minus(d0), d1, 0, 1);
            n0 = n0.plus(d2.times(n1));
            d0 = d0.plus(d2.times(d1));
            n0.s = n1.s = x.s;
            e = e * 2;
            // Determine which fraction is closer to x, n0/d0 or n1/d1
            r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [
                n1,
                d1
            ] : [
                n0,
                d0
            ];
            MAX_EXP = exp;
            return r;
        };
        /*
     * Return the value of this BigNumber converted to a number primitive.
     */ P.toNumber = function() {
            return +valueOf(this);
        };
        /*
     * Return a string representing the value of this BigNumber rounded to sd significant digits
     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits
     * necessary to represent the integer part of the value in fixed-point notation, then use
     * exponential notation.
     *
     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
     */ P.toPrecision = function(sd, rm) {
            if (sd != null) intCheck(sd, 1, MAX);
            return format(this, sd, rm, 2);
        };
        /*
     * Return a string representing the value of this BigNumber in base b, or base 10 if b is
     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and
     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent
     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than
     * TO_EXP_NEG, return exponential notation.
     *
     * [b] {number} Integer, 2 to ALPHABET.length inclusive.
     *
     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
     */ P.toString = function(b) {
            var str, n = this, s = n.s, e = n.e;
            // Infinity or NaN?
            if (e === null) {
                if (s) {
                    str = "Infinity";
                    if (s < 0) str = "-" + str;
                } else str = "NaN";
            } else {
                if (b == null) str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(coeffToString(n.c), e) : toFixedPoint(coeffToString(n.c), e, "0");
                else if (b === 10 && alphabetHasNormalDecimalDigits) {
                    n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);
                    str = toFixedPoint(coeffToString(n.c), n.e, "0");
                } else {
                    intCheck(b, 2, ALPHABET.length, "Base");
                    str = convertBase(toFixedPoint(coeffToString(n.c), e, "0"), 10, b, s, true);
                }
                if (s < 0 && n.c[0]) str = "-" + str;
            }
            return str;
        };
        /*
     * Return as toString, but do not accept a base argument, and include the minus sign for
     * negative zero.
     */ P.valueOf = P.toJSON = function() {
            return valueOf(this);
        };
        P._isBigNumber = true;
        if (configObject != null) BigNumber.set(configObject);
        return BigNumber;
    }
    // PRIVATE HELPER FUNCTIONS
    // These functions don't need access to variables,
    // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.
    function bitFloor(n) {
        var i = n | 0;
        return n > 0 || n === i ? i : i - 1;
    }
    // Return a coefficient array as a string of base 10 digits.
    function coeffToString(a) {
        var s, z, i = 1, j = a.length, r = a[0] + "";
        for(; i < j;){
            s = a[i++] + "";
            z = LOG_BASE - s.length;
            for(; z--; s = "0" + s);
            r += s;
        }
        // Determine trailing zeros.
        for(j = r.length; r.charCodeAt(--j) === 48;);
        return r.slice(0, j + 1 || 1);
    }
    // Compare the value of BigNumbers x and y.
    function compare(x, y) {
        var a, b, xc = x.c, yc = y.c, i = x.s, j = y.s, k = x.e, l = y.e;
        // Either NaN?
        if (!i || !j) return null;
        a = xc && !xc[0];
        b = yc && !yc[0];
        // Either zero?
        if (a || b) return a ? b ? 0 : -j : i;
        // Signs differ?
        if (i != j) return i;
        a = i < 0;
        b = k == l;
        // Either Infinity?
        if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;
        // Compare exponents.
        if (!b) return k > l ^ a ? 1 : -1;
        j = (k = xc.length) < (l = yc.length) ? k : l;
        // Compare digit by digit.
        for(i = 0; i < j; i++)if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;
        // Compare lengths.
        return k == l ? 0 : k > l ^ a ? 1 : -1;
    }
    /*
   * Check that n is a primitive number, an integer, and in range, otherwise throw.
   */ function intCheck(n, min, max, name) {
        if (n < min || n > max || n !== mathfloor(n)) throw Error(bignumberError + (name || "Argument") + (typeof n == "number" ? n < min || n > max ? " out of range: " : " not an integer: " : " not a primitive number: ") + String(n));
    }
    // Assumes finite n.
    function isOdd(n) {
        var k = n.c.length - 1;
        return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;
    }
    function toExponential(str, e) {
        return (str.length > 1 ? str.charAt(0) + "." + str.slice(1) : str) + (e < 0 ? "e" : "e+") + e;
    }
    function toFixedPoint(str, e, z) {
        var len, zs;
        // Negative exponent?
        if (e < 0) {
            // Prepend zeros.
            for(zs = z + "."; ++e; zs += z);
            str = zs + str;
        // Positive exponent
        } else {
            len = str.length;
            // Append zeros.
            if (++e > len) {
                for(zs = z, e -= len; --e; zs += z);
                str += zs;
            } else if (e < len) str = str.slice(0, e) + "." + str.slice(e);
        }
        return str;
    }
    // EXPORT
    BigNumber = clone();
    BigNumber["default"] = BigNumber.BigNumber = BigNumber;
    // AMD.
    if (typeof define == "function" && define.amd) define(function() {
        return BigNumber;
    });
    else if (0, module.exports) module.exports = BigNumber;
    else {
        if (!globalObject) globalObject = typeof self != "undefined" && self ? self : window;
        globalObject.BigNumber = BigNumber;
    }
})(this);

},{}],"1jA8a":[function(require,module,exports) {
"use strict";
/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.randomBytes = exports.wrapXOFConstructorWithOpts = exports.wrapConstructorWithOpts = exports.wrapConstructor = exports.checkOpts = exports.Hash = exports.concatBytes = exports.toBytes = exports.utf8ToBytes = exports.asyncLoop = exports.nextTick = exports.hexToBytes = exports.bytesToHex = exports.isLE = exports.rotr = exports.createView = exports.u32 = exports.u8 = void 0;
// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.
// node.js versions earlier than v19 don't declare it in global scope.
// For node.js, package.json#exports field mapping rewrites import
// from `crypto` to `cryptoNode`, which imports native module.
// Makes the utils un-importable in browsers without a bundler.
// Once node.js 18 is deprecated, we can just drop the import.
const crypto_1 = require("308a0f9b8753b4af");
const u8a = (a)=>a instanceof Uint8Array;
// Cast array to different type
const u8 = (arr)=>new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);
exports.u8 = u8;
const u32 = (arr)=>new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
exports.u32 = u32;
// Cast array to view
const createView = (arr)=>new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
exports.createView = createView;
// The rotate right (circular right shift) operation for uint32
const rotr = (word, shift)=>word << 32 - shift | word >>> shift;
exports.rotr = rotr;
// big-endian hardware is rare. Just in case someone still decides to run hashes:
// early-throw an error because we don't support BE yet.
exports.isLE = new Uint8Array(new Uint32Array([
    0x11223344
]).buffer)[0] === 0x44;
if (!exports.isLE) throw new Error("Non little-endian hardware is not supported");
const hexes = Array.from({
    length: 256
}, (v, i)=>i.toString(16).padStart(2, "0"));
/**
 * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'
 */ function bytesToHex(bytes) {
    if (!u8a(bytes)) throw new Error("Uint8Array expected");
    // pre-caching improves the speed 6x
    let hex = "";
    for(let i = 0; i < bytes.length; i++)hex += hexes[bytes[i]];
    return hex;
}
exports.bytesToHex = bytesToHex;
/**
 * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])
 */ function hexToBytes(hex) {
    if (typeof hex !== "string") throw new Error("hex string expected, got " + typeof hex);
    const len = hex.length;
    if (len % 2) throw new Error("padded hex string expected, got unpadded hex of length " + len);
    const array = new Uint8Array(len / 2);
    for(let i = 0; i < array.length; i++){
        const j = i * 2;
        const hexByte = hex.slice(j, j + 2);
        const byte = Number.parseInt(hexByte, 16);
        if (Number.isNaN(byte) || byte < 0) throw new Error("Invalid byte sequence");
        array[i] = byte;
    }
    return array;
}
exports.hexToBytes = hexToBytes;
// There is no setImmediate in browser and setTimeout is slow.
// call of async fn will return Promise, which will be fullfiled only on
// next scheduler queue processing step and this is exactly what we need.
const nextTick = async ()=>{};
exports.nextTick = nextTick;
// Returns control to thread each 'tick' ms to avoid blocking
async function asyncLoop(iters, tick, cb) {
    let ts = Date.now();
    for(let i = 0; i < iters; i++){
        cb(i);
        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too
        const diff = Date.now() - ts;
        if (diff >= 0 && diff < tick) continue;
        await (0, exports.nextTick)();
        ts += diff;
    }
}
exports.asyncLoop = asyncLoop;
/**
 * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])
 */ function utf8ToBytes(str) {
    if (typeof str !== "string") throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809
}
exports.utf8ToBytes = utf8ToBytes;
/**
 * Normalizes (non-hex) string or Uint8Array to Uint8Array.
 * Warning: when Uint8Array is passed, it would NOT get copied.
 * Keep in mind for future mutable operations.
 */ function toBytes(data) {
    if (typeof data === "string") data = utf8ToBytes(data);
    if (!u8a(data)) throw new Error(`expected Uint8Array, got ${typeof data}`);
    return data;
}
exports.toBytes = toBytes;
/**
 * Copies several Uint8Arrays into one.
 */ function concatBytes(...arrays) {
    const r = new Uint8Array(arrays.reduce((sum, a)=>sum + a.length, 0));
    let pad = 0; // walk through each item, ensure they have proper type
    arrays.forEach((a)=>{
        if (!u8a(a)) throw new Error("Uint8Array expected");
        r.set(a, pad);
        pad += a.length;
    });
    return r;
}
exports.concatBytes = concatBytes;
// For runtime check if class implements interface
class Hash {
    // Safe version that clones internal state
    clone() {
        return this._cloneInto();
    }
}
exports.Hash = Hash;
// Check if object doens't have custom constructor (like Uint8Array/Array)
const isPlainObject = (obj)=>Object.prototype.toString.call(obj) === "[object Object]" && obj.constructor === Object;
function checkOpts(defaults, opts) {
    if (opts !== undefined && (typeof opts !== "object" || !isPlainObject(opts))) throw new Error("Options should be object or undefined");
    const merged = Object.assign(defaults, opts);
    return merged;
}
exports.checkOpts = checkOpts;
function wrapConstructor(hashCons) {
    const hashC = (msg)=>hashCons().update(toBytes(msg)).digest();
    const tmp = hashCons();
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = ()=>hashCons();
    return hashC;
}
exports.wrapConstructor = wrapConstructor;
function wrapConstructorWithOpts(hashCons) {
    const hashC = (msg, opts)=>hashCons(opts).update(toBytes(msg)).digest();
    const tmp = hashCons({});
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = (opts)=>hashCons(opts);
    return hashC;
}
exports.wrapConstructorWithOpts = wrapConstructorWithOpts;
function wrapXOFConstructorWithOpts(hashCons) {
    const hashC = (msg, opts)=>hashCons(opts).update(toBytes(msg)).digest();
    const tmp = hashCons({});
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = (opts)=>hashCons(opts);
    return hashC;
}
exports.wrapXOFConstructorWithOpts = wrapXOFConstructorWithOpts;
/**
 * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.
 */ function randomBytes(bytesLength = 32) {
    if (crypto_1.crypto && typeof crypto_1.crypto.getRandomValues === "function") return crypto_1.crypto.getRandomValues(new Uint8Array(bytesLength));
    throw new Error("crypto.getRandomValues must be defined");
}
exports.randomBytes = randomBytes;

},{"308a0f9b8753b4af":"9FSOc"}],"9FSOc":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.crypto = void 0;
exports.crypto = typeof globalThis === "object" && "crypto" in globalThis ? globalThis.crypto : undefined;

},{}],"4MCHQ":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.blake2s = exports.compress = exports.IV = void 0;
const _blake2_js_1 = require("ee025599a8e682b9");
const _u64_js_1 = require("12104f156aa0217c");
const utils_js_1 = require("8031f91ed7969a68");
// Initial state:
// first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19)
// same as SHA-256
// prettier-ignore
exports.IV = new Uint32Array([
    0x6a09e667,
    0xbb67ae85,
    0x3c6ef372,
    0xa54ff53a,
    0x510e527f,
    0x9b05688c,
    0x1f83d9ab,
    0x5be0cd19
]);
// Mixing function G splitted in two halfs
function G1(a, b, c, d, x) {
    a = a + b + x | 0;
    d = (0, utils_js_1.rotr)(d ^ a, 16);
    c = c + d | 0;
    b = (0, utils_js_1.rotr)(b ^ c, 12);
    return {
        a,
        b,
        c,
        d
    };
}
function G2(a, b, c, d, x) {
    a = a + b + x | 0;
    d = (0, utils_js_1.rotr)(d ^ a, 8);
    c = c + d | 0;
    b = (0, utils_js_1.rotr)(b ^ c, 7);
    return {
        a,
        b,
        c,
        d
    };
}
// prettier-ignore
function compress(s, offset, msg, rounds, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15) {
    let j = 0;
    for(let i = 0; i < rounds; i++){
        ({ a: v0, b: v4, c: v8, d: v12 } = G1(v0, v4, v8, v12, msg[offset + s[j++]]));
        ({ a: v0, b: v4, c: v8, d: v12 } = G2(v0, v4, v8, v12, msg[offset + s[j++]]));
        ({ a: v1, b: v5, c: v9, d: v13 } = G1(v1, v5, v9, v13, msg[offset + s[j++]]));
        ({ a: v1, b: v5, c: v9, d: v13 } = G2(v1, v5, v9, v13, msg[offset + s[j++]]));
        ({ a: v2, b: v6, c: v10, d: v14 } = G1(v2, v6, v10, v14, msg[offset + s[j++]]));
        ({ a: v2, b: v6, c: v10, d: v14 } = G2(v2, v6, v10, v14, msg[offset + s[j++]]));
        ({ a: v3, b: v7, c: v11, d: v15 } = G1(v3, v7, v11, v15, msg[offset + s[j++]]));
        ({ a: v3, b: v7, c: v11, d: v15 } = G2(v3, v7, v11, v15, msg[offset + s[j++]]));
        ({ a: v0, b: v5, c: v10, d: v15 } = G1(v0, v5, v10, v15, msg[offset + s[j++]]));
        ({ a: v0, b: v5, c: v10, d: v15 } = G2(v0, v5, v10, v15, msg[offset + s[j++]]));
        ({ a: v1, b: v6, c: v11, d: v12 } = G1(v1, v6, v11, v12, msg[offset + s[j++]]));
        ({ a: v1, b: v6, c: v11, d: v12 } = G2(v1, v6, v11, v12, msg[offset + s[j++]]));
        ({ a: v2, b: v7, c: v8, d: v13 } = G1(v2, v7, v8, v13, msg[offset + s[j++]]));
        ({ a: v2, b: v7, c: v8, d: v13 } = G2(v2, v7, v8, v13, msg[offset + s[j++]]));
        ({ a: v3, b: v4, c: v9, d: v14 } = G1(v3, v4, v9, v14, msg[offset + s[j++]]));
        ({ a: v3, b: v4, c: v9, d: v14 } = G2(v3, v4, v9, v14, msg[offset + s[j++]]));
    }
    return {
        v0,
        v1,
        v2,
        v3,
        v4,
        v5,
        v6,
        v7,
        v8,
        v9,
        v10,
        v11,
        v12,
        v13,
        v14,
        v15
    };
}
exports.compress = compress;
class BLAKE2s extends _blake2_js_1.BLAKE2 {
    constructor(opts = {}){
        super(64, opts.dkLen === undefined ? 32 : opts.dkLen, opts, 32, 8, 8);
        // Internal state, same as SHA-256
        this.v0 = exports.IV[0] | 0;
        this.v1 = exports.IV[1] | 0;
        this.v2 = exports.IV[2] | 0;
        this.v3 = exports.IV[3] | 0;
        this.v4 = exports.IV[4] | 0;
        this.v5 = exports.IV[5] | 0;
        this.v6 = exports.IV[6] | 0;
        this.v7 = exports.IV[7] | 0;
        const keyLength = opts.key ? opts.key.length : 0;
        this.v0 ^= this.outputLen | keyLength << 8 | 16842752;
        if (opts.salt) {
            const salt = (0, utils_js_1.u32)((0, utils_js_1.toBytes)(opts.salt));
            this.v4 ^= salt[0];
            this.v5 ^= salt[1];
        }
        if (opts.personalization) {
            const pers = (0, utils_js_1.u32)((0, utils_js_1.toBytes)(opts.personalization));
            this.v6 ^= pers[0];
            this.v7 ^= pers[1];
        }
        if (opts.key) {
            // Pad to blockLen and update
            const tmp = new Uint8Array(this.blockLen);
            tmp.set((0, utils_js_1.toBytes)(opts.key));
            this.update(tmp);
        }
    }
    get() {
        const { v0, v1, v2, v3, v4, v5, v6, v7 } = this;
        return [
            v0,
            v1,
            v2,
            v3,
            v4,
            v5,
            v6,
            v7
        ];
    }
    // prettier-ignore
    set(v0, v1, v2, v3, v4, v5, v6, v7) {
        this.v0 = v0 | 0;
        this.v1 = v1 | 0;
        this.v2 = v2 | 0;
        this.v3 = v3 | 0;
        this.v4 = v4 | 0;
        this.v5 = v5 | 0;
        this.v6 = v6 | 0;
        this.v7 = v7 | 0;
    }
    compress(msg, offset, isLast) {
        const { h, l } = _u64_js_1.default.fromBig(BigInt(this.length));
        // prettier-ignore
        const { v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15 } = compress(_blake2_js_1.SIGMA, offset, msg, 10, this.v0, this.v1, this.v2, this.v3, this.v4, this.v5, this.v6, this.v7, exports.IV[0], exports.IV[1], exports.IV[2], exports.IV[3], l ^ exports.IV[4], h ^ exports.IV[5], isLast ? ~exports.IV[6] : exports.IV[6], exports.IV[7]);
        this.v0 ^= v0 ^ v8;
        this.v1 ^= v1 ^ v9;
        this.v2 ^= v2 ^ v10;
        this.v3 ^= v3 ^ v11;
        this.v4 ^= v4 ^ v12;
        this.v5 ^= v5 ^ v13;
        this.v6 ^= v6 ^ v14;
        this.v7 ^= v7 ^ v15;
    }
    destroy() {
        this.destroyed = true;
        this.buffer32.fill(0);
        this.set(0, 0, 0, 0, 0, 0, 0, 0);
    }
}
/**
 * BLAKE2s - optimized for 32-bit platforms. JS doesn't have uint64, so it's faster than BLAKE2b.
 * @param msg - message that would be hashed
 * @param opts - dkLen, key, salt, personalization
 */ exports.blake2s = (0, utils_js_1.wrapConstructorWithOpts)((opts)=>new BLAKE2s(opts));

},{"ee025599a8e682b9":"g6Yl3","12104f156aa0217c":"26uEn","8031f91ed7969a68":"1jA8a"}],"g6Yl3":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.BLAKE2 = exports.SIGMA = void 0;
const _assert_js_1 = require("c61267a369489457");
const utils_js_1 = require("d45d5be94315783e");
// For BLAKE2b, the two extra permutations for rounds 10 and 11 are SIGMA[10..11] = SIGMA[0..1].
// prettier-ignore
exports.SIGMA = new Uint8Array([
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    14,
    10,
    4,
    8,
    9,
    15,
    13,
    6,
    1,
    12,
    0,
    2,
    11,
    7,
    5,
    3,
    11,
    8,
    12,
    0,
    5,
    2,
    15,
    13,
    10,
    14,
    3,
    6,
    7,
    1,
    9,
    4,
    7,
    9,
    3,
    1,
    13,
    12,
    11,
    14,
    2,
    6,
    5,
    10,
    4,
    0,
    15,
    8,
    9,
    0,
    5,
    7,
    2,
    4,
    10,
    15,
    14,
    1,
    11,
    12,
    6,
    8,
    3,
    13,
    2,
    12,
    6,
    10,
    0,
    11,
    8,
    3,
    4,
    13,
    7,
    5,
    15,
    14,
    1,
    9,
    12,
    5,
    1,
    15,
    14,
    13,
    4,
    10,
    0,
    7,
    6,
    3,
    9,
    2,
    8,
    11,
    13,
    11,
    7,
    14,
    12,
    1,
    3,
    9,
    5,
    0,
    15,
    4,
    8,
    6,
    2,
    10,
    6,
    15,
    14,
    9,
    11,
    3,
    0,
    8,
    12,
    2,
    13,
    7,
    1,
    4,
    10,
    5,
    10,
    2,
    8,
    4,
    7,
    6,
    1,
    5,
    15,
    11,
    9,
    14,
    3,
    12,
    13,
    0,
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    14,
    10,
    4,
    8,
    9,
    15,
    13,
    6,
    1,
    12,
    0,
    2,
    11,
    7,
    5,
    3
]);
class BLAKE2 extends utils_js_1.Hash {
    constructor(blockLen, outputLen, opts = {}, keyLen, saltLen, persLen){
        super();
        this.blockLen = blockLen;
        this.outputLen = outputLen;
        this.length = 0;
        this.pos = 0;
        this.finished = false;
        this.destroyed = false;
        _assert_js_1.default.number(blockLen);
        _assert_js_1.default.number(outputLen);
        _assert_js_1.default.number(keyLen);
        if (outputLen < 0 || outputLen > keyLen) throw new Error("outputLen bigger than keyLen");
        if (opts.key !== undefined && (opts.key.length < 1 || opts.key.length > keyLen)) throw new Error(`key must be up 1..${keyLen} byte long or undefined`);
        if (opts.salt !== undefined && opts.salt.length !== saltLen) throw new Error(`salt must be ${saltLen} byte long or undefined`);
        if (opts.personalization !== undefined && opts.personalization.length !== persLen) throw new Error(`personalization must be ${persLen} byte long or undefined`);
        this.buffer32 = (0, utils_js_1.u32)(this.buffer = new Uint8Array(blockLen));
    }
    update(data) {
        _assert_js_1.default.exists(this);
        // Main difference with other hashes: there is flag for last block,
        // so we cannot process current block before we know that there
        // is the next one. This significantly complicates logic and reduces ability
        // to do zero-copy processing
        const { blockLen, buffer, buffer32 } = this;
        data = (0, utils_js_1.toBytes)(data);
        const len = data.length;
        const offset = data.byteOffset;
        const buf = data.buffer;
        for(let pos = 0; pos < len;){
            // If buffer is full and we still have input (don't process last block, same as blake2s)
            if (this.pos === blockLen) {
                this.compress(buffer32, 0, false);
                this.pos = 0;
            }
            const take = Math.min(blockLen - this.pos, len - pos);
            const dataOffset = offset + pos;
            // full block && aligned to 4 bytes && not last in input
            if (take === blockLen && !(dataOffset % 4) && pos + take < len) {
                const data32 = new Uint32Array(buf, dataOffset, Math.floor((len - pos) / 4));
                for(let pos32 = 0; pos + blockLen < len; pos32 += buffer32.length, pos += blockLen){
                    this.length += blockLen;
                    this.compress(data32, pos32, false);
                }
                continue;
            }
            buffer.set(data.subarray(pos, pos + take), this.pos);
            this.pos += take;
            this.length += take;
            pos += take;
        }
        return this;
    }
    digestInto(out) {
        _assert_js_1.default.exists(this);
        _assert_js_1.default.output(out, this);
        const { pos, buffer32 } = this;
        this.finished = true;
        // Padding
        this.buffer.subarray(pos).fill(0);
        this.compress(buffer32, 0, true);
        const out32 = (0, utils_js_1.u32)(out);
        this.get().forEach((v, i)=>out32[i] = v);
    }
    digest() {
        const { buffer, outputLen } = this;
        this.digestInto(buffer);
        const res = buffer.slice(0, outputLen);
        this.destroy();
        return res;
    }
    _cloneInto(to) {
        const { buffer, length, finished, destroyed, outputLen, pos } = this;
        to || (to = new this.constructor({
            dkLen: outputLen
        }));
        to.set(...this.get());
        to.length = length;
        to.finished = finished;
        to.destroyed = destroyed;
        to.outputLen = outputLen;
        to.buffer.set(buffer);
        to.pos = pos;
        return to;
    }
}
exports.BLAKE2 = BLAKE2;

},{"c61267a369489457":"3TVXa","d45d5be94315783e":"1jA8a"}],"3TVXa":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.output = exports.exists = exports.hash = exports.bytes = exports.bool = exports.number = void 0;
function number(n) {
    if (!Number.isSafeInteger(n) || n < 0) throw new Error(`Wrong positive integer: ${n}`);
}
exports.number = number;
function bool(b) {
    if (typeof b !== "boolean") throw new Error(`Expected boolean, not ${b}`);
}
exports.bool = bool;
function bytes(b, ...lengths) {
    if (!(b instanceof Uint8Array)) throw new Error("Expected Uint8Array");
    if (lengths.length > 0 && !lengths.includes(b.length)) throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);
}
exports.bytes = bytes;
function hash(hash) {
    if (typeof hash !== "function" || typeof hash.create !== "function") throw new Error("Hash should be wrapped by utils.wrapConstructor");
    number(hash.outputLen);
    number(hash.blockLen);
}
exports.hash = hash;
function exists(instance, checkFinished = true) {
    if (instance.destroyed) throw new Error("Hash instance has been destroyed");
    if (checkFinished && instance.finished) throw new Error("Hash#digest() has already been called");
}
exports.exists = exists;
function output(out, instance) {
    bytes(out);
    const min = instance.outputLen;
    if (out.length < min) throw new Error(`digestInto() expects output buffer of length at least ${min}`);
}
exports.output = output;
const assert = {
    number,
    bool,
    bytes,
    hash,
    exists,
    output
};
exports.default = assert;

},{}],"26uEn":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.add = exports.toBig = exports.split = exports.fromBig = void 0;
const U32_MASK64 = BigInt(2 ** 32 - 1);
const _32n = BigInt(32);
// We are not using BigUint64Array, because they are extremely slow as per 2022
function fromBig(n, le = false) {
    if (le) return {
        h: Number(n & U32_MASK64),
        l: Number(n >> _32n & U32_MASK64)
    };
    return {
        h: Number(n >> _32n & U32_MASK64) | 0,
        l: Number(n & U32_MASK64) | 0
    };
}
exports.fromBig = fromBig;
function split(lst, le = false) {
    let Ah = new Uint32Array(lst.length);
    let Al = new Uint32Array(lst.length);
    for(let i = 0; i < lst.length; i++){
        const { h, l } = fromBig(lst[i], le);
        [Ah[i], Al[i]] = [
            h,
            l
        ];
    }
    return [
        Ah,
        Al
    ];
}
exports.split = split;
const toBig = (h, l)=>BigInt(h >>> 0) << _32n | BigInt(l >>> 0);
exports.toBig = toBig;
// for Shift in [0, 32)
const shrSH = (h, l, s)=>h >>> s;
const shrSL = (h, l, s)=>h << 32 - s | l >>> s;
// Right rotate for Shift in [1, 32)
const rotrSH = (h, l, s)=>h >>> s | l << 32 - s;
const rotrSL = (h, l, s)=>h << 32 - s | l >>> s;
// Right rotate for Shift in (32, 64), NOTE: 32 is special case.
const rotrBH = (h, l, s)=>h << 64 - s | l >>> s - 32;
const rotrBL = (h, l, s)=>h >>> s - 32 | l << 64 - s;
// Right rotate for shift===32 (just swaps l&h)
const rotr32H = (h, l)=>l;
const rotr32L = (h, l)=>h;
// Left rotate for Shift in [1, 32)
const rotlSH = (h, l, s)=>h << s | l >>> 32 - s;
const rotlSL = (h, l, s)=>l << s | h >>> 32 - s;
// Left rotate for Shift in (32, 64), NOTE: 32 is special case.
const rotlBH = (h, l, s)=>l << s - 32 | h >>> 64 - s;
const rotlBL = (h, l, s)=>h << s - 32 | l >>> 64 - s;
// JS uses 32-bit signed integers for bitwise operations which means we cannot
// simple take carry out of low bit sum by shift, we need to use division.
// Removing "export" has 5% perf penalty -_-
function add(Ah, Al, Bh, Bl) {
    const l = (Al >>> 0) + (Bl >>> 0);
    return {
        h: Ah + Bh + (l / 2 ** 32 | 0) | 0,
        l: l | 0
    };
}
exports.add = add;
// Addition with more than 2 elements
const add3L = (Al, Bl, Cl)=>(Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
const add3H = (low, Ah, Bh, Ch)=>Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;
const add4L = (Al, Bl, Cl, Dl)=>(Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
const add4H = (low, Ah, Bh, Ch, Dh)=>Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;
const add5L = (Al, Bl, Cl, Dl, El)=>(Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
const add5H = (low, Ah, Bh, Ch, Dh, Eh)=>Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;
// prettier-ignore
const u64 = {
    fromBig,
    split,
    toBig: exports.toBig,
    shrSH,
    shrSL,
    rotrSH,
    rotrSL,
    rotrBH,
    rotrBL,
    rotr32H,
    rotr32L,
    rotlSH,
    rotlSL,
    rotlBH,
    rotlBL,
    add,
    add3L,
    add3H,
    add4L,
    add4H,
    add5H,
    add5L
};
exports.default = u64;

},{}],"eqGp2":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var protobuf = require("64a5f25c7187399a");
var Long = require("577f40803739912c");
var ByteBuffer = require("1c24efdff813e1f4");
var buffer = require("4aa485033bbbe586");
function _interopDefaultLegacy(e) {
    return e && typeof e === "object" && "default" in e ? e : {
        "default": e
    };
}
function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) Object.keys(e).forEach(function(k) {
        if (k !== "default") {
            var d = Object.getOwnPropertyDescriptor(e, k);
            Object.defineProperty(n, k, d.get ? d : {
                enumerable: true,
                get: function() {
                    return e[k];
                }
            });
        }
    });
    n["default"] = e;
    return Object.freeze(n);
}
var protobuf__namespace = /*#__PURE__*/ _interopNamespace(protobuf);
var Long__namespace = /*#__PURE__*/ _interopNamespace(Long);
var ByteBuffer__default = /*#__PURE__*/ _interopDefaultLegacy(ByteBuffer);
/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
const primitiveTypes = [
    "bool",
    "string",
    "bytes",
    "int32",
    "int64",
    "uint32",
    "uint64",
    "sint32",
    "sint64",
    "fixed32",
    "fixed64",
    "sfixed32",
    "sfixed64",
    "double",
    "float"
];
const isPrimitiveField = (field)=>primitiveTypes.includes(field);
const transform$1 = (field, value)=>{
    if (field.optional && typeof value === "undefined") return null;
    if (field.type === "bytes") return ByteBuffer__default["default"].wrap(value).toString("hex");
    if (field.long) {
        if (Number.isSafeInteger(value.toNumber())) return value.toNumber();
        return value.toString();
    }
    return value;
};
function messageToJSON(Message, fields) {
    const message = __rest(Message, []);
    const res = {};
    Object.keys(fields).forEach((key)=>{
        const field = fields[key];
        const value = message[key];
        if (field.repeated) {
            if (isPrimitiveField(field.type)) res[key] = value.map((v)=>transform$1(field, v));
            else if ("valuesById" in field.resolvedType) res[key] = value;
            else if ("fields" in field.resolvedType) res[key] = value.map((v)=>messageToJSON(v, field.resolvedType.fields));
            else throw new Error(`case not handled for repeated key: ${key}`);
        } else if (isPrimitiveField(field.type)) res[key] = transform$1(field, value);
        else if ("valuesById" in field.resolvedType) res[key] = field.resolvedType.valuesById[value];
        else if (field.resolvedType.fields) res[key] = messageToJSON(value, field.resolvedType.fields);
        else throw new Error(`case not handled: ${key}`);
    });
    return res;
}
const decode$1 = (Message, data)=>{
    const buff = data.toBuffer();
    const a = new Uint8Array(buff);
    const decoded = Message.decode(a);
    return messageToJSON(decoded, decoded.$type.fields);
};
const transform = (fieldType, value)=>{
    if (fieldType === "bytes") {
        if (typeof value === "string" && !value) return value;
        return buffer.Buffer.from(value, "hex");
    }
    if (typeof value === "number" && !Number.isSafeInteger(value)) throw new RangeError("field value is not within safe integer range");
    return value;
};
function patch(Message, payload) {
    const patched = {};
    if (!Message.fields) return patched;
    Object.keys(Message.fields).forEach((key)=>{
        const field = Message.fields[key];
        const value = payload[key];
        if (typeof value === "undefined") return;
        if (isPrimitiveField(field.type)) {
            if (field.repeated) patched[key] = value.map((v)=>transform(field.type, v));
            else patched[key] = transform(field.type, value);
            return;
        }
        if (field.repeated) {
            const RefMessage = Message.lookupTypeOrEnum(field.type);
            patched[key] = value.map((v)=>patch(RefMessage, v));
        } else if (typeof value === "object" && value !== null) {
            const RefMessage = Message.lookupType(field.type);
            patched[key] = patch(RefMessage, value);
        } else if (typeof value === "number") {
            const RefMessage = Message.lookupEnum(field.type);
            patched[key] = RefMessage.values[value];
        } else patched[key] = value;
    });
    return patched;
}
const encode$1 = (Message, data)=>{
    const payload = patch(Message, data);
    const message = Message.fromObject(payload);
    const buffer = Message.encode(message).finish();
    const bytebuffer = new ByteBuffer__default["default"](buffer.byteLength);
    bytebuffer.append(buffer);
    bytebuffer.reset();
    return bytebuffer;
};
function parseConfigure(data) {
    if (typeof data === "string") return protobuf__namespace.Root.fromJSON(JSON.parse(data));
    return protobuf__namespace.Root.fromJSON(data);
}
const createMessageFromName = (messages, name)=>{
    const Message = messages.lookupType(name);
    const MessageType = messages.lookupEnum("MessageType");
    let messageType = MessageType.values[`MessageType_${name}`];
    if (!messageType && Message.options) messageType = Message.options["(wire_type)"];
    return {
        Message,
        messageType
    };
};
const createMessageFromType = (messages, typeId)=>{
    const MessageType = messages.lookupEnum("MessageType");
    const messageName = MessageType.valuesById[typeId].replace("MessageType_", "");
    const Message = messages.lookupType(messageName);
    return {
        Message,
        messageName
    };
};
const MESSAGE_TOP_CHAR = 0x003f;
const MESSAGE_HEADER_BYTE = 0x23;
const HEADER_SIZE = 8;
const BUFFER_SIZE = 63;
const COMMON_HEADER_SIZE = 6;
const readHeader = (buffer)=>{
    const typeId = buffer.readUint16();
    const length = buffer.readUint32();
    return {
        typeId,
        length
    };
};
const readHeaderChunked = (buffer)=>{
    const sharp1 = buffer.readByte();
    const sharp2 = buffer.readByte();
    const typeId = buffer.readUint16();
    const length = buffer.readUint32();
    return {
        sharp1,
        sharp2,
        typeId,
        length
    };
};
const decode = (byteBuffer)=>{
    const { typeId } = readHeader(byteBuffer);
    return {
        typeId,
        buffer: byteBuffer
    };
};
const decodeChunked = (bytes)=>{
    const byteBuffer = ByteBuffer__default["default"].wrap(bytes, undefined, undefined, true);
    const { sharp1, sharp2, typeId, length } = readHeaderChunked(byteBuffer);
    if (sharp1 !== MESSAGE_HEADER_BYTE || sharp2 !== MESSAGE_HEADER_BYTE) throw new Error("Didn't receive expected header signature.");
    return {
        length,
        typeId,
        restBuffer: byteBuffer
    };
};
var decodeProtocol = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    decode: decode,
    decodeChunked: decodeChunked
});
function encode(data, options) {
    const { addTrezorHeaders, chunked, messageType } = options;
    const fullSize = (addTrezorHeaders ? HEADER_SIZE : HEADER_SIZE - 2) + data.limit;
    const encodedByteBuffer = new ByteBuffer__default["default"](fullSize);
    if (addTrezorHeaders) {
        encodedByteBuffer.writeByte(MESSAGE_HEADER_BYTE);
        encodedByteBuffer.writeByte(MESSAGE_HEADER_BYTE);
    }
    encodedByteBuffer.writeUint16(messageType);
    encodedByteBuffer.writeUint32(data.limit);
    encodedByteBuffer.append(data.buffer);
    encodedByteBuffer.reset();
    if (chunked === false) return encodedByteBuffer;
    const result = [];
    const size = BUFFER_SIZE;
    const count = Math.floor((encodedByteBuffer.limit - 1) / size) + 1 || 1;
    for(let i = 0; i < count; i++){
        const start = i * size;
        const end = Math.min((i + 1) * size, encodedByteBuffer.limit);
        const slice = encodedByteBuffer.slice(start, end);
        slice.compact();
        result.push(slice.buffer);
    }
    return result;
}
function buildOne(messages, name, data) {
    const { Message, messageType } = createMessageFromName(messages, name);
    const buffer = encode$1(Message, data);
    return encode(buffer, {
        addTrezorHeaders: false,
        chunked: false,
        messageType
    });
}
const buildEncodeBuffers = (messages, name, data)=>{
    const { Message, messageType } = createMessageFromName(messages, name);
    const buffer = encode$1(Message, data);
    return encode(buffer, {
        addTrezorHeaders: true,
        chunked: true,
        messageType
    });
};
const buildBuffers = (messages, name, data)=>{
    const encodeBuffers = buildEncodeBuffers(messages, name, data);
    const outBuffers = [];
    for (const buf of encodeBuffers){
        const chunkBuffer = new ByteBuffer__default["default"](BUFFER_SIZE + 1);
        chunkBuffer.writeByte(MESSAGE_TOP_CHAR);
        chunkBuffer.append(buf);
        chunkBuffer.reset();
        outBuffers.push(chunkBuffer);
    }
    return outBuffers;
};
function receiveOne(messages, data) {
    const bytebuffer = ByteBuffer__default["default"].wrap(data, "hex");
    const { typeId, buffer } = decode(bytebuffer);
    const { Message, messageName } = createMessageFromType(messages, typeId);
    const message = decode$1(Message, buffer);
    return {
        message,
        type: messageName
    };
}
const ERROR = "Wrong result type.";
function info(res) {
    if (typeof res !== "object" || res == null) throw new Error("Wrong result type.");
    const { version } = res;
    if (typeof version !== "string") throw new Error(ERROR);
    const configured = !!res.configured;
    return {
        version,
        configured
    };
}
function version(version) {
    if (typeof version !== "string") throw new Error(ERROR);
    return version.trim();
}
function convertSession(r) {
    if (r == null) return null;
    if (typeof r !== "string") throw new Error(ERROR);
    return r;
}
function devices(res) {
    if (typeof res !== "object") throw new Error(ERROR);
    if (!(res instanceof Array)) throw new Error(ERROR);
    return res.map((o)=>{
        if (typeof o !== "object" || o == null) throw new Error(ERROR);
        const { path } = o;
        if (typeof path !== "string") throw new Error(ERROR);
        const pathS = path.toString();
        return {
            path: pathS,
            session: convertSession(o.session),
            debugSession: convertSession(o.debugSession),
            product: o.product,
            vendor: o.vendor,
            debug: !!o.debug
        };
    });
}
function acquire(res) {
    if (typeof res !== "object" || res == null) throw new Error(ERROR);
    const { session } = res;
    if (typeof session !== "string" && typeof session !== "number") throw new Error(ERROR);
    return session.toString();
}
function call(res) {
    if (typeof res !== "object" || res == null) throw new Error(ERROR);
    const { type } = res;
    if (typeof type !== "string") throw new Error(ERROR);
    const { message } = res;
    if (typeof message !== "object" || message == null) throw new Error(ERROR);
    return {
        type,
        message
    };
}
var check = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    info: info,
    version: version,
    devices: devices,
    acquire: acquire,
    call: call
});
exports.BinanceOrderType = void 0;
(function(BinanceOrderType) {
    BinanceOrderType[BinanceOrderType["OT_UNKNOWN"] = 0] = "OT_UNKNOWN";
    BinanceOrderType[BinanceOrderType["MARKET"] = 1] = "MARKET";
    BinanceOrderType[BinanceOrderType["LIMIT"] = 2] = "LIMIT";
    BinanceOrderType[BinanceOrderType["OT_RESERVED"] = 3] = "OT_RESERVED";
})(exports.BinanceOrderType || (exports.BinanceOrderType = {}));
exports.BinanceOrderSide = void 0;
(function(BinanceOrderSide) {
    BinanceOrderSide[BinanceOrderSide["SIDE_UNKNOWN"] = 0] = "SIDE_UNKNOWN";
    BinanceOrderSide[BinanceOrderSide["BUY"] = 1] = "BUY";
    BinanceOrderSide[BinanceOrderSide["SELL"] = 2] = "SELL";
})(exports.BinanceOrderSide || (exports.BinanceOrderSide = {}));
exports.BinanceTimeInForce = void 0;
(function(BinanceTimeInForce) {
    BinanceTimeInForce[BinanceTimeInForce["TIF_UNKNOWN"] = 0] = "TIF_UNKNOWN";
    BinanceTimeInForce[BinanceTimeInForce["GTE"] = 1] = "GTE";
    BinanceTimeInForce[BinanceTimeInForce["TIF_RESERVED"] = 2] = "TIF_RESERVED";
    BinanceTimeInForce[BinanceTimeInForce["IOC"] = 3] = "IOC";
})(exports.BinanceTimeInForce || (exports.BinanceTimeInForce = {}));
exports.Enum_InputScriptType = void 0;
(function(Enum_InputScriptType) {
    Enum_InputScriptType[Enum_InputScriptType["SPENDADDRESS"] = 0] = "SPENDADDRESS";
    Enum_InputScriptType[Enum_InputScriptType["SPENDMULTISIG"] = 1] = "SPENDMULTISIG";
    Enum_InputScriptType[Enum_InputScriptType["EXTERNAL"] = 2] = "EXTERNAL";
    Enum_InputScriptType[Enum_InputScriptType["SPENDWITNESS"] = 3] = "SPENDWITNESS";
    Enum_InputScriptType[Enum_InputScriptType["SPENDP2SHWITNESS"] = 4] = "SPENDP2SHWITNESS";
    Enum_InputScriptType[Enum_InputScriptType["SPENDTAPROOT"] = 5] = "SPENDTAPROOT";
})(exports.Enum_InputScriptType || (exports.Enum_InputScriptType = {}));
exports.Enum_OutputScriptType = void 0;
(function(Enum_OutputScriptType) {
    Enum_OutputScriptType[Enum_OutputScriptType["PAYTOADDRESS"] = 0] = "PAYTOADDRESS";
    Enum_OutputScriptType[Enum_OutputScriptType["PAYTOSCRIPTHASH"] = 1] = "PAYTOSCRIPTHASH";
    Enum_OutputScriptType[Enum_OutputScriptType["PAYTOMULTISIG"] = 2] = "PAYTOMULTISIG";
    Enum_OutputScriptType[Enum_OutputScriptType["PAYTOOPRETURN"] = 3] = "PAYTOOPRETURN";
    Enum_OutputScriptType[Enum_OutputScriptType["PAYTOWITNESS"] = 4] = "PAYTOWITNESS";
    Enum_OutputScriptType[Enum_OutputScriptType["PAYTOP2SHWITNESS"] = 5] = "PAYTOP2SHWITNESS";
    Enum_OutputScriptType[Enum_OutputScriptType["PAYTOTAPROOT"] = 6] = "PAYTOTAPROOT";
})(exports.Enum_OutputScriptType || (exports.Enum_OutputScriptType = {}));
exports.DecredStakingSpendType = void 0;
(function(DecredStakingSpendType) {
    DecredStakingSpendType[DecredStakingSpendType["SSGen"] = 0] = "SSGen";
    DecredStakingSpendType[DecredStakingSpendType["SSRTX"] = 1] = "SSRTX";
})(exports.DecredStakingSpendType || (exports.DecredStakingSpendType = {}));
exports.AmountUnit = void 0;
(function(AmountUnit) {
    AmountUnit[AmountUnit["BITCOIN"] = 0] = "BITCOIN";
    AmountUnit[AmountUnit["MILLIBITCOIN"] = 1] = "MILLIBITCOIN";
    AmountUnit[AmountUnit["MICROBITCOIN"] = 2] = "MICROBITCOIN";
    AmountUnit[AmountUnit["SATOSHI"] = 3] = "SATOSHI";
})(exports.AmountUnit || (exports.AmountUnit = {}));
exports.Enum_RequestType = void 0;
(function(Enum_RequestType) {
    Enum_RequestType[Enum_RequestType["TXINPUT"] = 0] = "TXINPUT";
    Enum_RequestType[Enum_RequestType["TXOUTPUT"] = 1] = "TXOUTPUT";
    Enum_RequestType[Enum_RequestType["TXMETA"] = 2] = "TXMETA";
    Enum_RequestType[Enum_RequestType["TXFINISHED"] = 3] = "TXFINISHED";
    Enum_RequestType[Enum_RequestType["TXEXTRADATA"] = 4] = "TXEXTRADATA";
    Enum_RequestType[Enum_RequestType["TXORIGINPUT"] = 5] = "TXORIGINPUT";
    Enum_RequestType[Enum_RequestType["TXORIGOUTPUT"] = 6] = "TXORIGOUTPUT";
})(exports.Enum_RequestType || (exports.Enum_RequestType = {}));
exports.RebootType = void 0;
(function(RebootType) {
    RebootType[RebootType["Normal"] = 0] = "Normal";
    RebootType[RebootType["Boardloader"] = 1] = "Boardloader";
    RebootType[RebootType["BootLoader"] = 2] = "BootLoader";
})(exports.RebootType || (exports.RebootType = {}));
exports.CardanoDerivationType = void 0;
(function(CardanoDerivationType) {
    CardanoDerivationType[CardanoDerivationType["LEDGER"] = 0] = "LEDGER";
    CardanoDerivationType[CardanoDerivationType["ICARUS"] = 1] = "ICARUS";
    CardanoDerivationType[CardanoDerivationType["ICARUS_TREZOR"] = 2] = "ICARUS_TREZOR";
})(exports.CardanoDerivationType || (exports.CardanoDerivationType = {}));
exports.CardanoAddressType = void 0;
(function(CardanoAddressType) {
    CardanoAddressType[CardanoAddressType["BASE"] = 0] = "BASE";
    CardanoAddressType[CardanoAddressType["BASE_SCRIPT_KEY"] = 1] = "BASE_SCRIPT_KEY";
    CardanoAddressType[CardanoAddressType["BASE_KEY_SCRIPT"] = 2] = "BASE_KEY_SCRIPT";
    CardanoAddressType[CardanoAddressType["BASE_SCRIPT_SCRIPT"] = 3] = "BASE_SCRIPT_SCRIPT";
    CardanoAddressType[CardanoAddressType["POINTER"] = 4] = "POINTER";
    CardanoAddressType[CardanoAddressType["POINTER_SCRIPT"] = 5] = "POINTER_SCRIPT";
    CardanoAddressType[CardanoAddressType["ENTERPRISE"] = 6] = "ENTERPRISE";
    CardanoAddressType[CardanoAddressType["ENTERPRISE_SCRIPT"] = 7] = "ENTERPRISE_SCRIPT";
    CardanoAddressType[CardanoAddressType["BYRON"] = 8] = "BYRON";
    CardanoAddressType[CardanoAddressType["REWARD"] = 14] = "REWARD";
    CardanoAddressType[CardanoAddressType["REWARD_SCRIPT"] = 15] = "REWARD_SCRIPT";
})(exports.CardanoAddressType || (exports.CardanoAddressType = {}));
exports.CardanoNativeScriptType = void 0;
(function(CardanoNativeScriptType) {
    CardanoNativeScriptType[CardanoNativeScriptType["PUB_KEY"] = 0] = "PUB_KEY";
    CardanoNativeScriptType[CardanoNativeScriptType["ALL"] = 1] = "ALL";
    CardanoNativeScriptType[CardanoNativeScriptType["ANY"] = 2] = "ANY";
    CardanoNativeScriptType[CardanoNativeScriptType["N_OF_K"] = 3] = "N_OF_K";
    CardanoNativeScriptType[CardanoNativeScriptType["INVALID_BEFORE"] = 4] = "INVALID_BEFORE";
    CardanoNativeScriptType[CardanoNativeScriptType["INVALID_HEREAFTER"] = 5] = "INVALID_HEREAFTER";
})(exports.CardanoNativeScriptType || (exports.CardanoNativeScriptType = {}));
exports.CardanoNativeScriptHashDisplayFormat = void 0;
(function(CardanoNativeScriptHashDisplayFormat) {
    CardanoNativeScriptHashDisplayFormat[CardanoNativeScriptHashDisplayFormat["HIDE"] = 0] = "HIDE";
    CardanoNativeScriptHashDisplayFormat[CardanoNativeScriptHashDisplayFormat["BECH32"] = 1] = "BECH32";
    CardanoNativeScriptHashDisplayFormat[CardanoNativeScriptHashDisplayFormat["POLICY_ID"] = 2] = "POLICY_ID";
})(exports.CardanoNativeScriptHashDisplayFormat || (exports.CardanoNativeScriptHashDisplayFormat = {}));
exports.CardanoTxOutputSerializationFormat = void 0;
(function(CardanoTxOutputSerializationFormat) {
    CardanoTxOutputSerializationFormat[CardanoTxOutputSerializationFormat["ARRAY_LEGACY"] = 0] = "ARRAY_LEGACY";
    CardanoTxOutputSerializationFormat[CardanoTxOutputSerializationFormat["MAP_BABBAGE"] = 1] = "MAP_BABBAGE";
})(exports.CardanoTxOutputSerializationFormat || (exports.CardanoTxOutputSerializationFormat = {}));
exports.CardanoCertificateType = void 0;
(function(CardanoCertificateType) {
    CardanoCertificateType[CardanoCertificateType["STAKE_REGISTRATION"] = 0] = "STAKE_REGISTRATION";
    CardanoCertificateType[CardanoCertificateType["STAKE_DEREGISTRATION"] = 1] = "STAKE_DEREGISTRATION";
    CardanoCertificateType[CardanoCertificateType["STAKE_DELEGATION"] = 2] = "STAKE_DELEGATION";
    CardanoCertificateType[CardanoCertificateType["STAKE_POOL_REGISTRATION"] = 3] = "STAKE_POOL_REGISTRATION";
})(exports.CardanoCertificateType || (exports.CardanoCertificateType = {}));
exports.CardanoPoolRelayType = void 0;
(function(CardanoPoolRelayType) {
    CardanoPoolRelayType[CardanoPoolRelayType["SINGLE_HOST_IP"] = 0] = "SINGLE_HOST_IP";
    CardanoPoolRelayType[CardanoPoolRelayType["SINGLE_HOST_NAME"] = 1] = "SINGLE_HOST_NAME";
    CardanoPoolRelayType[CardanoPoolRelayType["MULTIPLE_HOST_NAME"] = 2] = "MULTIPLE_HOST_NAME";
})(exports.CardanoPoolRelayType || (exports.CardanoPoolRelayType = {}));
exports.CardanoTxAuxiliaryDataSupplementType = void 0;
(function(CardanoTxAuxiliaryDataSupplementType) {
    CardanoTxAuxiliaryDataSupplementType[CardanoTxAuxiliaryDataSupplementType["NONE"] = 0] = "NONE";
    CardanoTxAuxiliaryDataSupplementType[CardanoTxAuxiliaryDataSupplementType["GOVERNANCE_REGISTRATION_SIGNATURE"] = 1] = "GOVERNANCE_REGISTRATION_SIGNATURE";
})(exports.CardanoTxAuxiliaryDataSupplementType || (exports.CardanoTxAuxiliaryDataSupplementType = {}));
exports.CardanoGovernanceRegistrationFormat = void 0;
(function(CardanoGovernanceRegistrationFormat) {
    CardanoGovernanceRegistrationFormat[CardanoGovernanceRegistrationFormat["CIP15"] = 0] = "CIP15";
    CardanoGovernanceRegistrationFormat[CardanoGovernanceRegistrationFormat["CIP36"] = 1] = "CIP36";
})(exports.CardanoGovernanceRegistrationFormat || (exports.CardanoGovernanceRegistrationFormat = {}));
exports.CardanoTxSigningMode = void 0;
(function(CardanoTxSigningMode) {
    CardanoTxSigningMode[CardanoTxSigningMode["ORDINARY_TRANSACTION"] = 0] = "ORDINARY_TRANSACTION";
    CardanoTxSigningMode[CardanoTxSigningMode["POOL_REGISTRATION_AS_OWNER"] = 1] = "POOL_REGISTRATION_AS_OWNER";
    CardanoTxSigningMode[CardanoTxSigningMode["MULTISIG_TRANSACTION"] = 2] = "MULTISIG_TRANSACTION";
    CardanoTxSigningMode[CardanoTxSigningMode["PLUTUS_TRANSACTION"] = 3] = "PLUTUS_TRANSACTION";
})(exports.CardanoTxSigningMode || (exports.CardanoTxSigningMode = {}));
exports.CardanoTxWitnessType = void 0;
(function(CardanoTxWitnessType) {
    CardanoTxWitnessType[CardanoTxWitnessType["BYRON_WITNESS"] = 0] = "BYRON_WITNESS";
    CardanoTxWitnessType[CardanoTxWitnessType["SHELLEY_WITNESS"] = 1] = "SHELLEY_WITNESS";
})(exports.CardanoTxWitnessType || (exports.CardanoTxWitnessType = {}));
exports.FailureType = void 0;
(function(FailureType) {
    FailureType[FailureType["Failure_UnexpectedMessage"] = 1] = "Failure_UnexpectedMessage";
    FailureType[FailureType["Failure_ButtonExpected"] = 2] = "Failure_ButtonExpected";
    FailureType[FailureType["Failure_DataError"] = 3] = "Failure_DataError";
    FailureType[FailureType["Failure_ActionCancelled"] = 4] = "Failure_ActionCancelled";
    FailureType[FailureType["Failure_PinExpected"] = 5] = "Failure_PinExpected";
    FailureType[FailureType["Failure_PinCancelled"] = 6] = "Failure_PinCancelled";
    FailureType[FailureType["Failure_PinInvalid"] = 7] = "Failure_PinInvalid";
    FailureType[FailureType["Failure_InvalidSignature"] = 8] = "Failure_InvalidSignature";
    FailureType[FailureType["Failure_ProcessError"] = 9] = "Failure_ProcessError";
    FailureType[FailureType["Failure_NotEnoughFunds"] = 10] = "Failure_NotEnoughFunds";
    FailureType[FailureType["Failure_NotInitialized"] = 11] = "Failure_NotInitialized";
    FailureType[FailureType["Failure_PinMismatch"] = 12] = "Failure_PinMismatch";
    FailureType[FailureType["Failure_WipeCodeMismatch"] = 13] = "Failure_WipeCodeMismatch";
    FailureType[FailureType["Failure_InvalidSession"] = 14] = "Failure_InvalidSession";
    FailureType[FailureType["Failure_FirmwareError"] = 99] = "Failure_FirmwareError";
})(exports.FailureType || (exports.FailureType = {}));
exports.Enum_ButtonRequestType = void 0;
(function(Enum_ButtonRequestType) {
    Enum_ButtonRequestType[Enum_ButtonRequestType["ButtonRequest_Other"] = 1] = "ButtonRequest_Other";
    Enum_ButtonRequestType[Enum_ButtonRequestType["ButtonRequest_FeeOverThreshold"] = 2] = "ButtonRequest_FeeOverThreshold";
    Enum_ButtonRequestType[Enum_ButtonRequestType["ButtonRequest_ConfirmOutput"] = 3] = "ButtonRequest_ConfirmOutput";
    Enum_ButtonRequestType[Enum_ButtonRequestType["ButtonRequest_ResetDevice"] = 4] = "ButtonRequest_ResetDevice";
    Enum_ButtonRequestType[Enum_ButtonRequestType["ButtonRequest_ConfirmWord"] = 5] = "ButtonRequest_ConfirmWord";
    Enum_ButtonRequestType[Enum_ButtonRequestType["ButtonRequest_WipeDevice"] = 6] = "ButtonRequest_WipeDevice";
    Enum_ButtonRequestType[Enum_ButtonRequestType["ButtonRequest_ProtectCall"] = 7] = "ButtonRequest_ProtectCall";
    Enum_ButtonRequestType[Enum_ButtonRequestType["ButtonRequest_SignTx"] = 8] = "ButtonRequest_SignTx";
    Enum_ButtonRequestType[Enum_ButtonRequestType["ButtonRequest_FirmwareCheck"] = 9] = "ButtonRequest_FirmwareCheck";
    Enum_ButtonRequestType[Enum_ButtonRequestType["ButtonRequest_Address"] = 10] = "ButtonRequest_Address";
    Enum_ButtonRequestType[Enum_ButtonRequestType["ButtonRequest_PublicKey"] = 11] = "ButtonRequest_PublicKey";
    Enum_ButtonRequestType[Enum_ButtonRequestType["ButtonRequest_MnemonicWordCount"] = 12] = "ButtonRequest_MnemonicWordCount";
    Enum_ButtonRequestType[Enum_ButtonRequestType["ButtonRequest_MnemonicInput"] = 13] = "ButtonRequest_MnemonicInput";
    Enum_ButtonRequestType[Enum_ButtonRequestType["_Deprecated_ButtonRequest_PassphraseType"] = 14] = "_Deprecated_ButtonRequest_PassphraseType";
    Enum_ButtonRequestType[Enum_ButtonRequestType["ButtonRequest_UnknownDerivationPath"] = 15] = "ButtonRequest_UnknownDerivationPath";
    Enum_ButtonRequestType[Enum_ButtonRequestType["ButtonRequest_RecoveryHomepage"] = 16] = "ButtonRequest_RecoveryHomepage";
    Enum_ButtonRequestType[Enum_ButtonRequestType["ButtonRequest_Success"] = 17] = "ButtonRequest_Success";
    Enum_ButtonRequestType[Enum_ButtonRequestType["ButtonRequest_Warning"] = 18] = "ButtonRequest_Warning";
    Enum_ButtonRequestType[Enum_ButtonRequestType["ButtonRequest_PassphraseEntry"] = 19] = "ButtonRequest_PassphraseEntry";
    Enum_ButtonRequestType[Enum_ButtonRequestType["ButtonRequest_PinEntry"] = 20] = "ButtonRequest_PinEntry";
})(exports.Enum_ButtonRequestType || (exports.Enum_ButtonRequestType = {}));
exports.Enum_PinMatrixRequestType = void 0;
(function(Enum_PinMatrixRequestType) {
    Enum_PinMatrixRequestType[Enum_PinMatrixRequestType["PinMatrixRequestType_Current"] = 1] = "PinMatrixRequestType_Current";
    Enum_PinMatrixRequestType[Enum_PinMatrixRequestType["PinMatrixRequestType_NewFirst"] = 2] = "PinMatrixRequestType_NewFirst";
    Enum_PinMatrixRequestType[Enum_PinMatrixRequestType["PinMatrixRequestType_NewSecond"] = 3] = "PinMatrixRequestType_NewSecond";
    Enum_PinMatrixRequestType[Enum_PinMatrixRequestType["PinMatrixRequestType_WipeCodeFirst"] = 4] = "PinMatrixRequestType_WipeCodeFirst";
    Enum_PinMatrixRequestType[Enum_PinMatrixRequestType["PinMatrixRequestType_WipeCodeSecond"] = 5] = "PinMatrixRequestType_WipeCodeSecond";
    Enum_PinMatrixRequestType[Enum_PinMatrixRequestType["PinMatrixRequestType_BackupFirst"] = 6] = "PinMatrixRequestType_BackupFirst";
    Enum_PinMatrixRequestType[Enum_PinMatrixRequestType["PinMatrixRequestType_BackupSecond"] = 7] = "PinMatrixRequestType_BackupSecond";
})(exports.Enum_PinMatrixRequestType || (exports.Enum_PinMatrixRequestType = {}));
exports.EthereumDefinitionType = void 0;
(function(EthereumDefinitionType) {
    EthereumDefinitionType[EthereumDefinitionType["NETWORK"] = 0] = "NETWORK";
    EthereumDefinitionType[EthereumDefinitionType["TOKEN"] = 1] = "TOKEN";
})(exports.EthereumDefinitionType || (exports.EthereumDefinitionType = {}));
exports.EthereumDataTypeOneKey = void 0;
(function(EthereumDataTypeOneKey) {
    EthereumDataTypeOneKey[EthereumDataTypeOneKey["UINT"] = 1] = "UINT";
    EthereumDataTypeOneKey[EthereumDataTypeOneKey["INT"] = 2] = "INT";
    EthereumDataTypeOneKey[EthereumDataTypeOneKey["BYTES"] = 3] = "BYTES";
    EthereumDataTypeOneKey[EthereumDataTypeOneKey["STRING"] = 4] = "STRING";
    EthereumDataTypeOneKey[EthereumDataTypeOneKey["BOOL"] = 5] = "BOOL";
    EthereumDataTypeOneKey[EthereumDataTypeOneKey["ADDRESS"] = 6] = "ADDRESS";
    EthereumDataTypeOneKey[EthereumDataTypeOneKey["ARRAY"] = 7] = "ARRAY";
    EthereumDataTypeOneKey[EthereumDataTypeOneKey["STRUCT"] = 8] = "STRUCT";
})(exports.EthereumDataTypeOneKey || (exports.EthereumDataTypeOneKey = {}));
exports.EthereumDataType = void 0;
(function(EthereumDataType) {
    EthereumDataType[EthereumDataType["UINT"] = 1] = "UINT";
    EthereumDataType[EthereumDataType["INT"] = 2] = "INT";
    EthereumDataType[EthereumDataType["BYTES"] = 3] = "BYTES";
    EthereumDataType[EthereumDataType["STRING"] = 4] = "STRING";
    EthereumDataType[EthereumDataType["BOOL"] = 5] = "BOOL";
    EthereumDataType[EthereumDataType["ADDRESS"] = 6] = "ADDRESS";
    EthereumDataType[EthereumDataType["ARRAY"] = 7] = "ARRAY";
    EthereumDataType[EthereumDataType["STRUCT"] = 8] = "STRUCT";
})(exports.EthereumDataType || (exports.EthereumDataType = {}));
exports.Enum_BackupType = void 0;
(function(Enum_BackupType) {
    Enum_BackupType[Enum_BackupType["Bip39"] = 0] = "Bip39";
    Enum_BackupType[Enum_BackupType["Slip39_Basic"] = 1] = "Slip39_Basic";
    Enum_BackupType[Enum_BackupType["Slip39_Advanced"] = 2] = "Slip39_Advanced";
})(exports.Enum_BackupType || (exports.Enum_BackupType = {}));
exports.Enum_SafetyCheckLevel = void 0;
(function(Enum_SafetyCheckLevel) {
    Enum_SafetyCheckLevel[Enum_SafetyCheckLevel["Strict"] = 0] = "Strict";
    Enum_SafetyCheckLevel[Enum_SafetyCheckLevel["PromptAlways"] = 1] = "PromptAlways";
    Enum_SafetyCheckLevel[Enum_SafetyCheckLevel["PromptTemporarily"] = 2] = "PromptTemporarily";
})(exports.Enum_SafetyCheckLevel || (exports.Enum_SafetyCheckLevel = {}));
exports.Enum_Capability = void 0;
(function(Enum_Capability) {
    Enum_Capability[Enum_Capability["Capability_Bitcoin"] = 1] = "Capability_Bitcoin";
    Enum_Capability[Enum_Capability["Capability_Bitcoin_like"] = 2] = "Capability_Bitcoin_like";
    Enum_Capability[Enum_Capability["Capability_Binance"] = 3] = "Capability_Binance";
    Enum_Capability[Enum_Capability["Capability_Cardano"] = 4] = "Capability_Cardano";
    Enum_Capability[Enum_Capability["Capability_Crypto"] = 5] = "Capability_Crypto";
    Enum_Capability[Enum_Capability["Capability_EOS"] = 6] = "Capability_EOS";
    Enum_Capability[Enum_Capability["Capability_Ethereum"] = 7] = "Capability_Ethereum";
    Enum_Capability[Enum_Capability["Capability_Lisk"] = 8] = "Capability_Lisk";
    Enum_Capability[Enum_Capability["Capability_Monero"] = 9] = "Capability_Monero";
    Enum_Capability[Enum_Capability["Capability_NEM"] = 10] = "Capability_NEM";
    Enum_Capability[Enum_Capability["Capability_Ripple"] = 11] = "Capability_Ripple";
    Enum_Capability[Enum_Capability["Capability_Stellar"] = 12] = "Capability_Stellar";
    Enum_Capability[Enum_Capability["Capability_Tezos"] = 13] = "Capability_Tezos";
    Enum_Capability[Enum_Capability["Capability_U2F"] = 14] = "Capability_U2F";
    Enum_Capability[Enum_Capability["Capability_Shamir"] = 15] = "Capability_Shamir";
    Enum_Capability[Enum_Capability["Capability_ShamirGroups"] = 16] = "Capability_ShamirGroups";
    Enum_Capability[Enum_Capability["Capability_PassphraseEntry"] = 17] = "Capability_PassphraseEntry";
})(exports.Enum_Capability || (exports.Enum_Capability = {}));
exports.ExportType = void 0;
(function(ExportType) {
    ExportType[ExportType["SeedEncExportType_NO"] = 0] = "SeedEncExportType_NO";
    ExportType[ExportType["SeedEncExportType_YES"] = 1] = "SeedEncExportType_YES";
    ExportType[ExportType["MnemonicPlainExportType_YES"] = 2] = "MnemonicPlainExportType_YES";
})(exports.ExportType || (exports.ExportType = {}));
exports.SdProtectOperationType = void 0;
(function(SdProtectOperationType) {
    SdProtectOperationType[SdProtectOperationType["DISABLE"] = 0] = "DISABLE";
    SdProtectOperationType[SdProtectOperationType["ENABLE"] = 1] = "ENABLE";
    SdProtectOperationType[SdProtectOperationType["REFRESH"] = 2] = "REFRESH";
})(exports.SdProtectOperationType || (exports.SdProtectOperationType = {}));
exports.RecoveryDeviceType = void 0;
(function(RecoveryDeviceType) {
    RecoveryDeviceType[RecoveryDeviceType["RecoveryDeviceType_ScrambledWords"] = 0] = "RecoveryDeviceType_ScrambledWords";
    RecoveryDeviceType[RecoveryDeviceType["RecoveryDeviceType_Matrix"] = 1] = "RecoveryDeviceType_Matrix";
})(exports.RecoveryDeviceType || (exports.RecoveryDeviceType = {}));
exports.Enum_WordRequestType = void 0;
(function(Enum_WordRequestType) {
    Enum_WordRequestType[Enum_WordRequestType["WordRequestType_Plain"] = 0] = "WordRequestType_Plain";
    Enum_WordRequestType[Enum_WordRequestType["WordRequestType_Matrix9"] = 1] = "WordRequestType_Matrix9";
    Enum_WordRequestType[Enum_WordRequestType["WordRequestType_Matrix6"] = 2] = "WordRequestType_Matrix6";
})(exports.Enum_WordRequestType || (exports.Enum_WordRequestType = {}));
exports.SeedRequestType = void 0;
(function(SeedRequestType) {
    SeedRequestType[SeedRequestType["SeedRequestType_Gen"] = 0] = "SeedRequestType_Gen";
    SeedRequestType[SeedRequestType["SeedRequestType_EncExport"] = 1] = "SeedRequestType_EncExport";
    SeedRequestType[SeedRequestType["SeedRequestType_EncImport"] = 2] = "SeedRequestType_EncImport";
})(exports.SeedRequestType || (exports.SeedRequestType = {}));
exports.WL_OperationType = void 0;
(function(WL_OperationType) {
    WL_OperationType[WL_OperationType["WL_OperationType_Add"] = 0] = "WL_OperationType_Add";
    WL_OperationType[WL_OperationType["WL_OperationType_Delete"] = 1] = "WL_OperationType_Delete";
    WL_OperationType[WL_OperationType["WL_OperationType_Inquire"] = 2] = "WL_OperationType_Inquire";
})(exports.WL_OperationType || (exports.WL_OperationType = {}));
exports.ResourceType = void 0;
(function(ResourceType) {
    ResourceType[ResourceType["WallPaper"] = 0] = "WallPaper";
    ResourceType[ResourceType["Nft"] = 1] = "Nft";
})(exports.ResourceType || (exports.ResourceType = {}));
exports.NEMMosaicLevy = void 0;
(function(NEMMosaicLevy) {
    NEMMosaicLevy[NEMMosaicLevy["MosaicLevy_Absolute"] = 1] = "MosaicLevy_Absolute";
    NEMMosaicLevy[NEMMosaicLevy["MosaicLevy_Percentile"] = 2] = "MosaicLevy_Percentile";
})(exports.NEMMosaicLevy || (exports.NEMMosaicLevy = {}));
exports.NEMSupplyChangeType = void 0;
(function(NEMSupplyChangeType) {
    NEMSupplyChangeType[NEMSupplyChangeType["SupplyChange_Increase"] = 1] = "SupplyChange_Increase";
    NEMSupplyChangeType[NEMSupplyChangeType["SupplyChange_Decrease"] = 2] = "SupplyChange_Decrease";
})(exports.NEMSupplyChangeType || (exports.NEMSupplyChangeType = {}));
exports.NEMModificationType = void 0;
(function(NEMModificationType) {
    NEMModificationType[NEMModificationType["CosignatoryModification_Add"] = 1] = "CosignatoryModification_Add";
    NEMModificationType[NEMModificationType["CosignatoryModification_Delete"] = 2] = "CosignatoryModification_Delete";
})(exports.NEMModificationType || (exports.NEMModificationType = {}));
exports.NEMImportanceTransferMode = void 0;
(function(NEMImportanceTransferMode) {
    NEMImportanceTransferMode[NEMImportanceTransferMode["ImportanceTransfer_Activate"] = 1] = "ImportanceTransfer_Activate";
    NEMImportanceTransferMode[NEMImportanceTransferMode["ImportanceTransfer_Deactivate"] = 2] = "ImportanceTransfer_Deactivate";
})(exports.NEMImportanceTransferMode || (exports.NEMImportanceTransferMode = {}));
exports.StellarAssetType = void 0;
(function(StellarAssetType) {
    StellarAssetType[StellarAssetType["NATIVE"] = 0] = "NATIVE";
    StellarAssetType[StellarAssetType["ALPHANUM4"] = 1] = "ALPHANUM4";
    StellarAssetType[StellarAssetType["ALPHANUM12"] = 2] = "ALPHANUM12";
})(exports.StellarAssetType || (exports.StellarAssetType = {}));
exports.StellarMemoType = void 0;
(function(StellarMemoType) {
    StellarMemoType[StellarMemoType["NONE"] = 0] = "NONE";
    StellarMemoType[StellarMemoType["TEXT"] = 1] = "TEXT";
    StellarMemoType[StellarMemoType["ID"] = 2] = "ID";
    StellarMemoType[StellarMemoType["HASH"] = 3] = "HASH";
    StellarMemoType[StellarMemoType["RETURN"] = 4] = "RETURN";
})(exports.StellarMemoType || (exports.StellarMemoType = {}));
exports.StellarSignerType = void 0;
(function(StellarSignerType) {
    StellarSignerType[StellarSignerType["ACCOUNT"] = 0] = "ACCOUNT";
    StellarSignerType[StellarSignerType["PRE_AUTH"] = 1] = "PRE_AUTH";
    StellarSignerType[StellarSignerType["HASH"] = 2] = "HASH";
})(exports.StellarSignerType || (exports.StellarSignerType = {}));
exports.TezosContractType = void 0;
(function(TezosContractType) {
    TezosContractType[TezosContractType["Implicit"] = 0] = "Implicit";
    TezosContractType[TezosContractType["Originated"] = 1] = "Originated";
})(exports.TezosContractType || (exports.TezosContractType = {}));
exports.TezosBallotType = void 0;
(function(TezosBallotType) {
    TezosBallotType[TezosBallotType["Yay"] = 0] = "Yay";
    TezosBallotType[TezosBallotType["Nay"] = 1] = "Nay";
    TezosBallotType[TezosBallotType["Pass"] = 2] = "Pass";
})(exports.TezosBallotType || (exports.TezosBallotType = {}));
exports.TronResourceCode = void 0;
(function(TronResourceCode) {
    TronResourceCode[TronResourceCode["BANDWIDTH"] = 0] = "BANDWIDTH";
    TronResourceCode[TronResourceCode["ENERGY"] = 1] = "ENERGY";
})(exports.TronResourceCode || (exports.TronResourceCode = {}));
exports.CommandFlags = void 0;
(function(CommandFlags) {
    CommandFlags[CommandFlags["Default"] = 0] = "Default";
    CommandFlags[CommandFlags["Factory_Only"] = 1] = "Factory_Only";
})(exports.CommandFlags || (exports.CommandFlags = {}));
var messages = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    get BinanceOrderType () {
        return exports.BinanceOrderType;
    },
    get BinanceOrderSide () {
        return exports.BinanceOrderSide;
    },
    get BinanceTimeInForce () {
        return exports.BinanceTimeInForce;
    },
    get Enum_InputScriptType () {
        return exports.Enum_InputScriptType;
    },
    get Enum_OutputScriptType () {
        return exports.Enum_OutputScriptType;
    },
    get DecredStakingSpendType () {
        return exports.DecredStakingSpendType;
    },
    get AmountUnit () {
        return exports.AmountUnit;
    },
    get Enum_RequestType () {
        return exports.Enum_RequestType;
    },
    get RebootType () {
        return exports.RebootType;
    },
    get CardanoDerivationType () {
        return exports.CardanoDerivationType;
    },
    get CardanoAddressType () {
        return exports.CardanoAddressType;
    },
    get CardanoNativeScriptType () {
        return exports.CardanoNativeScriptType;
    },
    get CardanoNativeScriptHashDisplayFormat () {
        return exports.CardanoNativeScriptHashDisplayFormat;
    },
    get CardanoTxOutputSerializationFormat () {
        return exports.CardanoTxOutputSerializationFormat;
    },
    get CardanoCertificateType () {
        return exports.CardanoCertificateType;
    },
    get CardanoPoolRelayType () {
        return exports.CardanoPoolRelayType;
    },
    get CardanoTxAuxiliaryDataSupplementType () {
        return exports.CardanoTxAuxiliaryDataSupplementType;
    },
    get CardanoGovernanceRegistrationFormat () {
        return exports.CardanoGovernanceRegistrationFormat;
    },
    get CardanoTxSigningMode () {
        return exports.CardanoTxSigningMode;
    },
    get CardanoTxWitnessType () {
        return exports.CardanoTxWitnessType;
    },
    get FailureType () {
        return exports.FailureType;
    },
    get Enum_ButtonRequestType () {
        return exports.Enum_ButtonRequestType;
    },
    get Enum_PinMatrixRequestType () {
        return exports.Enum_PinMatrixRequestType;
    },
    get EthereumDefinitionType () {
        return exports.EthereumDefinitionType;
    },
    get EthereumDataTypeOneKey () {
        return exports.EthereumDataTypeOneKey;
    },
    get EthereumDataType () {
        return exports.EthereumDataType;
    },
    get Enum_BackupType () {
        return exports.Enum_BackupType;
    },
    get Enum_SafetyCheckLevel () {
        return exports.Enum_SafetyCheckLevel;
    },
    get Enum_Capability () {
        return exports.Enum_Capability;
    },
    get ExportType () {
        return exports.ExportType;
    },
    get SdProtectOperationType () {
        return exports.SdProtectOperationType;
    },
    get RecoveryDeviceType () {
        return exports.RecoveryDeviceType;
    },
    get Enum_WordRequestType () {
        return exports.Enum_WordRequestType;
    },
    get SeedRequestType () {
        return exports.SeedRequestType;
    },
    get WL_OperationType () {
        return exports.WL_OperationType;
    },
    get ResourceType () {
        return exports.ResourceType;
    },
    get NEMMosaicLevy () {
        return exports.NEMMosaicLevy;
    },
    get NEMSupplyChangeType () {
        return exports.NEMSupplyChangeType;
    },
    get NEMModificationType () {
        return exports.NEMModificationType;
    },
    get NEMImportanceTransferMode () {
        return exports.NEMImportanceTransferMode;
    },
    get StellarAssetType () {
        return exports.StellarAssetType;
    },
    get StellarMemoType () {
        return exports.StellarMemoType;
    },
    get StellarSignerType () {
        return exports.StellarSignerType;
    },
    get TezosContractType () {
        return exports.TezosContractType;
    },
    get TezosBallotType () {
        return exports.TezosBallotType;
    },
    get TronResourceCode () {
        return exports.TronResourceCode;
    },
    get CommandFlags () {
        return exports.CommandFlags;
    }
});
protobuf__namespace.util.Long = Long__namespace;
protobuf__namespace.configure();
var index = {
    check,
    buildOne,
    buildBuffers,
    buildEncodeBuffers,
    receiveOne,
    parseConfigure,
    decodeProtocol
};
exports.BUFFER_SIZE = BUFFER_SIZE;
exports.COMMON_HEADER_SIZE = COMMON_HEADER_SIZE;
exports.HEADER_SIZE = HEADER_SIZE;
exports.MESSAGE_HEADER_BYTE = MESSAGE_HEADER_BYTE;
exports.MESSAGE_TOP_CHAR = MESSAGE_TOP_CHAR;
exports.Messages = messages;
exports["default"] = index;

},{"64a5f25c7187399a":"6aj0x","577f40803739912c":"djJSk","1c24efdff813e1f4":"j5ACk","4aa485033bbbe586":"6tQNr"}],"6aj0x":[function(require,module,exports) {
// light library entry point.
"use strict";
module.exports = require("833e0629170f0a27");

},{"833e0629170f0a27":"6BAQr"}],"6BAQr":[function(require,module,exports) {
"use strict";
var protobuf = module.exports = require("665861614a27978b");
protobuf.build = "light";
/**
 * A node-style callback as used by {@link load} and {@link Root#load}.
 * @typedef LoadCallback
 * @type {function}
 * @param {Error|null} error Error, if any, otherwise `null`
 * @param {Root} [root] Root, if there hasn't been an error
 * @returns {undefined}
 */ /**
 * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.
 * @param {string|string[]} filename One or multiple files to load
 * @param {Root} root Root namespace, defaults to create a new one if omitted.
 * @param {LoadCallback} callback Callback function
 * @returns {undefined}
 * @see {@link Root#load}
 */ function load(filename, root, callback) {
    if (typeof root === "function") {
        callback = root;
        root = new protobuf.Root();
    } else if (!root) root = new protobuf.Root();
    return root.load(filename, callback);
}
/**
 * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.
 * @name load
 * @function
 * @param {string|string[]} filename One or multiple files to load
 * @param {LoadCallback} callback Callback function
 * @returns {undefined}
 * @see {@link Root#load}
 * @variation 2
 */ // function load(filename:string, callback:LoadCallback):undefined
/**
 * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.
 * @name load
 * @function
 * @param {string|string[]} filename One or multiple files to load
 * @param {Root} [root] Root namespace, defaults to create a new one if omitted.
 * @returns {Promise<Root>} Promise
 * @see {@link Root#load}
 * @variation 3
 */ // function load(filename:string, [root:Root]):Promise<Root>
protobuf.load = load;
/**
 * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).
 * @param {string|string[]} filename One or multiple files to load
 * @param {Root} [root] Root namespace, defaults to create a new one if omitted.
 * @returns {Root} Root namespace
 * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid
 * @see {@link Root#loadSync}
 */ function loadSync(filename, root) {
    if (!root) root = new protobuf.Root();
    return root.loadSync(filename);
}
protobuf.loadSync = loadSync;
// Serialization
protobuf.encoder = require("9ac4d63be4f03791");
protobuf.decoder = require("8beafe0d5fe15102");
protobuf.verifier = require("df190431b69c4b9a");
protobuf.converter = require("88ab1c863e236ec1");
// Reflection
protobuf.ReflectionObject = require("332c87212dfa779a");
protobuf.Namespace = require("67984982d78ac9ae");
protobuf.Root = require("fee05cae7986420d");
protobuf.Enum = require("981cef50d453191e");
protobuf.Type = require("581e8c9a7e3c8585");
protobuf.Field = require("8e89455746a14b0b");
protobuf.OneOf = require("62ab0f7e7fbae246");
protobuf.MapField = require("3917ae9b2cd6e3b2");
protobuf.Service = require("dbe2739aa3ae8981");
protobuf.Method = require("ce6220ff8e1d7cd6");
// Runtime
protobuf.Message = require("daf7ae8aead11b2e");
protobuf.wrappers = require("c1efdaab3cd06ab");
// Utility
protobuf.types = require("7ebffe61ce74c4dd");
protobuf.util = require("8b0934c1a2164ebb");
// Set up possibly cyclic reflection dependencies
protobuf.ReflectionObject._configure(protobuf.Root);
protobuf.Namespace._configure(protobuf.Type, protobuf.Service, protobuf.Enum);
protobuf.Root._configure(protobuf.Type);
protobuf.Field._configure(protobuf.Type);

},{"665861614a27978b":"dqjlY","9ac4d63be4f03791":"14FRe","8beafe0d5fe15102":"5dWn6","df190431b69c4b9a":"4bGEh","88ab1c863e236ec1":"blBnB","332c87212dfa779a":"cWxlI","67984982d78ac9ae":"4idoA","fee05cae7986420d":"heZNO","981cef50d453191e":"9srcK","581e8c9a7e3c8585":"9Fupb","8e89455746a14b0b":"12Nu0","62ab0f7e7fbae246":"9U2iM","3917ae9b2cd6e3b2":"hNdPj","dbe2739aa3ae8981":"gSwpu","ce6220ff8e1d7cd6":"eMAud","daf7ae8aead11b2e":"3paTM","c1efdaab3cd06ab":"luHkl","7ebffe61ce74c4dd":"a31FO","8b0934c1a2164ebb":"9qDrQ"}],"dqjlY":[function(require,module,exports) {
"use strict";
var protobuf = exports;
/**
 * Build type, one of `"full"`, `"light"` or `"minimal"`.
 * @name build
 * @type {string}
 * @const
 */ protobuf.build = "minimal";
// Serialization
protobuf.Writer = require("123b8c1671ce76b7");
protobuf.BufferWriter = require("5e89240d6b4d6c84");
protobuf.Reader = require("7e7524d57b18d0d0");
protobuf.BufferReader = require("443298fa9a162adc");
// Utility
protobuf.util = require("682ea4beebbab45d");
protobuf.rpc = require("862afecd43193828");
protobuf.roots = require("14faeab02aebb66b");
protobuf.configure = configure;
/* istanbul ignore next */ /**
 * Reconfigures the library according to the environment.
 * @returns {undefined}
 */ function configure() {
    protobuf.util._configure();
    protobuf.Writer._configure(protobuf.BufferWriter);
    protobuf.Reader._configure(protobuf.BufferReader);
}
// Set up buffer utility according to the environment
configure();

},{"123b8c1671ce76b7":"1OTT3","5e89240d6b4d6c84":"7oFzA","7e7524d57b18d0d0":"8WivO","443298fa9a162adc":"7FkOA","682ea4beebbab45d":"k72f7","862afecd43193828":"7VLEv","14faeab02aebb66b":"8v4Te"}],"1OTT3":[function(require,module,exports) {
"use strict";
module.exports = Writer;
var util = require("5c785c60b384e6c3");
var BufferWriter; // cyclic
var LongBits = util.LongBits, base64 = util.base64, utf8 = util.utf8;
/**
 * Constructs a new writer operation instance.
 * @classdesc Scheduled writer operation.
 * @constructor
 * @param {function(*, Uint8Array, number)} fn Function to call
 * @param {number} len Value byte length
 * @param {*} val Value to write
 * @ignore
 */ function Op(fn, len, val) {
    /**
     * Function to call.
     * @type {function(Uint8Array, number, *)}
     */ this.fn = fn;
    /**
     * Value byte length.
     * @type {number}
     */ this.len = len;
    /**
     * Next operation.
     * @type {Writer.Op|undefined}
     */ this.next = undefined;
    /**
     * Value to write.
     * @type {*}
     */ this.val = val; // type varies
}
/* istanbul ignore next */ function noop() {} // eslint-disable-line no-empty-function
/**
 * Constructs a new writer state instance.
 * @classdesc Copied writer state.
 * @memberof Writer
 * @constructor
 * @param {Writer} writer Writer to copy state from
 * @ignore
 */ function State(writer) {
    /**
     * Current head.
     * @type {Writer.Op}
     */ this.head = writer.head;
    /**
     * Current tail.
     * @type {Writer.Op}
     */ this.tail = writer.tail;
    /**
     * Current buffer length.
     * @type {number}
     */ this.len = writer.len;
    /**
     * Next state.
     * @type {State|null}
     */ this.next = writer.states;
}
/**
 * Constructs a new writer instance.
 * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.
 * @constructor
 */ function Writer() {
    /**
     * Current length.
     * @type {number}
     */ this.len = 0;
    /**
     * Operations head.
     * @type {Object}
     */ this.head = new Op(noop, 0, 0);
    /**
     * Operations tail
     * @type {Object}
     */ this.tail = this.head;
    /**
     * Linked forked states.
     * @type {Object|null}
     */ this.states = null;
// When a value is written, the writer calculates its byte length and puts it into a linked
// list of operations to perform when finish() is called. This both allows us to allocate
// buffers of the exact required size and reduces the amount of work we have to do compared
// to first calculating over objects and then encoding over objects. In our case, the encoding
// part is just a linked list walk calling operations with already prepared values.
}
var create = function create() {
    return util.Buffer ? function create_buffer_setup() {
        return (Writer.create = function create_buffer() {
            return new BufferWriter();
        })();
    } : function create_array() {
        return new Writer();
    };
};
/**
 * Creates a new writer.
 * @function
 * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}
 */ Writer.create = create();
/**
 * Allocates a buffer of the specified size.
 * @param {number} size Buffer size
 * @returns {Uint8Array} Buffer
 */ Writer.alloc = function alloc(size) {
    return new util.Array(size);
};
// Use Uint8Array buffer pool in the browser, just like node does with buffers
/* istanbul ignore else */ if (util.Array !== Array) Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);
/**
 * Pushes a new operation to the queue.
 * @param {function(Uint8Array, number, *)} fn Function to call
 * @param {number} len Value byte length
 * @param {number} val Value to write
 * @returns {Writer} `this`
 * @private
 */ Writer.prototype._push = function push(fn, len, val) {
    this.tail = this.tail.next = new Op(fn, len, val);
    this.len += len;
    return this;
};
function writeByte(val, buf, pos) {
    buf[pos] = val & 255;
}
function writeVarint32(val, buf, pos) {
    while(val > 127){
        buf[pos++] = val & 127 | 128;
        val >>>= 7;
    }
    buf[pos] = val;
}
/**
 * Constructs a new varint writer operation instance.
 * @classdesc Scheduled varint writer operation.
 * @extends Op
 * @constructor
 * @param {number} len Value byte length
 * @param {number} val Value to write
 * @ignore
 */ function VarintOp(len, val) {
    this.len = len;
    this.next = undefined;
    this.val = val;
}
VarintOp.prototype = Object.create(Op.prototype);
VarintOp.prototype.fn = writeVarint32;
/**
 * Writes an unsigned 32 bit value as a varint.
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */ Writer.prototype.uint32 = function write_uint32(value) {
    // here, the call to this.push has been inlined and a varint specific Op subclass is used.
    // uint32 is by far the most frequently used operation and benefits significantly from this.
    this.len += (this.tail = this.tail.next = new VarintOp((value = value >>> 0) < 128 ? 1 : value < 16384 ? 2 : value < 2097152 ? 3 : value < 268435456 ? 4 : 5, value)).len;
    return this;
};
/**
 * Writes a signed 32 bit value as a varint.
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */ Writer.prototype.int32 = function write_int32(value) {
    return value < 0 ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec
     : this.uint32(value);
};
/**
 * Writes a 32 bit value as a varint, zig-zag encoded.
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */ Writer.prototype.sint32 = function write_sint32(value) {
    return this.uint32((value << 1 ^ value >> 31) >>> 0);
};
function writeVarint64(val, buf, pos) {
    while(val.hi){
        buf[pos++] = val.lo & 127 | 128;
        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;
        val.hi >>>= 7;
    }
    while(val.lo > 127){
        buf[pos++] = val.lo & 127 | 128;
        val.lo = val.lo >>> 7;
    }
    buf[pos++] = val.lo;
}
/**
 * Writes an unsigned 64 bit value as a varint.
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */ Writer.prototype.uint64 = function write_uint64(value) {
    var bits = LongBits.from(value);
    return this._push(writeVarint64, bits.length(), bits);
};
/**
 * Writes a signed 64 bit value as a varint.
 * @function
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */ Writer.prototype.int64 = Writer.prototype.uint64;
/**
 * Writes a signed 64 bit value as a varint, zig-zag encoded.
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */ Writer.prototype.sint64 = function write_sint64(value) {
    var bits = LongBits.from(value).zzEncode();
    return this._push(writeVarint64, bits.length(), bits);
};
/**
 * Writes a boolish value as a varint.
 * @param {boolean} value Value to write
 * @returns {Writer} `this`
 */ Writer.prototype.bool = function write_bool(value) {
    return this._push(writeByte, 1, value ? 1 : 0);
};
function writeFixed32(val, buf, pos) {
    buf[pos] = val & 255;
    buf[pos + 1] = val >>> 8 & 255;
    buf[pos + 2] = val >>> 16 & 255;
    buf[pos + 3] = val >>> 24;
}
/**
 * Writes an unsigned 32 bit value as fixed 32 bits.
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */ Writer.prototype.fixed32 = function write_fixed32(value) {
    return this._push(writeFixed32, 4, value >>> 0);
};
/**
 * Writes a signed 32 bit value as fixed 32 bits.
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */ Writer.prototype.sfixed32 = Writer.prototype.fixed32;
/**
 * Writes an unsigned 64 bit value as fixed 64 bits.
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */ Writer.prototype.fixed64 = function write_fixed64(value) {
    var bits = LongBits.from(value);
    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);
};
/**
 * Writes a signed 64 bit value as fixed 64 bits.
 * @function
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */ Writer.prototype.sfixed64 = Writer.prototype.fixed64;
/**
 * Writes a float (32 bit).
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */ Writer.prototype.float = function write_float(value) {
    return this._push(util.float.writeFloatLE, 4, value);
};
/**
 * Writes a double (64 bit float).
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */ Writer.prototype.double = function write_double(value) {
    return this._push(util.float.writeDoubleLE, 8, value);
};
var writeBytes = util.Array.prototype.set ? function writeBytes_set(val, buf, pos) {
    buf.set(val, pos); // also works for plain array values
} : function writeBytes_for(val, buf, pos) {
    for(var i = 0; i < val.length; ++i)buf[pos + i] = val[i];
};
/**
 * Writes a sequence of bytes.
 * @param {Uint8Array|string} value Buffer or base64 encoded string to write
 * @returns {Writer} `this`
 */ Writer.prototype.bytes = function write_bytes(value) {
    var len = value.length >>> 0;
    if (!len) return this._push(writeByte, 1, 0);
    if (util.isString(value)) {
        var buf = Writer.alloc(len = base64.length(value));
        base64.decode(value, buf, 0);
        value = buf;
    }
    return this.uint32(len)._push(writeBytes, len, value);
};
/**
 * Writes a string.
 * @param {string} value Value to write
 * @returns {Writer} `this`
 */ Writer.prototype.string = function write_string(value) {
    var len = utf8.length(value);
    return len ? this.uint32(len)._push(utf8.write, len, value) : this._push(writeByte, 1, 0);
};
/**
 * Forks this writer's state by pushing it to a stack.
 * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.
 * @returns {Writer} `this`
 */ Writer.prototype.fork = function fork() {
    this.states = new State(this);
    this.head = this.tail = new Op(noop, 0, 0);
    this.len = 0;
    return this;
};
/**
 * Resets this instance to the last state.
 * @returns {Writer} `this`
 */ Writer.prototype.reset = function reset() {
    if (this.states) {
        this.head = this.states.head;
        this.tail = this.states.tail;
        this.len = this.states.len;
        this.states = this.states.next;
    } else {
        this.head = this.tail = new Op(noop, 0, 0);
        this.len = 0;
    }
    return this;
};
/**
 * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.
 * @returns {Writer} `this`
 */ Writer.prototype.ldelim = function ldelim() {
    var head = this.head, tail = this.tail, len = this.len;
    this.reset().uint32(len);
    if (len) {
        this.tail.next = head.next; // skip noop
        this.tail = tail;
        this.len += len;
    }
    return this;
};
/**
 * Finishes the write operation.
 * @returns {Uint8Array} Finished buffer
 */ Writer.prototype.finish = function finish() {
    var head = this.head.next, buf = this.constructor.alloc(this.len), pos = 0;
    while(head){
        head.fn(head.val, buf, pos);
        pos += head.len;
        head = head.next;
    }
    // this.head = this.tail = null;
    return buf;
};
Writer._configure = function(BufferWriter_) {
    BufferWriter = BufferWriter_;
    Writer.create = create();
    BufferWriter._configure();
};

},{"5c785c60b384e6c3":"k72f7"}],"k72f7":[function(require,module,exports) {
var global = arguments[3];
"use strict";
var util = exports;
// used to return a Promise where callback is omitted
util.asPromise = require("217e30ba36d0c075");
// converts to / from base64 encoded strings
util.base64 = require("140216d783bbc015");
// base class of rpc.Service
util.EventEmitter = require("78776c045df9e77b");
// float handling accross browsers
util.float = require("392006759dba32fb");
// requires modules optionally and hides the call from bundlers
util.inquire = require("ac14d008f0aa6436");
// converts to / from utf8 encoded strings
util.utf8 = require("298ebb5f36c5d25a");
// provides a node-like buffer pool in the browser
util.pool = require("dc7a35661f9f9275");
// utility to work with the low and high bits of a 64 bit value
util.LongBits = require("94b513d9f4cac968");
/**
 * Whether running within node or not.
 * @memberof util
 * @type {boolean}
 */ util.isNode = Boolean(typeof global !== "undefined" && global && global.process && global.process.versions && global.process.versions.node);
/**
 * Global object reference.
 * @memberof util
 * @type {Object}
 */ util.global = util.isNode && global || typeof window !== "undefined" && window || typeof self !== "undefined" && self || this; // eslint-disable-line no-invalid-this
/**
 * An immuable empty array.
 * @memberof util
 * @type {Array.<*>}
 * @const
 */ util.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes
/**
 * An immutable empty object.
 * @type {Object}
 * @const
 */ util.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes
/**
 * Tests if the specified value is an integer.
 * @function
 * @param {*} value Value to test
 * @returns {boolean} `true` if the value is an integer
 */ util.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {
    return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
};
/**
 * Tests if the specified value is a string.
 * @param {*} value Value to test
 * @returns {boolean} `true` if the value is a string
 */ util.isString = function isString(value) {
    return typeof value === "string" || value instanceof String;
};
/**
 * Tests if the specified value is a non-null object.
 * @param {*} value Value to test
 * @returns {boolean} `true` if the value is a non-null object
 */ util.isObject = function isObject(value) {
    return value && typeof value === "object";
};
/**
 * Checks if a property on a message is considered to be present.
 * This is an alias of {@link util.isSet}.
 * @function
 * @param {Object} obj Plain object or message instance
 * @param {string} prop Property name
 * @returns {boolean} `true` if considered to be present, otherwise `false`
 */ util.isset = /**
 * Checks if a property on a message is considered to be present.
 * @param {Object} obj Plain object or message instance
 * @param {string} prop Property name
 * @returns {boolean} `true` if considered to be present, otherwise `false`
 */ util.isSet = function isSet(obj, prop) {
    var value = obj[prop];
    if (value != null && obj.hasOwnProperty(prop)) return typeof value !== "object" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;
    return false;
};
/**
 * Any compatible Buffer instance.
 * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.
 * @interface Buffer
 * @extends Uint8Array
 */ /**
 * Node's Buffer class if available.
 * @type {Constructor<Buffer>}
 */ util.Buffer = function() {
    try {
        var Buffer = util.inquire("buffer").Buffer;
        // refuse to use non-node buffers if not explicitly assigned (perf reasons):
        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;
    } catch (e) {
        /* istanbul ignore next */ return null;
    }
}();
// Internal alias of or polyfull for Buffer.from.
util._Buffer_from = null;
// Internal alias of or polyfill for Buffer.allocUnsafe.
util._Buffer_allocUnsafe = null;
/**
 * Creates a new buffer of whatever type supported by the environment.
 * @param {number|number[]} [sizeOrArray=0] Buffer size or number array
 * @returns {Uint8Array|Buffer} Buffer
 */ util.newBuffer = function newBuffer(sizeOrArray) {
    /* istanbul ignore next */ return typeof sizeOrArray === "number" ? util.Buffer ? util._Buffer_allocUnsafe(sizeOrArray) : new util.Array(sizeOrArray) : util.Buffer ? util._Buffer_from(sizeOrArray) : typeof Uint8Array === "undefined" ? sizeOrArray : new Uint8Array(sizeOrArray);
};
/**
 * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.
 * @type {Constructor<Uint8Array>}
 */ util.Array = typeof Uint8Array !== "undefined" ? Uint8Array /* istanbul ignore next */  : Array;
/**
 * Any compatible Long instance.
 * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.
 * @interface Long
 * @property {number} low Low bits
 * @property {number} high High bits
 * @property {boolean} unsigned Whether unsigned or not
 */ /**
 * Long.js's Long class if available.
 * @type {Constructor<Long>}
 */ util.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long || /* istanbul ignore next */ util.global.Long || util.inquire("long");
/**
 * Regular expression used to verify 2 bit (`bool`) map keys.
 * @type {RegExp}
 * @const
 */ util.key2Re = /^true|false|0|1$/;
/**
 * Regular expression used to verify 32 bit (`int32` etc.) map keys.
 * @type {RegExp}
 * @const
 */ util.key32Re = /^-?(?:0|[1-9][0-9]*)$/;
/**
 * Regular expression used to verify 64 bit (`int64` etc.) map keys.
 * @type {RegExp}
 * @const
 */ util.key64Re = /^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;
/**
 * Converts a number or long to an 8 characters long hash string.
 * @param {Long|number} value Value to convert
 * @returns {string} Hash
 */ util.longToHash = function longToHash(value) {
    return value ? util.LongBits.from(value).toHash() : util.LongBits.zeroHash;
};
/**
 * Converts an 8 characters long hash string to a long or number.
 * @param {string} hash Hash
 * @param {boolean} [unsigned=false] Whether unsigned or not
 * @returns {Long|number} Original value
 */ util.longFromHash = function longFromHash(hash, unsigned) {
    var bits = util.LongBits.fromHash(hash);
    if (util.Long) return util.Long.fromBits(bits.lo, bits.hi, unsigned);
    return bits.toNumber(Boolean(unsigned));
};
/**
 * Merges the properties of the source object into the destination object.
 * @memberof util
 * @param {Object.<string,*>} dst Destination object
 * @param {Object.<string,*>} src Source object
 * @param {boolean} [ifNotSet=false] Merges only if the key is not already set
 * @returns {Object.<string,*>} Destination object
 */ function merge(dst, src, ifNotSet) {
    for(var keys = Object.keys(src), i = 0; i < keys.length; ++i)if (dst[keys[i]] === undefined || !ifNotSet) dst[keys[i]] = src[keys[i]];
    return dst;
}
util.merge = merge;
/**
 * Converts the first character of a string to lower case.
 * @param {string} str String to convert
 * @returns {string} Converted string
 */ util.lcFirst = function lcFirst(str) {
    return str.charAt(0).toLowerCase() + str.substring(1);
};
/**
 * Creates a custom error constructor.
 * @memberof util
 * @param {string} name Error name
 * @returns {Constructor<Error>} Custom error constructor
 */ function newError(name) {
    function CustomError(message, properties) {
        if (!(this instanceof CustomError)) return new CustomError(message, properties);
        // Error.call(this, message);
        // ^ just returns a new error instance because the ctor can be called as a function
        Object.defineProperty(this, "message", {
            get: function() {
                return message;
            }
        });
        /* istanbul ignore next */ if (Error.captureStackTrace) Error.captureStackTrace(this, CustomError);
        else Object.defineProperty(this, "stack", {
            value: new Error().stack || ""
        });
        if (properties) merge(this, properties);
    }
    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;
    Object.defineProperty(CustomError.prototype, "name", {
        get: function() {
            return name;
        }
    });
    CustomError.prototype.toString = function toString() {
        return this.name + ": " + this.message;
    };
    return CustomError;
}
util.newError = newError;
/**
 * Constructs a new protocol error.
 * @classdesc Error subclass indicating a protocol specifc error.
 * @memberof util
 * @extends Error
 * @template T extends Message<T>
 * @constructor
 * @param {string} message Error message
 * @param {Object.<string,*>} [properties] Additional properties
 * @example
 * try {
 *     MyMessage.decode(someBuffer); // throws if required fields are missing
 * } catch (e) {
 *     if (e instanceof ProtocolError && e.instance)
 *         console.log("decoded so far: " + JSON.stringify(e.instance));
 * }
 */ util.ProtocolError = newError("ProtocolError");
/**
 * So far decoded message instance.
 * @name util.ProtocolError#instance
 * @type {Message<T>}
 */ /**
 * A OneOf getter as returned by {@link util.oneOfGetter}.
 * @typedef OneOfGetter
 * @type {function}
 * @returns {string|undefined} Set field name, if any
 */ /**
 * Builds a getter for a oneof's present field name.
 * @param {string[]} fieldNames Field names
 * @returns {OneOfGetter} Unbound getter
 */ util.oneOfGetter = function getOneOf(fieldNames) {
    var fieldMap = {};
    for(var i = 0; i < fieldNames.length; ++i)fieldMap[fieldNames[i]] = 1;
    /**
     * @returns {string|undefined} Set field name, if any
     * @this Object
     * @ignore
     */ return function() {
        for(var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null) return keys[i];
    };
};
/**
 * A OneOf setter as returned by {@link util.oneOfSetter}.
 * @typedef OneOfSetter
 * @type {function}
 * @param {string|undefined} value Field name
 * @returns {undefined}
 */ /**
 * Builds a setter for a oneof's present field name.
 * @param {string[]} fieldNames Field names
 * @returns {OneOfSetter} Unbound setter
 */ util.oneOfSetter = function setOneOf(fieldNames) {
    /**
     * @param {string} name Field name
     * @returns {undefined}
     * @this Object
     * @ignore
     */ return function(name) {
        for(var i = 0; i < fieldNames.length; ++i)if (fieldNames[i] !== name) delete this[fieldNames[i]];
    };
};
/**
 * Default conversion options used for {@link Message#toJSON} implementations.
 *
 * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:
 *
 * - Longs become strings
 * - Enums become string keys
 * - Bytes become base64 encoded strings
 * - (Sub-)Messages become plain objects
 * - Maps become plain objects with all string keys
 * - Repeated fields become arrays
 * - NaN and Infinity for float and double fields become strings
 *
 * @type {IConversionOptions}
 * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json
 */ util.toJSONOptions = {
    longs: String,
    enums: String,
    bytes: String,
    json: true
};
// Sets up buffer utility according to the environment (called in index-minimal)
util._configure = function() {
    var Buffer = util.Buffer;
    /* istanbul ignore if */ if (!Buffer) {
        util._Buffer_from = util._Buffer_allocUnsafe = null;
        return;
    }
    // because node 4.x buffers are incompatible & immutable
    // see: https://github.com/dcodeIO/protobuf.js/pull/665
    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from || /* istanbul ignore next */ function Buffer_from(value, encoding) {
        return new Buffer(value, encoding);
    };
    util._Buffer_allocUnsafe = Buffer.allocUnsafe || /* istanbul ignore next */ function Buffer_allocUnsafe(size) {
        return new Buffer(size);
    };
};

},{"217e30ba36d0c075":"ihGsB","140216d783bbc015":"2nsq5","78776c045df9e77b":"2My7D","392006759dba32fb":"jra39","ac14d008f0aa6436":"86QKD","298ebb5f36c5d25a":"PxlFH","dc7a35661f9f9275":"3yUvf","94b513d9f4cac968":"anW8P"}],"ihGsB":[function(require,module,exports) {
"use strict";
module.exports = asPromise;
/**
 * Callback as used by {@link util.asPromise}.
 * @typedef asPromiseCallback
 * @type {function}
 * @param {Error|null} error Error, if any
 * @param {...*} params Additional arguments
 * @returns {undefined}
 */ /**
 * Returns a promise from a node-style callback function.
 * @memberof util
 * @param {asPromiseCallback} fn Function to call
 * @param {*} ctx Function context
 * @param {...*} params Function arguments
 * @returns {Promise<*>} Promisified function
 */ function asPromise(fn, ctx /*, varargs */ ) {
    var params = new Array(arguments.length - 1), offset = 0, index = 2, pending = true;
    while(index < arguments.length)params[offset++] = arguments[index++];
    return new Promise(function executor(resolve, reject) {
        params[offset] = function callback(err /*, varargs */ ) {
            if (pending) {
                pending = false;
                if (err) reject(err);
                else {
                    var params = new Array(arguments.length - 1), offset = 0;
                    while(offset < params.length)params[offset++] = arguments[offset];
                    resolve.apply(null, params);
                }
            }
        };
        try {
            fn.apply(ctx || null, params);
        } catch (err) {
            if (pending) {
                pending = false;
                reject(err);
            }
        }
    });
}

},{}],"2nsq5":[function(require,module,exports) {
"use strict";
/**
 * A minimal base64 implementation for number arrays.
 * @memberof util
 * @namespace
 */ var base64 = exports;
/**
 * Calculates the byte length of a base64 encoded string.
 * @param {string} string Base64 encoded string
 * @returns {number} Byte length
 */ base64.length = function length(string) {
    var p = string.length;
    if (!p) return 0;
    var n = 0;
    while(--p % 4 > 1 && string.charAt(p) === "=")++n;
    return Math.ceil(string.length * 3) / 4 - n;
};
// Base64 encoding table
var b64 = new Array(64);
// Base64 decoding table
var s64 = new Array(123);
// 65..90, 97..122, 48..57, 43, 47
for(var i = 0; i < 64;)s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;
/**
 * Encodes a buffer to a base64 encoded string.
 * @param {Uint8Array} buffer Source buffer
 * @param {number} start Source start
 * @param {number} end Source end
 * @returns {string} Base64 encoded string
 */ base64.encode = function encode(buffer, start, end) {
    var parts = null, chunk = [];
    var i = 0, j = 0, t; // temporary
    while(start < end){
        var b = buffer[start++];
        switch(j){
            case 0:
                chunk[i++] = b64[b >> 2];
                t = (b & 3) << 4;
                j = 1;
                break;
            case 1:
                chunk[i++] = b64[t | b >> 4];
                t = (b & 15) << 2;
                j = 2;
                break;
            case 2:
                chunk[i++] = b64[t | b >> 6];
                chunk[i++] = b64[b & 63];
                j = 0;
                break;
        }
        if (i > 8191) {
            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
            i = 0;
        }
    }
    if (j) {
        chunk[i++] = b64[t];
        chunk[i++] = 61;
        if (j === 1) chunk[i++] = 61;
    }
    if (parts) {
        if (i) parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
        return parts.join("");
    }
    return String.fromCharCode.apply(String, chunk.slice(0, i));
};
var invalidEncoding = "invalid encoding";
/**
 * Decodes a base64 encoded string to a buffer.
 * @param {string} string Source string
 * @param {Uint8Array} buffer Destination buffer
 * @param {number} offset Destination offset
 * @returns {number} Number of bytes written
 * @throws {Error} If encoding is invalid
 */ base64.decode = function decode(string, buffer, offset) {
    var start = offset;
    var j = 0, t; // temporary
    for(var i = 0; i < string.length;){
        var c = string.charCodeAt(i++);
        if (c === 61 && j > 1) break;
        if ((c = s64[c]) === undefined) throw Error(invalidEncoding);
        switch(j){
            case 0:
                t = c;
                j = 1;
                break;
            case 1:
                buffer[offset++] = t << 2 | (c & 48) >> 4;
                t = c;
                j = 2;
                break;
            case 2:
                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;
                t = c;
                j = 3;
                break;
            case 3:
                buffer[offset++] = (t & 3) << 6 | c;
                j = 0;
                break;
        }
    }
    if (j === 1) throw Error(invalidEncoding);
    return offset - start;
};
/**
 * Tests if the specified string appears to be base64 encoded.
 * @param {string} string String to test
 * @returns {boolean} `true` if probably base64 encoded, otherwise false
 */ base64.test = function test(string) {
    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);
};

},{}],"2My7D":[function(require,module,exports) {
"use strict";
module.exports = EventEmitter;
/**
 * Constructs a new event emitter instance.
 * @classdesc A minimal event emitter.
 * @memberof util
 * @constructor
 */ function EventEmitter() {
    /**
     * Registered listeners.
     * @type {Object.<string,*>}
     * @private
     */ this._listeners = {};
}
/**
 * Registers an event listener.
 * @param {string} evt Event name
 * @param {function} fn Listener
 * @param {*} [ctx] Listener context
 * @returns {util.EventEmitter} `this`
 */ EventEmitter.prototype.on = function on(evt, fn, ctx) {
    (this._listeners[evt] || (this._listeners[evt] = [])).push({
        fn: fn,
        ctx: ctx || this
    });
    return this;
};
/**
 * Removes an event listener or any matching listeners if arguments are omitted.
 * @param {string} [evt] Event name. Removes all listeners if omitted.
 * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.
 * @returns {util.EventEmitter} `this`
 */ EventEmitter.prototype.off = function off(evt, fn) {
    if (evt === undefined) this._listeners = {};
    else if (fn === undefined) this._listeners[evt] = [];
    else {
        var listeners = this._listeners[evt];
        for(var i = 0; i < listeners.length;)if (listeners[i].fn === fn) listeners.splice(i, 1);
        else ++i;
    }
    return this;
};
/**
 * Emits an event by calling its listeners with the specified arguments.
 * @param {string} evt Event name
 * @param {...*} args Arguments
 * @returns {util.EventEmitter} `this`
 */ EventEmitter.prototype.emit = function emit(evt) {
    var listeners = this._listeners[evt];
    if (listeners) {
        var args = [], i = 1;
        for(; i < arguments.length;)args.push(arguments[i++]);
        for(i = 0; i < listeners.length;)listeners[i].fn.apply(listeners[i++].ctx, args);
    }
    return this;
};

},{}],"jra39":[function(require,module,exports) {
"use strict";
module.exports = factory(factory);
/**
 * Reads / writes floats / doubles from / to buffers.
 * @name util.float
 * @namespace
 */ /**
 * Writes a 32 bit float to a buffer using little endian byte order.
 * @name util.float.writeFloatLE
 * @function
 * @param {number} val Value to write
 * @param {Uint8Array} buf Target buffer
 * @param {number} pos Target buffer offset
 * @returns {undefined}
 */ /**
 * Writes a 32 bit float to a buffer using big endian byte order.
 * @name util.float.writeFloatBE
 * @function
 * @param {number} val Value to write
 * @param {Uint8Array} buf Target buffer
 * @param {number} pos Target buffer offset
 * @returns {undefined}
 */ /**
 * Reads a 32 bit float from a buffer using little endian byte order.
 * @name util.float.readFloatLE
 * @function
 * @param {Uint8Array} buf Source buffer
 * @param {number} pos Source buffer offset
 * @returns {number} Value read
 */ /**
 * Reads a 32 bit float from a buffer using big endian byte order.
 * @name util.float.readFloatBE
 * @function
 * @param {Uint8Array} buf Source buffer
 * @param {number} pos Source buffer offset
 * @returns {number} Value read
 */ /**
 * Writes a 64 bit double to a buffer using little endian byte order.
 * @name util.float.writeDoubleLE
 * @function
 * @param {number} val Value to write
 * @param {Uint8Array} buf Target buffer
 * @param {number} pos Target buffer offset
 * @returns {undefined}
 */ /**
 * Writes a 64 bit double to a buffer using big endian byte order.
 * @name util.float.writeDoubleBE
 * @function
 * @param {number} val Value to write
 * @param {Uint8Array} buf Target buffer
 * @param {number} pos Target buffer offset
 * @returns {undefined}
 */ /**
 * Reads a 64 bit double from a buffer using little endian byte order.
 * @name util.float.readDoubleLE
 * @function
 * @param {Uint8Array} buf Source buffer
 * @param {number} pos Source buffer offset
 * @returns {number} Value read
 */ /**
 * Reads a 64 bit double from a buffer using big endian byte order.
 * @name util.float.readDoubleBE
 * @function
 * @param {Uint8Array} buf Source buffer
 * @param {number} pos Source buffer offset
 * @returns {number} Value read
 */ // Factory function for the purpose of node-based testing in modified global environments
function factory(exports) {
    // float: typed array
    if (typeof Float32Array !== "undefined") (function() {
        var f32 = new Float32Array([
            -0
        ]), f8b = new Uint8Array(f32.buffer), le = f8b[3] === 128;
        function writeFloat_f32_cpy(val, buf, pos) {
            f32[0] = val;
            buf[pos] = f8b[0];
            buf[pos + 1] = f8b[1];
            buf[pos + 2] = f8b[2];
            buf[pos + 3] = f8b[3];
        }
        function writeFloat_f32_rev(val, buf, pos) {
            f32[0] = val;
            buf[pos] = f8b[3];
            buf[pos + 1] = f8b[2];
            buf[pos + 2] = f8b[1];
            buf[pos + 3] = f8b[0];
        }
        /* istanbul ignore next */ exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;
        /* istanbul ignore next */ exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;
        function readFloat_f32_cpy(buf, pos) {
            f8b[0] = buf[pos];
            f8b[1] = buf[pos + 1];
            f8b[2] = buf[pos + 2];
            f8b[3] = buf[pos + 3];
            return f32[0];
        }
        function readFloat_f32_rev(buf, pos) {
            f8b[3] = buf[pos];
            f8b[2] = buf[pos + 1];
            f8b[1] = buf[pos + 2];
            f8b[0] = buf[pos + 3];
            return f32[0];
        }
        /* istanbul ignore next */ exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;
        /* istanbul ignore next */ exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;
    // float: ieee754
    })();
    else (function() {
        function writeFloat_ieee754(writeUint, val, buf, pos) {
            var sign = val < 0 ? 1 : 0;
            if (sign) val = -val;
            if (val === 0) writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);
            else if (isNaN(val)) writeUint(2143289344, buf, pos);
            else if (val > 3.4028234663852886e+38) writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);
            else if (val < 1.1754943508222875e-38) writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);
            else {
                var exponent = Math.floor(Math.log(val) / Math.LN2), mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;
                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);
            }
        }
        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);
        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);
        function readFloat_ieee754(readUint, buf, pos) {
            var uint = readUint(buf, pos), sign = (uint >> 31) * 2 + 1, exponent = uint >>> 23 & 255, mantissa = uint & 8388607;
            return exponent === 255 ? mantissa ? NaN : sign * Infinity : exponent === 0 // denormal
             ? sign * 1.401298464324817e-45 * mantissa : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);
        }
        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);
        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);
    })();
    // double: typed array
    if (typeof Float64Array !== "undefined") (function() {
        var f64 = new Float64Array([
            -0
        ]), f8b = new Uint8Array(f64.buffer), le = f8b[7] === 128;
        function writeDouble_f64_cpy(val, buf, pos) {
            f64[0] = val;
            buf[pos] = f8b[0];
            buf[pos + 1] = f8b[1];
            buf[pos + 2] = f8b[2];
            buf[pos + 3] = f8b[3];
            buf[pos + 4] = f8b[4];
            buf[pos + 5] = f8b[5];
            buf[pos + 6] = f8b[6];
            buf[pos + 7] = f8b[7];
        }
        function writeDouble_f64_rev(val, buf, pos) {
            f64[0] = val;
            buf[pos] = f8b[7];
            buf[pos + 1] = f8b[6];
            buf[pos + 2] = f8b[5];
            buf[pos + 3] = f8b[4];
            buf[pos + 4] = f8b[3];
            buf[pos + 5] = f8b[2];
            buf[pos + 6] = f8b[1];
            buf[pos + 7] = f8b[0];
        }
        /* istanbul ignore next */ exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;
        /* istanbul ignore next */ exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;
        function readDouble_f64_cpy(buf, pos) {
            f8b[0] = buf[pos];
            f8b[1] = buf[pos + 1];
            f8b[2] = buf[pos + 2];
            f8b[3] = buf[pos + 3];
            f8b[4] = buf[pos + 4];
            f8b[5] = buf[pos + 5];
            f8b[6] = buf[pos + 6];
            f8b[7] = buf[pos + 7];
            return f64[0];
        }
        function readDouble_f64_rev(buf, pos) {
            f8b[7] = buf[pos];
            f8b[6] = buf[pos + 1];
            f8b[5] = buf[pos + 2];
            f8b[4] = buf[pos + 3];
            f8b[3] = buf[pos + 4];
            f8b[2] = buf[pos + 5];
            f8b[1] = buf[pos + 6];
            f8b[0] = buf[pos + 7];
            return f64[0];
        }
        /* istanbul ignore next */ exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;
        /* istanbul ignore next */ exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;
    // double: ieee754
    })();
    else (function() {
        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {
            var sign = val < 0 ? 1 : 0;
            if (sign) val = -val;
            if (val === 0) {
                writeUint(0, buf, pos + off0);
                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);
            } else if (isNaN(val)) {
                writeUint(0, buf, pos + off0);
                writeUint(2146959360, buf, pos + off1);
            } else if (val > 1.7976931348623157e+308) {
                writeUint(0, buf, pos + off0);
                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);
            } else {
                var mantissa;
                if (val < 2.2250738585072014e-308) {
                    mantissa = val / 5e-324;
                    writeUint(mantissa >>> 0, buf, pos + off0);
                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);
                } else {
                    var exponent = Math.floor(Math.log(val) / Math.LN2);
                    if (exponent === 1024) exponent = 1023;
                    mantissa = val * Math.pow(2, -exponent);
                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);
                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);
                }
            }
        }
        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);
        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);
        function readDouble_ieee754(readUint, off0, off1, buf, pos) {
            var lo = readUint(buf, pos + off0), hi = readUint(buf, pos + off1);
            var sign = (hi >> 31) * 2 + 1, exponent = hi >>> 20 & 2047, mantissa = 4294967296 * (hi & 1048575) + lo;
            return exponent === 2047 ? mantissa ? NaN : sign * Infinity : exponent === 0 // denormal
             ? sign * 5e-324 * mantissa : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);
        }
        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);
        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);
    })();
    return exports;
}
// uint helpers
function writeUintLE(val, buf, pos) {
    buf[pos] = val & 255;
    buf[pos + 1] = val >>> 8 & 255;
    buf[pos + 2] = val >>> 16 & 255;
    buf[pos + 3] = val >>> 24;
}
function writeUintBE(val, buf, pos) {
    buf[pos] = val >>> 24;
    buf[pos + 1] = val >>> 16 & 255;
    buf[pos + 2] = val >>> 8 & 255;
    buf[pos + 3] = val & 255;
}
function readUintLE(buf, pos) {
    return (buf[pos] | buf[pos + 1] << 8 | buf[pos + 2] << 16 | buf[pos + 3] << 24) >>> 0;
}
function readUintBE(buf, pos) {
    return (buf[pos] << 24 | buf[pos + 1] << 16 | buf[pos + 2] << 8 | buf[pos + 3]) >>> 0;
}

},{}],"86QKD":[function(require,module,exports) {
"use strict";
module.exports = inquire;
/**
 * Requires a module only if available.
 * @memberof util
 * @param {string} moduleName Module to require
 * @returns {?Object} Required module if available and not empty, otherwise `null`
 */ function inquire(moduleName) {
    try {
        var mod = eval("quire".replace(/^/, "re"))(moduleName); // eslint-disable-line no-eval
        if (mod && (mod.length || Object.keys(mod).length)) return mod;
    } catch (e) {} // eslint-disable-line no-empty
    return null;
}

},{}],"PxlFH":[function(require,module,exports) {
"use strict";
/**
 * A minimal UTF8 implementation for number arrays.
 * @memberof util
 * @namespace
 */ var utf8 = exports;
/**
 * Calculates the UTF8 byte length of a string.
 * @param {string} string String
 * @returns {number} Byte length
 */ utf8.length = function utf8_length(string) {
    var len = 0, c = 0;
    for(var i = 0; i < string.length; ++i){
        c = string.charCodeAt(i);
        if (c < 128) len += 1;
        else if (c < 2048) len += 2;
        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {
            ++i;
            len += 4;
        } else len += 3;
    }
    return len;
};
/**
 * Reads UTF8 bytes as a string.
 * @param {Uint8Array} buffer Source buffer
 * @param {number} start Source start
 * @param {number} end Source end
 * @returns {string} String read
 */ utf8.read = function utf8_read(buffer, start, end) {
    var len = end - start;
    if (len < 1) return "";
    var parts = null, chunk = [], i = 0, t; // temporary
    while(start < end){
        t = buffer[start++];
        if (t < 128) chunk[i++] = t;
        else if (t > 191 && t < 224) chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;
        else if (t > 239 && t < 365) {
            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;
            chunk[i++] = 0xD800 + (t >> 10);
            chunk[i++] = 0xDC00 + (t & 1023);
        } else chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;
        if (i > 8191) {
            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
            i = 0;
        }
    }
    if (parts) {
        if (i) parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
        return parts.join("");
    }
    return String.fromCharCode.apply(String, chunk.slice(0, i));
};
/**
 * Writes a string as UTF8 bytes.
 * @param {string} string Source string
 * @param {Uint8Array} buffer Destination buffer
 * @param {number} offset Destination offset
 * @returns {number} Bytes written
 */ utf8.write = function utf8_write(string, buffer, offset) {
    var start = offset, c1, c2; // character 2
    for(var i = 0; i < string.length; ++i){
        c1 = string.charCodeAt(i);
        if (c1 < 128) buffer[offset++] = c1;
        else if (c1 < 2048) {
            buffer[offset++] = c1 >> 6 | 192;
            buffer[offset++] = c1 & 63 | 128;
        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {
            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);
            ++i;
            buffer[offset++] = c1 >> 18 | 240;
            buffer[offset++] = c1 >> 12 & 63 | 128;
            buffer[offset++] = c1 >> 6 & 63 | 128;
            buffer[offset++] = c1 & 63 | 128;
        } else {
            buffer[offset++] = c1 >> 12 | 224;
            buffer[offset++] = c1 >> 6 & 63 | 128;
            buffer[offset++] = c1 & 63 | 128;
        }
    }
    return offset - start;
};

},{}],"3yUvf":[function(require,module,exports) {
"use strict";
module.exports = pool;
/**
 * An allocator as used by {@link util.pool}.
 * @typedef PoolAllocator
 * @type {function}
 * @param {number} size Buffer size
 * @returns {Uint8Array} Buffer
 */ /**
 * A slicer as used by {@link util.pool}.
 * @typedef PoolSlicer
 * @type {function}
 * @param {number} start Start offset
 * @param {number} end End offset
 * @returns {Uint8Array} Buffer slice
 * @this {Uint8Array}
 */ /**
 * A general purpose buffer pool.
 * @memberof util
 * @function
 * @param {PoolAllocator} alloc Allocator
 * @param {PoolSlicer} slice Slicer
 * @param {number} [size=8192] Slab size
 * @returns {PoolAllocator} Pooled allocator
 */ function pool(alloc, slice, size) {
    var SIZE = size || 8192;
    var MAX = SIZE >>> 1;
    var slab = null;
    var offset = SIZE;
    return function pool_alloc(size) {
        if (size < 1 || size > MAX) return alloc(size);
        if (offset + size > SIZE) {
            slab = alloc(SIZE);
            offset = 0;
        }
        var buf = slice.call(slab, offset, offset += size);
        if (offset & 7) offset = (offset | 7) + 1;
        return buf;
    };
}

},{}],"anW8P":[function(require,module,exports) {
"use strict";
module.exports = LongBits;
var util = require("670bae0bb8fddc8f");
/**
 * Constructs new long bits.
 * @classdesc Helper class for working with the low and high bits of a 64 bit value.
 * @memberof util
 * @constructor
 * @param {number} lo Low 32 bits, unsigned
 * @param {number} hi High 32 bits, unsigned
 */ function LongBits(lo, hi) {
    // note that the casts below are theoretically unnecessary as of today, but older statically
    // generated converter code might still call the ctor with signed 32bits. kept for compat.
    /**
     * Low bits.
     * @type {number}
     */ this.lo = lo >>> 0;
    /**
     * High bits.
     * @type {number}
     */ this.hi = hi >>> 0;
}
/**
 * Zero bits.
 * @memberof util.LongBits
 * @type {util.LongBits}
 */ var zero = LongBits.zero = new LongBits(0, 0);
zero.toNumber = function() {
    return 0;
};
zero.zzEncode = zero.zzDecode = function() {
    return this;
};
zero.length = function() {
    return 1;
};
/**
 * Zero hash.
 * @memberof util.LongBits
 * @type {string}
 */ var zeroHash = LongBits.zeroHash = "\x00\x00\x00\x00\x00\x00\x00\x00";
/**
 * Constructs new long bits from the specified number.
 * @param {number} value Value
 * @returns {util.LongBits} Instance
 */ LongBits.fromNumber = function fromNumber(value) {
    if (value === 0) return zero;
    var sign = value < 0;
    if (sign) value = -value;
    var lo = value >>> 0, hi = (value - lo) / 4294967296 >>> 0;
    if (sign) {
        hi = ~hi >>> 0;
        lo = ~lo >>> 0;
        if (++lo > 4294967295) {
            lo = 0;
            if (++hi > 4294967295) hi = 0;
        }
    }
    return new LongBits(lo, hi);
};
/**
 * Constructs new long bits from a number, long or string.
 * @param {Long|number|string} value Value
 * @returns {util.LongBits} Instance
 */ LongBits.from = function from(value) {
    if (typeof value === "number") return LongBits.fromNumber(value);
    if (util.isString(value)) {
        /* istanbul ignore else */ if (util.Long) value = util.Long.fromString(value);
        else return LongBits.fromNumber(parseInt(value, 10));
    }
    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;
};
/**
 * Converts this long bits to a possibly unsafe JavaScript number.
 * @param {boolean} [unsigned=false] Whether unsigned or not
 * @returns {number} Possibly unsafe number
 */ LongBits.prototype.toNumber = function toNumber(unsigned) {
    if (!unsigned && this.hi >>> 31) {
        var lo = ~this.lo + 1 >>> 0, hi = ~this.hi >>> 0;
        if (!lo) hi = hi + 1 >>> 0;
        return -(lo + hi * 4294967296);
    }
    return this.lo + this.hi * 4294967296;
};
/**
 * Converts this long bits to a long.
 * @param {boolean} [unsigned=false] Whether unsigned or not
 * @returns {Long} Long
 */ LongBits.prototype.toLong = function toLong(unsigned) {
    return util.Long ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned)) : {
        low: this.lo | 0,
        high: this.hi | 0,
        unsigned: Boolean(unsigned)
    };
};
var charCodeAt = String.prototype.charCodeAt;
/**
 * Constructs new long bits from the specified 8 characters long hash.
 * @param {string} hash Hash
 * @returns {util.LongBits} Bits
 */ LongBits.fromHash = function fromHash(hash) {
    if (hash === zeroHash) return zero;
    return new LongBits((charCodeAt.call(hash, 0) | charCodeAt.call(hash, 1) << 8 | charCodeAt.call(hash, 2) << 16 | charCodeAt.call(hash, 3) << 24) >>> 0, (charCodeAt.call(hash, 4) | charCodeAt.call(hash, 5) << 8 | charCodeAt.call(hash, 6) << 16 | charCodeAt.call(hash, 7) << 24) >>> 0);
};
/**
 * Converts this long bits to a 8 characters long hash.
 * @returns {string} Hash
 */ LongBits.prototype.toHash = function toHash() {
    return String.fromCharCode(this.lo & 255, this.lo >>> 8 & 255, this.lo >>> 16 & 255, this.lo >>> 24, this.hi & 255, this.hi >>> 8 & 255, this.hi >>> 16 & 255, this.hi >>> 24);
};
/**
 * Zig-zag encodes this long bits.
 * @returns {util.LongBits} `this`
 */ LongBits.prototype.zzEncode = function zzEncode() {
    var mask = this.hi >> 31;
    this.hi = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;
    this.lo = (this.lo << 1 ^ mask) >>> 0;
    return this;
};
/**
 * Zig-zag decodes this long bits.
 * @returns {util.LongBits} `this`
 */ LongBits.prototype.zzDecode = function zzDecode() {
    var mask = -(this.lo & 1);
    this.lo = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;
    this.hi = (this.hi >>> 1 ^ mask) >>> 0;
    return this;
};
/**
 * Calculates the length of this longbits when encoded as a varint.
 * @returns {number} Length
 */ LongBits.prototype.length = function length() {
    var part0 = this.lo, part1 = (this.lo >>> 28 | this.hi << 4) >>> 0, part2 = this.hi >>> 24;
    return part2 === 0 ? part1 === 0 ? part0 < 16384 ? part0 < 128 ? 1 : 2 : part0 < 2097152 ? 3 : 4 : part1 < 16384 ? part1 < 128 ? 5 : 6 : part1 < 2097152 ? 7 : 8 : part2 < 128 ? 9 : 10;
};

},{"670bae0bb8fddc8f":"k72f7"}],"7oFzA":[function(require,module,exports) {
"use strict";
module.exports = BufferWriter;
// extends Writer
var Writer = require("e9b2a43e398901ec");
(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;
var util = require("8ed11af2c26d797d");
/**
 * Constructs a new buffer writer instance.
 * @classdesc Wire format writer using node buffers.
 * @extends Writer
 * @constructor
 */ function BufferWriter() {
    Writer.call(this);
}
BufferWriter._configure = function() {
    /**
     * Allocates a buffer of the specified size.
     * @function
     * @param {number} size Buffer size
     * @returns {Buffer} Buffer
     */ BufferWriter.alloc = util._Buffer_allocUnsafe;
    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === "set" ? function writeBytesBuffer_set(val, buf, pos) {
        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)
    // also works for plain array values
    } : function writeBytesBuffer_copy(val, buf, pos) {
        if (val.copy) val.copy(buf, pos, 0, val.length);
        else for(var i = 0; i < val.length;)buf[pos++] = val[i++];
    };
};
/**
 * @override
 */ BufferWriter.prototype.bytes = function write_bytes_buffer(value) {
    if (util.isString(value)) value = util._Buffer_from(value, "base64");
    var len = value.length >>> 0;
    this.uint32(len);
    if (len) this._push(BufferWriter.writeBytesBuffer, len, value);
    return this;
};
function writeStringBuffer(val, buf, pos) {
    if (val.length < 40) util.utf8.write(val, buf, pos);
    else if (buf.utf8Write) buf.utf8Write(val, pos);
    else buf.write(val, pos);
}
/**
 * @override
 */ BufferWriter.prototype.string = function write_string_buffer(value) {
    var len = util.Buffer.byteLength(value);
    this.uint32(len);
    if (len) this._push(writeStringBuffer, len, value);
    return this;
};
/**
 * Finishes the write operation.
 * @name BufferWriter#finish
 * @function
 * @returns {Buffer} Finished buffer
 */ BufferWriter._configure();

},{"e9b2a43e398901ec":"1OTT3","8ed11af2c26d797d":"k72f7"}],"8WivO":[function(require,module,exports) {
"use strict";
module.exports = Reader;
var util = require("9f80034b34dad30b");
var BufferReader; // cyclic
var LongBits = util.LongBits, utf8 = util.utf8;
/* istanbul ignore next */ function indexOutOfRange(reader, writeLength) {
    return RangeError("index out of range: " + reader.pos + " + " + (writeLength || 1) + " > " + reader.len);
}
/**
 * Constructs a new reader instance using the specified buffer.
 * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.
 * @constructor
 * @param {Uint8Array} buffer Buffer to read from
 */ function Reader(buffer) {
    /**
     * Read buffer.
     * @type {Uint8Array}
     */ this.buf = buffer;
    /**
     * Read buffer position.
     * @type {number}
     */ this.pos = 0;
    /**
     * Read buffer length.
     * @type {number}
     */ this.len = buffer.length;
}
var create_array = typeof Uint8Array !== "undefined" ? function create_typed_array(buffer) {
    if (buffer instanceof Uint8Array || Array.isArray(buffer)) return new Reader(buffer);
    throw Error("illegal buffer");
} : function create_array(buffer) {
    if (Array.isArray(buffer)) return new Reader(buffer);
    throw Error("illegal buffer");
};
var create = function create() {
    return util.Buffer ? function create_buffer_setup(buffer) {
        return (Reader.create = function create_buffer(buffer) {
            return util.Buffer.isBuffer(buffer) ? new BufferReader(buffer) : create_array(buffer);
        })(buffer);
    } : create_array;
};
/**
 * Creates a new reader using the specified buffer.
 * @function
 * @param {Uint8Array|Buffer} buffer Buffer to read from
 * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}
 * @throws {Error} If `buffer` is not a valid buffer
 */ Reader.create = create();
Reader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;
/**
 * Reads a varint as an unsigned 32 bit value.
 * @function
 * @returns {number} Value read
 */ Reader.prototype.uint32 = function read_uint32_setup() {
    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)
    return function read_uint32() {
        value = (this.buf[this.pos] & 127) >>> 0;
        if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] & 127) << 7) >>> 0;
        if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0;
        if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0;
        if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] & 15) << 28) >>> 0;
        if (this.buf[this.pos++] < 128) return value;
        /* istanbul ignore if */ if ((this.pos += 5) > this.len) {
            this.pos = this.len;
            throw indexOutOfRange(this, 10);
        }
        return value;
    };
}();
/**
 * Reads a varint as a signed 32 bit value.
 * @returns {number} Value read
 */ Reader.prototype.int32 = function read_int32() {
    return this.uint32() | 0;
};
/**
 * Reads a zig-zag encoded varint as a signed 32 bit value.
 * @returns {number} Value read
 */ Reader.prototype.sint32 = function read_sint32() {
    var value = this.uint32();
    return value >>> 1 ^ -(value & 1) | 0;
};
/* eslint-disable no-invalid-this */ function readLongVarint() {
    // tends to deopt with local vars for octet etc.
    var bits = new LongBits(0, 0);
    var i = 0;
    if (this.len - this.pos > 4) {
        for(; i < 4; ++i){
            // 1st..4th
            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
            if (this.buf[this.pos++] < 128) return bits;
        }
        // 5th
        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;
        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >> 4) >>> 0;
        if (this.buf[this.pos++] < 128) return bits;
        i = 0;
    } else {
        for(; i < 3; ++i){
            /* istanbul ignore if */ if (this.pos >= this.len) throw indexOutOfRange(this);
            // 1st..3th
            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
            if (this.buf[this.pos++] < 128) return bits;
        }
        // 4th
        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;
        return bits;
    }
    if (this.len - this.pos > 4) for(; i < 5; ++i){
        // 6th..10th
        bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
        if (this.buf[this.pos++] < 128) return bits;
    }
    else for(; i < 5; ++i){
        /* istanbul ignore if */ if (this.pos >= this.len) throw indexOutOfRange(this);
        // 6th..10th
        bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
        if (this.buf[this.pos++] < 128) return bits;
    }
    /* istanbul ignore next */ throw Error("invalid varint encoding");
}
/* eslint-enable no-invalid-this */ /**
 * Reads a varint as a signed 64 bit value.
 * @name Reader#int64
 * @function
 * @returns {Long} Value read
 */ /**
 * Reads a varint as an unsigned 64 bit value.
 * @name Reader#uint64
 * @function
 * @returns {Long} Value read
 */ /**
 * Reads a zig-zag encoded varint as a signed 64 bit value.
 * @name Reader#sint64
 * @function
 * @returns {Long} Value read
 */ /**
 * Reads a varint as a boolean.
 * @returns {boolean} Value read
 */ Reader.prototype.bool = function read_bool() {
    return this.uint32() !== 0;
};
function readFixed32_end(buf, end) {
    return (buf[end - 4] | buf[end - 3] << 8 | buf[end - 2] << 16 | buf[end - 1] << 24) >>> 0;
}
/**
 * Reads fixed 32 bits as an unsigned 32 bit integer.
 * @returns {number} Value read
 */ Reader.prototype.fixed32 = function read_fixed32() {
    /* istanbul ignore if */ if (this.pos + 4 > this.len) throw indexOutOfRange(this, 4);
    return readFixed32_end(this.buf, this.pos += 4);
};
/**
 * Reads fixed 32 bits as a signed 32 bit integer.
 * @returns {number} Value read
 */ Reader.prototype.sfixed32 = function read_sfixed32() {
    /* istanbul ignore if */ if (this.pos + 4 > this.len) throw indexOutOfRange(this, 4);
    return readFixed32_end(this.buf, this.pos += 4) | 0;
};
/* eslint-disable no-invalid-this */ function readFixed64() {
    /* istanbul ignore if */ if (this.pos + 8 > this.len) throw indexOutOfRange(this, 8);
    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));
}
/* eslint-enable no-invalid-this */ /**
 * Reads fixed 64 bits.
 * @name Reader#fixed64
 * @function
 * @returns {Long} Value read
 */ /**
 * Reads zig-zag encoded fixed 64 bits.
 * @name Reader#sfixed64
 * @function
 * @returns {Long} Value read
 */ /**
 * Reads a float (32 bit) as a number.
 * @function
 * @returns {number} Value read
 */ Reader.prototype.float = function read_float() {
    /* istanbul ignore if */ if (this.pos + 4 > this.len) throw indexOutOfRange(this, 4);
    var value = util.float.readFloatLE(this.buf, this.pos);
    this.pos += 4;
    return value;
};
/**
 * Reads a double (64 bit float) as a number.
 * @function
 * @returns {number} Value read
 */ Reader.prototype.double = function read_double() {
    /* istanbul ignore if */ if (this.pos + 8 > this.len) throw indexOutOfRange(this, 4);
    var value = util.float.readDoubleLE(this.buf, this.pos);
    this.pos += 8;
    return value;
};
/**
 * Reads a sequence of bytes preceeded by its length as a varint.
 * @returns {Uint8Array} Value read
 */ Reader.prototype.bytes = function read_bytes() {
    var length = this.uint32(), start = this.pos, end = this.pos + length;
    /* istanbul ignore if */ if (end > this.len) throw indexOutOfRange(this, length);
    this.pos += length;
    if (Array.isArray(this.buf)) return this.buf.slice(start, end);
    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1
     ? new this.buf.constructor(0) : this._slice.call(this.buf, start, end);
};
/**
 * Reads a string preceeded by its byte length as a varint.
 * @returns {string} Value read
 */ Reader.prototype.string = function read_string() {
    var bytes = this.bytes();
    return utf8.read(bytes, 0, bytes.length);
};
/**
 * Skips the specified number of bytes if specified, otherwise skips a varint.
 * @param {number} [length] Length if known, otherwise a varint is assumed
 * @returns {Reader} `this`
 */ Reader.prototype.skip = function skip(length) {
    if (typeof length === "number") {
        /* istanbul ignore if */ if (this.pos + length > this.len) throw indexOutOfRange(this, length);
        this.pos += length;
    } else do {
        /* istanbul ignore if */ if (this.pos >= this.len) throw indexOutOfRange(this);
    }while (this.buf[this.pos++] & 128);
    return this;
};
/**
 * Skips the next element of the specified wire type.
 * @param {number} wireType Wire type received
 * @returns {Reader} `this`
 */ Reader.prototype.skipType = function(wireType) {
    switch(wireType){
        case 0:
            this.skip();
            break;
        case 1:
            this.skip(8);
            break;
        case 2:
            this.skip(this.uint32());
            break;
        case 3:
            while((wireType = this.uint32() & 7) !== 4)this.skipType(wireType);
            break;
        case 5:
            this.skip(4);
            break;
        /* istanbul ignore next */ default:
            throw Error("invalid wire type " + wireType + " at offset " + this.pos);
    }
    return this;
};
Reader._configure = function(BufferReader_) {
    BufferReader = BufferReader_;
    Reader.create = create();
    BufferReader._configure();
    var fn = util.Long ? "toLong" : /* istanbul ignore next */ "toNumber";
    util.merge(Reader.prototype, {
        int64: function read_int64() {
            return readLongVarint.call(this)[fn](false);
        },
        uint64: function read_uint64() {
            return readLongVarint.call(this)[fn](true);
        },
        sint64: function read_sint64() {
            return readLongVarint.call(this).zzDecode()[fn](false);
        },
        fixed64: function read_fixed64() {
            return readFixed64.call(this)[fn](true);
        },
        sfixed64: function read_sfixed64() {
            return readFixed64.call(this)[fn](false);
        }
    });
};

},{"9f80034b34dad30b":"k72f7"}],"7FkOA":[function(require,module,exports) {
"use strict";
module.exports = BufferReader;
// extends Reader
var Reader = require("808dd763e7b39931");
(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;
var util = require("fcb9b16130e5c787");
/**
 * Constructs a new buffer reader instance.
 * @classdesc Wire format reader using node buffers.
 * @extends Reader
 * @constructor
 * @param {Buffer} buffer Buffer to read from
 */ function BufferReader(buffer) {
    Reader.call(this, buffer);
/**
     * Read buffer.
     * @name BufferReader#buf
     * @type {Buffer}
     */ }
BufferReader._configure = function() {
    /* istanbul ignore else */ if (util.Buffer) BufferReader.prototype._slice = util.Buffer.prototype.slice;
};
/**
 * @override
 */ BufferReader.prototype.string = function read_string_buffer() {
    var len = this.uint32(); // modifies pos
    return this.buf.utf8Slice ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len)) : this.buf.toString("utf-8", this.pos, this.pos = Math.min(this.pos + len, this.len));
};
/**
 * Reads a sequence of bytes preceeded by its length as a varint.
 * @name BufferReader#bytes
 * @function
 * @returns {Buffer} Value read
 */ BufferReader._configure();

},{"808dd763e7b39931":"8WivO","fcb9b16130e5c787":"k72f7"}],"7VLEv":[function(require,module,exports) {
"use strict";
/**
 * Streaming RPC helpers.
 * @namespace
 */ var rpc = exports;
/**
 * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.
 * @typedef RPCImpl
 * @type {function}
 * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called
 * @param {Uint8Array} requestData Request data
 * @param {RPCImplCallback} callback Callback function
 * @returns {undefined}
 * @example
 * function rpcImpl(method, requestData, callback) {
 *     if (protobuf.util.lcFirst(method.name) !== "myMethod") // compatible with static code
 *         throw Error("no such method");
 *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {
 *         callback(err, responseData);
 *     });
 * }
 */ /**
 * Node-style callback as used by {@link RPCImpl}.
 * @typedef RPCImplCallback
 * @type {function}
 * @param {Error|null} error Error, if any, otherwise `null`
 * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error
 * @returns {undefined}
 */ rpc.Service = require("8d618176461c1566");

},{"8d618176461c1566":"6jcL2"}],"6jcL2":[function(require,module,exports) {
"use strict";
module.exports = Service;
var util = require("873e42e92ef9570e");
// Extends EventEmitter
(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;
/**
 * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.
 *
 * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.
 * @typedef rpc.ServiceMethodCallback
 * @template TRes extends Message<TRes>
 * @type {function}
 * @param {Error|null} error Error, if any
 * @param {TRes} [response] Response message
 * @returns {undefined}
 */ /**
 * A service method part of a {@link rpc.Service} as created by {@link Service.create}.
 * @typedef rpc.ServiceMethod
 * @template TReq extends Message<TReq>
 * @template TRes extends Message<TRes>
 * @type {function}
 * @param {TReq|Properties<TReq>} request Request message or plain object
 * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message
 * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`
 */ /**
 * Constructs a new RPC service instance.
 * @classdesc An RPC service as returned by {@link Service#create}.
 * @exports rpc.Service
 * @extends util.EventEmitter
 * @constructor
 * @param {RPCImpl} rpcImpl RPC implementation
 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
 */ function Service(rpcImpl, requestDelimited, responseDelimited) {
    if (typeof rpcImpl !== "function") throw TypeError("rpcImpl must be a function");
    util.EventEmitter.call(this);
    /**
     * RPC implementation. Becomes `null` once the service is ended.
     * @type {RPCImpl|null}
     */ this.rpcImpl = rpcImpl;
    /**
     * Whether requests are length-delimited.
     * @type {boolean}
     */ this.requestDelimited = Boolean(requestDelimited);
    /**
     * Whether responses are length-delimited.
     * @type {boolean}
     */ this.responseDelimited = Boolean(responseDelimited);
}
/**
 * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.
 * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method
 * @param {Constructor<TReq>} requestCtor Request constructor
 * @param {Constructor<TRes>} responseCtor Response constructor
 * @param {TReq|Properties<TReq>} request Request message or plain object
 * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback
 * @returns {undefined}
 * @template TReq extends Message<TReq>
 * @template TRes extends Message<TRes>
 */ Service.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {
    if (!request) throw TypeError("request must be specified");
    var self = this;
    if (!callback) return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);
    if (!self.rpcImpl) {
        setTimeout(function() {
            callback(Error("already ended"));
        }, 0);
        return undefined;
    }
    try {
        return self.rpcImpl(method, requestCtor[self.requestDelimited ? "encodeDelimited" : "encode"](request).finish(), function rpcCallback(err, response) {
            if (err) {
                self.emit("error", err, method);
                return callback(err);
            }
            if (response === null) {
                self.end(/* endedByRPC */ true);
                return undefined;
            }
            if (!(response instanceof responseCtor)) try {
                response = responseCtor[self.responseDelimited ? "decodeDelimited" : "decode"](response);
            } catch (err) {
                self.emit("error", err, method);
                return callback(err);
            }
            self.emit("data", response, method);
            return callback(null, response);
        });
    } catch (err) {
        self.emit("error", err, method);
        setTimeout(function() {
            callback(err);
        }, 0);
        return undefined;
    }
};
/**
 * Ends this service and emits the `end` event.
 * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.
 * @returns {rpc.Service} `this`
 */ Service.prototype.end = function end(endedByRPC) {
    if (this.rpcImpl) {
        if (!endedByRPC) this.rpcImpl(null, null, null);
        this.rpcImpl = null;
        this.emit("end").off();
    }
    return this;
};

},{"873e42e92ef9570e":"k72f7"}],"8v4Te":[function(require,module,exports) {
"use strict";
module.exports = {}; /**
 * Named roots.
 * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).
 * Can also be used manually to make roots available accross modules.
 * @name roots
 * @type {Object.<string,Root>}
 * @example
 * // pbjs -r myroot -o compiled.js ...
 *
 * // in another module:
 * require("./compiled.js");
 *
 * // in any subsequent module:
 * var root = protobuf.roots["myroot"];
 */ 

},{}],"14FRe":[function(require,module,exports) {
"use strict";
module.exports = encoder;
var Enum = require("f5036416e8c17769"), types = require("1ae6fbc0fe367272"), util = require("43ddbc33c0bb0ac4");
/**
 * Generates a partial message type encoder.
 * @param {Codegen} gen Codegen instance
 * @param {Field} field Reflected field
 * @param {number} fieldIndex Field index
 * @param {string} ref Variable reference
 * @returns {Codegen} Codegen instance
 * @ignore
 */ function genTypePartial(gen, field, fieldIndex, ref) {
    return field.resolvedType.group ? gen("types[%i].encode(%s,w.uint32(%i)).uint32(%i)", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0) : gen("types[%i].encode(%s,w.uint32(%i).fork()).ldelim()", fieldIndex, ref, (field.id << 3 | 2) >>> 0);
}
/**
 * Generates an encoder specific to the specified message type.
 * @param {Type} mtype Message type
 * @returns {Codegen} Codegen instance
 */ function encoder(mtype) {
    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */ var gen = util.codegen([
        "m",
        "w"
    ], mtype.name + "$encode")("if(!w)")("w=Writer.create()");
    var i, ref;
    // "when a message is serialized its known fields should be written sequentially by field number"
    var fields = /* initializes */ mtype.fieldsArray.slice().sort(util.compareFieldsById);
    for(var i = 0; i < fields.length; ++i){
        var field = fields[i].resolve(), index = mtype._fieldsArray.indexOf(field), type = field.resolvedType instanceof Enum ? "int32" : field.type, wireType = types.basic[type];
        ref = "m" + util.safeProp(field.name);
        // Map fields
        if (field.map) {
            gen("if(%s!=null&&Object.hasOwnProperty.call(m,%j)){", ref, field.name) // !== undefined && !== null
            ("for(var ks=Object.keys(%s),i=0;i<ks.length;++i){", ref)("w.uint32(%i).fork().uint32(%i).%s(ks[i])", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[field.keyType], field.keyType);
            if (wireType === undefined) gen("types[%i].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()", index, ref); // can't be groups
            else gen(".uint32(%i).%s(%s[ks[i]]).ldelim()", 16 | wireType, type, ref);
            gen("}")("}");
        // Repeated fields
        } else if (field.repeated) {
            gen("if(%s!=null&&%s.length){", ref, ref); // !== undefined && !== null
            // Packed repeated
            if (field.packed && types.packed[type] !== undefined) gen("w.uint32(%i).fork()", (field.id << 3 | 2) >>> 0)("for(var i=0;i<%s.length;++i)", ref)("w.%s(%s[i])", type, ref)("w.ldelim()");
            else {
                gen("for(var i=0;i<%s.length;++i)", ref);
                if (wireType === undefined) genTypePartial(gen, field, index, ref + "[i]");
                else gen("w.uint32(%i).%s(%s[i])", (field.id << 3 | wireType) >>> 0, type, ref);
            }
            gen("}");
        // Non-repeated
        } else {
            if (field.optional) gen("if(%s!=null&&Object.hasOwnProperty.call(m,%j))", ref, field.name); // !== undefined && !== null
            if (wireType === undefined) genTypePartial(gen, field, index, ref);
            else gen("w.uint32(%i).%s(%s)", (field.id << 3 | wireType) >>> 0, type, ref);
        }
    }
    return gen("return w");
/* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */ }

},{"f5036416e8c17769":"9srcK","1ae6fbc0fe367272":"a31FO","43ddbc33c0bb0ac4":"9qDrQ"}],"9srcK":[function(require,module,exports) {
"use strict";
module.exports = Enum;
// extends ReflectionObject
var ReflectionObject = require("3ec30a6f771ac47");
((Enum.prototype = Object.create(ReflectionObject.prototype)).constructor = Enum).className = "Enum";
var Namespace = require("b344007b1829e775"), util = require("8d70c2a425b7fdca");
/**
 * Constructs a new enum instance.
 * @classdesc Reflected enum.
 * @extends ReflectionObject
 * @constructor
 * @param {string} name Unique name within its namespace
 * @param {Object.<string,number>} [values] Enum values as an object, by name
 * @param {Object.<string,*>} [options] Declared options
 * @param {string} [comment] The comment for this enum
 * @param {Object.<string,string>} [comments] The value comments for this enum
 */ function Enum(name, values, options, comment, comments) {
    ReflectionObject.call(this, name, options);
    if (values && typeof values !== "object") throw TypeError("values must be an object");
    /**
     * Enum values by id.
     * @type {Object.<number,string>}
     */ this.valuesById = {};
    /**
     * Enum values by name.
     * @type {Object.<string,number>}
     */ this.values = Object.create(this.valuesById); // toJSON, marker
    /**
     * Enum comment text.
     * @type {string|null}
     */ this.comment = comment;
    /**
     * Value comment texts, if any.
     * @type {Object.<string,string>}
     */ this.comments = comments || {};
    /**
     * Reserved ranges, if any.
     * @type {Array.<number[]|string>}
     */ this.reserved = undefined; // toJSON
    // Note that values inherit valuesById on their prototype which makes them a TypeScript-
    // compatible enum. This is used by pbts to write actual enum definitions that work for
    // static and reflection code alike instead of emitting generic object definitions.
    if (values) {
        for(var keys = Object.keys(values), i = 0; i < keys.length; ++i)if (typeof values[keys[i]] === "number") this.valuesById[this.values[keys[i]] = values[keys[i]]] = keys[i];
    }
}
/**
 * Enum descriptor.
 * @interface IEnum
 * @property {Object.<string,number>} values Enum values
 * @property {Object.<string,*>} [options] Enum options
 */ /**
 * Constructs an enum from an enum descriptor.
 * @param {string} name Enum name
 * @param {IEnum} json Enum descriptor
 * @returns {Enum} Created enum
 * @throws {TypeError} If arguments are invalid
 */ Enum.fromJSON = function fromJSON(name, json) {
    var enm = new Enum(name, json.values, json.options, json.comment, json.comments);
    enm.reserved = json.reserved;
    return enm;
};
/**
 * Converts this enum to an enum descriptor.
 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
 * @returns {IEnum} Enum descriptor
 */ Enum.prototype.toJSON = function toJSON(toJSONOptions) {
    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
    return util.toObject([
        "options",
        this.options,
        "values",
        this.values,
        "reserved",
        this.reserved && this.reserved.length ? this.reserved : undefined,
        "comment",
        keepComments ? this.comment : undefined,
        "comments",
        keepComments ? this.comments : undefined
    ]);
};
/**
 * Adds a value to this enum.
 * @param {string} name Value name
 * @param {number} id Value id
 * @param {string} [comment] Comment, if any
 * @returns {Enum} `this`
 * @throws {TypeError} If arguments are invalid
 * @throws {Error} If there is already a value with this name or id
 */ Enum.prototype.add = function add(name, id, comment) {
    // utilized by the parser but not by .fromJSON
    if (!util.isString(name)) throw TypeError("name must be a string");
    if (!util.isInteger(id)) throw TypeError("id must be an integer");
    if (this.values[name] !== undefined) throw Error("duplicate name '" + name + "' in " + this);
    if (this.isReservedId(id)) throw Error("id " + id + " is reserved in " + this);
    if (this.isReservedName(name)) throw Error("name '" + name + "' is reserved in " + this);
    if (this.valuesById[id] !== undefined) {
        if (!(this.options && this.options.allow_alias)) throw Error("duplicate id " + id + " in " + this);
        this.values[name] = id;
    } else this.valuesById[this.values[name] = id] = name;
    this.comments[name] = comment || null;
    return this;
};
/**
 * Removes a value from this enum
 * @param {string} name Value name
 * @returns {Enum} `this`
 * @throws {TypeError} If arguments are invalid
 * @throws {Error} If `name` is not a name of this enum
 */ Enum.prototype.remove = function remove(name) {
    if (!util.isString(name)) throw TypeError("name must be a string");
    var val = this.values[name];
    if (val == null) throw Error("name '" + name + "' does not exist in " + this);
    delete this.valuesById[val];
    delete this.values[name];
    delete this.comments[name];
    return this;
};
/**
 * Tests if the specified id is reserved.
 * @param {number} id Id to test
 * @returns {boolean} `true` if reserved, otherwise `false`
 */ Enum.prototype.isReservedId = function isReservedId(id) {
    return Namespace.isReservedId(this.reserved, id);
};
/**
 * Tests if the specified name is reserved.
 * @param {string} name Name to test
 * @returns {boolean} `true` if reserved, otherwise `false`
 */ Enum.prototype.isReservedName = function isReservedName(name) {
    return Namespace.isReservedName(this.reserved, name);
};

},{"3ec30a6f771ac47":"cWxlI","b344007b1829e775":"4idoA","8d70c2a425b7fdca":"9qDrQ"}],"cWxlI":[function(require,module,exports) {
"use strict";
module.exports = ReflectionObject;
ReflectionObject.className = "ReflectionObject";
var util = require("3f228e9eddcd1089");
var Root; // cyclic
/**
 * Constructs a new reflection object instance.
 * @classdesc Base class of all reflection objects.
 * @constructor
 * @param {string} name Object name
 * @param {Object.<string,*>} [options] Declared options
 * @abstract
 */ function ReflectionObject(name, options) {
    if (!util.isString(name)) throw TypeError("name must be a string");
    if (options && !util.isObject(options)) throw TypeError("options must be an object");
    /**
     * Options.
     * @type {Object.<string,*>|undefined}
     */ this.options = options; // toJSON
    /**
     * Parsed Options.
     * @type {Array.<Object.<string,*>>|undefined}
     */ this.parsedOptions = null;
    /**
     * Unique name within its namespace.
     * @type {string}
     */ this.name = name;
    /**
     * Parent namespace.
     * @type {Namespace|null}
     */ this.parent = null;
    /**
     * Whether already resolved or not.
     * @type {boolean}
     */ this.resolved = false;
    /**
     * Comment text, if any.
     * @type {string|null}
     */ this.comment = null;
    /**
     * Defining file name.
     * @type {string|null}
     */ this.filename = null;
}
Object.defineProperties(ReflectionObject.prototype, {
    /**
     * Reference to the root namespace.
     * @name ReflectionObject#root
     * @type {Root}
     * @readonly
     */ root: {
        get: function() {
            var ptr = this;
            while(ptr.parent !== null)ptr = ptr.parent;
            return ptr;
        }
    },
    /**
     * Full name including leading dot.
     * @name ReflectionObject#fullName
     * @type {string}
     * @readonly
     */ fullName: {
        get: function() {
            var path = [
                this.name
            ], ptr = this.parent;
            while(ptr){
                path.unshift(ptr.name);
                ptr = ptr.parent;
            }
            return path.join(".");
        }
    }
});
/**
 * Converts this reflection object to its descriptor representation.
 * @returns {Object.<string,*>} Descriptor
 * @abstract
 */ ReflectionObject.prototype.toJSON = /* istanbul ignore next */ function toJSON() {
    throw Error(); // not implemented, shouldn't happen
};
/**
 * Called when this object is added to a parent.
 * @param {ReflectionObject} parent Parent added to
 * @returns {undefined}
 */ ReflectionObject.prototype.onAdd = function onAdd(parent) {
    if (this.parent && this.parent !== parent) this.parent.remove(this);
    this.parent = parent;
    this.resolved = false;
    var root = parent.root;
    if (root instanceof Root) root._handleAdd(this);
};
/**
 * Called when this object is removed from a parent.
 * @param {ReflectionObject} parent Parent removed from
 * @returns {undefined}
 */ ReflectionObject.prototype.onRemove = function onRemove(parent) {
    var root = parent.root;
    if (root instanceof Root) root._handleRemove(this);
    this.parent = null;
    this.resolved = false;
};
/**
 * Resolves this objects type references.
 * @returns {ReflectionObject} `this`
 */ ReflectionObject.prototype.resolve = function resolve() {
    if (this.resolved) return this;
    if (this.root instanceof Root) this.resolved = true; // only if part of a root
    return this;
};
/**
 * Gets an option value.
 * @param {string} name Option name
 * @returns {*} Option value or `undefined` if not set
 */ ReflectionObject.prototype.getOption = function getOption(name) {
    if (this.options) return this.options[name];
    return undefined;
};
/**
 * Sets an option.
 * @param {string} name Option name
 * @param {*} value Option value
 * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set
 * @returns {ReflectionObject} `this`
 */ ReflectionObject.prototype.setOption = function setOption(name, value, ifNotSet) {
    if (!ifNotSet || !this.options || this.options[name] === undefined) (this.options || (this.options = {}))[name] = value;
    return this;
};
/**
 * Sets a parsed option.
 * @param {string} name parsed Option name
 * @param {*} value Option value
 * @param {string} propName dot '.' delimited full path of property within the option to set. if undefined\empty, will add a new option with that value
 * @returns {ReflectionObject} `this`
 */ ReflectionObject.prototype.setParsedOption = function setParsedOption(name, value, propName) {
    if (!this.parsedOptions) this.parsedOptions = [];
    var parsedOptions = this.parsedOptions;
    if (propName) {
        // If setting a sub property of an option then try to merge it
        // with an existing option
        var opt = parsedOptions.find(function(opt) {
            return Object.prototype.hasOwnProperty.call(opt, name);
        });
        if (opt) {
            // If we found an existing option - just merge the property value
            var newValue = opt[name];
            util.setProperty(newValue, propName, value);
        } else {
            // otherwise, create a new option, set it's property and add it to the list
            opt = {};
            opt[name] = util.setProperty({}, propName, value);
            parsedOptions.push(opt);
        }
    } else {
        // Always create a new option when setting the value of the option itself
        var newOpt = {};
        newOpt[name] = value;
        parsedOptions.push(newOpt);
    }
    return this;
};
/**
 * Sets multiple options.
 * @param {Object.<string,*>} options Options to set
 * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set
 * @returns {ReflectionObject} `this`
 */ ReflectionObject.prototype.setOptions = function setOptions(options, ifNotSet) {
    if (options) for(var keys = Object.keys(options), i = 0; i < keys.length; ++i)this.setOption(keys[i], options[keys[i]], ifNotSet);
    return this;
};
/**
 * Converts this instance to its string representation.
 * @returns {string} Class name[, space, full name]
 */ ReflectionObject.prototype.toString = function toString() {
    var className = this.constructor.className, fullName = this.fullName;
    if (fullName.length) return className + " " + fullName;
    return className;
};
// Sets up cyclic dependencies (called in index-light)
ReflectionObject._configure = function(Root_) {
    Root = Root_;
};

},{"3f228e9eddcd1089":"9qDrQ"}],"9qDrQ":[function(require,module,exports) {
"use strict";
/**
 * Various utility functions.
 * @namespace
 */ var util = module.exports = require("d625e6ce5bbdc11f");
var roots = require("c15440adb779afca");
var Type, Enum;
util.codegen = require("d73a73fb03f0fac1");
util.fetch = require("aac844e7d23ccc04");
util.path = require("187b53cc127fbbd9");
/**
 * Node's fs module if available.
 * @type {Object.<string,*>}
 */ util.fs = util.inquire("fs");
/**
 * Converts an object's values to an array.
 * @param {Object.<string,*>} object Object to convert
 * @returns {Array.<*>} Converted array
 */ util.toArray = function toArray(object) {
    if (object) {
        var keys = Object.keys(object), array = new Array(keys.length), index = 0;
        while(index < keys.length)array[index] = object[keys[index++]];
        return array;
    }
    return [];
};
/**
 * Converts an array of keys immediately followed by their respective value to an object, omitting undefined values.
 * @param {Array.<*>} array Array to convert
 * @returns {Object.<string,*>} Converted object
 */ util.toObject = function toObject(array) {
    var object = {}, index = 0;
    while(index < array.length){
        var key = array[index++], val = array[index++];
        if (val !== undefined) object[key] = val;
    }
    return object;
};
var safePropBackslashRe = /\\/g, safePropQuoteRe = /"/g;
/**
 * Tests whether the specified name is a reserved word in JS.
 * @param {string} name Name to test
 * @returns {boolean} `true` if reserved, otherwise `false`
 */ util.isReserved = function isReserved(name) {
    return /^(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$/.test(name);
};
/**
 * Returns a safe property accessor for the specified property name.
 * @param {string} prop Property name
 * @returns {string} Safe accessor
 */ util.safeProp = function safeProp(prop) {
    if (!/^[$\w_]+$/.test(prop) || util.isReserved(prop)) return '["' + prop.replace(safePropBackslashRe, "\\\\").replace(safePropQuoteRe, '\\"') + '"]';
    return "." + prop;
};
/**
 * Converts the first character of a string to upper case.
 * @param {string} str String to convert
 * @returns {string} Converted string
 */ util.ucFirst = function ucFirst(str) {
    return str.charAt(0).toUpperCase() + str.substring(1);
};
var camelCaseRe = /_([a-z])/g;
/**
 * Converts a string to camel case.
 * @param {string} str String to convert
 * @returns {string} Converted string
 */ util.camelCase = function camelCase(str) {
    return str.substring(0, 1) + str.substring(1).replace(camelCaseRe, function($0, $1) {
        return $1.toUpperCase();
    });
};
/**
 * Compares reflected fields by id.
 * @param {Field} a First field
 * @param {Field} b Second field
 * @returns {number} Comparison value
 */ util.compareFieldsById = function compareFieldsById(a, b) {
    return a.id - b.id;
};
/**
 * Decorator helper for types (TypeScript).
 * @param {Constructor<T>} ctor Constructor function
 * @param {string} [typeName] Type name, defaults to the constructor's name
 * @returns {Type} Reflected type
 * @template T extends Message<T>
 * @property {Root} root Decorators root
 */ util.decorateType = function decorateType(ctor, typeName) {
    /* istanbul ignore if */ if (ctor.$type) {
        if (typeName && ctor.$type.name !== typeName) {
            util.decorateRoot.remove(ctor.$type);
            ctor.$type.name = typeName;
            util.decorateRoot.add(ctor.$type);
        }
        return ctor.$type;
    }
    /* istanbul ignore next */ if (!Type) Type = require("745a8def28374fa4");
    var type = new Type(typeName || ctor.name);
    util.decorateRoot.add(type);
    type.ctor = ctor; // sets up .encode, .decode etc.
    Object.defineProperty(ctor, "$type", {
        value: type,
        enumerable: false
    });
    Object.defineProperty(ctor.prototype, "$type", {
        value: type,
        enumerable: false
    });
    return type;
};
var decorateEnumIndex = 0;
/**
 * Decorator helper for enums (TypeScript).
 * @param {Object} object Enum object
 * @returns {Enum} Reflected enum
 */ util.decorateEnum = function decorateEnum(object) {
    /* istanbul ignore if */ if (object.$type) return object.$type;
    /* istanbul ignore next */ if (!Enum) Enum = require("82074a4051f1e565");
    var enm = new Enum("Enum" + decorateEnumIndex++, object);
    util.decorateRoot.add(enm);
    Object.defineProperty(object, "$type", {
        value: enm,
        enumerable: false
    });
    return enm;
};
/**
 * Sets the value of a property by property path. If a value already exists, it is turned to an array
 * @param {Object.<string,*>} dst Destination object
 * @param {string} path dot '.' delimited path of the property to set
 * @param {Object} value the value to set
 * @returns {Object.<string,*>} Destination object
 */ util.setProperty = function setProperty(dst, path, value) {
    function setProp(dst, path, value) {
        var part = path.shift();
        if (part === "__proto__" || part === "prototype") return dst;
        if (path.length > 0) dst[part] = setProp(dst[part] || {}, path, value);
        else {
            var prevValue = dst[part];
            if (prevValue) value = [].concat(prevValue).concat(value);
            dst[part] = value;
        }
        return dst;
    }
    if (typeof dst !== "object") throw TypeError("dst must be an object");
    if (!path) throw TypeError("path must be specified");
    path = path.split(".");
    return setProp(dst, path, value);
};
/**
 * Decorator root (TypeScript).
 * @name util.decorateRoot
 * @type {Root}
 * @readonly
 */ Object.defineProperty(util, "decorateRoot", {
    get: function() {
        return roots["decorated"] || (roots["decorated"] = new (require("bbfb7b48a94ffbf2"))());
    }
});

},{"d625e6ce5bbdc11f":"k72f7","c15440adb779afca":"8v4Te","d73a73fb03f0fac1":"cqpPo","aac844e7d23ccc04":"jjh6B","187b53cc127fbbd9":"cZV5i","745a8def28374fa4":"9Fupb","82074a4051f1e565":"9srcK","bbfb7b48a94ffbf2":"heZNO"}],"cqpPo":[function(require,module,exports) {
"use strict";
module.exports = codegen;
/**
 * Begins generating a function.
 * @memberof util
 * @param {string[]} functionParams Function parameter names
 * @param {string} [functionName] Function name if not anonymous
 * @returns {Codegen} Appender that appends code to the function's body
 */ function codegen(functionParams, functionName) {
    /* istanbul ignore if */ if (typeof functionParams === "string") {
        functionName = functionParams;
        functionParams = undefined;
    }
    var body = [];
    /**
     * Appends code to the function's body or finishes generation.
     * @typedef Codegen
     * @type {function}
     * @param {string|Object.<string,*>} [formatStringOrScope] Format string or, to finish the function, an object of additional scope variables, if any
     * @param {...*} [formatParams] Format parameters
     * @returns {Codegen|Function} Itself or the generated function if finished
     * @throws {Error} If format parameter counts do not match
     */ function Codegen(formatStringOrScope) {
        // note that explicit array handling below makes this ~50% faster
        // finish the function
        if (typeof formatStringOrScope !== "string") {
            var source = toString();
            if (codegen.verbose) console.log("codegen: " + source); // eslint-disable-line no-console
            source = "return " + source;
            if (formatStringOrScope) {
                var scopeKeys = Object.keys(formatStringOrScope), scopeParams = new Array(scopeKeys.length + 1), scopeValues = new Array(scopeKeys.length), scopeOffset = 0;
                while(scopeOffset < scopeKeys.length){
                    scopeParams[scopeOffset] = scopeKeys[scopeOffset];
                    scopeValues[scopeOffset] = formatStringOrScope[scopeKeys[scopeOffset++]];
                }
                scopeParams[scopeOffset] = source;
                return Function.apply(null, scopeParams).apply(null, scopeValues); // eslint-disable-line no-new-func
            }
            return Function(source)(); // eslint-disable-line no-new-func
        }
        // otherwise append to body
        var formatParams = new Array(arguments.length - 1), formatOffset = 0;
        while(formatOffset < formatParams.length)formatParams[formatOffset] = arguments[++formatOffset];
        formatOffset = 0;
        formatStringOrScope = formatStringOrScope.replace(/%([%dfijs])/g, function replace($0, $1) {
            var value = formatParams[formatOffset++];
            switch($1){
                case "d":
                case "f":
                    return String(Number(value));
                case "i":
                    return String(Math.floor(value));
                case "j":
                    return JSON.stringify(value);
                case "s":
                    return String(value);
            }
            return "%";
        });
        if (formatOffset !== formatParams.length) throw Error("parameter count mismatch");
        body.push(formatStringOrScope);
        return Codegen;
    }
    function toString(functionNameOverride) {
        return "function " + (functionNameOverride || functionName || "") + "(" + (functionParams && functionParams.join(",") || "") + "){\n  " + body.join("\n  ") + "\n}";
    }
    Codegen.toString = toString;
    return Codegen;
}
/**
 * Begins generating a function.
 * @memberof util
 * @function codegen
 * @param {string} [functionName] Function name if not anonymous
 * @returns {Codegen} Appender that appends code to the function's body
 * @variation 2
 */ /**
 * When set to `true`, codegen will log generated code to console. Useful for debugging.
 * @name util.codegen.verbose
 * @type {boolean}
 */ codegen.verbose = false;

},{}],"jjh6B":[function(require,module,exports) {
"use strict";
module.exports = fetch;
var asPromise = require("9c66e50465984bbe"), inquire = require("c3a4c338701eb665");
var fs = inquire("fs");
/**
 * Node-style callback as used by {@link util.fetch}.
 * @typedef FetchCallback
 * @type {function}
 * @param {?Error} error Error, if any, otherwise `null`
 * @param {string} [contents] File contents, if there hasn't been an error
 * @returns {undefined}
 */ /**
 * Options as used by {@link util.fetch}.
 * @typedef FetchOptions
 * @type {Object}
 * @property {boolean} [binary=false] Whether expecting a binary response
 * @property {boolean} [xhr=false] If `true`, forces the use of XMLHttpRequest
 */ /**
 * Fetches the contents of a file.
 * @memberof util
 * @param {string} filename File path or url
 * @param {FetchOptions} options Fetch options
 * @param {FetchCallback} callback Callback function
 * @returns {undefined}
 */ function fetch(filename, options, callback) {
    if (typeof options === "function") {
        callback = options;
        options = {};
    } else if (!options) options = {};
    if (!callback) return asPromise(fetch, this, filename, options); // eslint-disable-line no-invalid-this
    // if a node-like filesystem is present, try it first but fall back to XHR if nothing is found.
    if (!options.xhr && fs && fs.readFile) return fs.readFile(filename, function fetchReadFileCallback(err, contents) {
        return err && typeof XMLHttpRequest !== "undefined" ? fetch.xhr(filename, options, callback) : err ? callback(err) : callback(null, options.binary ? contents : contents.toString("utf8"));
    });
    // use the XHR version otherwise.
    return fetch.xhr(filename, options, callback);
}
/**
 * Fetches the contents of a file.
 * @name util.fetch
 * @function
 * @param {string} path File path or url
 * @param {FetchCallback} callback Callback function
 * @returns {undefined}
 * @variation 2
 */ /**
 * Fetches the contents of a file.
 * @name util.fetch
 * @function
 * @param {string} path File path or url
 * @param {FetchOptions} [options] Fetch options
 * @returns {Promise<string|Uint8Array>} Promise
 * @variation 3
 */ /**/ fetch.xhr = function fetch_xhr(filename, options, callback) {
    var xhr = new XMLHttpRequest();
    xhr.onreadystatechange /* works everywhere */  = function fetchOnReadyStateChange() {
        if (xhr.readyState !== 4) return undefined;
        // local cors security errors return status 0 / empty string, too. afaik this cannot be
        // reliably distinguished from an actually empty file for security reasons. feel free
        // to send a pull request if you are aware of a solution.
        if (xhr.status !== 0 && xhr.status !== 200) return callback(Error("status " + xhr.status));
        // if binary data is expected, make sure that some sort of array is returned, even if
        // ArrayBuffers are not supported. the binary string fallback, however, is unsafe.
        if (options.binary) {
            var buffer = xhr.response;
            if (!buffer) {
                buffer = [];
                for(var i = 0; i < xhr.responseText.length; ++i)buffer.push(xhr.responseText.charCodeAt(i) & 255);
            }
            return callback(null, typeof Uint8Array !== "undefined" ? new Uint8Array(buffer) : buffer);
        }
        return callback(null, xhr.responseText);
    };
    if (options.binary) {
        // ref: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Sending_and_Receiving_Binary_Data#Receiving_binary_data_in_older_browsers
        if ("overrideMimeType" in xhr) xhr.overrideMimeType("text/plain; charset=x-user-defined");
        xhr.responseType = "arraybuffer";
    }
    xhr.open("GET", filename);
    xhr.send();
};

},{"9c66e50465984bbe":"ihGsB","c3a4c338701eb665":"86QKD"}],"cZV5i":[function(require,module,exports) {
"use strict";
/**
 * A minimal path module to resolve Unix, Windows and URL paths alike.
 * @memberof util
 * @namespace
 */ var path = exports;
var isAbsolute = /**
 * Tests if the specified path is absolute.
 * @param {string} path Path to test
 * @returns {boolean} `true` if path is absolute
 */ path.isAbsolute = function isAbsolute(path) {
    return /^(?:\/|\w+:)/.test(path);
};
var normalize = /**
 * Normalizes the specified path.
 * @param {string} path Path to normalize
 * @returns {string} Normalized path
 */ path.normalize = function normalize(path) {
    path = path.replace(/\\/g, "/").replace(/\/{2,}/g, "/");
    var parts = path.split("/"), absolute = isAbsolute(path), prefix = "";
    if (absolute) prefix = parts.shift() + "/";
    for(var i = 0; i < parts.length;){
        if (parts[i] === "..") {
            if (i > 0 && parts[i - 1] !== "..") parts.splice(--i, 2);
            else if (absolute) parts.splice(i, 1);
            else ++i;
        } else if (parts[i] === ".") parts.splice(i, 1);
        else ++i;
    }
    return prefix + parts.join("/");
};
/**
 * Resolves the specified include path against the specified origin path.
 * @param {string} originPath Path to the origin file
 * @param {string} includePath Include path relative to origin path
 * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized
 * @returns {string} Path to the include file
 */ path.resolve = function resolve(originPath, includePath, alreadyNormalized) {
    if (!alreadyNormalized) includePath = normalize(includePath);
    if (isAbsolute(includePath)) return includePath;
    if (!alreadyNormalized) originPath = normalize(originPath);
    return (originPath = originPath.replace(/(?:\/|^)[^/]+$/, "")).length ? normalize(originPath + "/" + includePath) : includePath;
};

},{}],"9Fupb":[function(require,module,exports) {
"use strict";
module.exports = Type;
// extends Namespace
var Namespace = require("5117c0bee55f85c1");
((Type.prototype = Object.create(Namespace.prototype)).constructor = Type).className = "Type";
var Enum = require("95705af084928bdb"), OneOf = require("5c49e2247ac1339c"), Field = require("9ddef03d742a8ae5"), MapField = require("855bc4242d19ae96"), Service = require("7effc3cf17b54b33"), Message = require("df13bb2d77f5e062"), Reader = require("d5f7aeeae898e34d"), Writer = require("242a5b5dfe4b4132"), util = require("5b1bbd5fe314c740"), encoder = require("3475360376090559"), decoder = require("19b90e0a22634837"), verifier = require("e94e8e60961274cb"), converter = require("e4ea5562709196b0"), wrappers = require("d0bdd2a08724169a");
/**
 * Constructs a new reflected message type instance.
 * @classdesc Reflected message type.
 * @extends NamespaceBase
 * @constructor
 * @param {string} name Message name
 * @param {Object.<string,*>} [options] Declared options
 */ function Type(name, options) {
    Namespace.call(this, name, options);
    /**
     * Message fields.
     * @type {Object.<string,Field>}
     */ this.fields = {}; // toJSON, marker
    /**
     * Oneofs declared within this namespace, if any.
     * @type {Object.<string,OneOf>}
     */ this.oneofs = undefined; // toJSON
    /**
     * Extension ranges, if any.
     * @type {number[][]}
     */ this.extensions = undefined; // toJSON
    /**
     * Reserved ranges, if any.
     * @type {Array.<number[]|string>}
     */ this.reserved = undefined; // toJSON
    /*?
     * Whether this type is a legacy group.
     * @type {boolean|undefined}
     */ this.group = undefined; // toJSON
    /**
     * Cached fields by id.
     * @type {Object.<number,Field>|null}
     * @private
     */ this._fieldsById = null;
    /**
     * Cached fields as an array.
     * @type {Field[]|null}
     * @private
     */ this._fieldsArray = null;
    /**
     * Cached oneofs as an array.
     * @type {OneOf[]|null}
     * @private
     */ this._oneofsArray = null;
    /**
     * Cached constructor.
     * @type {Constructor<{}>}
     * @private
     */ this._ctor = null;
}
Object.defineProperties(Type.prototype, {
    /**
     * Message fields by id.
     * @name Type#fieldsById
     * @type {Object.<number,Field>}
     * @readonly
     */ fieldsById: {
        get: function() {
            /* istanbul ignore if */ if (this._fieldsById) return this._fieldsById;
            this._fieldsById = {};
            for(var names = Object.keys(this.fields), i = 0; i < names.length; ++i){
                var field = this.fields[names[i]], id = field.id;
                /* istanbul ignore if */ if (this._fieldsById[id]) throw Error("duplicate id " + id + " in " + this);
                this._fieldsById[id] = field;
            }
            return this._fieldsById;
        }
    },
    /**
     * Fields of this message as an array for iteration.
     * @name Type#fieldsArray
     * @type {Field[]}
     * @readonly
     */ fieldsArray: {
        get: function() {
            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));
        }
    },
    /**
     * Oneofs of this message as an array for iteration.
     * @name Type#oneofsArray
     * @type {OneOf[]}
     * @readonly
     */ oneofsArray: {
        get: function() {
            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));
        }
    },
    /**
     * The registered constructor, if any registered, otherwise a generic constructor.
     * Assigning a function replaces the internal constructor. If the function does not extend {@link Message} yet, its prototype will be setup accordingly and static methods will be populated. If it already extends {@link Message}, it will just replace the internal constructor.
     * @name Type#ctor
     * @type {Constructor<{}>}
     */ ctor: {
        get: function() {
            return this._ctor || (this.ctor = Type.generateConstructor(this)());
        },
        set: function(ctor) {
            // Ensure proper prototype
            var prototype = ctor.prototype;
            if (!(prototype instanceof Message)) {
                (ctor.prototype = new Message()).constructor = ctor;
                util.merge(ctor.prototype, prototype);
            }
            // Classes and messages reference their reflected type
            ctor.$type = ctor.prototype.$type = this;
            // Mix in static methods
            util.merge(ctor, Message, true);
            this._ctor = ctor;
            // Messages have non-enumerable default values on their prototype
            var i = 0;
            for(; i < /* initializes */ this.fieldsArray.length; ++i)this._fieldsArray[i].resolve(); // ensures a proper value
            // Messages have non-enumerable getters and setters for each virtual oneof field
            var ctorProperties = {};
            for(i = 0; i < /* initializes */ this.oneofsArray.length; ++i)ctorProperties[this._oneofsArray[i].resolve().name] = {
                get: util.oneOfGetter(this._oneofsArray[i].oneof),
                set: util.oneOfSetter(this._oneofsArray[i].oneof)
            };
            if (i) Object.defineProperties(ctor.prototype, ctorProperties);
        }
    }
});
/**
 * Generates a constructor function for the specified type.
 * @param {Type} mtype Message type
 * @returns {Codegen} Codegen instance
 */ Type.generateConstructor = function generateConstructor(mtype) {
    /* eslint-disable no-unexpected-multiline */ var gen = util.codegen([
        "p"
    ], mtype.name);
    // explicitly initialize mutable object/array fields so that these aren't just inherited from the prototype
    for(var i = 0, field; i < mtype.fieldsArray.length; ++i)if ((field = mtype._fieldsArray[i]).map) gen("this%s={}", util.safeProp(field.name));
    else if (field.repeated) gen("this%s=[]", util.safeProp(field.name));
    return gen("if(p)for(var ks=Object.keys(p),i=0;i<ks.length;++i)if(p[ks[i]]!=null)") // omit undefined or null
    ("this[ks[i]]=p[ks[i]]");
/* eslint-enable no-unexpected-multiline */ };
function clearCache(type) {
    type._fieldsById = type._fieldsArray = type._oneofsArray = null;
    delete type.encode;
    delete type.decode;
    delete type.verify;
    return type;
}
/**
 * Message type descriptor.
 * @interface IType
 * @extends INamespace
 * @property {Object.<string,IOneOf>} [oneofs] Oneof descriptors
 * @property {Object.<string,IField>} fields Field descriptors
 * @property {number[][]} [extensions] Extension ranges
 * @property {number[][]} [reserved] Reserved ranges
 * @property {boolean} [group=false] Whether a legacy group or not
 */ /**
 * Creates a message type from a message type descriptor.
 * @param {string} name Message name
 * @param {IType} json Message type descriptor
 * @returns {Type} Created message type
 */ Type.fromJSON = function fromJSON(name, json) {
    var type = new Type(name, json.options);
    type.extensions = json.extensions;
    type.reserved = json.reserved;
    var names = Object.keys(json.fields), i = 0;
    for(; i < names.length; ++i)type.add((typeof json.fields[names[i]].keyType !== "undefined" ? MapField.fromJSON : Field.fromJSON)(names[i], json.fields[names[i]]));
    if (json.oneofs) for(names = Object.keys(json.oneofs), i = 0; i < names.length; ++i)type.add(OneOf.fromJSON(names[i], json.oneofs[names[i]]));
    if (json.nested) for(names = Object.keys(json.nested), i = 0; i < names.length; ++i){
        var nested = json.nested[names[i]];
        type.add((nested.id !== undefined ? Field.fromJSON : nested.fields !== undefined ? Type.fromJSON : nested.values !== undefined ? Enum.fromJSON : nested.methods !== undefined ? Service.fromJSON : Namespace.fromJSON)(names[i], nested));
    }
    if (json.extensions && json.extensions.length) type.extensions = json.extensions;
    if (json.reserved && json.reserved.length) type.reserved = json.reserved;
    if (json.group) type.group = true;
    if (json.comment) type.comment = json.comment;
    return type;
};
/**
 * Converts this message type to a message type descriptor.
 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
 * @returns {IType} Message type descriptor
 */ Type.prototype.toJSON = function toJSON(toJSONOptions) {
    var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);
    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
    return util.toObject([
        "options",
        inherited && inherited.options || undefined,
        "oneofs",
        Namespace.arrayToJSON(this.oneofsArray, toJSONOptions),
        "fields",
        Namespace.arrayToJSON(this.fieldsArray.filter(function(obj) {
            return !obj.declaringField;
        }), toJSONOptions) || {},
        "extensions",
        this.extensions && this.extensions.length ? this.extensions : undefined,
        "reserved",
        this.reserved && this.reserved.length ? this.reserved : undefined,
        "group",
        this.group || undefined,
        "nested",
        inherited && inherited.nested || undefined,
        "comment",
        keepComments ? this.comment : undefined
    ]);
};
/**
 * @override
 */ Type.prototype.resolveAll = function resolveAll() {
    var fields = this.fieldsArray, i = 0;
    while(i < fields.length)fields[i++].resolve();
    var oneofs = this.oneofsArray;
    i = 0;
    while(i < oneofs.length)oneofs[i++].resolve();
    return Namespace.prototype.resolveAll.call(this);
};
/**
 * @override
 */ Type.prototype.get = function get(name) {
    return this.fields[name] || this.oneofs && this.oneofs[name] || this.nested && this.nested[name] || null;
};
/**
 * Adds a nested object to this type.
 * @param {ReflectionObject} object Nested object to add
 * @returns {Type} `this`
 * @throws {TypeError} If arguments are invalid
 * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id
 */ Type.prototype.add = function add(object) {
    if (this.get(object.name)) throw Error("duplicate name '" + object.name + "' in " + this);
    if (object instanceof Field && object.extend === undefined) {
        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.
        // The root object takes care of adding distinct sister-fields to the respective extended
        // type instead.
        // avoids calling the getter if not absolutely necessary because it's called quite frequently
        if (this._fieldsById ? /* istanbul ignore next */ this._fieldsById[object.id] : this.fieldsById[object.id]) throw Error("duplicate id " + object.id + " in " + this);
        if (this.isReservedId(object.id)) throw Error("id " + object.id + " is reserved in " + this);
        if (this.isReservedName(object.name)) throw Error("name '" + object.name + "' is reserved in " + this);
        if (object.parent) object.parent.remove(object);
        this.fields[object.name] = object;
        object.message = this;
        object.onAdd(this);
        return clearCache(this);
    }
    if (object instanceof OneOf) {
        if (!this.oneofs) this.oneofs = {};
        this.oneofs[object.name] = object;
        object.onAdd(this);
        return clearCache(this);
    }
    return Namespace.prototype.add.call(this, object);
};
/**
 * Removes a nested object from this type.
 * @param {ReflectionObject} object Nested object to remove
 * @returns {Type} `this`
 * @throws {TypeError} If arguments are invalid
 * @throws {Error} If `object` is not a member of this type
 */ Type.prototype.remove = function remove(object) {
    if (object instanceof Field && object.extend === undefined) {
        // See Type#add for the reason why extension fields are excluded here.
        /* istanbul ignore if */ if (!this.fields || this.fields[object.name] !== object) throw Error(object + " is not a member of " + this);
        delete this.fields[object.name];
        object.parent = null;
        object.onRemove(this);
        return clearCache(this);
    }
    if (object instanceof OneOf) {
        /* istanbul ignore if */ if (!this.oneofs || this.oneofs[object.name] !== object) throw Error(object + " is not a member of " + this);
        delete this.oneofs[object.name];
        object.parent = null;
        object.onRemove(this);
        return clearCache(this);
    }
    return Namespace.prototype.remove.call(this, object);
};
/**
 * Tests if the specified id is reserved.
 * @param {number} id Id to test
 * @returns {boolean} `true` if reserved, otherwise `false`
 */ Type.prototype.isReservedId = function isReservedId(id) {
    return Namespace.isReservedId(this.reserved, id);
};
/**
 * Tests if the specified name is reserved.
 * @param {string} name Name to test
 * @returns {boolean} `true` if reserved, otherwise `false`
 */ Type.prototype.isReservedName = function isReservedName(name) {
    return Namespace.isReservedName(this.reserved, name);
};
/**
 * Creates a new message of this type using the specified properties.
 * @param {Object.<string,*>} [properties] Properties to set
 * @returns {Message<{}>} Message instance
 */ Type.prototype.create = function create(properties) {
    return new this.ctor(properties);
};
/**
 * Sets up {@link Type#encode|encode}, {@link Type#decode|decode} and {@link Type#verify|verify}.
 * @returns {Type} `this`
 */ Type.prototype.setup = function setup() {
    // Sets up everything at once so that the prototype chain does not have to be re-evaluated
    // multiple times (V8, soft-deopt prototype-check).
    var fullName = this.fullName, types = [];
    for(var i = 0; i < /* initializes */ this.fieldsArray.length; ++i)types.push(this._fieldsArray[i].resolve().resolvedType);
    // Replace setup methods with type-specific generated functions
    this.encode = encoder(this)({
        Writer: Writer,
        types: types,
        util: util
    });
    this.decode = decoder(this)({
        Reader: Reader,
        types: types,
        util: util
    });
    this.verify = verifier(this)({
        types: types,
        util: util
    });
    this.fromObject = converter.fromObject(this)({
        types: types,
        util: util
    });
    this.toObject = converter.toObject(this)({
        types: types,
        util: util
    });
    // Inject custom wrappers for common types
    var wrapper = wrappers[fullName];
    if (wrapper) {
        var originalThis = Object.create(this);
        // if (wrapper.fromObject) {
        originalThis.fromObject = this.fromObject;
        this.fromObject = wrapper.fromObject.bind(originalThis);
        // }
        // if (wrapper.toObject) {
        originalThis.toObject = this.toObject;
        this.toObject = wrapper.toObject.bind(originalThis);
    // }
    }
    return this;
};
/**
 * Encodes a message of this type. Does not implicitly {@link Type#verify|verify} messages.
 * @param {Message<{}>|Object.<string,*>} message Message instance or plain object
 * @param {Writer} [writer] Writer to encode to
 * @returns {Writer} writer
 */ Type.prototype.encode = function encode_setup(message, writer) {
    return this.setup().encode(message, writer); // overrides this method
};
/**
 * Encodes a message of this type preceeded by its byte length as a varint. Does not implicitly {@link Type#verify|verify} messages.
 * @param {Message<{}>|Object.<string,*>} message Message instance or plain object
 * @param {Writer} [writer] Writer to encode to
 * @returns {Writer} writer
 */ Type.prototype.encodeDelimited = function encodeDelimited(message, writer) {
    return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();
};
/**
 * Decodes a message of this type.
 * @param {Reader|Uint8Array} reader Reader or buffer to decode from
 * @param {number} [length] Length of the message, if known beforehand
 * @returns {Message<{}>} Decoded message
 * @throws {Error} If the payload is not a reader or valid buffer
 * @throws {util.ProtocolError<{}>} If required fields are missing
 */ Type.prototype.decode = function decode_setup(reader, length) {
    return this.setup().decode(reader, length); // overrides this method
};
/**
 * Decodes a message of this type preceeded by its byte length as a varint.
 * @param {Reader|Uint8Array} reader Reader or buffer to decode from
 * @returns {Message<{}>} Decoded message
 * @throws {Error} If the payload is not a reader or valid buffer
 * @throws {util.ProtocolError} If required fields are missing
 */ Type.prototype.decodeDelimited = function decodeDelimited(reader) {
    if (!(reader instanceof Reader)) reader = Reader.create(reader);
    return this.decode(reader, reader.uint32());
};
/**
 * Verifies that field values are valid and that required fields are present.
 * @param {Object.<string,*>} message Plain object to verify
 * @returns {null|string} `null` if valid, otherwise the reason why it is not
 */ Type.prototype.verify = function verify_setup(message) {
    return this.setup().verify(message); // overrides this method
};
/**
 * Creates a new message of this type from a plain object. Also converts values to their respective internal types.
 * @param {Object.<string,*>} object Plain object to convert
 * @returns {Message<{}>} Message instance
 */ Type.prototype.fromObject = function fromObject(object) {
    return this.setup().fromObject(object);
};
/**
 * Conversion options as used by {@link Type#toObject} and {@link Message.toObject}.
 * @interface IConversionOptions
 * @property {Function} [longs] Long conversion type.
 * Valid values are `String` and `Number` (the global types).
 * Defaults to copy the present value, which is a possibly unsafe number without and a {@link Long} with a long library.
 * @property {Function} [enums] Enum value conversion type.
 * Only valid value is `String` (the global type).
 * Defaults to copy the present value, which is the numeric id.
 * @property {Function} [bytes] Bytes value conversion type.
 * Valid values are `Array` and (a base64 encoded) `String` (the global types).
 * Defaults to copy the present value, which usually is a Buffer under node and an Uint8Array in the browser.
 * @property {boolean} [defaults=false] Also sets default values on the resulting object
 * @property {boolean} [arrays=false] Sets empty arrays for missing repeated fields even if `defaults=false`
 * @property {boolean} [objects=false] Sets empty objects for missing map fields even if `defaults=false`
 * @property {boolean} [oneofs=false] Includes virtual oneof properties set to the present field's name, if any
 * @property {boolean} [json=false] Performs additional JSON compatibility conversions, i.e. NaN and Infinity to strings
 */ /**
 * Creates a plain object from a message of this type. Also converts values to other types if specified.
 * @param {Message<{}>} message Message instance
 * @param {IConversionOptions} [options] Conversion options
 * @returns {Object.<string,*>} Plain object
 */ Type.prototype.toObject = function toObject(message, options) {
    return this.setup().toObject(message, options);
};
/**
 * Decorator function as returned by {@link Type.d} (TypeScript).
 * @typedef TypeDecorator
 * @type {function}
 * @param {Constructor<T>} target Target constructor
 * @returns {undefined}
 * @template T extends Message<T>
 */ /**
 * Type decorator (TypeScript).
 * @param {string} [typeName] Type name, defaults to the constructor's name
 * @returns {TypeDecorator<T>} Decorator function
 * @template T extends Message<T>
 */ Type.d = function decorateType(typeName) {
    return function typeDecorator(target) {
        util.decorateType(target, typeName);
    };
};

},{"5117c0bee55f85c1":"4idoA","95705af084928bdb":"9srcK","5c49e2247ac1339c":"9U2iM","9ddef03d742a8ae5":"12Nu0","855bc4242d19ae96":"hNdPj","7effc3cf17b54b33":"gSwpu","df13bb2d77f5e062":"3paTM","d5f7aeeae898e34d":"8WivO","242a5b5dfe4b4132":"1OTT3","5b1bbd5fe314c740":"9qDrQ","3475360376090559":"14FRe","19b90e0a22634837":"5dWn6","e94e8e60961274cb":"4bGEh","e4ea5562709196b0":"blBnB","d0bdd2a08724169a":"luHkl"}],"4idoA":[function(require,module,exports) {
"use strict";
module.exports = Namespace;
// extends ReflectionObject
var ReflectionObject = require("5f4477f603405411");
((Namespace.prototype = Object.create(ReflectionObject.prototype)).constructor = Namespace).className = "Namespace";
var Field = require("a2de561845c99a2f"), OneOf = require("bfe7f17af2e4d0f0"), util = require("b0fcb8f823c44bd4");
var Type, Service, Enum;
/**
 * Constructs a new namespace instance.
 * @name Namespace
 * @classdesc Reflected namespace.
 * @extends NamespaceBase
 * @constructor
 * @param {string} name Namespace name
 * @param {Object.<string,*>} [options] Declared options
 */ /**
 * Constructs a namespace from JSON.
 * @memberof Namespace
 * @function
 * @param {string} name Namespace name
 * @param {Object.<string,*>} json JSON object
 * @returns {Namespace} Created namespace
 * @throws {TypeError} If arguments are invalid
 */ Namespace.fromJSON = function fromJSON(name, json) {
    return new Namespace(name, json.options).addJSON(json.nested);
};
/**
 * Converts an array of reflection objects to JSON.
 * @memberof Namespace
 * @param {ReflectionObject[]} array Object array
 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
 * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty
 */ function arrayToJSON(array, toJSONOptions) {
    if (!(array && array.length)) return undefined;
    var obj = {};
    for(var i = 0; i < array.length; ++i)obj[array[i].name] = array[i].toJSON(toJSONOptions);
    return obj;
}
Namespace.arrayToJSON = arrayToJSON;
/**
 * Tests if the specified id is reserved.
 * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names
 * @param {number} id Id to test
 * @returns {boolean} `true` if reserved, otherwise `false`
 */ Namespace.isReservedId = function isReservedId(reserved, id) {
    if (reserved) {
        for(var i = 0; i < reserved.length; ++i)if (typeof reserved[i] !== "string" && reserved[i][0] <= id && reserved[i][1] > id) return true;
    }
    return false;
};
/**
 * Tests if the specified name is reserved.
 * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names
 * @param {string} name Name to test
 * @returns {boolean} `true` if reserved, otherwise `false`
 */ Namespace.isReservedName = function isReservedName(reserved, name) {
    if (reserved) {
        for(var i = 0; i < reserved.length; ++i)if (reserved[i] === name) return true;
    }
    return false;
};
/**
 * Not an actual constructor. Use {@link Namespace} instead.
 * @classdesc Base class of all reflection objects containing nested objects. This is not an actual class but here for the sake of having consistent type definitions.
 * @exports NamespaceBase
 * @extends ReflectionObject
 * @abstract
 * @constructor
 * @param {string} name Namespace name
 * @param {Object.<string,*>} [options] Declared options
 * @see {@link Namespace}
 */ function Namespace(name, options) {
    ReflectionObject.call(this, name, options);
    /**
     * Nested objects by name.
     * @type {Object.<string,ReflectionObject>|undefined}
     */ this.nested = undefined; // toJSON
    /**
     * Cached nested objects as an array.
     * @type {ReflectionObject[]|null}
     * @private
     */ this._nestedArray = null;
}
function clearCache(namespace) {
    namespace._nestedArray = null;
    return namespace;
}
/**
 * Nested objects of this namespace as an array for iteration.
 * @name NamespaceBase#nestedArray
 * @type {ReflectionObject[]}
 * @readonly
 */ Object.defineProperty(Namespace.prototype, "nestedArray", {
    get: function() {
        return this._nestedArray || (this._nestedArray = util.toArray(this.nested));
    }
});
/**
 * Namespace descriptor.
 * @interface INamespace
 * @property {Object.<string,*>} [options] Namespace options
 * @property {Object.<string,AnyNestedObject>} [nested] Nested object descriptors
 */ /**
 * Any extension field descriptor.
 * @typedef AnyExtensionField
 * @type {IExtensionField|IExtensionMapField}
 */ /**
 * Any nested object descriptor.
 * @typedef AnyNestedObject
 * @type {IEnum|IType|IService|AnyExtensionField|INamespace}
 */ // ^ BEWARE: VSCode hangs forever when using more than 5 types (that's why AnyExtensionField exists in the first place)
/**
 * Converts this namespace to a namespace descriptor.
 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
 * @returns {INamespace} Namespace descriptor
 */ Namespace.prototype.toJSON = function toJSON(toJSONOptions) {
    return util.toObject([
        "options",
        this.options,
        "nested",
        arrayToJSON(this.nestedArray, toJSONOptions)
    ]);
};
/**
 * Adds nested objects to this namespace from nested object descriptors.
 * @param {Object.<string,AnyNestedObject>} nestedJson Any nested object descriptors
 * @returns {Namespace} `this`
 */ Namespace.prototype.addJSON = function addJSON(nestedJson) {
    var ns = this;
    /* istanbul ignore else */ if (nestedJson) for(var names = Object.keys(nestedJson), i = 0, nested; i < names.length; ++i){
        nested = nestedJson[names[i]];
        ns.add((nested.fields !== undefined ? Type.fromJSON : nested.values !== undefined ? Enum.fromJSON : nested.methods !== undefined ? Service.fromJSON : nested.id !== undefined ? Field.fromJSON : Namespace.fromJSON)(names[i], nested));
    }
    return this;
};
/**
 * Gets the nested object of the specified name.
 * @param {string} name Nested object name
 * @returns {ReflectionObject|null} The reflection object or `null` if it doesn't exist
 */ Namespace.prototype.get = function get(name) {
    return this.nested && this.nested[name] || null;
};
/**
 * Gets the values of the nested {@link Enum|enum} of the specified name.
 * This methods differs from {@link Namespace#get|get} in that it returns an enum's values directly and throws instead of returning `null`.
 * @param {string} name Nested enum name
 * @returns {Object.<string,number>} Enum values
 * @throws {Error} If there is no such enum
 */ Namespace.prototype.getEnum = function getEnum(name) {
    if (this.nested && this.nested[name] instanceof Enum) return this.nested[name].values;
    throw Error("no such enum: " + name);
};
/**
 * Adds a nested object to this namespace.
 * @param {ReflectionObject} object Nested object to add
 * @returns {Namespace} `this`
 * @throws {TypeError} If arguments are invalid
 * @throws {Error} If there is already a nested object with this name
 */ Namespace.prototype.add = function add(object) {
    if (!(object instanceof Field && object.extend !== undefined || object instanceof Type || object instanceof Enum || object instanceof Service || object instanceof Namespace || object instanceof OneOf)) throw TypeError("object must be a valid nested object");
    if (!this.nested) this.nested = {};
    else {
        var prev = this.get(object.name);
        if (prev) {
            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {
                // replace plain namespace but keep existing nested elements and options
                var nested = prev.nestedArray;
                for(var i = 0; i < nested.length; ++i)object.add(nested[i]);
                this.remove(prev);
                if (!this.nested) this.nested = {};
                object.setOptions(prev.options, true);
            } else throw Error("duplicate name '" + object.name + "' in " + this);
        }
    }
    this.nested[object.name] = object;
    object.onAdd(this);
    return clearCache(this);
};
/**
 * Removes a nested object from this namespace.
 * @param {ReflectionObject} object Nested object to remove
 * @returns {Namespace} `this`
 * @throws {TypeError} If arguments are invalid
 * @throws {Error} If `object` is not a member of this namespace
 */ Namespace.prototype.remove = function remove(object) {
    if (!(object instanceof ReflectionObject)) throw TypeError("object must be a ReflectionObject");
    if (object.parent !== this) throw Error(object + " is not a member of " + this);
    delete this.nested[object.name];
    if (!Object.keys(this.nested).length) this.nested = undefined;
    object.onRemove(this);
    return clearCache(this);
};
/**
 * Defines additial namespaces within this one if not yet existing.
 * @param {string|string[]} path Path to create
 * @param {*} [json] Nested types to create from JSON
 * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty
 */ Namespace.prototype.define = function define(path, json) {
    if (util.isString(path)) path = path.split(".");
    else if (!Array.isArray(path)) throw TypeError("illegal path");
    if (path && path.length && path[0] === "") throw Error("path must be relative");
    var ptr = this;
    while(path.length > 0){
        var part = path.shift();
        if (ptr.nested && ptr.nested[part]) {
            ptr = ptr.nested[part];
            if (!(ptr instanceof Namespace)) throw Error("path conflicts with non-namespace objects");
        } else ptr.add(ptr = new Namespace(part));
    }
    if (json) ptr.addJSON(json);
    return ptr;
};
/**
 * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree, but comes at a cost.
 * @returns {Namespace} `this`
 */ Namespace.prototype.resolveAll = function resolveAll() {
    var nested = this.nestedArray, i = 0;
    while(i < nested.length)if (nested[i] instanceof Namespace) nested[i++].resolveAll();
    else nested[i++].resolve();
    return this.resolve();
};
/**
 * Recursively looks up the reflection object matching the specified path in the scope of this namespace.
 * @param {string|string[]} path Path to look up
 * @param {*|Array.<*>} filterTypes Filter types, any combination of the constructors of `protobuf.Type`, `protobuf.Enum`, `protobuf.Service` etc.
 * @param {boolean} [parentAlreadyChecked=false] If known, whether the parent has already been checked
 * @returns {ReflectionObject|null} Looked up object or `null` if none could be found
 */ Namespace.prototype.lookup = function lookup(path, filterTypes, parentAlreadyChecked) {
    /* istanbul ignore next */ if (typeof filterTypes === "boolean") {
        parentAlreadyChecked = filterTypes;
        filterTypes = undefined;
    } else if (filterTypes && !Array.isArray(filterTypes)) filterTypes = [
        filterTypes
    ];
    if (util.isString(path) && path.length) {
        if (path === ".") return this.root;
        path = path.split(".");
    } else if (!path.length) return this;
    // Start at root if path is absolute
    if (path[0] === "") return this.root.lookup(path.slice(1), filterTypes);
    // Test if the first part matches any nested object, and if so, traverse if path contains more
    var found = this.get(path[0]);
    if (found) {
        if (path.length === 1) {
            if (!filterTypes || filterTypes.indexOf(found.constructor) > -1) return found;
        } else if (found instanceof Namespace && (found = found.lookup(path.slice(1), filterTypes, true))) return found;
    // Otherwise try each nested namespace
    } else for(var i = 0; i < this.nestedArray.length; ++i)if (this._nestedArray[i] instanceof Namespace && (found = this._nestedArray[i].lookup(path, filterTypes, true))) return found;
    // If there hasn't been a match, try again at the parent
    if (this.parent === null || parentAlreadyChecked) return null;
    return this.parent.lookup(path, filterTypes);
};
/**
 * Looks up the reflection object at the specified path, relative to this namespace.
 * @name NamespaceBase#lookup
 * @function
 * @param {string|string[]} path Path to look up
 * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked
 * @returns {ReflectionObject|null} Looked up object or `null` if none could be found
 * @variation 2
 */ // lookup(path: string, [parentAlreadyChecked: boolean])
/**
 * Looks up the {@link Type|type} at the specified path, relative to this namespace.
 * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.
 * @param {string|string[]} path Path to look up
 * @returns {Type} Looked up type
 * @throws {Error} If `path` does not point to a type
 */ Namespace.prototype.lookupType = function lookupType(path) {
    var found = this.lookup(path, [
        Type
    ]);
    if (!found) throw Error("no such type: " + path);
    return found;
};
/**
 * Looks up the values of the {@link Enum|enum} at the specified path, relative to this namespace.
 * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.
 * @param {string|string[]} path Path to look up
 * @returns {Enum} Looked up enum
 * @throws {Error} If `path` does not point to an enum
 */ Namespace.prototype.lookupEnum = function lookupEnum(path) {
    var found = this.lookup(path, [
        Enum
    ]);
    if (!found) throw Error("no such Enum '" + path + "' in " + this);
    return found;
};
/**
 * Looks up the {@link Type|type} or {@link Enum|enum} at the specified path, relative to this namespace.
 * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.
 * @param {string|string[]} path Path to look up
 * @returns {Type} Looked up type or enum
 * @throws {Error} If `path` does not point to a type or enum
 */ Namespace.prototype.lookupTypeOrEnum = function lookupTypeOrEnum(path) {
    var found = this.lookup(path, [
        Type,
        Enum
    ]);
    if (!found) throw Error("no such Type or Enum '" + path + "' in " + this);
    return found;
};
/**
 * Looks up the {@link Service|service} at the specified path, relative to this namespace.
 * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.
 * @param {string|string[]} path Path to look up
 * @returns {Service} Looked up service
 * @throws {Error} If `path` does not point to a service
 */ Namespace.prototype.lookupService = function lookupService(path) {
    var found = this.lookup(path, [
        Service
    ]);
    if (!found) throw Error("no such Service '" + path + "' in " + this);
    return found;
};
// Sets up cyclic dependencies (called in index-light)
Namespace._configure = function(Type_, Service_, Enum_) {
    Type = Type_;
    Service = Service_;
    Enum = Enum_;
};

},{"5f4477f603405411":"cWxlI","a2de561845c99a2f":"12Nu0","bfe7f17af2e4d0f0":"9U2iM","b0fcb8f823c44bd4":"9qDrQ"}],"12Nu0":[function(require,module,exports) {
"use strict";
module.exports = Field;
// extends ReflectionObject
var ReflectionObject = require("5b771c66b7125f2f");
((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = "Field";
var Enum = require("cd128301885fd48d"), types = require("80f04e51718fc9d4"), util = require("1d56d607bdcb0434");
var Type; // cyclic
var ruleRe = /^required|optional|repeated$/;
/**
 * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.
 * @name Field
 * @classdesc Reflected message field.
 * @extends FieldBase
 * @constructor
 * @param {string} name Unique name within its namespace
 * @param {number} id Unique id within its namespace
 * @param {string} type Value type
 * @param {string|Object.<string,*>} [rule="optional"] Field rule
 * @param {string|Object.<string,*>} [extend] Extended type if different from parent
 * @param {Object.<string,*>} [options] Declared options
 */ /**
 * Constructs a field from a field descriptor.
 * @param {string} name Field name
 * @param {IField} json Field descriptor
 * @returns {Field} Created field
 * @throws {TypeError} If arguments are invalid
 */ Field.fromJSON = function fromJSON(name, json) {
    return new Field(name, json.id, json.type, json.rule, json.extend, json.options, json.comment);
};
/**
 * Not an actual constructor. Use {@link Field} instead.
 * @classdesc Base class of all reflected message fields. This is not an actual class but here for the sake of having consistent type definitions.
 * @exports FieldBase
 * @extends ReflectionObject
 * @constructor
 * @param {string} name Unique name within its namespace
 * @param {number} id Unique id within its namespace
 * @param {string} type Value type
 * @param {string|Object.<string,*>} [rule="optional"] Field rule
 * @param {string|Object.<string,*>} [extend] Extended type if different from parent
 * @param {Object.<string,*>} [options] Declared options
 * @param {string} [comment] Comment associated with this field
 */ function Field(name, id, type, rule, extend, options, comment) {
    if (util.isObject(rule)) {
        comment = extend;
        options = rule;
        rule = extend = undefined;
    } else if (util.isObject(extend)) {
        comment = options;
        options = extend;
        extend = undefined;
    }
    ReflectionObject.call(this, name, options);
    if (!util.isInteger(id) || id < 0) throw TypeError("id must be a non-negative integer");
    if (!util.isString(type)) throw TypeError("type must be a string");
    if (rule !== undefined && !ruleRe.test(rule = rule.toString().toLowerCase())) throw TypeError("rule must be a string rule");
    if (extend !== undefined && !util.isString(extend)) throw TypeError("extend must be a string");
    if (rule === "proto3_optional") rule = "optional";
    /**
     * Field rule, if any.
     * @type {string|undefined}
     */ this.rule = rule && rule !== "optional" ? rule : undefined; // toJSON
    /**
     * Field type.
     * @type {string}
     */ this.type = type; // toJSON
    /**
     * Unique field id.
     * @type {number}
     */ this.id = id; // toJSON, marker
    /**
     * Extended type if different from parent.
     * @type {string|undefined}
     */ this.extend = extend || undefined; // toJSON
    /**
     * Whether this field is required.
     * @type {boolean}
     */ this.required = rule === "required";
    /**
     * Whether this field is optional.
     * @type {boolean}
     */ this.optional = !this.required;
    /**
     * Whether this field is repeated.
     * @type {boolean}
     */ this.repeated = rule === "repeated";
    /**
     * Whether this field is a map or not.
     * @type {boolean}
     */ this.map = false;
    /**
     * Message this field belongs to.
     * @type {Type|null}
     */ this.message = null;
    /**
     * OneOf this field belongs to, if any,
     * @type {OneOf|null}
     */ this.partOf = null;
    /**
     * The field type's default value.
     * @type {*}
     */ this.typeDefault = null;
    /**
     * The field's default value on prototypes.
     * @type {*}
     */ this.defaultValue = null;
    /**
     * Whether this field's value should be treated as a long.
     * @type {boolean}
     */ this.long = util.Long ? types.long[type] !== undefined : /* istanbul ignore next */ false;
    /**
     * Whether this field's value is a buffer.
     * @type {boolean}
     */ this.bytes = type === "bytes";
    /**
     * Resolved type if not a basic type.
     * @type {Type|Enum|null}
     */ this.resolvedType = null;
    /**
     * Sister-field within the extended type if a declaring extension field.
     * @type {Field|null}
     */ this.extensionField = null;
    /**
     * Sister-field within the declaring namespace if an extended field.
     * @type {Field|null}
     */ this.declaringField = null;
    /**
     * Internally remembers whether this field is packed.
     * @type {boolean|null}
     * @private
     */ this._packed = null;
    /**
     * Comment for this field.
     * @type {string|null}
     */ this.comment = comment;
}
/**
 * Determines whether this field is packed. Only relevant when repeated and working with proto2.
 * @name Field#packed
 * @type {boolean}
 * @readonly
 */ Object.defineProperty(Field.prototype, "packed", {
    get: function() {
        // defaults to packed=true if not explicity set to false
        if (this._packed === null) this._packed = this.getOption("packed") !== false;
        return this._packed;
    }
});
/**
 * @override
 */ Field.prototype.setOption = function setOption(name, value, ifNotSet) {
    if (name === "packed") this._packed = null;
    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);
};
/**
 * Field descriptor.
 * @interface IField
 * @property {string} [rule="optional"] Field rule
 * @property {string} type Field type
 * @property {number} id Field id
 * @property {Object.<string,*>} [options] Field options
 */ /**
 * Extension field descriptor.
 * @interface IExtensionField
 * @extends IField
 * @property {string} extend Extended type
 */ /**
 * Converts this field to a field descriptor.
 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
 * @returns {IField} Field descriptor
 */ Field.prototype.toJSON = function toJSON(toJSONOptions) {
    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
    return util.toObject([
        "rule",
        this.rule !== "optional" && this.rule || undefined,
        "type",
        this.type,
        "id",
        this.id,
        "extend",
        this.extend,
        "options",
        this.options,
        "comment",
        keepComments ? this.comment : undefined
    ]);
};
/**
 * Resolves this field's type references.
 * @returns {Field} `this`
 * @throws {Error} If any reference cannot be resolved
 */ Field.prototype.resolve = function resolve() {
    if (this.resolved) return this;
    if ((this.typeDefault = types.defaults[this.type]) === undefined) {
        this.resolvedType = (this.declaringField ? this.declaringField.parent : this.parent).lookupTypeOrEnum(this.type);
        if (this.resolvedType instanceof Type) this.typeDefault = null;
        else this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]; // first defined
    }
    // use explicitly set default value if present
    if (this.options && this.options["default"] != null) {
        this.typeDefault = this.options["default"];
        if (this.resolvedType instanceof Enum && typeof this.typeDefault === "string") this.typeDefault = this.resolvedType.values[this.typeDefault];
    }
    // remove unnecessary options
    if (this.options) {
        if (this.options.packed === true || this.options.packed !== undefined && this.resolvedType && !(this.resolvedType instanceof Enum)) delete this.options.packed;
        if (!Object.keys(this.options).length) this.options = undefined;
    }
    // convert to internal data type if necesssary
    if (this.long) {
        this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === "u");
        /* istanbul ignore else */ if (Object.freeze) Object.freeze(this.typeDefault); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)
    } else if (this.bytes && typeof this.typeDefault === "string") {
        var buf;
        if (util.base64.test(this.typeDefault)) util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);
        else util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);
        this.typeDefault = buf;
    }
    // take special care of maps and repeated fields
    if (this.map) this.defaultValue = util.emptyObject;
    else if (this.repeated) this.defaultValue = util.emptyArray;
    else this.defaultValue = this.typeDefault;
    // ensure proper value on prototype
    if (this.parent instanceof Type) this.parent.ctor.prototype[this.name] = this.defaultValue;
    return ReflectionObject.prototype.resolve.call(this);
};
/**
 * Decorator function as returned by {@link Field.d} and {@link MapField.d} (TypeScript).
 * @typedef FieldDecorator
 * @type {function}
 * @param {Object} prototype Target prototype
 * @param {string} fieldName Field name
 * @returns {undefined}
 */ /**
 * Field decorator (TypeScript).
 * @name Field.d
 * @function
 * @param {number} fieldId Field id
 * @param {"double"|"float"|"int32"|"uint32"|"sint32"|"fixed32"|"sfixed32"|"int64"|"uint64"|"sint64"|"fixed64"|"sfixed64"|"string"|"bool"|"bytes"|Object} fieldType Field type
 * @param {"optional"|"required"|"repeated"} [fieldRule="optional"] Field rule
 * @param {T} [defaultValue] Default value
 * @returns {FieldDecorator} Decorator function
 * @template T extends number | number[] | Long | Long[] | string | string[] | boolean | boolean[] | Uint8Array | Uint8Array[] | Buffer | Buffer[]
 */ Field.d = function decorateField(fieldId, fieldType, fieldRule, defaultValue) {
    // submessage: decorate the submessage and use its name as the type
    if (typeof fieldType === "function") fieldType = util.decorateType(fieldType).name;
    else if (fieldType && typeof fieldType === "object") fieldType = util.decorateEnum(fieldType).name;
    return function fieldDecorator(prototype, fieldName) {
        util.decorateType(prototype.constructor).add(new Field(fieldName, fieldId, fieldType, fieldRule, {
            "default": defaultValue
        }));
    };
};
/**
 * Field decorator (TypeScript).
 * @name Field.d
 * @function
 * @param {number} fieldId Field id
 * @param {Constructor<T>|string} fieldType Field type
 * @param {"optional"|"required"|"repeated"} [fieldRule="optional"] Field rule
 * @returns {FieldDecorator} Decorator function
 * @template T extends Message<T>
 * @variation 2
 */ // like Field.d but without a default value
// Sets up cyclic dependencies (called in index-light)
Field._configure = function configure(Type_) {
    Type = Type_;
};

},{"5b771c66b7125f2f":"cWxlI","cd128301885fd48d":"9srcK","80f04e51718fc9d4":"a31FO","1d56d607bdcb0434":"9qDrQ"}],"a31FO":[function(require,module,exports) {
"use strict";
/**
 * Common type constants.
 * @namespace
 */ var types = exports;
var util = require("d6b0e1747362ede9");
var s = [
    "double",
    "float",
    "int32",
    "uint32",
    "sint32",
    "fixed32",
    "sfixed32",
    "int64",
    "uint64",
    "sint64",
    "fixed64",
    "sfixed64",
    "bool",
    "string",
    "bytes" // 14
];
function bake(values, offset) {
    var i = 0, o = {};
    offset |= 0;
    while(i < values.length)o[s[i + offset]] = values[i++];
    return o;
}
/**
 * Basic type wire types.
 * @type {Object.<string,number>}
 * @const
 * @property {number} double=1 Fixed64 wire type
 * @property {number} float=5 Fixed32 wire type
 * @property {number} int32=0 Varint wire type
 * @property {number} uint32=0 Varint wire type
 * @property {number} sint32=0 Varint wire type
 * @property {number} fixed32=5 Fixed32 wire type
 * @property {number} sfixed32=5 Fixed32 wire type
 * @property {number} int64=0 Varint wire type
 * @property {number} uint64=0 Varint wire type
 * @property {number} sint64=0 Varint wire type
 * @property {number} fixed64=1 Fixed64 wire type
 * @property {number} sfixed64=1 Fixed64 wire type
 * @property {number} bool=0 Varint wire type
 * @property {number} string=2 Ldelim wire type
 * @property {number} bytes=2 Ldelim wire type
 */ types.basic = bake([
    /* double   */ 1,
    /* float    */ 5,
    /* int32    */ 0,
    /* uint32   */ 0,
    /* sint32   */ 0,
    /* fixed32  */ 5,
    /* sfixed32 */ 5,
    /* int64    */ 0,
    /* uint64   */ 0,
    /* sint64   */ 0,
    /* fixed64  */ 1,
    /* sfixed64 */ 1,
    /* bool     */ 0,
    /* string   */ 2,
    /* bytes    */ 2
]);
/**
 * Basic type defaults.
 * @type {Object.<string,*>}
 * @const
 * @property {number} double=0 Double default
 * @property {number} float=0 Float default
 * @property {number} int32=0 Int32 default
 * @property {number} uint32=0 Uint32 default
 * @property {number} sint32=0 Sint32 default
 * @property {number} fixed32=0 Fixed32 default
 * @property {number} sfixed32=0 Sfixed32 default
 * @property {number} int64=0 Int64 default
 * @property {number} uint64=0 Uint64 default
 * @property {number} sint64=0 Sint32 default
 * @property {number} fixed64=0 Fixed64 default
 * @property {number} sfixed64=0 Sfixed64 default
 * @property {boolean} bool=false Bool default
 * @property {string} string="" String default
 * @property {Array.<number>} bytes=Array(0) Bytes default
 * @property {null} message=null Message default
 */ types.defaults = bake([
    /* double   */ 0,
    /* float    */ 0,
    /* int32    */ 0,
    /* uint32   */ 0,
    /* sint32   */ 0,
    /* fixed32  */ 0,
    /* sfixed32 */ 0,
    /* int64    */ 0,
    /* uint64   */ 0,
    /* sint64   */ 0,
    /* fixed64  */ 0,
    /* sfixed64 */ 0,
    /* bool     */ false,
    /* string   */ "",
    /* bytes    */ util.emptyArray,
    /* message  */ null
]);
/**
 * Basic long type wire types.
 * @type {Object.<string,number>}
 * @const
 * @property {number} int64=0 Varint wire type
 * @property {number} uint64=0 Varint wire type
 * @property {number} sint64=0 Varint wire type
 * @property {number} fixed64=1 Fixed64 wire type
 * @property {number} sfixed64=1 Fixed64 wire type
 */ types.long = bake([
    /* int64    */ 0,
    /* uint64   */ 0,
    /* sint64   */ 0,
    /* fixed64  */ 1,
    /* sfixed64 */ 1
], 7);
/**
 * Allowed types for map keys with their associated wire type.
 * @type {Object.<string,number>}
 * @const
 * @property {number} int32=0 Varint wire type
 * @property {number} uint32=0 Varint wire type
 * @property {number} sint32=0 Varint wire type
 * @property {number} fixed32=5 Fixed32 wire type
 * @property {number} sfixed32=5 Fixed32 wire type
 * @property {number} int64=0 Varint wire type
 * @property {number} uint64=0 Varint wire type
 * @property {number} sint64=0 Varint wire type
 * @property {number} fixed64=1 Fixed64 wire type
 * @property {number} sfixed64=1 Fixed64 wire type
 * @property {number} bool=0 Varint wire type
 * @property {number} string=2 Ldelim wire type
 */ types.mapKey = bake([
    /* int32    */ 0,
    /* uint32   */ 0,
    /* sint32   */ 0,
    /* fixed32  */ 5,
    /* sfixed32 */ 5,
    /* int64    */ 0,
    /* uint64   */ 0,
    /* sint64   */ 0,
    /* fixed64  */ 1,
    /* sfixed64 */ 1,
    /* bool     */ 0,
    /* string   */ 2
], 2);
/**
 * Allowed types for packed repeated fields with their associated wire type.
 * @type {Object.<string,number>}
 * @const
 * @property {number} double=1 Fixed64 wire type
 * @property {number} float=5 Fixed32 wire type
 * @property {number} int32=0 Varint wire type
 * @property {number} uint32=0 Varint wire type
 * @property {number} sint32=0 Varint wire type
 * @property {number} fixed32=5 Fixed32 wire type
 * @property {number} sfixed32=5 Fixed32 wire type
 * @property {number} int64=0 Varint wire type
 * @property {number} uint64=0 Varint wire type
 * @property {number} sint64=0 Varint wire type
 * @property {number} fixed64=1 Fixed64 wire type
 * @property {number} sfixed64=1 Fixed64 wire type
 * @property {number} bool=0 Varint wire type
 */ types.packed = bake([
    /* double   */ 1,
    /* float    */ 5,
    /* int32    */ 0,
    /* uint32   */ 0,
    /* sint32   */ 0,
    /* fixed32  */ 5,
    /* sfixed32 */ 5,
    /* int64    */ 0,
    /* uint64   */ 0,
    /* sint64   */ 0,
    /* fixed64  */ 1,
    /* sfixed64 */ 1,
    /* bool     */ 0
]);

},{"d6b0e1747362ede9":"9qDrQ"}],"9U2iM":[function(require,module,exports) {
"use strict";
module.exports = OneOf;
// extends ReflectionObject
var ReflectionObject = require("7212f0c58c461b29");
((OneOf.prototype = Object.create(ReflectionObject.prototype)).constructor = OneOf).className = "OneOf";
var Field = require("8f55a5dca4f265e3"), util = require("90af3907c8b3482f");
/**
 * Constructs a new oneof instance.
 * @classdesc Reflected oneof.
 * @extends ReflectionObject
 * @constructor
 * @param {string} name Oneof name
 * @param {string[]|Object.<string,*>} [fieldNames] Field names
 * @param {Object.<string,*>} [options] Declared options
 * @param {string} [comment] Comment associated with this field
 */ function OneOf(name, fieldNames, options, comment) {
    if (!Array.isArray(fieldNames)) {
        options = fieldNames;
        fieldNames = undefined;
    }
    ReflectionObject.call(this, name, options);
    /* istanbul ignore if */ if (!(fieldNames === undefined || Array.isArray(fieldNames))) throw TypeError("fieldNames must be an Array");
    /**
     * Field names that belong to this oneof.
     * @type {string[]}
     */ this.oneof = fieldNames || []; // toJSON, marker
    /**
     * Fields that belong to this oneof as an array for iteration.
     * @type {Field[]}
     * @readonly
     */ this.fieldsArray = []; // declared readonly for conformance, possibly not yet added to parent
    /**
     * Comment for this field.
     * @type {string|null}
     */ this.comment = comment;
}
/**
 * Oneof descriptor.
 * @interface IOneOf
 * @property {Array.<string>} oneof Oneof field names
 * @property {Object.<string,*>} [options] Oneof options
 */ /**
 * Constructs a oneof from a oneof descriptor.
 * @param {string} name Oneof name
 * @param {IOneOf} json Oneof descriptor
 * @returns {OneOf} Created oneof
 * @throws {TypeError} If arguments are invalid
 */ OneOf.fromJSON = function fromJSON(name, json) {
    return new OneOf(name, json.oneof, json.options, json.comment);
};
/**
 * Converts this oneof to a oneof descriptor.
 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
 * @returns {IOneOf} Oneof descriptor
 */ OneOf.prototype.toJSON = function toJSON(toJSONOptions) {
    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
    return util.toObject([
        "options",
        this.options,
        "oneof",
        this.oneof,
        "comment",
        keepComments ? this.comment : undefined
    ]);
};
/**
 * Adds the fields of the specified oneof to the parent if not already done so.
 * @param {OneOf} oneof The oneof
 * @returns {undefined}
 * @inner
 * @ignore
 */ function addFieldsToParent(oneof) {
    if (oneof.parent) {
        for(var i = 0; i < oneof.fieldsArray.length; ++i)if (!oneof.fieldsArray[i].parent) oneof.parent.add(oneof.fieldsArray[i]);
    }
}
/**
 * Adds a field to this oneof and removes it from its current parent, if any.
 * @param {Field} field Field to add
 * @returns {OneOf} `this`
 */ OneOf.prototype.add = function add(field) {
    /* istanbul ignore if */ if (!(field instanceof Field)) throw TypeError("field must be a Field");
    if (field.parent && field.parent !== this.parent) field.parent.remove(field);
    this.oneof.push(field.name);
    this.fieldsArray.push(field);
    field.partOf = this; // field.parent remains null
    addFieldsToParent(this);
    return this;
};
/**
 * Removes a field from this oneof and puts it back to the oneof's parent.
 * @param {Field} field Field to remove
 * @returns {OneOf} `this`
 */ OneOf.prototype.remove = function remove(field) {
    /* istanbul ignore if */ if (!(field instanceof Field)) throw TypeError("field must be a Field");
    var index = this.fieldsArray.indexOf(field);
    /* istanbul ignore if */ if (index < 0) throw Error(field + " is not a member of " + this);
    this.fieldsArray.splice(index, 1);
    index = this.oneof.indexOf(field.name);
    /* istanbul ignore else */ if (index > -1) this.oneof.splice(index, 1);
    field.partOf = null;
    return this;
};
/**
 * @override
 */ OneOf.prototype.onAdd = function onAdd(parent) {
    ReflectionObject.prototype.onAdd.call(this, parent);
    var self = this;
    // Collect present fields
    for(var i = 0; i < this.oneof.length; ++i){
        var field = parent.get(this.oneof[i]);
        if (field && !field.partOf) {
            field.partOf = self;
            self.fieldsArray.push(field);
        }
    }
    // Add not yet present fields
    addFieldsToParent(this);
};
/**
 * @override
 */ OneOf.prototype.onRemove = function onRemove(parent) {
    for(var i = 0, field; i < this.fieldsArray.length; ++i)if ((field = this.fieldsArray[i]).parent) field.parent.remove(field);
    ReflectionObject.prototype.onRemove.call(this, parent);
};
/**
 * Decorator function as returned by {@link OneOf.d} (TypeScript).
 * @typedef OneOfDecorator
 * @type {function}
 * @param {Object} prototype Target prototype
 * @param {string} oneofName OneOf name
 * @returns {undefined}
 */ /**
 * OneOf decorator (TypeScript).
 * @function
 * @param {...string} fieldNames Field names
 * @returns {OneOfDecorator} Decorator function
 * @template T extends string
 */ OneOf.d = function decorateOneOf() {
    var fieldNames = new Array(arguments.length), index = 0;
    while(index < arguments.length)fieldNames[index] = arguments[index++];
    return function oneOfDecorator(prototype, oneofName) {
        util.decorateType(prototype.constructor).add(new OneOf(oneofName, fieldNames));
        Object.defineProperty(prototype, oneofName, {
            get: util.oneOfGetter(fieldNames),
            set: util.oneOfSetter(fieldNames)
        });
    };
};

},{"7212f0c58c461b29":"cWxlI","8f55a5dca4f265e3":"12Nu0","90af3907c8b3482f":"9qDrQ"}],"hNdPj":[function(require,module,exports) {
"use strict";
module.exports = MapField;
// extends Field
var Field = require("5c30689719c73853");
((MapField.prototype = Object.create(Field.prototype)).constructor = MapField).className = "MapField";
var types = require("31c092d41008f16e"), util = require("6365806632f39cbb");
/**
 * Constructs a new map field instance.
 * @classdesc Reflected map field.
 * @extends FieldBase
 * @constructor
 * @param {string} name Unique name within its namespace
 * @param {number} id Unique id within its namespace
 * @param {string} keyType Key type
 * @param {string} type Value type
 * @param {Object.<string,*>} [options] Declared options
 * @param {string} [comment] Comment associated with this field
 */ function MapField(name, id, keyType, type, options, comment) {
    Field.call(this, name, id, type, undefined, undefined, options, comment);
    /* istanbul ignore if */ if (!util.isString(keyType)) throw TypeError("keyType must be a string");
    /**
     * Key type.
     * @type {string}
     */ this.keyType = keyType; // toJSON, marker
    /**
     * Resolved key type if not a basic type.
     * @type {ReflectionObject|null}
     */ this.resolvedKeyType = null;
    // Overrides Field#map
    this.map = true;
}
/**
 * Map field descriptor.
 * @interface IMapField
 * @extends {IField}
 * @property {string} keyType Key type
 */ /**
 * Extension map field descriptor.
 * @interface IExtensionMapField
 * @extends IMapField
 * @property {string} extend Extended type
 */ /**
 * Constructs a map field from a map field descriptor.
 * @param {string} name Field name
 * @param {IMapField} json Map field descriptor
 * @returns {MapField} Created map field
 * @throws {TypeError} If arguments are invalid
 */ MapField.fromJSON = function fromJSON(name, json) {
    return new MapField(name, json.id, json.keyType, json.type, json.options, json.comment);
};
/**
 * Converts this map field to a map field descriptor.
 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
 * @returns {IMapField} Map field descriptor
 */ MapField.prototype.toJSON = function toJSON(toJSONOptions) {
    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
    return util.toObject([
        "keyType",
        this.keyType,
        "type",
        this.type,
        "id",
        this.id,
        "extend",
        this.extend,
        "options",
        this.options,
        "comment",
        keepComments ? this.comment : undefined
    ]);
};
/**
 * @override
 */ MapField.prototype.resolve = function resolve() {
    if (this.resolved) return this;
    // Besides a value type, map fields have a key type that may be "any scalar type except for floating point types and bytes"
    if (types.mapKey[this.keyType] === undefined) throw Error("invalid key type: " + this.keyType);
    return Field.prototype.resolve.call(this);
};
/**
 * Map field decorator (TypeScript).
 * @name MapField.d
 * @function
 * @param {number} fieldId Field id
 * @param {"int32"|"uint32"|"sint32"|"fixed32"|"sfixed32"|"int64"|"uint64"|"sint64"|"fixed64"|"sfixed64"|"bool"|"string"} fieldKeyType Field key type
 * @param {"double"|"float"|"int32"|"uint32"|"sint32"|"fixed32"|"sfixed32"|"int64"|"uint64"|"sint64"|"fixed64"|"sfixed64"|"bool"|"string"|"bytes"|Object|Constructor<{}>} fieldValueType Field value type
 * @returns {FieldDecorator} Decorator function
 * @template T extends { [key: string]: number | Long | string | boolean | Uint8Array | Buffer | number[] | Message<{}> }
 */ MapField.d = function decorateMapField(fieldId, fieldKeyType, fieldValueType) {
    // submessage value: decorate the submessage and use its name as the type
    if (typeof fieldValueType === "function") fieldValueType = util.decorateType(fieldValueType).name;
    else if (fieldValueType && typeof fieldValueType === "object") fieldValueType = util.decorateEnum(fieldValueType).name;
    return function mapFieldDecorator(prototype, fieldName) {
        util.decorateType(prototype.constructor).add(new MapField(fieldName, fieldId, fieldKeyType, fieldValueType));
    };
};

},{"5c30689719c73853":"12Nu0","31c092d41008f16e":"a31FO","6365806632f39cbb":"9qDrQ"}],"gSwpu":[function(require,module,exports) {
"use strict";
module.exports = Service;
// extends Namespace
var Namespace = require("2d7214256424c24e");
((Service.prototype = Object.create(Namespace.prototype)).constructor = Service).className = "Service";
var Method = require("2b3e7b1f12f380ec"), util = require("caa7993ffa75fbfd"), rpc = require("10e47e1259e7827b");
/**
 * Constructs a new service instance.
 * @classdesc Reflected service.
 * @extends NamespaceBase
 * @constructor
 * @param {string} name Service name
 * @param {Object.<string,*>} [options] Service options
 * @throws {TypeError} If arguments are invalid
 */ function Service(name, options) {
    Namespace.call(this, name, options);
    /**
     * Service methods.
     * @type {Object.<string,Method>}
     */ this.methods = {}; // toJSON, marker
    /**
     * Cached methods as an array.
     * @type {Method[]|null}
     * @private
     */ this._methodsArray = null;
}
/**
 * Service descriptor.
 * @interface IService
 * @extends INamespace
 * @property {Object.<string,IMethod>} methods Method descriptors
 */ /**
 * Constructs a service from a service descriptor.
 * @param {string} name Service name
 * @param {IService} json Service descriptor
 * @returns {Service} Created service
 * @throws {TypeError} If arguments are invalid
 */ Service.fromJSON = function fromJSON(name, json) {
    var service = new Service(name, json.options);
    /* istanbul ignore else */ if (json.methods) for(var names = Object.keys(json.methods), i = 0; i < names.length; ++i)service.add(Method.fromJSON(names[i], json.methods[names[i]]));
    if (json.nested) service.addJSON(json.nested);
    service.comment = json.comment;
    return service;
};
/**
 * Converts this service to a service descriptor.
 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
 * @returns {IService} Service descriptor
 */ Service.prototype.toJSON = function toJSON(toJSONOptions) {
    var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);
    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
    return util.toObject([
        "options",
        inherited && inherited.options || undefined,
        "methods",
        Namespace.arrayToJSON(this.methodsArray, toJSONOptions) || /* istanbul ignore next */ {},
        "nested",
        inherited && inherited.nested || undefined,
        "comment",
        keepComments ? this.comment : undefined
    ]);
};
/**
 * Methods of this service as an array for iteration.
 * @name Service#methodsArray
 * @type {Method[]}
 * @readonly
 */ Object.defineProperty(Service.prototype, "methodsArray", {
    get: function() {
        return this._methodsArray || (this._methodsArray = util.toArray(this.methods));
    }
});
function clearCache(service) {
    service._methodsArray = null;
    return service;
}
/**
 * @override
 */ Service.prototype.get = function get(name) {
    return this.methods[name] || Namespace.prototype.get.call(this, name);
};
/**
 * @override
 */ Service.prototype.resolveAll = function resolveAll() {
    var methods = this.methodsArray;
    for(var i = 0; i < methods.length; ++i)methods[i].resolve();
    return Namespace.prototype.resolve.call(this);
};
/**
 * @override
 */ Service.prototype.add = function add(object) {
    /* istanbul ignore if */ if (this.get(object.name)) throw Error("duplicate name '" + object.name + "' in " + this);
    if (object instanceof Method) {
        this.methods[object.name] = object;
        object.parent = this;
        return clearCache(this);
    }
    return Namespace.prototype.add.call(this, object);
};
/**
 * @override
 */ Service.prototype.remove = function remove(object) {
    if (object instanceof Method) {
        /* istanbul ignore if */ if (this.methods[object.name] !== object) throw Error(object + " is not a member of " + this);
        delete this.methods[object.name];
        object.parent = null;
        return clearCache(this);
    }
    return Namespace.prototype.remove.call(this, object);
};
/**
 * Creates a runtime service using the specified rpc implementation.
 * @param {RPCImpl} rpcImpl RPC implementation
 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
 * @returns {rpc.Service} RPC service. Useful where requests and/or responses are streamed.
 */ Service.prototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {
    var rpcService = new rpc.Service(rpcImpl, requestDelimited, responseDelimited);
    for(var i = 0, method; i < /* initializes */ this.methodsArray.length; ++i){
        var methodName = util.lcFirst((method = this._methodsArray[i]).resolve().name).replace(/[^$\w_]/g, "");
        rpcService[methodName] = util.codegen([
            "r",
            "c"
        ], util.isReserved(methodName) ? methodName + "_" : methodName)("return this.rpcCall(m,q,s,r,c)")({
            m: method,
            q: method.resolvedRequestType.ctor,
            s: method.resolvedResponseType.ctor
        });
    }
    return rpcService;
};

},{"2d7214256424c24e":"4idoA","2b3e7b1f12f380ec":"eMAud","caa7993ffa75fbfd":"9qDrQ","10e47e1259e7827b":"7VLEv"}],"eMAud":[function(require,module,exports) {
"use strict";
module.exports = Method;
// extends ReflectionObject
var ReflectionObject = require("e54cdabf2c5a6b4f");
((Method.prototype = Object.create(ReflectionObject.prototype)).constructor = Method).className = "Method";
var util = require("ceab0854e09d86f3");
/**
 * Constructs a new service method instance.
 * @classdesc Reflected service method.
 * @extends ReflectionObject
 * @constructor
 * @param {string} name Method name
 * @param {string|undefined} type Method type, usually `"rpc"`
 * @param {string} requestType Request message type
 * @param {string} responseType Response message type
 * @param {boolean|Object.<string,*>} [requestStream] Whether the request is streamed
 * @param {boolean|Object.<string,*>} [responseStream] Whether the response is streamed
 * @param {Object.<string,*>} [options] Declared options
 * @param {string} [comment] The comment for this method
 * @param {Object.<string,*>} [parsedOptions] Declared options, properly parsed into an object
 */ function Method(name, type, requestType, responseType, requestStream, responseStream, options, comment, parsedOptions) {
    /* istanbul ignore next */ if (util.isObject(requestStream)) {
        options = requestStream;
        requestStream = responseStream = undefined;
    } else if (util.isObject(responseStream)) {
        options = responseStream;
        responseStream = undefined;
    }
    /* istanbul ignore if */ if (!(type === undefined || util.isString(type))) throw TypeError("type must be a string");
    /* istanbul ignore if */ if (!util.isString(requestType)) throw TypeError("requestType must be a string");
    /* istanbul ignore if */ if (!util.isString(responseType)) throw TypeError("responseType must be a string");
    ReflectionObject.call(this, name, options);
    /**
     * Method type.
     * @type {string}
     */ this.type = type || "rpc"; // toJSON
    /**
     * Request type.
     * @type {string}
     */ this.requestType = requestType; // toJSON, marker
    /**
     * Whether requests are streamed or not.
     * @type {boolean|undefined}
     */ this.requestStream = requestStream ? true : undefined; // toJSON
    /**
     * Response type.
     * @type {string}
     */ this.responseType = responseType; // toJSON
    /**
     * Whether responses are streamed or not.
     * @type {boolean|undefined}
     */ this.responseStream = responseStream ? true : undefined; // toJSON
    /**
     * Resolved request type.
     * @type {Type|null}
     */ this.resolvedRequestType = null;
    /**
     * Resolved response type.
     * @type {Type|null}
     */ this.resolvedResponseType = null;
    /**
     * Comment for this method
     * @type {string|null}
     */ this.comment = comment;
    /**
     * Options properly parsed into an object
     */ this.parsedOptions = parsedOptions;
}
/**
 * Method descriptor.
 * @interface IMethod
 * @property {string} [type="rpc"] Method type
 * @property {string} requestType Request type
 * @property {string} responseType Response type
 * @property {boolean} [requestStream=false] Whether requests are streamed
 * @property {boolean} [responseStream=false] Whether responses are streamed
 * @property {Object.<string,*>} [options] Method options
 * @property {string} comment Method comments
 * @property {Object.<string,*>} [parsedOptions] Method options properly parsed into an object
 */ /**
 * Constructs a method from a method descriptor.
 * @param {string} name Method name
 * @param {IMethod} json Method descriptor
 * @returns {Method} Created method
 * @throws {TypeError} If arguments are invalid
 */ Method.fromJSON = function fromJSON(name, json) {
    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options, json.comment, json.parsedOptions);
};
/**
 * Converts this method to a method descriptor.
 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
 * @returns {IMethod} Method descriptor
 */ Method.prototype.toJSON = function toJSON(toJSONOptions) {
    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
    return util.toObject([
        "type",
        this.type !== "rpc" && /* istanbul ignore next */ this.type || undefined,
        "requestType",
        this.requestType,
        "requestStream",
        this.requestStream,
        "responseType",
        this.responseType,
        "responseStream",
        this.responseStream,
        "options",
        this.options,
        "comment",
        keepComments ? this.comment : undefined,
        "parsedOptions",
        this.parsedOptions
    ]);
};
/**
 * @override
 */ Method.prototype.resolve = function resolve() {
    /* istanbul ignore if */ if (this.resolved) return this;
    this.resolvedRequestType = this.parent.lookupType(this.requestType);
    this.resolvedResponseType = this.parent.lookupType(this.responseType);
    return ReflectionObject.prototype.resolve.call(this);
};

},{"e54cdabf2c5a6b4f":"cWxlI","ceab0854e09d86f3":"9qDrQ"}],"3paTM":[function(require,module,exports) {
"use strict";
module.exports = Message;
var util = require("265369b258276eba");
/**
 * Constructs a new message instance.
 * @classdesc Abstract runtime message.
 * @constructor
 * @param {Properties<T>} [properties] Properties to set
 * @template T extends object = object
 */ function Message(properties) {
    // not used internally
    if (properties) for(var keys = Object.keys(properties), i = 0; i < keys.length; ++i)this[keys[i]] = properties[keys[i]];
}
/**
 * Reference to the reflected type.
 * @name Message.$type
 * @type {Type}
 * @readonly
 */ /**
 * Reference to the reflected type.
 * @name Message#$type
 * @type {Type}
 * @readonly
 */ /*eslint-disable valid-jsdoc*/ /**
 * Creates a new message of this type using the specified properties.
 * @param {Object.<string,*>} [properties] Properties to set
 * @returns {Message<T>} Message instance
 * @template T extends Message<T>
 * @this Constructor<T>
 */ Message.create = function create(properties) {
    return this.$type.create(properties);
};
/**
 * Encodes a message of this type.
 * @param {T|Object.<string,*>} message Message to encode
 * @param {Writer} [writer] Writer to use
 * @returns {Writer} Writer
 * @template T extends Message<T>
 * @this Constructor<T>
 */ Message.encode = function encode(message, writer) {
    return this.$type.encode(message, writer);
};
/**
 * Encodes a message of this type preceeded by its length as a varint.
 * @param {T|Object.<string,*>} message Message to encode
 * @param {Writer} [writer] Writer to use
 * @returns {Writer} Writer
 * @template T extends Message<T>
 * @this Constructor<T>
 */ Message.encodeDelimited = function encodeDelimited(message, writer) {
    return this.$type.encodeDelimited(message, writer);
};
/**
 * Decodes a message of this type.
 * @name Message.decode
 * @function
 * @param {Reader|Uint8Array} reader Reader or buffer to decode
 * @returns {T} Decoded message
 * @template T extends Message<T>
 * @this Constructor<T>
 */ Message.decode = function decode(reader) {
    return this.$type.decode(reader);
};
/**
 * Decodes a message of this type preceeded by its length as a varint.
 * @name Message.decodeDelimited
 * @function
 * @param {Reader|Uint8Array} reader Reader or buffer to decode
 * @returns {T} Decoded message
 * @template T extends Message<T>
 * @this Constructor<T>
 */ Message.decodeDelimited = function decodeDelimited(reader) {
    return this.$type.decodeDelimited(reader);
};
/**
 * Verifies a message of this type.
 * @name Message.verify
 * @function
 * @param {Object.<string,*>} message Plain object to verify
 * @returns {string|null} `null` if valid, otherwise the reason why it is not
 */ Message.verify = function verify(message) {
    return this.$type.verify(message);
};
/**
 * Creates a new message of this type from a plain object. Also converts values to their respective internal types.
 * @param {Object.<string,*>} object Plain object
 * @returns {T} Message instance
 * @template T extends Message<T>
 * @this Constructor<T>
 */ Message.fromObject = function fromObject(object) {
    return this.$type.fromObject(object);
};
/**
 * Creates a plain object from a message of this type. Also converts values to other types if specified.
 * @param {T} message Message instance
 * @param {IConversionOptions} [options] Conversion options
 * @returns {Object.<string,*>} Plain object
 * @template T extends Message<T>
 * @this Constructor<T>
 */ Message.toObject = function toObject(message, options) {
    return this.$type.toObject(message, options);
};
/**
 * Converts this message to JSON.
 * @returns {Object.<string,*>} JSON object
 */ Message.prototype.toJSON = function toJSON() {
    return this.$type.toObject(this, util.toJSONOptions);
}; /*eslint-enable valid-jsdoc*/ 

},{"265369b258276eba":"k72f7"}],"5dWn6":[function(require,module,exports) {
"use strict";
module.exports = decoder;
var Enum = require("4c81c0475c02e578"), types = require("f7b00e6c673c7de9"), util = require("ca3cf2a07710e88a");
function missing(field) {
    return "missing required '" + field.name + "'";
}
/**
 * Generates a decoder specific to the specified message type.
 * @param {Type} mtype Message type
 * @returns {Codegen} Codegen instance
 */ function decoder(mtype) {
    /* eslint-disable no-unexpected-multiline */ var gen = util.codegen([
        "r",
        "l"
    ], mtype.name + "$decode")("if(!(r instanceof Reader))")("r=Reader.create(r)")("var c=l===undefined?r.len:r.pos+l,m=new this.ctor" + (mtype.fieldsArray.filter(function(field) {
        return field.map;
    }).length ? ",k,value" : ""))("while(r.pos<c){")("var t=r.uint32()");
    if (mtype.group) gen("if((t&7)===4)")("break");
    gen("switch(t>>>3){");
    var i = 0;
    for(; i < /* initializes */ mtype.fieldsArray.length; ++i){
        var field = mtype._fieldsArray[i].resolve(), type = field.resolvedType instanceof Enum ? "int32" : field.type, ref = "m" + util.safeProp(field.name);
        gen("case %i:", field.id);
        // Map fields
        if (field.map) {
            gen("if(%s===util.emptyObject)", ref)("%s={}", ref)("var c2 = r.uint32()+r.pos");
            if (types.defaults[field.keyType] !== undefined) gen("k=%j", types.defaults[field.keyType]);
            else gen("k=null");
            if (types.defaults[type] !== undefined) gen("value=%j", types.defaults[type]);
            else gen("value=null");
            gen("while(r.pos<c2){")("var tag2=r.uint32()")("switch(tag2>>>3){")("case 1: k=r.%s(); break", field.keyType)("case 2:");
            if (types.basic[type] === undefined) gen("value=types[%i].decode(r,r.uint32())", i); // can't be groups
            else gen("value=r.%s()", type);
            gen("break")("default:")("r.skipType(tag2&7)")("break")("}")("}");
            if (types.long[field.keyType] !== undefined) gen('%s[typeof k==="object"?util.longToHash(k):k]=value', ref);
            else gen("%s[k]=value", ref);
        // Repeated fields
        } else if (field.repeated) {
            gen("if(!(%s&&%s.length))", ref, ref)("%s=[]", ref);
            // Packable (always check for forward and backward compatiblity)
            if (types.packed[type] !== undefined) gen("if((t&7)===2){")("var c2=r.uint32()+r.pos")("while(r.pos<c2)")("%s.push(r.%s())", ref, type)("}else");
            // Non-packed
            if (types.basic[type] === undefined) gen(field.resolvedType.group ? "%s.push(types[%i].decode(r))" : "%s.push(types[%i].decode(r,r.uint32()))", ref, i);
            else gen("%s.push(r.%s())", ref, type);
        // Non-repeated
        } else if (types.basic[type] === undefined) gen(field.resolvedType.group ? "%s=types[%i].decode(r)" : "%s=types[%i].decode(r,r.uint32())", ref, i);
        else gen("%s=r.%s()", ref, type);
        gen("break");
    // Unknown fields
    }
    gen("default:")("r.skipType(t&7)")("break")("}")("}");
    // Field presence
    for(i = 0; i < mtype._fieldsArray.length; ++i){
        var rfield = mtype._fieldsArray[i];
        if (rfield.required) gen("if(!m.hasOwnProperty(%j))", rfield.name)("throw util.ProtocolError(%j,{instance:m})", missing(rfield));
    }
    return gen("return m");
/* eslint-enable no-unexpected-multiline */ }

},{"4c81c0475c02e578":"9srcK","f7b00e6c673c7de9":"a31FO","ca3cf2a07710e88a":"9qDrQ"}],"4bGEh":[function(require,module,exports) {
"use strict";
module.exports = verifier;
var Enum = require("b386bc2dcad24b04"), util = require("bc9554670f678725");
function invalid(field, expected) {
    return field.name + ": " + expected + (field.repeated && expected !== "array" ? "[]" : field.map && expected !== "object" ? "{k:" + field.keyType + "}" : "") + " expected";
}
/**
 * Generates a partial value verifier.
 * @param {Codegen} gen Codegen instance
 * @param {Field} field Reflected field
 * @param {number} fieldIndex Field index
 * @param {string} ref Variable reference
 * @returns {Codegen} Codegen instance
 * @ignore
 */ function genVerifyValue(gen, field, fieldIndex, ref) {
    /* eslint-disable no-unexpected-multiline */ if (field.resolvedType) {
        if (field.resolvedType instanceof Enum) {
            gen("switch(%s){", ref)("default:")("return%j", invalid(field, "enum value"));
            for(var keys = Object.keys(field.resolvedType.values), j = 0; j < keys.length; ++j)gen("case %i:", field.resolvedType.values[keys[j]]);
            gen("break")("}");
        } else gen("{")("var e=types[%i].verify(%s);", fieldIndex, ref)("if(e)")("return%j+e", field.name + ".")("}");
    } else switch(field.type){
        case "int32":
        case "uint32":
        case "sint32":
        case "fixed32":
        case "sfixed32":
            gen("if(!util.isInteger(%s))", ref)("return%j", invalid(field, "integer"));
            break;
        case "int64":
        case "uint64":
        case "sint64":
        case "fixed64":
        case "sfixed64":
            gen("if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))", ref, ref, ref, ref)("return%j", invalid(field, "integer|Long"));
            break;
        case "float":
        case "double":
            gen('if(typeof %s!=="number")', ref)("return%j", invalid(field, "number"));
            break;
        case "bool":
            gen('if(typeof %s!=="boolean")', ref)("return%j", invalid(field, "boolean"));
            break;
        case "string":
            gen("if(!util.isString(%s))", ref)("return%j", invalid(field, "string"));
            break;
        case "bytes":
            gen('if(!(%s&&typeof %s.length==="number"||util.isString(%s)))', ref, ref, ref)("return%j", invalid(field, "buffer"));
            break;
    }
    return gen;
/* eslint-enable no-unexpected-multiline */ }
/**
 * Generates a partial key verifier.
 * @param {Codegen} gen Codegen instance
 * @param {Field} field Reflected field
 * @param {string} ref Variable reference
 * @returns {Codegen} Codegen instance
 * @ignore
 */ function genVerifyKey(gen, field, ref) {
    /* eslint-disable no-unexpected-multiline */ switch(field.keyType){
        case "int32":
        case "uint32":
        case "sint32":
        case "fixed32":
        case "sfixed32":
            gen("if(!util.key32Re.test(%s))", ref)("return%j", invalid(field, "integer key"));
            break;
        case "int64":
        case "uint64":
        case "sint64":
        case "fixed64":
        case "sfixed64":
            gen("if(!util.key64Re.test(%s))", ref) // see comment above: x is ok, d is not
            ("return%j", invalid(field, "integer|Long key"));
            break;
        case "bool":
            gen("if(!util.key2Re.test(%s))", ref)("return%j", invalid(field, "boolean key"));
            break;
    }
    return gen;
/* eslint-enable no-unexpected-multiline */ }
/**
 * Generates a verifier specific to the specified message type.
 * @param {Type} mtype Message type
 * @returns {Codegen} Codegen instance
 */ function verifier(mtype) {
    /* eslint-disable no-unexpected-multiline */ var gen = util.codegen([
        "m"
    ], mtype.name + "$verify")('if(typeof m!=="object"||m===null)')("return%j", "object expected");
    var oneofs = mtype.oneofsArray, seenFirstField = {};
    if (oneofs.length) gen("var p={}");
    for(var i = 0; i < /* initializes */ mtype.fieldsArray.length; ++i){
        var field = mtype._fieldsArray[i].resolve(), ref = "m" + util.safeProp(field.name);
        if (field.optional) gen("if(%s!=null&&m.hasOwnProperty(%j)){", ref, field.name); // !== undefined && !== null
        // map fields
        if (field.map) {
            gen("if(!util.isObject(%s))", ref)("return%j", invalid(field, "object"))("var k=Object.keys(%s)", ref)("for(var i=0;i<k.length;++i){");
            genVerifyKey(gen, field, "k[i]");
            genVerifyValue(gen, field, i, ref + "[k[i]]")("}");
        // repeated fields
        } else if (field.repeated) {
            gen("if(!Array.isArray(%s))", ref)("return%j", invalid(field, "array"))("for(var i=0;i<%s.length;++i){", ref);
            genVerifyValue(gen, field, i, ref + "[i]")("}");
        // required or present fields
        } else {
            if (field.partOf) {
                var oneofProp = util.safeProp(field.partOf.name);
                if (seenFirstField[field.partOf.name] === 1) gen("if(p%s===1)", oneofProp)("return%j", field.partOf.name + ": multiple values");
                seenFirstField[field.partOf.name] = 1;
                gen("p%s=1", oneofProp);
            }
            genVerifyValue(gen, field, i, ref);
        }
        if (field.optional) gen("}");
    }
    return gen("return null");
/* eslint-enable no-unexpected-multiline */ }

},{"b386bc2dcad24b04":"9srcK","bc9554670f678725":"9qDrQ"}],"blBnB":[function(require,module,exports) {
"use strict";
/**
 * Runtime message from/to plain object converters.
 * @namespace
 */ var converter = exports;
var Enum = require("eb432c90fd27ff82"), util = require("70dab9bff46509bc");
/**
 * Generates a partial value fromObject conveter.
 * @param {Codegen} gen Codegen instance
 * @param {Field} field Reflected field
 * @param {number} fieldIndex Field index
 * @param {string} prop Property reference
 * @returns {Codegen} Codegen instance
 * @ignore
 */ function genValuePartial_fromObject(gen, field, fieldIndex, prop) {
    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */ if (field.resolvedType) {
        if (field.resolvedType instanceof Enum) {
            gen("switch(d%s){", prop);
            for(var values = field.resolvedType.values, keys = Object.keys(values), i = 0; i < keys.length; ++i){
                if (field.repeated && values[keys[i]] === field.typeDefault) gen("default:");
                gen("case%j:", keys[i])("case %i:", values[keys[i]])("m%s=%j", prop, values[keys[i]])("break");
            }
            gen("}");
        } else gen('if(typeof d%s!=="object")', prop)("throw TypeError(%j)", field.fullName + ": object expected")("m%s=types[%i].fromObject(d%s)", prop, fieldIndex, prop);
    } else {
        var isUnsigned = false;
        switch(field.type){
            case "double":
            case "float":
                gen("m%s=Number(d%s)", prop, prop); // also catches "NaN", "Infinity"
                break;
            case "uint32":
            case "fixed32":
                gen("m%s=d%s>>>0", prop, prop);
                break;
            case "int32":
            case "sint32":
            case "sfixed32":
                gen("m%s=d%s|0", prop, prop);
                break;
            case "uint64":
                isUnsigned = true;
            // eslint-disable-line no-fallthrough
            case "int64":
            case "sint64":
            case "fixed64":
            case "sfixed64":
                gen("if(util.Long)")("(m%s=util.Long.fromValue(d%s)).unsigned=%j", prop, prop, isUnsigned)('else if(typeof d%s==="string")', prop)("m%s=parseInt(d%s,10)", prop, prop)('else if(typeof d%s==="number")', prop)("m%s=d%s", prop, prop)('else if(typeof d%s==="object")', prop)("m%s=new util.LongBits(d%s.low>>>0,d%s.high>>>0).toNumber(%s)", prop, prop, prop, isUnsigned ? "true" : "");
                break;
            case "bytes":
                gen('if(typeof d%s==="string")', prop)("util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)", prop, prop, prop)("else if(d%s.length)", prop)("m%s=d%s", prop, prop);
                break;
            case "string":
                gen("m%s=String(d%s)", prop, prop);
                break;
            case "bool":
                gen("m%s=Boolean(d%s)", prop, prop);
                break;
        }
    }
    return gen;
/* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */ }
/**
 * Generates a plain object to runtime message converter specific to the specified message type.
 * @param {Type} mtype Message type
 * @returns {Codegen} Codegen instance
 */ converter.fromObject = function fromObject(mtype) {
    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */ var fields = mtype.fieldsArray;
    var gen = util.codegen([
        "d"
    ], mtype.name + "$fromObject")("if(d instanceof this.ctor)")("return d");
    if (!fields.length) return gen("return new this.ctor");
    gen("var m=new this.ctor");
    for(var i = 0; i < fields.length; ++i){
        var field = fields[i].resolve(), prop = util.safeProp(field.name);
        // Map fields
        if (field.map) {
            gen("if(d%s){", prop)('if(typeof d%s!=="object")', prop)("throw TypeError(%j)", field.fullName + ": object expected")("m%s={}", prop)("for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){", prop);
            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + "[ks[i]]")("}")("}");
        // Repeated fields
        } else if (field.repeated) {
            gen("if(d%s){", prop)("if(!Array.isArray(d%s))", prop)("throw TypeError(%j)", field.fullName + ": array expected")("m%s=[]", prop)("for(var i=0;i<d%s.length;++i){", prop);
            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + "[i]")("}")("}");
        // Non-repeated fields
        } else {
            if (!(field.resolvedType instanceof Enum)) gen // no need to test for null/undefined if an enum (uses switch)
            ("if(d%s!=null){", prop); // !== undefined && !== null
            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop);
            if (!(field.resolvedType instanceof Enum)) gen("}");
        }
    }
    return gen("return m");
/* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */ };
/**
 * Generates a partial value toObject converter.
 * @param {Codegen} gen Codegen instance
 * @param {Field} field Reflected field
 * @param {number} fieldIndex Field index
 * @param {string} prop Property reference
 * @returns {Codegen} Codegen instance
 * @ignore
 */ function genValuePartial_toObject(gen, field, fieldIndex, prop) {
    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */ if (field.resolvedType) {
        if (field.resolvedType instanceof Enum) gen("d%s=o.enums===String?types[%i].values[m%s]:m%s", prop, fieldIndex, prop, prop);
        else gen("d%s=types[%i].toObject(m%s,o)", prop, fieldIndex, prop);
    } else {
        var isUnsigned = false;
        switch(field.type){
            case "double":
            case "float":
                gen("d%s=o.json&&!isFinite(m%s)?String(m%s):m%s", prop, prop, prop, prop);
                break;
            case "uint64":
                isUnsigned = true;
            // eslint-disable-line no-fallthrough
            case "int64":
            case "sint64":
            case "fixed64":
            case "sfixed64":
                gen('if(typeof m%s==="number")', prop)("d%s=o.longs===String?String(m%s):m%s", prop, prop, prop)("else") // Long-like
                ("d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low>>>0,m%s.high>>>0).toNumber(%s):m%s", prop, prop, prop, prop, isUnsigned ? "true" : "", prop);
                break;
            case "bytes":
                gen("d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s", prop, prop, prop, prop, prop);
                break;
            default:
                gen("d%s=m%s", prop, prop);
                break;
        }
    }
    return gen;
/* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */ }
/**
 * Generates a runtime message to plain object converter specific to the specified message type.
 * @param {Type} mtype Message type
 * @returns {Codegen} Codegen instance
 */ converter.toObject = function toObject(mtype) {
    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */ var fields = mtype.fieldsArray.slice().sort(util.compareFieldsById);
    if (!fields.length) return util.codegen()("return {}");
    var gen = util.codegen([
        "m",
        "o"
    ], mtype.name + "$toObject")("if(!o)")("o={}")("var d={}");
    var repeatedFields = [], mapFields = [], normalFields = [], i = 0;
    for(; i < fields.length; ++i)if (!fields[i].partOf) (fields[i].resolve().repeated ? repeatedFields : fields[i].map ? mapFields : normalFields).push(fields[i]);
    if (repeatedFields.length) {
        gen("if(o.arrays||o.defaults){");
        for(i = 0; i < repeatedFields.length; ++i)gen("d%s=[]", util.safeProp(repeatedFields[i].name));
        gen("}");
    }
    if (mapFields.length) {
        gen("if(o.objects||o.defaults){");
        for(i = 0; i < mapFields.length; ++i)gen("d%s={}", util.safeProp(mapFields[i].name));
        gen("}");
    }
    if (normalFields.length) {
        gen("if(o.defaults){");
        for(i = 0; i < normalFields.length; ++i){
            var field = normalFields[i], prop = util.safeProp(field.name);
            if (field.resolvedType instanceof Enum) gen("d%s=o.enums===String?%j:%j", prop, field.resolvedType.valuesById[field.typeDefault], field.typeDefault);
            else if (field.long) gen("if(util.Long){")("var n=new util.Long(%i,%i,%j)", field.typeDefault.low, field.typeDefault.high, field.typeDefault.unsigned)("d%s=o.longs===String?n.toString():o.longs===Number?n.toNumber():n", prop)("}else")("d%s=o.longs===String?%j:%i", prop, field.typeDefault.toString(), field.typeDefault.toNumber());
            else if (field.bytes) {
                var arrayDefault = "[" + Array.prototype.slice.call(field.typeDefault).join(",") + "]";
                gen("if(o.bytes===String)d%s=%j", prop, String.fromCharCode.apply(String, field.typeDefault))("else{")("d%s=%s", prop, arrayDefault)("if(o.bytes!==Array)d%s=util.newBuffer(d%s)", prop, prop)("}");
            } else gen("d%s=%j", prop, field.typeDefault); // also messages (=null)
        }
        gen("}");
    }
    var hasKs2 = false;
    for(i = 0; i < fields.length; ++i){
        var field = fields[i], index = mtype._fieldsArray.indexOf(field), prop = util.safeProp(field.name);
        if (field.map) {
            if (!hasKs2) {
                hasKs2 = true;
                gen("var ks2");
            }
            gen("if(m%s&&(ks2=Object.keys(m%s)).length){", prop, prop)("d%s={}", prop)("for(var j=0;j<ks2.length;++j){");
            genValuePartial_toObject(gen, field, /* sorted */ index, prop + "[ks2[j]]")("}");
        } else if (field.repeated) {
            gen("if(m%s&&m%s.length){", prop, prop)("d%s=[]", prop)("for(var j=0;j<m%s.length;++j){", prop);
            genValuePartial_toObject(gen, field, /* sorted */ index, prop + "[j]")("}");
        } else {
            gen("if(m%s!=null&&m.hasOwnProperty(%j)){", prop, field.name); // !== undefined && !== null
            genValuePartial_toObject(gen, field, /* sorted */ index, prop);
            if (field.partOf) gen("if(o.oneofs)")("d%s=%j", util.safeProp(field.partOf.name), field.name);
        }
        gen("}");
    }
    return gen("return d");
/* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */ };

},{"eb432c90fd27ff82":"9srcK","70dab9bff46509bc":"9qDrQ"}],"luHkl":[function(require,module,exports) {
"use strict";
/**
 * Wrappers for common types.
 * @type {Object.<string,IWrapper>}
 * @const
 */ var wrappers = exports;
var Message = require("9251c7e47cefab1b");
/**
 * From object converter part of an {@link IWrapper}.
 * @typedef WrapperFromObjectConverter
 * @type {function}
 * @param {Object.<string,*>} object Plain object
 * @returns {Message<{}>} Message instance
 * @this Type
 */ /**
 * To object converter part of an {@link IWrapper}.
 * @typedef WrapperToObjectConverter
 * @type {function}
 * @param {Message<{}>} message Message instance
 * @param {IConversionOptions} [options] Conversion options
 * @returns {Object.<string,*>} Plain object
 * @this Type
 */ /**
 * Common type wrapper part of {@link wrappers}.
 * @interface IWrapper
 * @property {WrapperFromObjectConverter} [fromObject] From object converter
 * @property {WrapperToObjectConverter} [toObject] To object converter
 */ // Custom wrapper for Any
wrappers[".google.protobuf.Any"] = {
    fromObject: function(object) {
        // unwrap value type if mapped
        if (object && object["@type"]) {
            // Only use fully qualified type name after the last '/'
            var name = object["@type"].substring(object["@type"].lastIndexOf("/") + 1);
            var type = this.lookup(name);
            /* istanbul ignore else */ if (type) {
                // type_url does not accept leading "."
                var type_url = object["@type"].charAt(0) === "." ? object["@type"].substr(1) : object["@type"];
                // type_url prefix is optional, but path seperator is required
                if (type_url.indexOf("/") === -1) type_url = "/" + type_url;
                return this.create({
                    type_url: type_url,
                    value: type.encode(type.fromObject(object)).finish()
                });
            }
        }
        return this.fromObject(object);
    },
    toObject: function(message, options) {
        // Default prefix
        var googleApi = "type.googleapis.com/";
        var prefix = "";
        var name = "";
        // decode value if requested and unmapped
        if (options && options.json && message.type_url && message.value) {
            // Only use fully qualified type name after the last '/'
            name = message.type_url.substring(message.type_url.lastIndexOf("/") + 1);
            // Separate the prefix used
            prefix = message.type_url.substring(0, message.type_url.lastIndexOf("/") + 1);
            var type = this.lookup(name);
            /* istanbul ignore else */ if (type) message = type.decode(message.value);
        }
        // wrap value if unmapped
        if (!(message instanceof this.ctor) && message instanceof Message) {
            var object = message.$type.toObject(message, options);
            var messageName = message.$type.fullName[0] === "." ? message.$type.fullName.substr(1) : message.$type.fullName;
            // Default to type.googleapis.com prefix if no prefix is used
            if (prefix === "") prefix = googleApi;
            name = prefix + messageName;
            object["@type"] = name;
            return object;
        }
        return this.toObject(message, options);
    }
};

},{"9251c7e47cefab1b":"3paTM"}],"heZNO":[function(require,module,exports) {
"use strict";
module.exports = Root;
// extends Namespace
var Namespace = require("19f025d92e764083");
((Root.prototype = Object.create(Namespace.prototype)).constructor = Root).className = "Root";
var Field = require("e8ac8603d5e26cc0"), Enum = require("93a82a214a2b2853"), OneOf = require("bab7b74b9c10d745"), util = require("190170fae0946a3e");
var Type, parse, common; // "
/**
 * Constructs a new root namespace instance.
 * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.
 * @extends NamespaceBase
 * @constructor
 * @param {Object.<string,*>} [options] Top level options
 */ function Root(options) {
    Namespace.call(this, "", options);
    /**
     * Deferred extension fields.
     * @type {Field[]}
     */ this.deferred = [];
    /**
     * Resolved file names of loaded files.
     * @type {string[]}
     */ this.files = [];
}
/**
 * Loads a namespace descriptor into a root namespace.
 * @param {INamespace} json Nameespace descriptor
 * @param {Root} [root] Root namespace, defaults to create a new one if omitted
 * @returns {Root} Root namespace
 */ Root.fromJSON = function fromJSON(json, root) {
    if (!root) root = new Root();
    if (json.options) root.setOptions(json.options);
    return root.addJSON(json.nested);
};
/**
 * Resolves the path of an imported file, relative to the importing origin.
 * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.
 * @function
 * @param {string} origin The file name of the importing file
 * @param {string} target The file name being imported
 * @returns {string|null} Resolved path to `target` or `null` to skip the file
 */ Root.prototype.resolvePath = util.path.resolve;
/**
 * Fetch content from file path or url
 * This method exists so you can override it with your own logic.
 * @function
 * @param {string} path File path or url
 * @param {FetchCallback} callback Callback function
 * @returns {undefined}
 */ Root.prototype.fetch = util.fetch;
// A symbol-like function to safely signal synchronous loading
/* istanbul ignore next */ function SYNC() {} // eslint-disable-line no-empty-function
/**
 * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.
 * @param {string|string[]} filename Names of one or multiple files to load
 * @param {IParseOptions} options Parse options
 * @param {LoadCallback} callback Callback function
 * @returns {undefined}
 */ Root.prototype.load = function load(filename, options, callback) {
    if (typeof options === "function") {
        callback = options;
        options = undefined;
    }
    var self = this;
    if (!callback) return util.asPromise(load, self, filename, options);
    var sync = callback === SYNC; // undocumented
    // Finishes loading by calling the callback (exactly once)
    function finish(err, root) {
        /* istanbul ignore if */ if (!callback) return;
        var cb = callback;
        callback = null;
        if (sync) throw err;
        cb(err, root);
    }
    // Bundled definition existence checking
    function getBundledFileName(filename) {
        var idx = filename.lastIndexOf("google/protobuf/");
        if (idx > -1) {
            var altname = filename.substring(idx);
            if (altname in common) return altname;
        }
        return null;
    }
    // Processes a single file
    function process(filename, source) {
        try {
            if (util.isString(source) && source.charAt(0) === "{") source = JSON.parse(source);
            if (!util.isString(source)) self.setOptions(source.options).addJSON(source.nested);
            else {
                parse.filename = filename;
                var parsed = parse(source, self, options), resolved, i = 0;
                if (parsed.imports) {
                    for(; i < parsed.imports.length; ++i)if (resolved = getBundledFileName(parsed.imports[i]) || self.resolvePath(filename, parsed.imports[i])) fetch(resolved);
                }
                if (parsed.weakImports) {
                    for(i = 0; i < parsed.weakImports.length; ++i)if (resolved = getBundledFileName(parsed.weakImports[i]) || self.resolvePath(filename, parsed.weakImports[i])) fetch(resolved, true);
                }
            }
        } catch (err) {
            finish(err);
        }
        if (!sync && !queued) finish(null, self); // only once anyway
    }
    // Fetches a single file
    function fetch(filename, weak) {
        // Skip if already loaded / attempted
        if (self.files.indexOf(filename) > -1) return;
        self.files.push(filename);
        // Shortcut bundled definitions
        if (filename in common) {
            if (sync) process(filename, common[filename]);
            else {
                ++queued;
                setTimeout(function() {
                    --queued;
                    process(filename, common[filename]);
                });
            }
            return;
        }
        // Otherwise fetch from disk or network
        if (sync) {
            var source;
            try {
                source = util.fs.readFileSync(filename).toString("utf8");
            } catch (err) {
                if (!weak) finish(err);
                return;
            }
            process(filename, source);
        } else {
            ++queued;
            self.fetch(filename, function(err, source) {
                --queued;
                /* istanbul ignore if */ if (!callback) return; // terminated meanwhile
                if (err) {
                    /* istanbul ignore else */ if (!weak) finish(err);
                    else if (!queued) finish(null, self);
                    return;
                }
                process(filename, source);
            });
        }
    }
    var queued = 0;
    // Assembling the root namespace doesn't require working type
    // references anymore, so we can load everything in parallel
    if (util.isString(filename)) filename = [
        filename
    ];
    for(var i = 0, resolved; i < filename.length; ++i)if (resolved = self.resolvePath("", filename[i])) fetch(resolved);
    if (sync) return self;
    if (!queued) finish(null, self);
    return undefined;
};
// function load(filename:string, options:IParseOptions, callback:LoadCallback):undefined
/**
 * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.
 * @function Root#load
 * @param {string|string[]} filename Names of one or multiple files to load
 * @param {LoadCallback} callback Callback function
 * @returns {undefined}
 * @variation 2
 */ // function load(filename:string, callback:LoadCallback):undefined
/**
 * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.
 * @function Root#load
 * @param {string|string[]} filename Names of one or multiple files to load
 * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.
 * @returns {Promise<Root>} Promise
 * @variation 3
 */ // function load(filename:string, [options:IParseOptions]):Promise<Root>
/**
 * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace (node only).
 * @function Root#loadSync
 * @param {string|string[]} filename Names of one or multiple files to load
 * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.
 * @returns {Root} Root namespace
 * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid
 */ Root.prototype.loadSync = function loadSync(filename, options) {
    if (!util.isNode) throw Error("not supported");
    return this.load(filename, options, SYNC);
};
/**
 * @override
 */ Root.prototype.resolveAll = function resolveAll() {
    if (this.deferred.length) throw Error("unresolvable extensions: " + this.deferred.map(function(field) {
        return "'extend " + field.extend + "' in " + field.parent.fullName;
    }).join(", "));
    return Namespace.prototype.resolveAll.call(this);
};
// only uppercased (and thus conflict-free) children are exposed, see below
var exposeRe = /^[A-Z]/;
/**
 * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.
 * @param {Root} root Root instance
 * @param {Field} field Declaring extension field witin the declaring type
 * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise
 * @inner
 * @ignore
 */ function tryHandleExtension(root, field) {
    var extendedType = field.parent.lookup(field.extend);
    if (extendedType) {
        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);
        sisterField.declaringField = field;
        field.extensionField = sisterField;
        extendedType.add(sisterField);
        return true;
    }
    return false;
}
/**
 * Called when any object is added to this root or its sub-namespaces.
 * @param {ReflectionObject} object Object added
 * @returns {undefined}
 * @private
 */ Root.prototype._handleAdd = function _handleAdd(object) {
    if (object instanceof Field) {
        if (/* an extension field (implies not part of a oneof) */ object.extend !== undefined && /* not already handled */ !object.extensionField) {
            if (!tryHandleExtension(this, object)) this.deferred.push(object);
        }
    } else if (object instanceof Enum) {
        if (exposeRe.test(object.name)) object.parent[object.name] = object.values; // expose enum values as property of its parent
    } else if (!(object instanceof OneOf)) /* everything else is a namespace */ {
        if (object instanceof Type) for(var i = 0; i < this.deferred.length;)if (tryHandleExtension(this, this.deferred[i])) this.deferred.splice(i, 1);
        else ++i;
        for(var j = 0; j < /* initializes */ object.nestedArray.length; ++j)this._handleAdd(object._nestedArray[j]);
        if (exposeRe.test(object.name)) object.parent[object.name] = object; // expose namespace as property of its parent
    }
// The above also adds uppercased (and thus conflict-free) nested types, services and enums as
// properties of namespaces just like static code does. This allows using a .d.ts generated for
// a static module with reflection-based solutions where the condition is met.
};
/**
 * Called when any object is removed from this root or its sub-namespaces.
 * @param {ReflectionObject} object Object removed
 * @returns {undefined}
 * @private
 */ Root.prototype._handleRemove = function _handleRemove(object) {
    if (object instanceof Field) {
        if (/* an extension field */ object.extend !== undefined) {
            if (/* already handled */ object.extensionField) {
                object.extensionField.parent.remove(object.extensionField);
                object.extensionField = null;
            } else {
                var index = this.deferred.indexOf(object);
                /* istanbul ignore else */ if (index > -1) this.deferred.splice(index, 1);
            }
        }
    } else if (object instanceof Enum) {
        if (exposeRe.test(object.name)) delete object.parent[object.name]; // unexpose enum values
    } else if (object instanceof Namespace) {
        for(var i = 0; i < /* initializes */ object.nestedArray.length; ++i)this._handleRemove(object._nestedArray[i]);
        if (exposeRe.test(object.name)) delete object.parent[object.name]; // unexpose namespaces
    }
};
// Sets up cyclic dependencies (called in index-light)
Root._configure = function(Type_, parse_, common_) {
    Type = Type_;
    parse = parse_;
    common = common_;
};

},{"19f025d92e764083":"4idoA","e8ac8603d5e26cc0":"12Nu0","93a82a214a2b2853":"9srcK","bab7b74b9c10d745":"9U2iM","190170fae0946a3e":"9qDrQ"}],"djJSk":[function(require,module,exports) {
module.exports = Long;
/**
 * wasm optimizations, to do native i64 multiplication and divide
 */ var wasm = null;
try {
    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([
        0,
        97,
        115,
        109,
        1,
        0,
        0,
        0,
        1,
        13,
        2,
        96,
        0,
        1,
        127,
        96,
        4,
        127,
        127,
        127,
        127,
        1,
        127,
        3,
        7,
        6,
        0,
        1,
        1,
        1,
        1,
        1,
        6,
        6,
        1,
        127,
        1,
        65,
        0,
        11,
        7,
        50,
        6,
        3,
        109,
        117,
        108,
        0,
        1,
        5,
        100,
        105,
        118,
        95,
        115,
        0,
        2,
        5,
        100,
        105,
        118,
        95,
        117,
        0,
        3,
        5,
        114,
        101,
        109,
        95,
        115,
        0,
        4,
        5,
        114,
        101,
        109,
        95,
        117,
        0,
        5,
        8,
        103,
        101,
        116,
        95,
        104,
        105,
        103,
        104,
        0,
        0,
        10,
        191,
        1,
        6,
        4,
        0,
        35,
        0,
        11,
        36,
        1,
        1,
        126,
        32,
        0,
        173,
        32,
        1,
        173,
        66,
        32,
        134,
        132,
        32,
        2,
        173,
        32,
        3,
        173,
        66,
        32,
        134,
        132,
        126,
        34,
        4,
        66,
        32,
        135,
        167,
        36,
        0,
        32,
        4,
        167,
        11,
        36,
        1,
        1,
        126,
        32,
        0,
        173,
        32,
        1,
        173,
        66,
        32,
        134,
        132,
        32,
        2,
        173,
        32,
        3,
        173,
        66,
        32,
        134,
        132,
        127,
        34,
        4,
        66,
        32,
        135,
        167,
        36,
        0,
        32,
        4,
        167,
        11,
        36,
        1,
        1,
        126,
        32,
        0,
        173,
        32,
        1,
        173,
        66,
        32,
        134,
        132,
        32,
        2,
        173,
        32,
        3,
        173,
        66,
        32,
        134,
        132,
        128,
        34,
        4,
        66,
        32,
        135,
        167,
        36,
        0,
        32,
        4,
        167,
        11,
        36,
        1,
        1,
        126,
        32,
        0,
        173,
        32,
        1,
        173,
        66,
        32,
        134,
        132,
        32,
        2,
        173,
        32,
        3,
        173,
        66,
        32,
        134,
        132,
        129,
        34,
        4,
        66,
        32,
        135,
        167,
        36,
        0,
        32,
        4,
        167,
        11,
        36,
        1,
        1,
        126,
        32,
        0,
        173,
        32,
        1,
        173,
        66,
        32,
        134,
        132,
        32,
        2,
        173,
        32,
        3,
        173,
        66,
        32,
        134,
        132,
        130,
        34,
        4,
        66,
        32,
        135,
        167,
        36,
        0,
        32,
        4,
        167,
        11
    ])), {}).exports;
} catch (e) {
// no wasm support :(
}
/**
 * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.
 *  See the from* functions below for more convenient ways of constructing Longs.
 * @exports Long
 * @class A Long class for representing a 64 bit two's-complement integer value.
 * @param {number} low The low (signed) 32 bits of the long
 * @param {number} high The high (signed) 32 bits of the long
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @constructor
 */ function Long(low, high, unsigned) {
    /**
     * The low 32 bits as a signed value.
     * @type {number}
     */ this.low = low | 0;
    /**
     * The high 32 bits as a signed value.
     * @type {number}
     */ this.high = high | 0;
    /**
     * Whether unsigned or not.
     * @type {boolean}
     */ this.unsigned = !!unsigned;
}
// The internal representation of a long is the two given signed, 32-bit values.
// We use 32-bit pieces because these are the size of integers on which
// Javascript performs bit-operations.  For operations like addition and
// multiplication, we split each number into 16 bit pieces, which can easily be
// multiplied within Javascript's floating-point representation without overflow
// or change in sign.
//
// In the algorithms below, we frequently reduce the negative case to the
// positive case by negating the input(s) and then post-processing the result.
// Note that we must ALWAYS check specially whether those values are MIN_VALUE
// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
// a positive number, it overflows back into a negative).  Not handling this
// case would often result in infinite recursion.
//
// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*
// methods on which they depend.
/**
 * An indicator used to reliably determine if an object is a Long or not.
 * @type {boolean}
 * @const
 * @private
 */ Long.prototype.__isLong__;
Object.defineProperty(Long.prototype, "__isLong__", {
    value: true
});
/**
 * @function
 * @param {*} obj Object
 * @returns {boolean}
 * @inner
 */ function isLong(obj) {
    return (obj && obj["__isLong__"]) === true;
}
/**
 * Tests if the specified object is a Long.
 * @function
 * @param {*} obj Object
 * @returns {boolean}
 */ Long.isLong = isLong;
/**
 * A cache of the Long representations of small integer values.
 * @type {!Object}
 * @inner
 */ var INT_CACHE = {};
/**
 * A cache of the Long representations of small unsigned integer values.
 * @type {!Object}
 * @inner
 */ var UINT_CACHE = {};
/**
 * @param {number} value
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */ function fromInt(value, unsigned) {
    var obj, cachedObj, cache;
    if (unsigned) {
        value >>>= 0;
        if (cache = 0 <= value && value < 256) {
            cachedObj = UINT_CACHE[value];
            if (cachedObj) return cachedObj;
        }
        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);
        if (cache) UINT_CACHE[value] = obj;
        return obj;
    } else {
        value |= 0;
        if (cache = -128 <= value && value < 128) {
            cachedObj = INT_CACHE[value];
            if (cachedObj) return cachedObj;
        }
        obj = fromBits(value, value < 0 ? -1 : 0, false);
        if (cache) INT_CACHE[value] = obj;
        return obj;
    }
}
/**
 * Returns a Long representing the given 32 bit integer value.
 * @function
 * @param {number} value The 32 bit integer in question
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */ Long.fromInt = fromInt;
/**
 * @param {number} value
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */ function fromNumber(value, unsigned) {
    if (isNaN(value)) return unsigned ? UZERO : ZERO;
    if (unsigned) {
        if (value < 0) return UZERO;
        if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;
    } else {
        if (value <= -TWO_PWR_63_DBL) return MIN_VALUE;
        if (value + 1 >= TWO_PWR_63_DBL) return MAX_VALUE;
    }
    if (value < 0) return fromNumber(-value, unsigned).neg();
    return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);
}
/**
 * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.
 * @function
 * @param {number} value The number in question
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */ Long.fromNumber = fromNumber;
/**
 * @param {number} lowBits
 * @param {number} highBits
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */ function fromBits(lowBits, highBits, unsigned) {
    return new Long(lowBits, highBits, unsigned);
}
/**
 * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is
 *  assumed to use 32 bits.
 * @function
 * @param {number} lowBits The low 32 bits
 * @param {number} highBits The high 32 bits
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */ Long.fromBits = fromBits;
/**
 * @function
 * @param {number} base
 * @param {number} exponent
 * @returns {number}
 * @inner
 */ var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)
/**
 * @param {string} str
 * @param {(boolean|number)=} unsigned
 * @param {number=} radix
 * @returns {!Long}
 * @inner
 */ function fromString(str, unsigned, radix) {
    if (str.length === 0) throw Error("empty string");
    if (str === "NaN" || str === "Infinity" || str === "+Infinity" || str === "-Infinity") return ZERO;
    if (typeof unsigned === "number") // For goog.math.long compatibility
    radix = unsigned, unsigned = false;
    else unsigned = !!unsigned;
    radix = radix || 10;
    if (radix < 2 || 36 < radix) throw RangeError("radix");
    var p;
    if ((p = str.indexOf("-")) > 0) throw Error("interior hyphen");
    else if (p === 0) return fromString(str.substring(1), unsigned, radix).neg();
    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = fromNumber(pow_dbl(radix, 8));
    var result = ZERO;
    for(var i = 0; i < str.length; i += 8){
        var size = Math.min(8, str.length - i), value = parseInt(str.substring(i, i + size), radix);
        if (size < 8) {
            var power = fromNumber(pow_dbl(radix, size));
            result = result.mul(power).add(fromNumber(value));
        } else {
            result = result.mul(radixToPower);
            result = result.add(fromNumber(value));
        }
    }
    result.unsigned = unsigned;
    return result;
}
/**
 * Returns a Long representation of the given string, written using the specified radix.
 * @function
 * @param {string} str The textual representation of the Long
 * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed
 * @param {number=} radix The radix in which the text is written (2-36), defaults to 10
 * @returns {!Long} The corresponding Long value
 */ Long.fromString = fromString;
/**
 * @function
 * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */ function fromValue(val, unsigned) {
    if (typeof val === "number") return fromNumber(val, unsigned);
    if (typeof val === "string") return fromString(val, unsigned);
    // Throws for non-objects, converts non-instanceof Long:
    return fromBits(val.low, val.high, typeof unsigned === "boolean" ? unsigned : val.unsigned);
}
/**
 * Converts the specified value to a Long using the appropriate from* function for its type.
 * @function
 * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long}
 */ Long.fromValue = fromValue;
// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be
// no runtime penalty for these.
/**
 * @type {number}
 * @const
 * @inner
 */ var TWO_PWR_16_DBL = 65536;
/**
 * @type {number}
 * @const
 * @inner
 */ var TWO_PWR_24_DBL = 16777216;
/**
 * @type {number}
 * @const
 * @inner
 */ var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;
/**
 * @type {number}
 * @const
 * @inner
 */ var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;
/**
 * @type {number}
 * @const
 * @inner
 */ var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;
/**
 * @type {!Long}
 * @const
 * @inner
 */ var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);
/**
 * @type {!Long}
 * @inner
 */ var ZERO = fromInt(0);
/**
 * Signed zero.
 * @type {!Long}
 */ Long.ZERO = ZERO;
/**
 * @type {!Long}
 * @inner
 */ var UZERO = fromInt(0, true);
/**
 * Unsigned zero.
 * @type {!Long}
 */ Long.UZERO = UZERO;
/**
 * @type {!Long}
 * @inner
 */ var ONE = fromInt(1);
/**
 * Signed one.
 * @type {!Long}
 */ Long.ONE = ONE;
/**
 * @type {!Long}
 * @inner
 */ var UONE = fromInt(1, true);
/**
 * Unsigned one.
 * @type {!Long}
 */ Long.UONE = UONE;
/**
 * @type {!Long}
 * @inner
 */ var NEG_ONE = fromInt(-1);
/**
 * Signed negative one.
 * @type {!Long}
 */ Long.NEG_ONE = NEG_ONE;
/**
 * @type {!Long}
 * @inner
 */ var MAX_VALUE = fromBits(-1, 2147483647, false);
/**
 * Maximum signed value.
 * @type {!Long}
 */ Long.MAX_VALUE = MAX_VALUE;
/**
 * @type {!Long}
 * @inner
 */ var MAX_UNSIGNED_VALUE = fromBits(-1, -1, true);
/**
 * Maximum unsigned value.
 * @type {!Long}
 */ Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;
/**
 * @type {!Long}
 * @inner
 */ var MIN_VALUE = fromBits(0, -2147483648, false);
/**
 * Minimum signed value.
 * @type {!Long}
 */ Long.MIN_VALUE = MIN_VALUE;
/**
 * @alias Long.prototype
 * @inner
 */ var LongPrototype = Long.prototype;
/**
 * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.
 * @returns {number}
 */ LongPrototype.toInt = function toInt() {
    return this.unsigned ? this.low >>> 0 : this.low;
};
/**
 * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).
 * @returns {number}
 */ LongPrototype.toNumber = function toNumber() {
    if (this.unsigned) return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);
    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);
};
/**
 * Converts the Long to a string written in the specified radix.
 * @param {number=} radix Radix (2-36), defaults to 10
 * @returns {string}
 * @override
 * @throws {RangeError} If `radix` is out of range
 */ LongPrototype.toString = function toString(radix) {
    radix = radix || 10;
    if (radix < 2 || 36 < radix) throw RangeError("radix");
    if (this.isZero()) return "0";
    if (this.isNegative()) {
        if (this.eq(MIN_VALUE)) {
            // We need to change the Long value before it can be negated, so we remove
            // the bottom-most digit in this base and then recurse to do the rest.
            var radixLong = fromNumber(radix), div = this.div(radixLong), rem1 = div.mul(radixLong).sub(this);
            return div.toString(radix) + rem1.toInt().toString(radix);
        } else return "-" + this.neg().toString(radix);
    }
    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned), rem = this;
    var result = "";
    while(true){
        var remDiv = rem.div(radixToPower), intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0, digits = intval.toString(radix);
        rem = remDiv;
        if (rem.isZero()) return digits + result;
        else {
            while(digits.length < 6)digits = "0" + digits;
            result = "" + digits + result;
        }
    }
};
/**
 * Gets the high 32 bits as a signed integer.
 * @returns {number} Signed high bits
 */ LongPrototype.getHighBits = function getHighBits() {
    return this.high;
};
/**
 * Gets the high 32 bits as an unsigned integer.
 * @returns {number} Unsigned high bits
 */ LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {
    return this.high >>> 0;
};
/**
 * Gets the low 32 bits as a signed integer.
 * @returns {number} Signed low bits
 */ LongPrototype.getLowBits = function getLowBits() {
    return this.low;
};
/**
 * Gets the low 32 bits as an unsigned integer.
 * @returns {number} Unsigned low bits
 */ LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {
    return this.low >>> 0;
};
/**
 * Gets the number of bits needed to represent the absolute value of this Long.
 * @returns {number}
 */ LongPrototype.getNumBitsAbs = function getNumBitsAbs() {
    if (this.isNegative()) return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();
    var val = this.high != 0 ? this.high : this.low;
    for(var bit = 31; bit > 0; bit--)if ((val & 1 << bit) != 0) break;
    return this.high != 0 ? bit + 33 : bit + 1;
};
/**
 * Tests if this Long's value equals zero.
 * @returns {boolean}
 */ LongPrototype.isZero = function isZero() {
    return this.high === 0 && this.low === 0;
};
/**
 * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.
 * @returns {boolean}
 */ LongPrototype.eqz = LongPrototype.isZero;
/**
 * Tests if this Long's value is negative.
 * @returns {boolean}
 */ LongPrototype.isNegative = function isNegative() {
    return !this.unsigned && this.high < 0;
};
/**
 * Tests if this Long's value is positive.
 * @returns {boolean}
 */ LongPrototype.isPositive = function isPositive() {
    return this.unsigned || this.high >= 0;
};
/**
 * Tests if this Long's value is odd.
 * @returns {boolean}
 */ LongPrototype.isOdd = function isOdd() {
    return (this.low & 1) === 1;
};
/**
 * Tests if this Long's value is even.
 * @returns {boolean}
 */ LongPrototype.isEven = function isEven() {
    return (this.low & 1) === 0;
};
/**
 * Tests if this Long's value equals the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */ LongPrototype.equals = function equals(other) {
    if (!isLong(other)) other = fromValue(other);
    if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;
    return this.high === other.high && this.low === other.low;
};
/**
 * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */ LongPrototype.eq = LongPrototype.equals;
/**
 * Tests if this Long's value differs from the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */ LongPrototype.notEquals = function notEquals(other) {
    return !this.eq(/* validates */ other);
};
/**
 * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */ LongPrototype.neq = LongPrototype.notEquals;
/**
 * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */ LongPrototype.ne = LongPrototype.notEquals;
/**
 * Tests if this Long's value is less than the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */ LongPrototype.lessThan = function lessThan(other) {
    return this.comp(/* validates */ other) < 0;
};
/**
 * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */ LongPrototype.lt = LongPrototype.lessThan;
/**
 * Tests if this Long's value is less than or equal the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */ LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {
    return this.comp(/* validates */ other) <= 0;
};
/**
 * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */ LongPrototype.lte = LongPrototype.lessThanOrEqual;
/**
 * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */ LongPrototype.le = LongPrototype.lessThanOrEqual;
/**
 * Tests if this Long's value is greater than the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */ LongPrototype.greaterThan = function greaterThan(other) {
    return this.comp(/* validates */ other) > 0;
};
/**
 * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */ LongPrototype.gt = LongPrototype.greaterThan;
/**
 * Tests if this Long's value is greater than or equal the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */ LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {
    return this.comp(/* validates */ other) >= 0;
};
/**
 * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */ LongPrototype.gte = LongPrototype.greaterThanOrEqual;
/**
 * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */ LongPrototype.ge = LongPrototype.greaterThanOrEqual;
/**
 * Compares this Long's value with the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {number} 0 if they are the same, 1 if the this is greater and -1
 *  if the given one is greater
 */ LongPrototype.compare = function compare(other) {
    if (!isLong(other)) other = fromValue(other);
    if (this.eq(other)) return 0;
    var thisNeg = this.isNegative(), otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) return -1;
    if (!thisNeg && otherNeg) return 1;
    // At this point the sign bits are the same
    if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1;
    // Both are positive if at least one is unsigned
    return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;
};
/**
 * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {number} 0 if they are the same, 1 if the this is greater and -1
 *  if the given one is greater
 */ LongPrototype.comp = LongPrototype.compare;
/**
 * Negates this Long's value.
 * @returns {!Long} Negated Long
 */ LongPrototype.negate = function negate() {
    if (!this.unsigned && this.eq(MIN_VALUE)) return MIN_VALUE;
    return this.not().add(ONE);
};
/**
 * Negates this Long's value. This is an alias of {@link Long#negate}.
 * @function
 * @returns {!Long} Negated Long
 */ LongPrototype.neg = LongPrototype.negate;
/**
 * Returns the sum of this and the specified Long.
 * @param {!Long|number|string} addend Addend
 * @returns {!Long} Sum
 */ LongPrototype.add = function add(addend) {
    if (!isLong(addend)) addend = fromValue(addend);
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.
    var a48 = this.high >>> 16;
    var a32 = this.high & 0xFFFF;
    var a16 = this.low >>> 16;
    var a00 = this.low & 0xFFFF;
    var b48 = addend.high >>> 16;
    var b32 = addend.high & 0xFFFF;
    var b16 = addend.low >>> 16;
    var b00 = addend.low & 0xFFFF;
    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);
};
/**
 * Returns the difference of this and the specified Long.
 * @param {!Long|number|string} subtrahend Subtrahend
 * @returns {!Long} Difference
 */ LongPrototype.subtract = function subtract(subtrahend) {
    if (!isLong(subtrahend)) subtrahend = fromValue(subtrahend);
    return this.add(subtrahend.neg());
};
/**
 * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.
 * @function
 * @param {!Long|number|string} subtrahend Subtrahend
 * @returns {!Long} Difference
 */ LongPrototype.sub = LongPrototype.subtract;
/**
 * Returns the product of this and the specified Long.
 * @param {!Long|number|string} multiplier Multiplier
 * @returns {!Long} Product
 */ LongPrototype.multiply = function multiply(multiplier) {
    if (this.isZero()) return ZERO;
    if (!isLong(multiplier)) multiplier = fromValue(multiplier);
    // use wasm support if present
    if (wasm) {
        var low = wasm.mul(this.low, this.high, multiplier.low, multiplier.high);
        return fromBits(low, wasm.get_high(), this.unsigned);
    }
    if (multiplier.isZero()) return ZERO;
    if (this.eq(MIN_VALUE)) return multiplier.isOdd() ? MIN_VALUE : ZERO;
    if (multiplier.eq(MIN_VALUE)) return this.isOdd() ? MIN_VALUE : ZERO;
    if (this.isNegative()) {
        if (multiplier.isNegative()) return this.neg().mul(multiplier.neg());
        else return this.neg().mul(multiplier).neg();
    } else if (multiplier.isNegative()) return this.mul(multiplier.neg()).neg();
    // If both longs are small, use float multiplication
    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24)) return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);
    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.
    var a48 = this.high >>> 16;
    var a32 = this.high & 0xFFFF;
    var a16 = this.low >>> 16;
    var a00 = this.low & 0xFFFF;
    var b48 = multiplier.high >>> 16;
    var b32 = multiplier.high & 0xFFFF;
    var b16 = multiplier.low >>> 16;
    var b00 = multiplier.low & 0xFFFF;
    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);
};
/**
 * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.
 * @function
 * @param {!Long|number|string} multiplier Multiplier
 * @returns {!Long} Product
 */ LongPrototype.mul = LongPrototype.multiply;
/**
 * Returns this Long divided by the specified. The result is signed if this Long is signed or
 *  unsigned if this Long is unsigned.
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Quotient
 */ LongPrototype.divide = function divide(divisor) {
    if (!isLong(divisor)) divisor = fromValue(divisor);
    if (divisor.isZero()) throw Error("division by zero");
    // use wasm support if present
    if (wasm) {
        // guard against signed division overflow: the largest
        // negative number / -1 would be 1 larger than the largest
        // positive number, due to two's complement.
        if (!this.unsigned && this.high === -2147483648 && divisor.low === -1 && divisor.high === -1) // be consistent with non-wasm code path
        return this;
        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(this.low, this.high, divisor.low, divisor.high);
        return fromBits(low, wasm.get_high(), this.unsigned);
    }
    if (this.isZero()) return this.unsigned ? UZERO : ZERO;
    var approx, rem, res;
    if (!this.unsigned) {
        // This section is only relevant for signed longs and is derived from the
        // closure library as a whole.
        if (this.eq(MIN_VALUE)) {
            if (divisor.eq(ONE) || divisor.eq(NEG_ONE)) return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE
            else if (divisor.eq(MIN_VALUE)) return ONE;
            else {
                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
                var halfThis = this.shr(1);
                approx = halfThis.div(divisor).shl(1);
                if (approx.eq(ZERO)) return divisor.isNegative() ? ONE : NEG_ONE;
                else {
                    rem = this.sub(divisor.mul(approx));
                    res = approx.add(rem.div(divisor));
                    return res;
                }
            }
        } else if (divisor.eq(MIN_VALUE)) return this.unsigned ? UZERO : ZERO;
        if (this.isNegative()) {
            if (divisor.isNegative()) return this.neg().div(divisor.neg());
            return this.neg().div(divisor).neg();
        } else if (divisor.isNegative()) return this.div(divisor.neg()).neg();
        res = ZERO;
    } else {
        // The algorithm below has not been made for unsigned longs. It's therefore
        // required to take special care of the MSB prior to running it.
        if (!divisor.unsigned) divisor = divisor.toUnsigned();
        if (divisor.gt(this)) return UZERO;
        if (divisor.gt(this.shru(1))) return UONE;
        res = UZERO;
    }
    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    rem = this;
    while(rem.gte(divisor)){
        // Approximate the result of division. This may be a little greater or
        // smaller than the actual value.
        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));
        // We will tweak the approximate result by changing it in the 48-th digit or
        // the smallest non-fractional digit, whichever is larger.
        var log2 = Math.ceil(Math.log(approx) / Math.LN2), delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48), // Decrease the approximation until it is smaller than the remainder.  Note
        // that if it is too large, the product overflows and is negative.
        approxRes = fromNumber(approx), approxRem = approxRes.mul(divisor);
        while(approxRem.isNegative() || approxRem.gt(rem)){
            approx -= delta;
            approxRes = fromNumber(approx, this.unsigned);
            approxRem = approxRes.mul(divisor);
        }
        // We know the answer can't be zero... and actually, zero would cause
        // infinite recursion since we would make no progress.
        if (approxRes.isZero()) approxRes = ONE;
        res = res.add(approxRes);
        rem = rem.sub(approxRem);
    }
    return res;
};
/**
 * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Quotient
 */ LongPrototype.div = LongPrototype.divide;
/**
 * Returns this Long modulo the specified.
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */ LongPrototype.modulo = function modulo(divisor) {
    if (!isLong(divisor)) divisor = fromValue(divisor);
    // use wasm support if present
    if (wasm) {
        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(this.low, this.high, divisor.low, divisor.high);
        return fromBits(low, wasm.get_high(), this.unsigned);
    }
    return this.sub(this.div(divisor).mul(divisor));
};
/**
 * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */ LongPrototype.mod = LongPrototype.modulo;
/**
 * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */ LongPrototype.rem = LongPrototype.modulo;
/**
 * Returns the bitwise NOT of this Long.
 * @returns {!Long}
 */ LongPrototype.not = function not() {
    return fromBits(~this.low, ~this.high, this.unsigned);
};
/**
 * Returns the bitwise AND of this Long and the specified.
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */ LongPrototype.and = function and(other) {
    if (!isLong(other)) other = fromValue(other);
    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);
};
/**
 * Returns the bitwise OR of this Long and the specified.
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */ LongPrototype.or = function or(other) {
    if (!isLong(other)) other = fromValue(other);
    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);
};
/**
 * Returns the bitwise XOR of this Long and the given one.
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */ LongPrototype.xor = function xor(other) {
    if (!isLong(other)) other = fromValue(other);
    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);
};
/**
 * Returns this Long with bits shifted to the left by the given amount.
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */ LongPrototype.shiftLeft = function shiftLeft(numBits) {
    if (isLong(numBits)) numBits = numBits.toInt();
    if ((numBits &= 63) === 0) return this;
    else if (numBits < 32) return fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);
    else return fromBits(0, this.low << numBits - 32, this.unsigned);
};
/**
 * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */ LongPrototype.shl = LongPrototype.shiftLeft;
/**
 * Returns this Long with bits arithmetically shifted to the right by the given amount.
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */ LongPrototype.shiftRight = function shiftRight(numBits) {
    if (isLong(numBits)) numBits = numBits.toInt();
    if ((numBits &= 63) === 0) return this;
    else if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);
    else return fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);
};
/**
 * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */ LongPrototype.shr = LongPrototype.shiftRight;
/**
 * Returns this Long with bits logically shifted to the right by the given amount.
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */ LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {
    if (isLong(numBits)) numBits = numBits.toInt();
    numBits &= 63;
    if (numBits === 0) return this;
    else {
        var high = this.high;
        if (numBits < 32) {
            var low = this.low;
            return fromBits(low >>> numBits | high << 32 - numBits, high >>> numBits, this.unsigned);
        } else if (numBits === 32) return fromBits(high, 0, this.unsigned);
        else return fromBits(high >>> numBits - 32, 0, this.unsigned);
    }
};
/**
 * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */ LongPrototype.shru = LongPrototype.shiftRightUnsigned;
/**
 * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */ LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;
/**
 * Converts this Long to signed.
 * @returns {!Long} Signed long
 */ LongPrototype.toSigned = function toSigned() {
    if (!this.unsigned) return this;
    return fromBits(this.low, this.high, false);
};
/**
 * Converts this Long to unsigned.
 * @returns {!Long} Unsigned long
 */ LongPrototype.toUnsigned = function toUnsigned() {
    if (this.unsigned) return this;
    return fromBits(this.low, this.high, true);
};
/**
 * Converts this Long to its byte representation.
 * @param {boolean=} le Whether little or big endian, defaults to big endian
 * @returns {!Array.<number>} Byte representation
 */ LongPrototype.toBytes = function toBytes(le) {
    return le ? this.toBytesLE() : this.toBytesBE();
};
/**
 * Converts this Long to its little endian byte representation.
 * @returns {!Array.<number>} Little endian byte representation
 */ LongPrototype.toBytesLE = function toBytesLE() {
    var hi = this.high, lo = this.low;
    return [
        lo & 0xff,
        lo >>> 8 & 0xff,
        lo >>> 16 & 0xff,
        lo >>> 24,
        hi & 0xff,
        hi >>> 8 & 0xff,
        hi >>> 16 & 0xff,
        hi >>> 24
    ];
};
/**
 * Converts this Long to its big endian byte representation.
 * @returns {!Array.<number>} Big endian byte representation
 */ LongPrototype.toBytesBE = function toBytesBE() {
    var hi = this.high, lo = this.low;
    return [
        hi >>> 24,
        hi >>> 16 & 0xff,
        hi >>> 8 & 0xff,
        hi & 0xff,
        lo >>> 24,
        lo >>> 16 & 0xff,
        lo >>> 8 & 0xff,
        lo & 0xff
    ];
};
/**
 * Creates a Long from its byte representation.
 * @param {!Array.<number>} bytes Byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @param {boolean=} le Whether little or big endian, defaults to big endian
 * @returns {Long} The corresponding Long value
 */ Long.fromBytes = function fromBytes(bytes, unsigned, le) {
    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);
};
/**
 * Creates a Long from its little endian byte representation.
 * @param {!Array.<number>} bytes Little endian byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {Long} The corresponding Long value
 */ Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {
    return new Long(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24, unsigned);
};
/**
 * Creates a Long from its big endian byte representation.
 * @param {!Array.<number>} bytes Big endian byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {Long} The corresponding Long value
 */ Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {
    return new Long(bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7], bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], unsigned);
};

},{}],"1rT7D":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.sha224 = exports.sha256 = void 0;
const _sha2_js_1 = require("f0369f0173e40550");
const utils_js_1 = require("dd2d5fab8dc388cf");
// Choice: a ? b : c
const Chi = (a, b, c)=>a & b ^ ~a & c;
// Majority function, true if any two inpust is true
const Maj = (a, b, c)=>a & b ^ a & c ^ b & c;
// Round constants:
// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)
// prettier-ignore
const SHA256_K = new Uint32Array([
    0x428a2f98,
    0x71374491,
    0xb5c0fbcf,
    0xe9b5dba5,
    0x3956c25b,
    0x59f111f1,
    0x923f82a4,
    0xab1c5ed5,
    0xd807aa98,
    0x12835b01,
    0x243185be,
    0x550c7dc3,
    0x72be5d74,
    0x80deb1fe,
    0x9bdc06a7,
    0xc19bf174,
    0xe49b69c1,
    0xefbe4786,
    0x0fc19dc6,
    0x240ca1cc,
    0x2de92c6f,
    0x4a7484aa,
    0x5cb0a9dc,
    0x76f988da,
    0x983e5152,
    0xa831c66d,
    0xb00327c8,
    0xbf597fc7,
    0xc6e00bf3,
    0xd5a79147,
    0x06ca6351,
    0x14292967,
    0x27b70a85,
    0x2e1b2138,
    0x4d2c6dfc,
    0x53380d13,
    0x650a7354,
    0x766a0abb,
    0x81c2c92e,
    0x92722c85,
    0xa2bfe8a1,
    0xa81a664b,
    0xc24b8b70,
    0xc76c51a3,
    0xd192e819,
    0xd6990624,
    0xf40e3585,
    0x106aa070,
    0x19a4c116,
    0x1e376c08,
    0x2748774c,
    0x34b0bcb5,
    0x391c0cb3,
    0x4ed8aa4a,
    0x5b9cca4f,
    0x682e6ff3,
    0x748f82ee,
    0x78a5636f,
    0x84c87814,
    0x8cc70208,
    0x90befffa,
    0xa4506ceb,
    0xbef9a3f7,
    0xc67178f2
]);
// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):
// prettier-ignore
const IV = new Uint32Array([
    0x6a09e667,
    0xbb67ae85,
    0x3c6ef372,
    0xa54ff53a,
    0x510e527f,
    0x9b05688c,
    0x1f83d9ab,
    0x5be0cd19
]);
// Temporary buffer, not used to store anything between runs
// Named this way because it matches specification.
const SHA256_W = new Uint32Array(64);
class SHA256 extends _sha2_js_1.SHA2 {
    constructor(){
        super(64, 32, 8, false);
        // We cannot use array here since array allows indexing by variable
        // which means optimizer/compiler cannot use registers.
        this.A = IV[0] | 0;
        this.B = IV[1] | 0;
        this.C = IV[2] | 0;
        this.D = IV[3] | 0;
        this.E = IV[4] | 0;
        this.F = IV[5] | 0;
        this.G = IV[6] | 0;
        this.H = IV[7] | 0;
    }
    get() {
        const { A, B, C, D, E, F, G, H } = this;
        return [
            A,
            B,
            C,
            D,
            E,
            F,
            G,
            H
        ];
    }
    // prettier-ignore
    set(A, B, C, D, E, F, G, H) {
        this.A = A | 0;
        this.B = B | 0;
        this.C = C | 0;
        this.D = D | 0;
        this.E = E | 0;
        this.F = F | 0;
        this.G = G | 0;
        this.H = H | 0;
    }
    process(view, offset) {
        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array
        for(let i = 0; i < 16; i++, offset += 4)SHA256_W[i] = view.getUint32(offset, false);
        for(let i = 16; i < 64; i++){
            const W15 = SHA256_W[i - 15];
            const W2 = SHA256_W[i - 2];
            const s0 = (0, utils_js_1.rotr)(W15, 7) ^ (0, utils_js_1.rotr)(W15, 18) ^ W15 >>> 3;
            const s1 = (0, utils_js_1.rotr)(W2, 17) ^ (0, utils_js_1.rotr)(W2, 19) ^ W2 >>> 10;
            SHA256_W[i] = s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16] | 0;
        }
        // Compression function main loop, 64 rounds
        let { A, B, C, D, E, F, G, H } = this;
        for(let i = 0; i < 64; i++){
            const sigma1 = (0, utils_js_1.rotr)(E, 6) ^ (0, utils_js_1.rotr)(E, 11) ^ (0, utils_js_1.rotr)(E, 25);
            const T1 = H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i] | 0;
            const sigma0 = (0, utils_js_1.rotr)(A, 2) ^ (0, utils_js_1.rotr)(A, 13) ^ (0, utils_js_1.rotr)(A, 22);
            const T2 = sigma0 + Maj(A, B, C) | 0;
            H = G;
            G = F;
            F = E;
            E = D + T1 | 0;
            D = C;
            C = B;
            B = A;
            A = T1 + T2 | 0;
        }
        // Add the compressed chunk to the current hash value
        A = A + this.A | 0;
        B = B + this.B | 0;
        C = C + this.C | 0;
        D = D + this.D | 0;
        E = E + this.E | 0;
        F = F + this.F | 0;
        G = G + this.G | 0;
        H = H + this.H | 0;
        this.set(A, B, C, D, E, F, G, H);
    }
    roundClean() {
        SHA256_W.fill(0);
    }
    destroy() {
        this.set(0, 0, 0, 0, 0, 0, 0, 0);
        this.buffer.fill(0);
    }
}
// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf
class SHA224 extends SHA256 {
    constructor(){
        super();
        this.A = -1056596264;
        this.B = 914150663;
        this.C = 812702999;
        this.D = -150054599;
        this.E = -4191439;
        this.F = 1750603025;
        this.G = 1694076839;
        this.H = -1090891868;
        this.outputLen = 28;
    }
}
/**
 * SHA2-256 hash function
 * @param message - data that would be hashed
 */ exports.sha256 = (0, utils_js_1.wrapConstructor)(()=>new SHA256());
exports.sha224 = (0, utils_js_1.wrapConstructor)(()=>new SHA224());

},{"f0369f0173e40550":"kekDz","dd2d5fab8dc388cf":"1jA8a"}],"kekDz":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SHA2 = void 0;
const _assert_js_1 = require("96995f5a2c2249c4");
const utils_js_1 = require("c59c675893fdf798");
// Polyfill for Safari 14
function setBigUint64(view, byteOffset, value, isLE) {
    if (typeof view.setBigUint64 === "function") return view.setBigUint64(byteOffset, value, isLE);
    const _32n = BigInt(32);
    const _u32_max = BigInt(0xffffffff);
    const wh = Number(value >> _32n & _u32_max);
    const wl = Number(value & _u32_max);
    const h = isLE ? 4 : 0;
    const l = isLE ? 0 : 4;
    view.setUint32(byteOffset + h, wh, isLE);
    view.setUint32(byteOffset + l, wl, isLE);
}
// Base SHA2 class (RFC 6234)
class SHA2 extends utils_js_1.Hash {
    constructor(blockLen, outputLen, padOffset, isLE){
        super();
        this.blockLen = blockLen;
        this.outputLen = outputLen;
        this.padOffset = padOffset;
        this.isLE = isLE;
        this.finished = false;
        this.length = 0;
        this.pos = 0;
        this.destroyed = false;
        this.buffer = new Uint8Array(blockLen);
        this.view = (0, utils_js_1.createView)(this.buffer);
    }
    update(data) {
        _assert_js_1.default.exists(this);
        const { view, buffer, blockLen } = this;
        data = (0, utils_js_1.toBytes)(data);
        const len = data.length;
        for(let pos = 0; pos < len;){
            const take = Math.min(blockLen - this.pos, len - pos);
            // Fast path: we have at least one block in input, cast it to view and process
            if (take === blockLen) {
                const dataView = (0, utils_js_1.createView)(data);
                for(; blockLen <= len - pos; pos += blockLen)this.process(dataView, pos);
                continue;
            }
            buffer.set(data.subarray(pos, pos + take), this.pos);
            this.pos += take;
            pos += take;
            if (this.pos === blockLen) {
                this.process(view, 0);
                this.pos = 0;
            }
        }
        this.length += data.length;
        this.roundClean();
        return this;
    }
    digestInto(out) {
        _assert_js_1.default.exists(this);
        _assert_js_1.default.output(out, this);
        this.finished = true;
        // Padding
        // We can avoid allocation of buffer for padding completely if it
        // was previously not allocated here. But it won't change performance.
        const { buffer, view, blockLen, isLE } = this;
        let { pos } = this;
        // append the bit '1' to the message
        buffer[pos++] = 128;
        this.buffer.subarray(pos).fill(0);
        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again
        if (this.padOffset > blockLen - pos) {
            this.process(view, 0);
            pos = 0;
        }
        // Pad until full block byte with zeros
        for(let i = pos; i < blockLen; i++)buffer[i] = 0;
        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that
        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.
        // So we just write lowest 64 bits of that value.
        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);
        this.process(view, 0);
        const oview = (0, utils_js_1.createView)(out);
        const len = this.outputLen;
        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT
        if (len % 4) throw new Error("_sha2: outputLen should be aligned to 32bit");
        const outLen = len / 4;
        const state = this.get();
        if (outLen > state.length) throw new Error("_sha2: outputLen bigger than state");
        for(let i = 0; i < outLen; i++)oview.setUint32(4 * i, state[i], isLE);
    }
    digest() {
        const { buffer, outputLen } = this;
        this.digestInto(buffer);
        const res = buffer.slice(0, outputLen);
        this.destroy();
        return res;
    }
    _cloneInto(to) {
        to || (to = new this.constructor());
        to.set(...this.get());
        const { blockLen, buffer, length, finished, destroyed, pos } = this;
        to.length = length;
        to.pos = pos;
        to.finished = finished;
        to.destroyed = destroyed;
        if (length % blockLen) to.buffer.set(buffer);
        return to;
    }
}
exports.SHA2 = SHA2;

},{"96995f5a2c2249c4":"3TVXa","c59c675893fdf798":"1jA8a"}],"riw9z":[function(require,module,exports) {
/*!

JSZip v3.10.1 - A JavaScript class for generating and reading zip files
<http://stuartk.com/jszip>

(c) 2009-2016 Stuart Knightley <stuart [at] stuartk.com>
Dual licenced under the MIT license or GPLv3. See https://raw.github.com/Stuk/jszip/main/LICENSE.markdown.

JSZip uses the library pako released under the MIT license :
https://github.com/nodeca/pako/blob/main/LICENSE
*/ var Buffer = require("f7295d6075386111").Buffer;
var global = arguments[3];
var process = require("cf30dbb97a1d82ba");
!function(e) {
    module.exports = e();
}(function() {
    return (function s(a, o, h) {
        function u(r, e) {
            if (!o[r]) {
                if (!a[r]) {
                    var t = undefined;
                    if (!e && t) return t(r, !0);
                    if (l) return l(r, !0);
                    var n = new Error("Cannot find module '" + r + "'");
                    throw n.code = "MODULE_NOT_FOUND", n;
                }
                var i = o[r] = {
                    exports: {}
                };
                a[r][0].call(i.exports, function(e) {
                    var t = a[r][1][e];
                    return u(t || e);
                }, i, i.exports, s, a, o, h);
            }
            return o[r].exports;
        }
        for(var l = undefined, e = 0; e < h.length; e++)u(h[e]);
        return u;
    })({
        1: [
            function(e, t, r) {
                "use strict";
                var d = e("./utils"), c = e("./support"), p = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
                r.encode = function(e) {
                    for(var t, r, n, i, s, a, o, h = [], u = 0, l = e.length, f = l, c = "string" !== d.getTypeOf(e); u < e.length;)f = l - u, n = c ? (t = e[u++], r = u < l ? e[u++] : 0, u < l ? e[u++] : 0) : (t = e.charCodeAt(u++), r = u < l ? e.charCodeAt(u++) : 0, u < l ? e.charCodeAt(u++) : 0), i = t >> 2, s = (3 & t) << 4 | r >> 4, a = 1 < f ? (15 & r) << 2 | n >> 6 : 64, o = 2 < f ? 63 & n : 64, h.push(p.charAt(i) + p.charAt(s) + p.charAt(a) + p.charAt(o));
                    return h.join("");
                }, r.decode = function(e) {
                    var t, r, n, i, s, a, o = 0, h = 0, u = "data:";
                    if (e.substr(0, u.length) === u) throw new Error("Invalid base64 input, it looks like a data url.");
                    var l, f = 3 * (e = e.replace(/[^A-Za-z0-9+/=]/g, "")).length / 4;
                    if (e.charAt(e.length - 1) === p.charAt(64) && f--, e.charAt(e.length - 2) === p.charAt(64) && f--, f % 1 != 0) throw new Error("Invalid base64 input, bad content length.");
                    for(l = c.uint8array ? new Uint8Array(0 | f) : new Array(0 | f); o < e.length;)t = p.indexOf(e.charAt(o++)) << 2 | (i = p.indexOf(e.charAt(o++))) >> 4, r = (15 & i) << 4 | (s = p.indexOf(e.charAt(o++))) >> 2, n = (3 & s) << 6 | (a = p.indexOf(e.charAt(o++))), l[h++] = t, 64 !== s && (l[h++] = r), 64 !== a && (l[h++] = n);
                    return l;
                };
            },
            {
                "./support": 30,
                "./utils": 32
            }
        ],
        2: [
            function(e, t, r) {
                "use strict";
                var n = e("./external"), i = e("./stream/DataWorker"), s = e("./stream/Crc32Probe"), a = e("./stream/DataLengthProbe");
                function o(e, t, r, n, i) {
                    this.compressedSize = e, this.uncompressedSize = t, this.crc32 = r, this.compression = n, this.compressedContent = i;
                }
                o.prototype = {
                    getContentWorker: function() {
                        var e = new i(n.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new a("data_length")), t = this;
                        return e.on("end", function() {
                            if (this.streamInfo.data_length !== t.uncompressedSize) throw new Error("Bug : uncompressed data size mismatch");
                        }), e;
                    },
                    getCompressedWorker: function() {
                        return new i(n.Promise.resolve(this.compressedContent)).withStreamInfo("compressedSize", this.compressedSize).withStreamInfo("uncompressedSize", this.uncompressedSize).withStreamInfo("crc32", this.crc32).withStreamInfo("compression", this.compression);
                    }
                }, o.createWorkerFrom = function(e, t, r) {
                    return e.pipe(new s).pipe(new a("uncompressedSize")).pipe(t.compressWorker(r)).pipe(new a("compressedSize")).withStreamInfo("compression", t);
                }, t.exports = o;
            },
            {
                "./external": 6,
                "./stream/Crc32Probe": 25,
                "./stream/DataLengthProbe": 26,
                "./stream/DataWorker": 27
            }
        ],
        3: [
            function(e, t, r) {
                "use strict";
                var n = e("./stream/GenericWorker");
                r.STORE = {
                    magic: "\x00\x00",
                    compressWorker: function() {
                        return new n("STORE compression");
                    },
                    uncompressWorker: function() {
                        return new n("STORE decompression");
                    }
                }, r.DEFLATE = e("./flate");
            },
            {
                "./flate": 7,
                "./stream/GenericWorker": 28
            }
        ],
        4: [
            function(e, t, r) {
                "use strict";
                var n = e("./utils");
                var o = function() {
                    for(var e, t = [], r = 0; r < 256; r++){
                        e = r;
                        for(var n = 0; n < 8; n++)e = 1 & e ? 3988292384 ^ e >>> 1 : e >>> 1;
                        t[r] = e;
                    }
                    return t;
                }();
                t.exports = function(e, t) {
                    return void 0 !== e && e.length ? "string" !== n.getTypeOf(e) ? function(e, t, r, n) {
                        var i = o, s = n + r;
                        e ^= -1;
                        for(var a = n; a < s; a++)e = e >>> 8 ^ i[255 & (e ^ t[a])];
                        return -1 ^ e;
                    }(0 | t, e, e.length, 0) : function(e, t, r, n) {
                        var i = o, s = n + r;
                        e ^= -1;
                        for(var a = n; a < s; a++)e = e >>> 8 ^ i[255 & (e ^ t.charCodeAt(a))];
                        return -1 ^ e;
                    }(0 | t, e, e.length, 0) : 0;
                };
            },
            {
                "./utils": 32
            }
        ],
        5: [
            function(e, t, r) {
                "use strict";
                r.base64 = !1, r.binary = !1, r.dir = !1, r.createFolders = !0, r.date = null, r.compression = null, r.compressionOptions = null, r.comment = null, r.unixPermissions = null, r.dosPermissions = null;
            },
            {}
        ],
        6: [
            function(e, t, r) {
                "use strict";
                var n = null;
                n = "undefined" != typeof Promise ? Promise : e("lie"), t.exports = {
                    Promise: n
                };
            },
            {
                lie: 37
            }
        ],
        7: [
            function(e, t, r) {
                "use strict";
                var n = "undefined" != typeof Uint8Array && "undefined" != typeof Uint16Array && "undefined" != typeof Uint32Array, i = e("pako"), s = e("./utils"), a = e("./stream/GenericWorker"), o = n ? "uint8array" : "array";
                function h(e, t) {
                    a.call(this, "FlateWorker/" + e), this._pako = null, this._pakoAction = e, this._pakoOptions = t, this.meta = {};
                }
                r.magic = "\b\x00", s.inherits(h, a), h.prototype.processChunk = function(e) {
                    this.meta = e.meta, null === this._pako && this._createPako(), this._pako.push(s.transformTo(o, e.data), !1);
                }, h.prototype.flush = function() {
                    a.prototype.flush.call(this), null === this._pako && this._createPako(), this._pako.push([], !0);
                }, h.prototype.cleanUp = function() {
                    a.prototype.cleanUp.call(this), this._pako = null;
                }, h.prototype._createPako = function() {
                    this._pako = new i[this._pakoAction]({
                        raw: !0,
                        level: this._pakoOptions.level || -1
                    });
                    var t = this;
                    this._pako.onData = function(e) {
                        t.push({
                            data: e,
                            meta: t.meta
                        });
                    };
                }, r.compressWorker = function(e) {
                    return new h("Deflate", e);
                }, r.uncompressWorker = function() {
                    return new h("Inflate", {});
                };
            },
            {
                "./stream/GenericWorker": 28,
                "./utils": 32,
                pako: 38
            }
        ],
        8: [
            function(e, t, r) {
                "use strict";
                function A(e, t) {
                    var r, n = "";
                    for(r = 0; r < t; r++)n += String.fromCharCode(255 & e), e >>>= 8;
                    return n;
                }
                function n(e, t, r, n, i, s) {
                    var a, o, h = e.file, u = e.compression, l = s !== O.utf8encode, f = I.transformTo("string", s(h.name)), c = I.transformTo("string", O.utf8encode(h.name)), d = h.comment, p = I.transformTo("string", s(d)), m = I.transformTo("string", O.utf8encode(d)), _ = c.length !== h.name.length, g = m.length !== d.length, b = "", v = "", y = "", w = h.dir, k = h.date, x = {
                        crc32: 0,
                        compressedSize: 0,
                        uncompressedSize: 0
                    };
                    t && !r || (x.crc32 = e.crc32, x.compressedSize = e.compressedSize, x.uncompressedSize = e.uncompressedSize);
                    var S = 0;
                    t && (S |= 8), l || !_ && !g || (S |= 2048);
                    var z = 0, C = 0;
                    w && (z |= 16), "UNIX" === i ? (C = 798, z |= function(e, t) {
                        var r = e;
                        return e || (r = t ? 16893 : 33204), (65535 & r) << 16;
                    }(h.unixPermissions, w)) : (C = 20, z |= function(e) {
                        return 63 & (e || 0);
                    }(h.dosPermissions)), a = k.getUTCHours(), a <<= 6, a |= k.getUTCMinutes(), a <<= 5, a |= k.getUTCSeconds() / 2, o = k.getUTCFullYear() - 1980, o <<= 4, o |= k.getUTCMonth() + 1, o <<= 5, o |= k.getUTCDate(), _ && (v = A(1, 1) + A(B(f), 4) + c, b += "up" + A(v.length, 2) + v), g && (y = A(1, 1) + A(B(p), 4) + m, b += "uc" + A(y.length, 2) + y);
                    var E = "";
                    return E += "\n\x00", E += A(S, 2), E += u.magic, E += A(a, 2), E += A(o, 2), E += A(x.crc32, 4), E += A(x.compressedSize, 4), E += A(x.uncompressedSize, 4), E += A(f.length, 2), E += A(b.length, 2), {
                        fileRecord: R.LOCAL_FILE_HEADER + E + f + b,
                        dirRecord: R.CENTRAL_FILE_HEADER + A(C, 2) + E + A(p.length, 2) + "\x00\x00\x00\x00" + A(z, 4) + A(n, 4) + f + b + p
                    };
                }
                var I = e("../utils"), i = e("../stream/GenericWorker"), O = e("../utf8"), B = e("../crc32"), R = e("../signature");
                function s(e, t, r, n) {
                    i.call(this, "ZipFileWorker"), this.bytesWritten = 0, this.zipComment = t, this.zipPlatform = r, this.encodeFileName = n, this.streamFiles = e, this.accumulate = !1, this.contentBuffer = [], this.dirRecords = [], this.currentSourceOffset = 0, this.entriesCount = 0, this.currentFile = null, this._sources = [];
                }
                I.inherits(s, i), s.prototype.push = function(e) {
                    var t = e.meta.percent || 0, r = this.entriesCount, n = this._sources.length;
                    this.accumulate ? this.contentBuffer.push(e) : (this.bytesWritten += e.data.length, i.prototype.push.call(this, {
                        data: e.data,
                        meta: {
                            currentFile: this.currentFile,
                            percent: r ? (t + 100 * (r - n - 1)) / r : 100
                        }
                    }));
                }, s.prototype.openedSource = function(e) {
                    this.currentSourceOffset = this.bytesWritten, this.currentFile = e.file.name;
                    var t = this.streamFiles && !e.file.dir;
                    if (t) {
                        var r = n(e, t, !1, this.currentSourceOffset, this.zipPlatform, this.encodeFileName);
                        this.push({
                            data: r.fileRecord,
                            meta: {
                                percent: 0
                            }
                        });
                    } else this.accumulate = !0;
                }, s.prototype.closedSource = function(e) {
                    this.accumulate = !1;
                    var t = this.streamFiles && !e.file.dir, r = n(e, t, !0, this.currentSourceOffset, this.zipPlatform, this.encodeFileName);
                    if (this.dirRecords.push(r.dirRecord), t) this.push({
                        data: function(e) {
                            return R.DATA_DESCRIPTOR + A(e.crc32, 4) + A(e.compressedSize, 4) + A(e.uncompressedSize, 4);
                        }(e),
                        meta: {
                            percent: 100
                        }
                    });
                    else for(this.push({
                        data: r.fileRecord,
                        meta: {
                            percent: 0
                        }
                    }); this.contentBuffer.length;)this.push(this.contentBuffer.shift());
                    this.currentFile = null;
                }, s.prototype.flush = function() {
                    for(var e = this.bytesWritten, t = 0; t < this.dirRecords.length; t++)this.push({
                        data: this.dirRecords[t],
                        meta: {
                            percent: 100
                        }
                    });
                    var r = this.bytesWritten - e, n = function(e, t, r, n, i) {
                        var s = I.transformTo("string", i(n));
                        return R.CENTRAL_DIRECTORY_END + "\x00\x00\x00\x00" + A(e, 2) + A(e, 2) + A(t, 4) + A(r, 4) + A(s.length, 2) + s;
                    }(this.dirRecords.length, r, e, this.zipComment, this.encodeFileName);
                    this.push({
                        data: n,
                        meta: {
                            percent: 100
                        }
                    });
                }, s.prototype.prepareNextSource = function() {
                    this.previous = this._sources.shift(), this.openedSource(this.previous.streamInfo), this.isPaused ? this.previous.pause() : this.previous.resume();
                }, s.prototype.registerPrevious = function(e) {
                    this._sources.push(e);
                    var t = this;
                    return e.on("data", function(e) {
                        t.processChunk(e);
                    }), e.on("end", function() {
                        t.closedSource(t.previous.streamInfo), t._sources.length ? t.prepareNextSource() : t.end();
                    }), e.on("error", function(e) {
                        t.error(e);
                    }), this;
                }, s.prototype.resume = function() {
                    return !!i.prototype.resume.call(this) && (!this.previous && this._sources.length ? (this.prepareNextSource(), !0) : this.previous || this._sources.length || this.generatedError ? void 0 : (this.end(), !0));
                }, s.prototype.error = function(e) {
                    var t = this._sources;
                    if (!i.prototype.error.call(this, e)) return !1;
                    for(var r = 0; r < t.length; r++)try {
                        t[r].error(e);
                    } catch (e) {}
                    return !0;
                }, s.prototype.lock = function() {
                    i.prototype.lock.call(this);
                    for(var e = this._sources, t = 0; t < e.length; t++)e[t].lock();
                }, t.exports = s;
            },
            {
                "../crc32": 4,
                "../signature": 23,
                "../stream/GenericWorker": 28,
                "../utf8": 31,
                "../utils": 32
            }
        ],
        9: [
            function(e, t, r) {
                "use strict";
                var u = e("../compressions"), n = e("./ZipFileWorker");
                r.generateWorker = function(e, a, t) {
                    var o = new n(a.streamFiles, t, a.platform, a.encodeFileName), h = 0;
                    try {
                        e.forEach(function(e, t) {
                            h++;
                            var r = function(e, t) {
                                var r = e || t, n = u[r];
                                if (!n) throw new Error(r + " is not a valid compression method !");
                                return n;
                            }(t.options.compression, a.compression), n = t.options.compressionOptions || a.compressionOptions || {}, i = t.dir, s = t.date;
                            t._compressWorker(r, n).withStreamInfo("file", {
                                name: e,
                                dir: i,
                                date: s,
                                comment: t.comment || "",
                                unixPermissions: t.unixPermissions,
                                dosPermissions: t.dosPermissions
                            }).pipe(o);
                        }), o.entriesCount = h;
                    } catch (e) {
                        o.error(e);
                    }
                    return o;
                };
            },
            {
                "../compressions": 3,
                "./ZipFileWorker": 8
            }
        ],
        10: [
            function(e, t, r) {
                "use strict";
                function n() {
                    if (!(this instanceof n)) return new n;
                    if (arguments.length) throw new Error("The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.");
                    this.files = Object.create(null), this.comment = null, this.root = "", this.clone = function() {
                        var e = new n;
                        for(var t in this)"function" != typeof this[t] && (e[t] = this[t]);
                        return e;
                    };
                }
                (n.prototype = e("./object")).loadAsync = e("./load"), n.support = e("./support"), n.defaults = e("./defaults"), n.version = "3.10.1", n.loadAsync = function(e, t) {
                    return (new n).loadAsync(e, t);
                }, n.external = e("./external"), t.exports = n;
            },
            {
                "./defaults": 5,
                "./external": 6,
                "./load": 11,
                "./object": 15,
                "./support": 30
            }
        ],
        11: [
            function(e, t, r) {
                "use strict";
                var u = e("./utils"), i = e("./external"), n = e("./utf8"), s = e("./zipEntries"), a = e("./stream/Crc32Probe"), l = e("./nodejsUtils");
                function f(n) {
                    return new i.Promise(function(e, t) {
                        var r = n.decompressed.getContentWorker().pipe(new a);
                        r.on("error", function(e) {
                            t(e);
                        }).on("end", function() {
                            r.streamInfo.crc32 !== n.decompressed.crc32 ? t(new Error("Corrupted zip : CRC32 mismatch")) : e();
                        }).resume();
                    });
                }
                t.exports = function(e, o) {
                    var h = this;
                    return o = u.extend(o || {}, {
                        base64: !1,
                        checkCRC32: !1,
                        optimizedBinaryString: !1,
                        createFolders: !1,
                        decodeFileName: n.utf8decode
                    }), l.isNode && l.isStream(e) ? i.Promise.reject(new Error("JSZip can't accept a stream when loading a zip file.")) : u.prepareContent("the loaded zip file", e, !0, o.optimizedBinaryString, o.base64).then(function(e) {
                        var t = new s(o);
                        return t.load(e), t;
                    }).then(function(e) {
                        var t = [
                            i.Promise.resolve(e)
                        ], r = e.files;
                        if (o.checkCRC32) for(var n = 0; n < r.length; n++)t.push(f(r[n]));
                        return i.Promise.all(t);
                    }).then(function(e) {
                        for(var t = e.shift(), r = t.files, n = 0; n < r.length; n++){
                            var i = r[n], s = i.fileNameStr, a = u.resolve(i.fileNameStr);
                            h.file(a, i.decompressed, {
                                binary: !0,
                                optimizedBinaryString: !0,
                                date: i.date,
                                dir: i.dir,
                                comment: i.fileCommentStr.length ? i.fileCommentStr : null,
                                unixPermissions: i.unixPermissions,
                                dosPermissions: i.dosPermissions,
                                createFolders: o.createFolders
                            }), i.dir || (h.file(a).unsafeOriginalName = s);
                        }
                        return t.zipComment.length && (h.comment = t.zipComment), h;
                    });
                };
            },
            {
                "./external": 6,
                "./nodejsUtils": 14,
                "./stream/Crc32Probe": 25,
                "./utf8": 31,
                "./utils": 32,
                "./zipEntries": 33
            }
        ],
        12: [
            function(e, t, r) {
                "use strict";
                var n = e("../utils"), i = e("../stream/GenericWorker");
                function s(e, t) {
                    i.call(this, "Nodejs stream input adapter for " + e), this._upstreamEnded = !1, this._bindStream(t);
                }
                n.inherits(s, i), s.prototype._bindStream = function(e) {
                    var t = this;
                    (this._stream = e).pause(), e.on("data", function(e) {
                        t.push({
                            data: e,
                            meta: {
                                percent: 0
                            }
                        });
                    }).on("error", function(e) {
                        t.isPaused ? this.generatedError = e : t.error(e);
                    }).on("end", function() {
                        t.isPaused ? t._upstreamEnded = !0 : t.end();
                    });
                }, s.prototype.pause = function() {
                    return !!i.prototype.pause.call(this) && (this._stream.pause(), !0);
                }, s.prototype.resume = function() {
                    return !!i.prototype.resume.call(this) && (this._upstreamEnded ? this.end() : this._stream.resume(), !0);
                }, t.exports = s;
            },
            {
                "../stream/GenericWorker": 28,
                "../utils": 32
            }
        ],
        13: [
            function(e, t, r) {
                "use strict";
                var i = e("readable-stream").Readable;
                function n(e, t, r) {
                    i.call(this, t), this._helper = e;
                    var n = this;
                    e.on("data", function(e, t) {
                        n.push(e) || n._helper.pause(), r && r(t);
                    }).on("error", function(e) {
                        n.emit("error", e);
                    }).on("end", function() {
                        n.push(null);
                    });
                }
                e("../utils").inherits(n, i), n.prototype._read = function() {
                    this._helper.resume();
                }, t.exports = n;
            },
            {
                "../utils": 32,
                "readable-stream": 16
            }
        ],
        14: [
            function(e, t, r) {
                "use strict";
                t.exports = {
                    isNode: "undefined" != typeof Buffer,
                    newBufferFrom: function(e, t) {
                        if (Buffer.from && Buffer.from !== Uint8Array.from) return Buffer.from(e, t);
                        if ("number" == typeof e) throw new Error('The "data" argument must not be a number');
                        return new Buffer(e, t);
                    },
                    allocBuffer: function(e) {
                        if (Buffer.alloc) return Buffer.alloc(e);
                        var t = new Buffer(e);
                        return t.fill(0), t;
                    },
                    isBuffer: function(e) {
                        return Buffer.isBuffer(e);
                    },
                    isStream: function(e) {
                        return e && "function" == typeof e.on && "function" == typeof e.pause && "function" == typeof e.resume;
                    }
                };
            },
            {}
        ],
        15: [
            function(e, t, r) {
                "use strict";
                function s(e, t, r) {
                    var n, i = u.getTypeOf(t), s = u.extend(r || {}, f);
                    s.date = s.date || new Date, null !== s.compression && (s.compression = s.compression.toUpperCase()), "string" == typeof s.unixPermissions && (s.unixPermissions = parseInt(s.unixPermissions, 8)), s.unixPermissions && 16384 & s.unixPermissions && (s.dir = !0), s.dosPermissions && 16 & s.dosPermissions && (s.dir = !0), s.dir && (e = g(e)), s.createFolders && (n = _(e)) && b.call(this, n, !0);
                    var a = "string" === i && !1 === s.binary && !1 === s.base64;
                    r && void 0 !== r.binary || (s.binary = !a), (t instanceof c && 0 === t.uncompressedSize || s.dir || !t || 0 === t.length) && (s.base64 = !1, s.binary = !0, t = "", s.compression = "STORE", i = "string");
                    var o = null;
                    o = t instanceof c || t instanceof l ? t : p.isNode && p.isStream(t) ? new m(e, t) : u.prepareContent(e, t, s.binary, s.optimizedBinaryString, s.base64);
                    var h = new d(e, o, s);
                    this.files[e] = h;
                }
                var i = e("./utf8"), u = e("./utils"), l = e("./stream/GenericWorker"), a = e("./stream/StreamHelper"), f = e("./defaults"), c = e("./compressedObject"), d = e("./zipObject"), o = e("./generate"), p = e("./nodejsUtils"), m = e("./nodejs/NodejsStreamInputAdapter"), _ = function(e) {
                    "/" === e.slice(-1) && (e = e.substring(0, e.length - 1));
                    var t = e.lastIndexOf("/");
                    return 0 < t ? e.substring(0, t) : "";
                }, g = function(e) {
                    return "/" !== e.slice(-1) && (e += "/"), e;
                }, b = function(e, t) {
                    return t = void 0 !== t ? t : f.createFolders, e = g(e), this.files[e] || s.call(this, e, null, {
                        dir: !0,
                        createFolders: t
                    }), this.files[e];
                };
                function h(e) {
                    return "[object RegExp]" === Object.prototype.toString.call(e);
                }
                var n = {
                    load: function() {
                        throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.");
                    },
                    forEach: function(e) {
                        var t, r, n;
                        for(t in this.files)n = this.files[t], (r = t.slice(this.root.length, t.length)) && t.slice(0, this.root.length) === this.root && e(r, n);
                    },
                    filter: function(r) {
                        var n = [];
                        return this.forEach(function(e, t) {
                            r(e, t) && n.push(t);
                        }), n;
                    },
                    file: function(e, t, r) {
                        if (1 !== arguments.length) return e = this.root + e, s.call(this, e, t, r), this;
                        if (h(e)) {
                            var n = e;
                            return this.filter(function(e, t) {
                                return !t.dir && n.test(e);
                            });
                        }
                        var i = this.files[this.root + e];
                        return i && !i.dir ? i : null;
                    },
                    folder: function(r) {
                        if (!r) return this;
                        if (h(r)) return this.filter(function(e, t) {
                            return t.dir && r.test(e);
                        });
                        var e = this.root + r, t = b.call(this, e), n = this.clone();
                        return n.root = t.name, n;
                    },
                    remove: function(r) {
                        r = this.root + r;
                        var e = this.files[r];
                        if (e || ("/" !== r.slice(-1) && (r += "/"), e = this.files[r]), e && !e.dir) delete this.files[r];
                        else for(var t = this.filter(function(e, t) {
                            return t.name.slice(0, r.length) === r;
                        }), n = 0; n < t.length; n++)delete this.files[t[n].name];
                        return this;
                    },
                    generate: function() {
                        throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.");
                    },
                    generateInternalStream: function(e) {
                        var t, r = {};
                        try {
                            if ((r = u.extend(e || {}, {
                                streamFiles: !1,
                                compression: "STORE",
                                compressionOptions: null,
                                type: "",
                                platform: "DOS",
                                comment: null,
                                mimeType: "application/zip",
                                encodeFileName: i.utf8encode
                            })).type = r.type.toLowerCase(), r.compression = r.compression.toUpperCase(), "binarystring" === r.type && (r.type = "string"), !r.type) throw new Error("No output type specified.");
                            u.checkSupport(r.type), "darwin" !== r.platform && "freebsd" !== r.platform && "linux" !== r.platform && "sunos" !== r.platform || (r.platform = "UNIX"), "win32" === r.platform && (r.platform = "DOS");
                            var n = r.comment || this.comment || "";
                            t = o.generateWorker(this, r, n);
                        } catch (e) {
                            (t = new l("error")).error(e);
                        }
                        return new a(t, r.type || "string", r.mimeType);
                    },
                    generateAsync: function(e, t) {
                        return this.generateInternalStream(e).accumulate(t);
                    },
                    generateNodeStream: function(e, t) {
                        return (e = e || {}).type || (e.type = "nodebuffer"), this.generateInternalStream(e).toNodejsStream(t);
                    }
                };
                t.exports = n;
            },
            {
                "./compressedObject": 2,
                "./defaults": 5,
                "./generate": 9,
                "./nodejs/NodejsStreamInputAdapter": 12,
                "./nodejsUtils": 14,
                "./stream/GenericWorker": 28,
                "./stream/StreamHelper": 29,
                "./utf8": 31,
                "./utils": 32,
                "./zipObject": 35
            }
        ],
        16: [
            function(e, t, r) {
                "use strict";
                t.exports = e("stream");
            },
            {
                stream: void 0
            }
        ],
        17: [
            function(e, t, r) {
                "use strict";
                var n = e("./DataReader");
                function i(e) {
                    n.call(this, e);
                    for(var t = 0; t < this.data.length; t++)e[t] = 255 & e[t];
                }
                e("../utils").inherits(i, n), i.prototype.byteAt = function(e) {
                    return this.data[this.zero + e];
                }, i.prototype.lastIndexOfSignature = function(e) {
                    for(var t = e.charCodeAt(0), r = e.charCodeAt(1), n = e.charCodeAt(2), i = e.charCodeAt(3), s = this.length - 4; 0 <= s; --s)if (this.data[s] === t && this.data[s + 1] === r && this.data[s + 2] === n && this.data[s + 3] === i) return s - this.zero;
                    return -1;
                }, i.prototype.readAndCheckSignature = function(e) {
                    var t = e.charCodeAt(0), r = e.charCodeAt(1), n = e.charCodeAt(2), i = e.charCodeAt(3), s = this.readData(4);
                    return t === s[0] && r === s[1] && n === s[2] && i === s[3];
                }, i.prototype.readData = function(e) {
                    if (this.checkOffset(e), 0 === e) return [];
                    var t = this.data.slice(this.zero + this.index, this.zero + this.index + e);
                    return this.index += e, t;
                }, t.exports = i;
            },
            {
                "../utils": 32,
                "./DataReader": 18
            }
        ],
        18: [
            function(e, t, r) {
                "use strict";
                var n = e("../utils");
                function i(e) {
                    this.data = e, this.length = e.length, this.index = 0, this.zero = 0;
                }
                i.prototype = {
                    checkOffset: function(e) {
                        this.checkIndex(this.index + e);
                    },
                    checkIndex: function(e) {
                        if (this.length < this.zero + e || e < 0) throw new Error("End of data reached (data length = " + this.length + ", asked index = " + e + "). Corrupted zip ?");
                    },
                    setIndex: function(e) {
                        this.checkIndex(e), this.index = e;
                    },
                    skip: function(e) {
                        this.setIndex(this.index + e);
                    },
                    byteAt: function() {},
                    readInt: function(e) {
                        var t, r = 0;
                        for(this.checkOffset(e), t = this.index + e - 1; t >= this.index; t--)r = (r << 8) + this.byteAt(t);
                        return this.index += e, r;
                    },
                    readString: function(e) {
                        return n.transformTo("string", this.readData(e));
                    },
                    readData: function() {},
                    lastIndexOfSignature: function() {},
                    readAndCheckSignature: function() {},
                    readDate: function() {
                        var e = this.readInt(4);
                        return new Date(Date.UTC(1980 + (e >> 25 & 127), (e >> 21 & 15) - 1, e >> 16 & 31, e >> 11 & 31, e >> 5 & 63, (31 & e) << 1));
                    }
                }, t.exports = i;
            },
            {
                "../utils": 32
            }
        ],
        19: [
            function(e, t, r) {
                "use strict";
                var n = e("./Uint8ArrayReader");
                function i(e) {
                    n.call(this, e);
                }
                e("../utils").inherits(i, n), i.prototype.readData = function(e) {
                    this.checkOffset(e);
                    var t = this.data.slice(this.zero + this.index, this.zero + this.index + e);
                    return this.index += e, t;
                }, t.exports = i;
            },
            {
                "../utils": 32,
                "./Uint8ArrayReader": 21
            }
        ],
        20: [
            function(e, t, r) {
                "use strict";
                var n = e("./DataReader");
                function i(e) {
                    n.call(this, e);
                }
                e("../utils").inherits(i, n), i.prototype.byteAt = function(e) {
                    return this.data.charCodeAt(this.zero + e);
                }, i.prototype.lastIndexOfSignature = function(e) {
                    return this.data.lastIndexOf(e) - this.zero;
                }, i.prototype.readAndCheckSignature = function(e) {
                    return e === this.readData(4);
                }, i.prototype.readData = function(e) {
                    this.checkOffset(e);
                    var t = this.data.slice(this.zero + this.index, this.zero + this.index + e);
                    return this.index += e, t;
                }, t.exports = i;
            },
            {
                "../utils": 32,
                "./DataReader": 18
            }
        ],
        21: [
            function(e, t, r) {
                "use strict";
                var n = e("./ArrayReader");
                function i(e) {
                    n.call(this, e);
                }
                e("../utils").inherits(i, n), i.prototype.readData = function(e) {
                    if (this.checkOffset(e), 0 === e) return new Uint8Array(0);
                    var t = this.data.subarray(this.zero + this.index, this.zero + this.index + e);
                    return this.index += e, t;
                }, t.exports = i;
            },
            {
                "../utils": 32,
                "./ArrayReader": 17
            }
        ],
        22: [
            function(e, t, r) {
                "use strict";
                var n = e("../utils"), i = e("../support"), s = e("./ArrayReader"), a = e("./StringReader"), o = e("./NodeBufferReader"), h = e("./Uint8ArrayReader");
                t.exports = function(e) {
                    var t = n.getTypeOf(e);
                    return n.checkSupport(t), "string" !== t || i.uint8array ? "nodebuffer" === t ? new o(e) : i.uint8array ? new h(n.transformTo("uint8array", e)) : new s(n.transformTo("array", e)) : new a(e);
                };
            },
            {
                "../support": 30,
                "../utils": 32,
                "./ArrayReader": 17,
                "./NodeBufferReader": 19,
                "./StringReader": 20,
                "./Uint8ArrayReader": 21
            }
        ],
        23: [
            function(e, t, r) {
                "use strict";
                r.LOCAL_FILE_HEADER = "PK\x03\x04", r.CENTRAL_FILE_HEADER = "PK\x01\x02", r.CENTRAL_DIRECTORY_END = "PK\x05\x06", r.ZIP64_CENTRAL_DIRECTORY_LOCATOR = "PK\x06\x07", r.ZIP64_CENTRAL_DIRECTORY_END = "PK\x06\x06", r.DATA_DESCRIPTOR = "PK\x07\b";
            },
            {}
        ],
        24: [
            function(e, t, r) {
                "use strict";
                var n = e("./GenericWorker"), i = e("../utils");
                function s(e) {
                    n.call(this, "ConvertWorker to " + e), this.destType = e;
                }
                i.inherits(s, n), s.prototype.processChunk = function(e) {
                    this.push({
                        data: i.transformTo(this.destType, e.data),
                        meta: e.meta
                    });
                }, t.exports = s;
            },
            {
                "../utils": 32,
                "./GenericWorker": 28
            }
        ],
        25: [
            function(e, t, r) {
                "use strict";
                var n = e("./GenericWorker"), i = e("../crc32");
                function s() {
                    n.call(this, "Crc32Probe"), this.withStreamInfo("crc32", 0);
                }
                e("../utils").inherits(s, n), s.prototype.processChunk = function(e) {
                    this.streamInfo.crc32 = i(e.data, this.streamInfo.crc32 || 0), this.push(e);
                }, t.exports = s;
            },
            {
                "../crc32": 4,
                "../utils": 32,
                "./GenericWorker": 28
            }
        ],
        26: [
            function(e, t, r) {
                "use strict";
                var n = e("../utils"), i = e("./GenericWorker");
                function s(e) {
                    i.call(this, "DataLengthProbe for " + e), this.propName = e, this.withStreamInfo(e, 0);
                }
                n.inherits(s, i), s.prototype.processChunk = function(e) {
                    if (e) {
                        var t = this.streamInfo[this.propName] || 0;
                        this.streamInfo[this.propName] = t + e.data.length;
                    }
                    i.prototype.processChunk.call(this, e);
                }, t.exports = s;
            },
            {
                "../utils": 32,
                "./GenericWorker": 28
            }
        ],
        27: [
            function(e, t, r) {
                "use strict";
                var n = e("../utils"), i = e("./GenericWorker");
                function s(e) {
                    i.call(this, "DataWorker");
                    var t = this;
                    this.dataIsReady = !1, this.index = 0, this.max = 0, this.data = null, this.type = "", this._tickScheduled = !1, e.then(function(e) {
                        t.dataIsReady = !0, t.data = e, t.max = e && e.length || 0, t.type = n.getTypeOf(e), t.isPaused || t._tickAndRepeat();
                    }, function(e) {
                        t.error(e);
                    });
                }
                n.inherits(s, i), s.prototype.cleanUp = function() {
                    i.prototype.cleanUp.call(this), this.data = null;
                }, s.prototype.resume = function() {
                    return !!i.prototype.resume.call(this) && (!this._tickScheduled && this.dataIsReady && (this._tickScheduled = !0, n.delay(this._tickAndRepeat, [], this)), !0);
                }, s.prototype._tickAndRepeat = function() {
                    this._tickScheduled = !1, this.isPaused || this.isFinished || (this._tick(), this.isFinished || (n.delay(this._tickAndRepeat, [], this), this._tickScheduled = !0));
                }, s.prototype._tick = function() {
                    if (this.isPaused || this.isFinished) return !1;
                    var e = null, t = Math.min(this.max, this.index + 16384);
                    if (this.index >= this.max) return this.end();
                    switch(this.type){
                        case "string":
                            e = this.data.substring(this.index, t);
                            break;
                        case "uint8array":
                            e = this.data.subarray(this.index, t);
                            break;
                        case "array":
                        case "nodebuffer":
                            e = this.data.slice(this.index, t);
                    }
                    return this.index = t, this.push({
                        data: e,
                        meta: {
                            percent: this.max ? this.index / this.max * 100 : 0
                        }
                    });
                }, t.exports = s;
            },
            {
                "../utils": 32,
                "./GenericWorker": 28
            }
        ],
        28: [
            function(e, t, r) {
                "use strict";
                function n(e) {
                    this.name = e || "default", this.streamInfo = {}, this.generatedError = null, this.extraStreamInfo = {}, this.isPaused = !0, this.isFinished = !1, this.isLocked = !1, this._listeners = {
                        data: [],
                        end: [],
                        error: []
                    }, this.previous = null;
                }
                n.prototype = {
                    push: function(e) {
                        this.emit("data", e);
                    },
                    end: function() {
                        if (this.isFinished) return !1;
                        this.flush();
                        try {
                            this.emit("end"), this.cleanUp(), this.isFinished = !0;
                        } catch (e) {
                            this.emit("error", e);
                        }
                        return !0;
                    },
                    error: function(e) {
                        return !this.isFinished && (this.isPaused ? this.generatedError = e : (this.isFinished = !0, this.emit("error", e), this.previous && this.previous.error(e), this.cleanUp()), !0);
                    },
                    on: function(e, t) {
                        return this._listeners[e].push(t), this;
                    },
                    cleanUp: function() {
                        this.streamInfo = this.generatedError = this.extraStreamInfo = null, this._listeners = [];
                    },
                    emit: function(e, t) {
                        if (this._listeners[e]) for(var r = 0; r < this._listeners[e].length; r++)this._listeners[e][r].call(this, t);
                    },
                    pipe: function(e) {
                        return e.registerPrevious(this);
                    },
                    registerPrevious: function(e) {
                        if (this.isLocked) throw new Error("The stream '" + this + "' has already been used.");
                        this.streamInfo = e.streamInfo, this.mergeStreamInfo(), this.previous = e;
                        var t = this;
                        return e.on("data", function(e) {
                            t.processChunk(e);
                        }), e.on("end", function() {
                            t.end();
                        }), e.on("error", function(e) {
                            t.error(e);
                        }), this;
                    },
                    pause: function() {
                        return !this.isPaused && !this.isFinished && (this.isPaused = !0, this.previous && this.previous.pause(), !0);
                    },
                    resume: function() {
                        if (!this.isPaused || this.isFinished) return !1;
                        var e = this.isPaused = !1;
                        return this.generatedError && (this.error(this.generatedError), e = !0), this.previous && this.previous.resume(), !e;
                    },
                    flush: function() {},
                    processChunk: function(e) {
                        this.push(e);
                    },
                    withStreamInfo: function(e, t) {
                        return this.extraStreamInfo[e] = t, this.mergeStreamInfo(), this;
                    },
                    mergeStreamInfo: function() {
                        for(var e in this.extraStreamInfo)Object.prototype.hasOwnProperty.call(this.extraStreamInfo, e) && (this.streamInfo[e] = this.extraStreamInfo[e]);
                    },
                    lock: function() {
                        if (this.isLocked) throw new Error("The stream '" + this + "' has already been used.");
                        this.isLocked = !0, this.previous && this.previous.lock();
                    },
                    toString: function() {
                        var e = "Worker " + this.name;
                        return this.previous ? this.previous + " -> " + e : e;
                    }
                }, t.exports = n;
            },
            {}
        ],
        29: [
            function(e, t, r) {
                "use strict";
                var h = e("../utils"), i = e("./ConvertWorker"), s = e("./GenericWorker"), u = e("../base64"), n = e("../support"), a = e("../external"), o = null;
                if (n.nodestream) try {
                    o = e("../nodejs/NodejsStreamOutputAdapter");
                } catch (e) {}
                function l(e, o) {
                    return new a.Promise(function(t, r) {
                        var n = [], i = e._internalType, s = e._outputType, a = e._mimeType;
                        e.on("data", function(e, t) {
                            n.push(e), o && o(t);
                        }).on("error", function(e) {
                            n = [], r(e);
                        }).on("end", function() {
                            try {
                                var e = function(e, t, r) {
                                    switch(e){
                                        case "blob":
                                            return h.newBlob(h.transformTo("arraybuffer", t), r);
                                        case "base64":
                                            return u.encode(t);
                                        default:
                                            return h.transformTo(e, t);
                                    }
                                }(s, function(e, t) {
                                    var r, n = 0, i = null, s = 0;
                                    for(r = 0; r < t.length; r++)s += t[r].length;
                                    switch(e){
                                        case "string":
                                            return t.join("");
                                        case "array":
                                            return Array.prototype.concat.apply([], t);
                                        case "uint8array":
                                            for(i = new Uint8Array(s), r = 0; r < t.length; r++)i.set(t[r], n), n += t[r].length;
                                            return i;
                                        case "nodebuffer":
                                            return Buffer.concat(t);
                                        default:
                                            throw new Error("concat : unsupported type '" + e + "'");
                                    }
                                }(i, n), a);
                                t(e);
                            } catch (e) {
                                r(e);
                            }
                            n = [];
                        }).resume();
                    });
                }
                function f(e, t, r) {
                    var n = t;
                    switch(t){
                        case "blob":
                        case "arraybuffer":
                            n = "uint8array";
                            break;
                        case "base64":
                            n = "string";
                    }
                    try {
                        this._internalType = n, this._outputType = t, this._mimeType = r, h.checkSupport(n), this._worker = e.pipe(new i(n)), e.lock();
                    } catch (e) {
                        this._worker = new s("error"), this._worker.error(e);
                    }
                }
                f.prototype = {
                    accumulate: function(e) {
                        return l(this, e);
                    },
                    on: function(e, t) {
                        var r = this;
                        return "data" === e ? this._worker.on(e, function(e) {
                            t.call(r, e.data, e.meta);
                        }) : this._worker.on(e, function() {
                            h.delay(t, arguments, r);
                        }), this;
                    },
                    resume: function() {
                        return h.delay(this._worker.resume, [], this._worker), this;
                    },
                    pause: function() {
                        return this._worker.pause(), this;
                    },
                    toNodejsStream: function(e) {
                        if (h.checkSupport("nodestream"), "nodebuffer" !== this._outputType) throw new Error(this._outputType + " is not supported by this method");
                        return new o(this, {
                            objectMode: "nodebuffer" !== this._outputType
                        }, e);
                    }
                }, t.exports = f;
            },
            {
                "../base64": 1,
                "../external": 6,
                "../nodejs/NodejsStreamOutputAdapter": 13,
                "../support": 30,
                "../utils": 32,
                "./ConvertWorker": 24,
                "./GenericWorker": 28
            }
        ],
        30: [
            function(e, t, r) {
                "use strict";
                if (r.base64 = !0, r.array = !0, r.string = !0, r.arraybuffer = "undefined" != typeof ArrayBuffer && "undefined" != typeof Uint8Array, r.nodebuffer = "undefined" != typeof Buffer, r.uint8array = "undefined" != typeof Uint8Array, "undefined" == typeof ArrayBuffer) r.blob = !1;
                else {
                    var n = new ArrayBuffer(0);
                    try {
                        r.blob = 0 === new Blob([
                            n
                        ], {
                            type: "application/zip"
                        }).size;
                    } catch (e) {
                        try {
                            var i = new (self.BlobBuilder || self.WebKitBlobBuilder || self.MozBlobBuilder || self.MSBlobBuilder);
                            i.append(n), r.blob = 0 === i.getBlob("application/zip").size;
                        } catch (e) {
                            r.blob = !1;
                        }
                    }
                }
                try {
                    r.nodestream = !!e("readable-stream").Readable;
                } catch (e) {
                    r.nodestream = !1;
                }
            },
            {
                "readable-stream": 16
            }
        ],
        31: [
            function(e, t, s) {
                "use strict";
                for(var o = e("./utils"), h = e("./support"), r = e("./nodejsUtils"), n = e("./stream/GenericWorker"), u = new Array(256), i = 0; i < 256; i++)u[i] = 252 <= i ? 6 : 248 <= i ? 5 : 240 <= i ? 4 : 224 <= i ? 3 : 192 <= i ? 2 : 1;
                u[254] = u[254] = 1;
                function a() {
                    n.call(this, "utf-8 decode"), this.leftOver = null;
                }
                function l() {
                    n.call(this, "utf-8 encode");
                }
                s.utf8encode = function(e) {
                    return h.nodebuffer ? r.newBufferFrom(e, "utf-8") : function(e) {
                        var t, r, n, i, s, a = e.length, o = 0;
                        for(i = 0; i < a; i++)55296 == (64512 & (r = e.charCodeAt(i))) && i + 1 < a && 56320 == (64512 & (n = e.charCodeAt(i + 1))) && (r = 65536 + (r - 55296 << 10) + (n - 56320), i++), o += r < 128 ? 1 : r < 2048 ? 2 : r < 65536 ? 3 : 4;
                        for(t = h.uint8array ? new Uint8Array(o) : new Array(o), i = s = 0; s < o; i++)55296 == (64512 & (r = e.charCodeAt(i))) && i + 1 < a && 56320 == (64512 & (n = e.charCodeAt(i + 1))) && (r = 65536 + (r - 55296 << 10) + (n - 56320), i++), r < 128 ? t[s++] = r : (r < 2048 ? t[s++] = 192 | r >>> 6 : (r < 65536 ? t[s++] = 224 | r >>> 12 : (t[s++] = 240 | r >>> 18, t[s++] = 128 | r >>> 12 & 63), t[s++] = 128 | r >>> 6 & 63), t[s++] = 128 | 63 & r);
                        return t;
                    }(e);
                }, s.utf8decode = function(e) {
                    return h.nodebuffer ? o.transformTo("nodebuffer", e).toString("utf-8") : function(e) {
                        var t, r, n, i, s = e.length, a = new Array(2 * s);
                        for(t = r = 0; t < s;)if ((n = e[t++]) < 128) a[r++] = n;
                        else if (4 < (i = u[n])) a[r++] = 65533, t += i - 1;
                        else {
                            for(n &= 2 === i ? 31 : 3 === i ? 15 : 7; 1 < i && t < s;)n = n << 6 | 63 & e[t++], i--;
                            1 < i ? a[r++] = 65533 : n < 65536 ? a[r++] = n : (n -= 65536, a[r++] = 55296 | n >> 10 & 1023, a[r++] = 56320 | 1023 & n);
                        }
                        return a.length !== r && (a.subarray ? a = a.subarray(0, r) : a.length = r), o.applyFromCharCode(a);
                    }(e = o.transformTo(h.uint8array ? "uint8array" : "array", e));
                }, o.inherits(a, n), a.prototype.processChunk = function(e) {
                    var t = o.transformTo(h.uint8array ? "uint8array" : "array", e.data);
                    if (this.leftOver && this.leftOver.length) {
                        if (h.uint8array) {
                            var r = t;
                            (t = new Uint8Array(r.length + this.leftOver.length)).set(this.leftOver, 0), t.set(r, this.leftOver.length);
                        } else t = this.leftOver.concat(t);
                        this.leftOver = null;
                    }
                    var n = function(e, t) {
                        var r;
                        for((t = t || e.length) > e.length && (t = e.length), r = t - 1; 0 <= r && 128 == (192 & e[r]);)r--;
                        return r < 0 ? t : 0 === r ? t : r + u[e[r]] > t ? r : t;
                    }(t), i = t;
                    n !== t.length && (h.uint8array ? (i = t.subarray(0, n), this.leftOver = t.subarray(n, t.length)) : (i = t.slice(0, n), this.leftOver = t.slice(n, t.length))), this.push({
                        data: s.utf8decode(i),
                        meta: e.meta
                    });
                }, a.prototype.flush = function() {
                    this.leftOver && this.leftOver.length && (this.push({
                        data: s.utf8decode(this.leftOver),
                        meta: {}
                    }), this.leftOver = null);
                }, s.Utf8DecodeWorker = a, o.inherits(l, n), l.prototype.processChunk = function(e) {
                    this.push({
                        data: s.utf8encode(e.data),
                        meta: e.meta
                    });
                }, s.Utf8EncodeWorker = l;
            },
            {
                "./nodejsUtils": 14,
                "./stream/GenericWorker": 28,
                "./support": 30,
                "./utils": 32
            }
        ],
        32: [
            function(e, t, a) {
                "use strict";
                var o = e("./support"), h = e("./base64"), r = e("./nodejsUtils"), u = e("./external");
                function n(e) {
                    return e;
                }
                function l(e, t) {
                    for(var r = 0; r < e.length; ++r)t[r] = 255 & e.charCodeAt(r);
                    return t;
                }
                e("setimmediate"), a.newBlob = function(t, r) {
                    a.checkSupport("blob");
                    try {
                        return new Blob([
                            t
                        ], {
                            type: r
                        });
                    } catch (e) {
                        try {
                            var n = new (self.BlobBuilder || self.WebKitBlobBuilder || self.MozBlobBuilder || self.MSBlobBuilder);
                            return n.append(t), n.getBlob(r);
                        } catch (e) {
                            throw new Error("Bug : can't construct the Blob.");
                        }
                    }
                };
                var i = {
                    stringifyByChunk: function(e, t, r) {
                        var n = [], i = 0, s = e.length;
                        if (s <= r) return String.fromCharCode.apply(null, e);
                        for(; i < s;)"array" === t || "nodebuffer" === t ? n.push(String.fromCharCode.apply(null, e.slice(i, Math.min(i + r, s)))) : n.push(String.fromCharCode.apply(null, e.subarray(i, Math.min(i + r, s)))), i += r;
                        return n.join("");
                    },
                    stringifyByChar: function(e) {
                        for(var t = "", r = 0; r < e.length; r++)t += String.fromCharCode(e[r]);
                        return t;
                    },
                    applyCanBeUsed: {
                        uint8array: function() {
                            try {
                                return o.uint8array && 1 === String.fromCharCode.apply(null, new Uint8Array(1)).length;
                            } catch (e) {
                                return !1;
                            }
                        }(),
                        nodebuffer: function() {
                            try {
                                return o.nodebuffer && 1 === String.fromCharCode.apply(null, r.allocBuffer(1)).length;
                            } catch (e) {
                                return !1;
                            }
                        }()
                    }
                };
                function s(e) {
                    var t = 65536, r = a.getTypeOf(e), n = !0;
                    if ("uint8array" === r ? n = i.applyCanBeUsed.uint8array : "nodebuffer" === r && (n = i.applyCanBeUsed.nodebuffer), n) for(; 1 < t;)try {
                        return i.stringifyByChunk(e, r, t);
                    } catch (e) {
                        t = Math.floor(t / 2);
                    }
                    return i.stringifyByChar(e);
                }
                function f(e, t) {
                    for(var r = 0; r < e.length; r++)t[r] = e[r];
                    return t;
                }
                a.applyFromCharCode = s;
                var c = {};
                c.string = {
                    string: n,
                    array: function(e) {
                        return l(e, new Array(e.length));
                    },
                    arraybuffer: function(e) {
                        return c.string.uint8array(e).buffer;
                    },
                    uint8array: function(e) {
                        return l(e, new Uint8Array(e.length));
                    },
                    nodebuffer: function(e) {
                        return l(e, r.allocBuffer(e.length));
                    }
                }, c.array = {
                    string: s,
                    array: n,
                    arraybuffer: function(e) {
                        return new Uint8Array(e).buffer;
                    },
                    uint8array: function(e) {
                        return new Uint8Array(e);
                    },
                    nodebuffer: function(e) {
                        return r.newBufferFrom(e);
                    }
                }, c.arraybuffer = {
                    string: function(e) {
                        return s(new Uint8Array(e));
                    },
                    array: function(e) {
                        return f(new Uint8Array(e), new Array(e.byteLength));
                    },
                    arraybuffer: n,
                    uint8array: function(e) {
                        return new Uint8Array(e);
                    },
                    nodebuffer: function(e) {
                        return r.newBufferFrom(new Uint8Array(e));
                    }
                }, c.uint8array = {
                    string: s,
                    array: function(e) {
                        return f(e, new Array(e.length));
                    },
                    arraybuffer: function(e) {
                        return e.buffer;
                    },
                    uint8array: n,
                    nodebuffer: function(e) {
                        return r.newBufferFrom(e);
                    }
                }, c.nodebuffer = {
                    string: s,
                    array: function(e) {
                        return f(e, new Array(e.length));
                    },
                    arraybuffer: function(e) {
                        return c.nodebuffer.uint8array(e).buffer;
                    },
                    uint8array: function(e) {
                        return f(e, new Uint8Array(e.length));
                    },
                    nodebuffer: n
                }, a.transformTo = function(e, t) {
                    if (t = t || "", !e) return t;
                    a.checkSupport(e);
                    var r = a.getTypeOf(t);
                    return c[r][e](t);
                }, a.resolve = function(e) {
                    for(var t = e.split("/"), r = [], n = 0; n < t.length; n++){
                        var i = t[n];
                        "." === i || "" === i && 0 !== n && n !== t.length - 1 || (".." === i ? r.pop() : r.push(i));
                    }
                    return r.join("/");
                }, a.getTypeOf = function(e) {
                    return "string" == typeof e ? "string" : "[object Array]" === Object.prototype.toString.call(e) ? "array" : o.nodebuffer && r.isBuffer(e) ? "nodebuffer" : o.uint8array && e instanceof Uint8Array ? "uint8array" : o.arraybuffer && e instanceof ArrayBuffer ? "arraybuffer" : void 0;
                }, a.checkSupport = function(e) {
                    if (!o[e.toLowerCase()]) throw new Error(e + " is not supported by this platform");
                }, a.MAX_VALUE_16BITS = 65535, a.MAX_VALUE_32BITS = -1, a.pretty = function(e) {
                    var t, r, n = "";
                    for(r = 0; r < (e || "").length; r++)n += "\\x" + ((t = e.charCodeAt(r)) < 16 ? "0" : "") + t.toString(16).toUpperCase();
                    return n;
                }, a.delay = function(e, t, r) {
                    setImmediate(function() {
                        e.apply(r || null, t || []);
                    });
                }, a.inherits = function(e, t) {
                    function r() {}
                    r.prototype = t.prototype, e.prototype = new r;
                }, a.extend = function() {
                    var e, t, r = {};
                    for(e = 0; e < arguments.length; e++)for(t in arguments[e])Object.prototype.hasOwnProperty.call(arguments[e], t) && void 0 === r[t] && (r[t] = arguments[e][t]);
                    return r;
                }, a.prepareContent = function(r, e, n, i, s) {
                    return u.Promise.resolve(e).then(function(n) {
                        return o.blob && (n instanceof Blob || -1 !== [
                            "[object File]",
                            "[object Blob]"
                        ].indexOf(Object.prototype.toString.call(n))) && "undefined" != typeof FileReader ? new u.Promise(function(t, r) {
                            var e = new FileReader;
                            e.onload = function(e) {
                                t(e.target.result);
                            }, e.onerror = function(e) {
                                r(e.target.error);
                            }, e.readAsArrayBuffer(n);
                        }) : n;
                    }).then(function(e) {
                        var t = a.getTypeOf(e);
                        return t ? ("arraybuffer" === t ? e = a.transformTo("uint8array", e) : "string" === t && (s ? e = h.decode(e) : n && !0 !== i && (e = function(e) {
                            return l(e, o.uint8array ? new Uint8Array(e.length) : new Array(e.length));
                        }(e))), e) : u.Promise.reject(new Error("Can't read the data of '" + r + "'. Is it in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?"));
                    });
                };
            },
            {
                "./base64": 1,
                "./external": 6,
                "./nodejsUtils": 14,
                "./support": 30,
                setimmediate: 54
            }
        ],
        33: [
            function(e, t, r) {
                "use strict";
                var n = e("./reader/readerFor"), i = e("./utils"), s = e("./signature"), a = e("./zipEntry"), o = e("./support");
                function h(e) {
                    this.files = [], this.loadOptions = e;
                }
                h.prototype = {
                    checkSignature: function(e) {
                        if (!this.reader.readAndCheckSignature(e)) {
                            this.reader.index -= 4;
                            var t = this.reader.readString(4);
                            throw new Error("Corrupted zip or bug: unexpected signature (" + i.pretty(t) + ", expected " + i.pretty(e) + ")");
                        }
                    },
                    isSignature: function(e, t) {
                        var r = this.reader.index;
                        this.reader.setIndex(e);
                        var n = this.reader.readString(4) === t;
                        return this.reader.setIndex(r), n;
                    },
                    readBlockEndOfCentral: function() {
                        this.diskNumber = this.reader.readInt(2), this.diskWithCentralDirStart = this.reader.readInt(2), this.centralDirRecordsOnThisDisk = this.reader.readInt(2), this.centralDirRecords = this.reader.readInt(2), this.centralDirSize = this.reader.readInt(4), this.centralDirOffset = this.reader.readInt(4), this.zipCommentLength = this.reader.readInt(2);
                        var e = this.reader.readData(this.zipCommentLength), t = o.uint8array ? "uint8array" : "array", r = i.transformTo(t, e);
                        this.zipComment = this.loadOptions.decodeFileName(r);
                    },
                    readBlockZip64EndOfCentral: function() {
                        this.zip64EndOfCentralSize = this.reader.readInt(8), this.reader.skip(4), this.diskNumber = this.reader.readInt(4), this.diskWithCentralDirStart = this.reader.readInt(4), this.centralDirRecordsOnThisDisk = this.reader.readInt(8), this.centralDirRecords = this.reader.readInt(8), this.centralDirSize = this.reader.readInt(8), this.centralDirOffset = this.reader.readInt(8), this.zip64ExtensibleData = {};
                        for(var e, t, r, n = this.zip64EndOfCentralSize - 44; 0 < n;)e = this.reader.readInt(2), t = this.reader.readInt(4), r = this.reader.readData(t), this.zip64ExtensibleData[e] = {
                            id: e,
                            length: t,
                            value: r
                        };
                    },
                    readBlockZip64EndOfCentralLocator: function() {
                        if (this.diskWithZip64CentralDirStart = this.reader.readInt(4), this.relativeOffsetEndOfZip64CentralDir = this.reader.readInt(8), this.disksCount = this.reader.readInt(4), 1 < this.disksCount) throw new Error("Multi-volumes zip are not supported");
                    },
                    readLocalFiles: function() {
                        var e, t;
                        for(e = 0; e < this.files.length; e++)t = this.files[e], this.reader.setIndex(t.localHeaderOffset), this.checkSignature(s.LOCAL_FILE_HEADER), t.readLocalPart(this.reader), t.handleUTF8(), t.processAttributes();
                    },
                    readCentralDir: function() {
                        var e;
                        for(this.reader.setIndex(this.centralDirOffset); this.reader.readAndCheckSignature(s.CENTRAL_FILE_HEADER);)(e = new a({
                            zip64: this.zip64
                        }, this.loadOptions)).readCentralPart(this.reader), this.files.push(e);
                        if (this.centralDirRecords !== this.files.length && 0 !== this.centralDirRecords && 0 === this.files.length) throw new Error("Corrupted zip or bug: expected " + this.centralDirRecords + " records in central dir, got " + this.files.length);
                    },
                    readEndOfCentral: function() {
                        var e = this.reader.lastIndexOfSignature(s.CENTRAL_DIRECTORY_END);
                        if (e < 0) throw !this.isSignature(0, s.LOCAL_FILE_HEADER) ? new Error("Can't find end of central directory : is this a zip file ? If it is, see https://stuk.github.io/jszip/documentation/howto/read_zip.html") : new Error("Corrupted zip: can't find end of central directory");
                        this.reader.setIndex(e);
                        var t = e;
                        if (this.checkSignature(s.CENTRAL_DIRECTORY_END), this.readBlockEndOfCentral(), this.diskNumber === i.MAX_VALUE_16BITS || this.diskWithCentralDirStart === i.MAX_VALUE_16BITS || this.centralDirRecordsOnThisDisk === i.MAX_VALUE_16BITS || this.centralDirRecords === i.MAX_VALUE_16BITS || this.centralDirSize === i.MAX_VALUE_32BITS || this.centralDirOffset === i.MAX_VALUE_32BITS) {
                            if (this.zip64 = !0, (e = this.reader.lastIndexOfSignature(s.ZIP64_CENTRAL_DIRECTORY_LOCATOR)) < 0) throw new Error("Corrupted zip: can't find the ZIP64 end of central directory locator");
                            if (this.reader.setIndex(e), this.checkSignature(s.ZIP64_CENTRAL_DIRECTORY_LOCATOR), this.readBlockZip64EndOfCentralLocator(), !this.isSignature(this.relativeOffsetEndOfZip64CentralDir, s.ZIP64_CENTRAL_DIRECTORY_END) && (this.relativeOffsetEndOfZip64CentralDir = this.reader.lastIndexOfSignature(s.ZIP64_CENTRAL_DIRECTORY_END), this.relativeOffsetEndOfZip64CentralDir < 0)) throw new Error("Corrupted zip: can't find the ZIP64 end of central directory");
                            this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir), this.checkSignature(s.ZIP64_CENTRAL_DIRECTORY_END), this.readBlockZip64EndOfCentral();
                        }
                        var r = this.centralDirOffset + this.centralDirSize;
                        this.zip64 && (r += 20, r += 12 + this.zip64EndOfCentralSize);
                        var n = t - r;
                        if (0 < n) this.isSignature(t, s.CENTRAL_FILE_HEADER) || (this.reader.zero = n);
                        else if (n < 0) throw new Error("Corrupted zip: missing " + Math.abs(n) + " bytes.");
                    },
                    prepareReader: function(e) {
                        this.reader = n(e);
                    },
                    load: function(e) {
                        this.prepareReader(e), this.readEndOfCentral(), this.readCentralDir(), this.readLocalFiles();
                    }
                }, t.exports = h;
            },
            {
                "./reader/readerFor": 22,
                "./signature": 23,
                "./support": 30,
                "./utils": 32,
                "./zipEntry": 34
            }
        ],
        34: [
            function(e, t, r) {
                "use strict";
                var n = e("./reader/readerFor"), s = e("./utils"), i = e("./compressedObject"), a = e("./crc32"), o = e("./utf8"), h = e("./compressions"), u = e("./support");
                function l(e, t) {
                    this.options = e, this.loadOptions = t;
                }
                l.prototype = {
                    isEncrypted: function() {
                        return 1 == (1 & this.bitFlag);
                    },
                    useUTF8: function() {
                        return 2048 == (2048 & this.bitFlag);
                    },
                    readLocalPart: function(e) {
                        var t, r;
                        if (e.skip(22), this.fileNameLength = e.readInt(2), r = e.readInt(2), this.fileName = e.readData(this.fileNameLength), e.skip(r), -1 === this.compressedSize || -1 === this.uncompressedSize) throw new Error("Bug or corrupted zip : didn't get enough information from the central directory (compressedSize === -1 || uncompressedSize === -1)");
                        if (null === (t = function(e) {
                            for(var t in h)if (Object.prototype.hasOwnProperty.call(h, t) && h[t].magic === e) return h[t];
                            return null;
                        }(this.compressionMethod))) throw new Error("Corrupted zip : compression " + s.pretty(this.compressionMethod) + " unknown (inner file : " + s.transformTo("string", this.fileName) + ")");
                        this.decompressed = new i(this.compressedSize, this.uncompressedSize, this.crc32, t, e.readData(this.compressedSize));
                    },
                    readCentralPart: function(e) {
                        this.versionMadeBy = e.readInt(2), e.skip(2), this.bitFlag = e.readInt(2), this.compressionMethod = e.readString(2), this.date = e.readDate(), this.crc32 = e.readInt(4), this.compressedSize = e.readInt(4), this.uncompressedSize = e.readInt(4);
                        var t = e.readInt(2);
                        if (this.extraFieldsLength = e.readInt(2), this.fileCommentLength = e.readInt(2), this.diskNumberStart = e.readInt(2), this.internalFileAttributes = e.readInt(2), this.externalFileAttributes = e.readInt(4), this.localHeaderOffset = e.readInt(4), this.isEncrypted()) throw new Error("Encrypted zip are not supported");
                        e.skip(t), this.readExtraFields(e), this.parseZIP64ExtraField(e), this.fileComment = e.readData(this.fileCommentLength);
                    },
                    processAttributes: function() {
                        this.unixPermissions = null, this.dosPermissions = null;
                        var e = this.versionMadeBy >> 8;
                        this.dir = !!(16 & this.externalFileAttributes), 0 == e && (this.dosPermissions = 63 & this.externalFileAttributes), 3 == e && (this.unixPermissions = this.externalFileAttributes >> 16 & 65535), this.dir || "/" !== this.fileNameStr.slice(-1) || (this.dir = !0);
                    },
                    parseZIP64ExtraField: function() {
                        if (this.extraFields[1]) {
                            var e = n(this.extraFields[1].value);
                            this.uncompressedSize === s.MAX_VALUE_32BITS && (this.uncompressedSize = e.readInt(8)), this.compressedSize === s.MAX_VALUE_32BITS && (this.compressedSize = e.readInt(8)), this.localHeaderOffset === s.MAX_VALUE_32BITS && (this.localHeaderOffset = e.readInt(8)), this.diskNumberStart === s.MAX_VALUE_32BITS && (this.diskNumberStart = e.readInt(4));
                        }
                    },
                    readExtraFields: function(e) {
                        var t, r, n, i = e.index + this.extraFieldsLength;
                        for(this.extraFields || (this.extraFields = {}); e.index + 4 < i;)t = e.readInt(2), r = e.readInt(2), n = e.readData(r), this.extraFields[t] = {
                            id: t,
                            length: r,
                            value: n
                        };
                        e.setIndex(i);
                    },
                    handleUTF8: function() {
                        var e = u.uint8array ? "uint8array" : "array";
                        if (this.useUTF8()) this.fileNameStr = o.utf8decode(this.fileName), this.fileCommentStr = o.utf8decode(this.fileComment);
                        else {
                            var t = this.findExtraFieldUnicodePath();
                            if (null !== t) this.fileNameStr = t;
                            else {
                                var r = s.transformTo(e, this.fileName);
                                this.fileNameStr = this.loadOptions.decodeFileName(r);
                            }
                            var n = this.findExtraFieldUnicodeComment();
                            if (null !== n) this.fileCommentStr = n;
                            else {
                                var i = s.transformTo(e, this.fileComment);
                                this.fileCommentStr = this.loadOptions.decodeFileName(i);
                            }
                        }
                    },
                    findExtraFieldUnicodePath: function() {
                        var e = this.extraFields[28789];
                        if (e) {
                            var t = n(e.value);
                            return 1 !== t.readInt(1) ? null : a(this.fileName) !== t.readInt(4) ? null : o.utf8decode(t.readData(e.length - 5));
                        }
                        return null;
                    },
                    findExtraFieldUnicodeComment: function() {
                        var e = this.extraFields[25461];
                        if (e) {
                            var t = n(e.value);
                            return 1 !== t.readInt(1) ? null : a(this.fileComment) !== t.readInt(4) ? null : o.utf8decode(t.readData(e.length - 5));
                        }
                        return null;
                    }
                }, t.exports = l;
            },
            {
                "./compressedObject": 2,
                "./compressions": 3,
                "./crc32": 4,
                "./reader/readerFor": 22,
                "./support": 30,
                "./utf8": 31,
                "./utils": 32
            }
        ],
        35: [
            function(e, t, r) {
                "use strict";
                function n(e, t, r) {
                    this.name = e, this.dir = r.dir, this.date = r.date, this.comment = r.comment, this.unixPermissions = r.unixPermissions, this.dosPermissions = r.dosPermissions, this._data = t, this._dataBinary = r.binary, this.options = {
                        compression: r.compression,
                        compressionOptions: r.compressionOptions
                    };
                }
                var s = e("./stream/StreamHelper"), i = e("./stream/DataWorker"), a = e("./utf8"), o = e("./compressedObject"), h = e("./stream/GenericWorker");
                n.prototype = {
                    internalStream: function(e) {
                        var t = null, r = "string";
                        try {
                            if (!e) throw new Error("No output type specified.");
                            var n = "string" === (r = e.toLowerCase()) || "text" === r;
                            "binarystring" !== r && "text" !== r || (r = "string"), t = this._decompressWorker();
                            var i = !this._dataBinary;
                            i && !n && (t = t.pipe(new a.Utf8EncodeWorker)), !i && n && (t = t.pipe(new a.Utf8DecodeWorker));
                        } catch (e) {
                            (t = new h("error")).error(e);
                        }
                        return new s(t, r, "");
                    },
                    async: function(e, t) {
                        return this.internalStream(e).accumulate(t);
                    },
                    nodeStream: function(e, t) {
                        return this.internalStream(e || "nodebuffer").toNodejsStream(t);
                    },
                    _compressWorker: function(e, t) {
                        if (this._data instanceof o && this._data.compression.magic === e.magic) return this._data.getCompressedWorker();
                        var r = this._decompressWorker();
                        return this._dataBinary || (r = r.pipe(new a.Utf8EncodeWorker)), o.createWorkerFrom(r, e, t);
                    },
                    _decompressWorker: function() {
                        return this._data instanceof o ? this._data.getContentWorker() : this._data instanceof h ? this._data : new i(this._data);
                    }
                };
                for(var u = [
                    "asText",
                    "asBinary",
                    "asNodeBuffer",
                    "asUint8Array",
                    "asArrayBuffer"
                ], l = function() {
                    throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.");
                }, f = 0; f < u.length; f++)n.prototype[u[f]] = l;
                t.exports = n;
            },
            {
                "./compressedObject": 2,
                "./stream/DataWorker": 27,
                "./stream/GenericWorker": 28,
                "./stream/StreamHelper": 29,
                "./utf8": 31
            }
        ],
        36: [
            function(e, l, t) {
                (function(t) {
                    "use strict";
                    var r, n, e = t.MutationObserver || t.WebKitMutationObserver;
                    if (e) {
                        var i = 0, s = new e(u), a = t.document.createTextNode("");
                        s.observe(a, {
                            characterData: !0
                        }), r = function() {
                            a.data = i = ++i % 2;
                        };
                    } else if (t.setImmediate || void 0 === t.MessageChannel) r = "document" in t && "onreadystatechange" in t.document.createElement("script") ? function() {
                        var e = t.document.createElement("script");
                        e.onreadystatechange = function() {
                            u(), e.onreadystatechange = null, e.parentNode.removeChild(e), e = null;
                        }, t.document.documentElement.appendChild(e);
                    } : function() {
                        setTimeout(u, 0);
                    };
                    else {
                        var o = new t.MessageChannel;
                        o.port1.onmessage = u, r = function() {
                            o.port2.postMessage(0);
                        };
                    }
                    var h = [];
                    function u() {
                        var e, t;
                        n = !0;
                        for(var r = h.length; r;){
                            for(t = h, h = [], e = -1; ++e < r;)t[e]();
                            r = h.length;
                        }
                        n = !1;
                    }
                    l.exports = function(e) {
                        1 !== h.push(e) || n || r();
                    };
                }).call(this, "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});
            },
            {}
        ],
        37: [
            function(e, t, r) {
                "use strict";
                var i = e("immediate");
                function u() {}
                var l = {}, s = [
                    "REJECTED"
                ], a = [
                    "FULFILLED"
                ], n = [
                    "PENDING"
                ];
                function o(e) {
                    if ("function" != typeof e) throw new TypeError("resolver must be a function");
                    this.state = n, this.queue = [], this.outcome = void 0, e !== u && d(this, e);
                }
                function h(e, t, r) {
                    this.promise = e, "function" == typeof t && (this.onFulfilled = t, this.callFulfilled = this.otherCallFulfilled), "function" == typeof r && (this.onRejected = r, this.callRejected = this.otherCallRejected);
                }
                function f(t, r, n) {
                    i(function() {
                        var e;
                        try {
                            e = r(n);
                        } catch (e) {
                            return l.reject(t, e);
                        }
                        e === t ? l.reject(t, new TypeError("Cannot resolve promise with itself")) : l.resolve(t, e);
                    });
                }
                function c(e) {
                    var t = e && e.then;
                    if (e && ("object" == typeof e || "function" == typeof e) && "function" == typeof t) return function() {
                        t.apply(e, arguments);
                    };
                }
                function d(t, e) {
                    var r = !1;
                    function n(e) {
                        r || (r = !0, l.reject(t, e));
                    }
                    function i(e) {
                        r || (r = !0, l.resolve(t, e));
                    }
                    var s = p(function() {
                        e(i, n);
                    });
                    "error" === s.status && n(s.value);
                }
                function p(e, t) {
                    var r = {};
                    try {
                        r.value = e(t), r.status = "success";
                    } catch (e) {
                        r.status = "error", r.value = e;
                    }
                    return r;
                }
                (t.exports = o).prototype.finally = function(t) {
                    if ("function" != typeof t) return this;
                    var r = this.constructor;
                    return this.then(function(e) {
                        return r.resolve(t()).then(function() {
                            return e;
                        });
                    }, function(e) {
                        return r.resolve(t()).then(function() {
                            throw e;
                        });
                    });
                }, o.prototype.catch = function(e) {
                    return this.then(null, e);
                }, o.prototype.then = function(e, t) {
                    if ("function" != typeof e && this.state === a || "function" != typeof t && this.state === s) return this;
                    var r = new this.constructor(u);
                    this.state !== n ? f(r, this.state === a ? e : t, this.outcome) : this.queue.push(new h(r, e, t));
                    return r;
                }, h.prototype.callFulfilled = function(e) {
                    l.resolve(this.promise, e);
                }, h.prototype.otherCallFulfilled = function(e) {
                    f(this.promise, this.onFulfilled, e);
                }, h.prototype.callRejected = function(e) {
                    l.reject(this.promise, e);
                }, h.prototype.otherCallRejected = function(e) {
                    f(this.promise, this.onRejected, e);
                }, l.resolve = function(e, t) {
                    var r = p(c, t);
                    if ("error" === r.status) return l.reject(e, r.value);
                    var n = r.value;
                    if (n) d(e, n);
                    else {
                        e.state = a, e.outcome = t;
                        for(var i = -1, s = e.queue.length; ++i < s;)e.queue[i].callFulfilled(t);
                    }
                    return e;
                }, l.reject = function(e, t) {
                    e.state = s, e.outcome = t;
                    for(var r = -1, n = e.queue.length; ++r < n;)e.queue[r].callRejected(t);
                    return e;
                }, o.resolve = function(e) {
                    if (e instanceof this) return e;
                    return l.resolve(new this(u), e);
                }, o.reject = function(e) {
                    var t = new this(u);
                    return l.reject(t, e);
                }, o.all = function(e) {
                    var r = this;
                    if ("[object Array]" !== Object.prototype.toString.call(e)) return this.reject(new TypeError("must be an array"));
                    var n = e.length, i = !1;
                    if (!n) return this.resolve([]);
                    var s = new Array(n), a = 0, t = -1, o = new this(u);
                    for(; ++t < n;)h(e[t], t);
                    return o;
                    function h(e, t) {
                        r.resolve(e).then(function(e) {
                            s[t] = e, ++a !== n || i || (i = !0, l.resolve(o, s));
                        }, function(e) {
                            i || (i = !0, l.reject(o, e));
                        });
                    }
                }, o.race = function(e) {
                    var t = this;
                    if ("[object Array]" !== Object.prototype.toString.call(e)) return this.reject(new TypeError("must be an array"));
                    var r = e.length, n = !1;
                    if (!r) return this.resolve([]);
                    var i = -1, s = new this(u);
                    for(; ++i < r;)a = e[i], t.resolve(a).then(function(e) {
                        n || (n = !0, l.resolve(s, e));
                    }, function(e) {
                        n || (n = !0, l.reject(s, e));
                    });
                    var a;
                    return s;
                };
            },
            {
                immediate: 36
            }
        ],
        38: [
            function(e, t, r) {
                "use strict";
                var n = {};
                (0, e("./lib/utils/common").assign)(n, e("./lib/deflate"), e("./lib/inflate"), e("./lib/zlib/constants")), t.exports = n;
            },
            {
                "./lib/deflate": 39,
                "./lib/inflate": 40,
                "./lib/utils/common": 41,
                "./lib/zlib/constants": 44
            }
        ],
        39: [
            function(e, t, r) {
                "use strict";
                var a = e("./zlib/deflate"), o = e("./utils/common"), h = e("./utils/strings"), i = e("./zlib/messages"), s = e("./zlib/zstream"), u = Object.prototype.toString, l = 0, f = -1, c = 0, d = 8;
                function p(e) {
                    if (!(this instanceof p)) return new p(e);
                    this.options = o.assign({
                        level: f,
                        method: d,
                        chunkSize: 16384,
                        windowBits: 15,
                        memLevel: 8,
                        strategy: c,
                        to: ""
                    }, e || {});
                    var t = this.options;
                    t.raw && 0 < t.windowBits ? t.windowBits = -t.windowBits : t.gzip && 0 < t.windowBits && t.windowBits < 16 && (t.windowBits += 16), this.err = 0, this.msg = "", this.ended = !1, this.chunks = [], this.strm = new s, this.strm.avail_out = 0;
                    var r = a.deflateInit2(this.strm, t.level, t.method, t.windowBits, t.memLevel, t.strategy);
                    if (r !== l) throw new Error(i[r]);
                    if (t.header && a.deflateSetHeader(this.strm, t.header), t.dictionary) {
                        var n;
                        if (n = "string" == typeof t.dictionary ? h.string2buf(t.dictionary) : "[object ArrayBuffer]" === u.call(t.dictionary) ? new Uint8Array(t.dictionary) : t.dictionary, (r = a.deflateSetDictionary(this.strm, n)) !== l) throw new Error(i[r]);
                        this._dict_set = !0;
                    }
                }
                function n(e, t) {
                    var r = new p(t);
                    if (r.push(e, !0), r.err) throw r.msg || i[r.err];
                    return r.result;
                }
                p.prototype.push = function(e, t) {
                    var r, n, i = this.strm, s = this.options.chunkSize;
                    if (this.ended) return !1;
                    n = t === ~~t ? t : !0 === t ? 4 : 0, "string" == typeof e ? i.input = h.string2buf(e) : "[object ArrayBuffer]" === u.call(e) ? i.input = new Uint8Array(e) : i.input = e, i.next_in = 0, i.avail_in = i.input.length;
                    do {
                        if (0 === i.avail_out && (i.output = new o.Buf8(s), i.next_out = 0, i.avail_out = s), 1 !== (r = a.deflate(i, n)) && r !== l) return this.onEnd(r), this.ended = !0, false;
                        0 !== i.avail_out && (0 !== i.avail_in || 4 !== n && 2 !== n) || ("string" === this.options.to ? this.onData(h.buf2binstring(o.shrinkBuf(i.output, i.next_out))) : this.onData(o.shrinkBuf(i.output, i.next_out)));
                    }while ((0 < i.avail_in || 0 === i.avail_out) && 1 !== r);
                    return 4 === n ? (r = a.deflateEnd(this.strm), this.onEnd(r), this.ended = !0, r === l) : 2 !== n || (this.onEnd(l), i.avail_out = 0, true);
                }, p.prototype.onData = function(e) {
                    this.chunks.push(e);
                }, p.prototype.onEnd = function(e) {
                    e === l && ("string" === this.options.to ? this.result = this.chunks.join("") : this.result = o.flattenChunks(this.chunks)), this.chunks = [], this.err = e, this.msg = this.strm.msg;
                }, r.Deflate = p, r.deflate = n, r.deflateRaw = function(e, t) {
                    return (t = t || {}).raw = !0, n(e, t);
                }, r.gzip = function(e, t) {
                    return (t = t || {}).gzip = !0, n(e, t);
                };
            },
            {
                "./utils/common": 41,
                "./utils/strings": 42,
                "./zlib/deflate": 46,
                "./zlib/messages": 51,
                "./zlib/zstream": 53
            }
        ],
        40: [
            function(e, t, r) {
                "use strict";
                var c = e("./zlib/inflate"), d = e("./utils/common"), p = e("./utils/strings"), m = e("./zlib/constants"), n = e("./zlib/messages"), i = e("./zlib/zstream"), s = e("./zlib/gzheader"), _ = Object.prototype.toString;
                function a(e) {
                    if (!(this instanceof a)) return new a(e);
                    this.options = d.assign({
                        chunkSize: 16384,
                        windowBits: 0,
                        to: ""
                    }, e || {});
                    var t = this.options;
                    t.raw && 0 <= t.windowBits && t.windowBits < 16 && (t.windowBits = -t.windowBits, 0 === t.windowBits && (t.windowBits = -15)), !(0 <= t.windowBits && t.windowBits < 16) || e && e.windowBits || (t.windowBits += 32), 15 < t.windowBits && t.windowBits < 48 && 0 == (15 & t.windowBits) && (t.windowBits |= 15), this.err = 0, this.msg = "", this.ended = !1, this.chunks = [], this.strm = new i, this.strm.avail_out = 0;
                    var r = c.inflateInit2(this.strm, t.windowBits);
                    if (r !== m.Z_OK) throw new Error(n[r]);
                    this.header = new s, c.inflateGetHeader(this.strm, this.header);
                }
                function o(e, t) {
                    var r = new a(t);
                    if (r.push(e, !0), r.err) throw r.msg || n[r.err];
                    return r.result;
                }
                a.prototype.push = function(e, t) {
                    var r, n, i, s, a, o, h = this.strm, u = this.options.chunkSize, l = this.options.dictionary, f = !1;
                    if (this.ended) return !1;
                    n = t === ~~t ? t : !0 === t ? m.Z_FINISH : m.Z_NO_FLUSH, "string" == typeof e ? h.input = p.binstring2buf(e) : "[object ArrayBuffer]" === _.call(e) ? h.input = new Uint8Array(e) : h.input = e, h.next_in = 0, h.avail_in = h.input.length;
                    do {
                        if (0 === h.avail_out && (h.output = new d.Buf8(u), h.next_out = 0, h.avail_out = u), (r = c.inflate(h, m.Z_NO_FLUSH)) === m.Z_NEED_DICT && l && (o = "string" == typeof l ? p.string2buf(l) : "[object ArrayBuffer]" === _.call(l) ? new Uint8Array(l) : l, r = c.inflateSetDictionary(this.strm, o)), r === m.Z_BUF_ERROR && !0 === f && (r = m.Z_OK, f = !1), r !== m.Z_STREAM_END && r !== m.Z_OK) return this.onEnd(r), this.ended = !0, false;
                        h.next_out && (0 !== h.avail_out && r !== m.Z_STREAM_END && (0 !== h.avail_in || n !== m.Z_FINISH && n !== m.Z_SYNC_FLUSH) || ("string" === this.options.to ? (i = p.utf8border(h.output, h.next_out), s = h.next_out - i, a = p.buf2string(h.output, i), h.next_out = s, h.avail_out = u - s, s && d.arraySet(h.output, h.output, i, s, 0), this.onData(a)) : this.onData(d.shrinkBuf(h.output, h.next_out)))), 0 === h.avail_in && 0 === h.avail_out && (f = !0);
                    }while ((0 < h.avail_in || 0 === h.avail_out) && r !== m.Z_STREAM_END);
                    return r === m.Z_STREAM_END && (n = m.Z_FINISH), n === m.Z_FINISH ? (r = c.inflateEnd(this.strm), this.onEnd(r), this.ended = !0, r === m.Z_OK) : n !== m.Z_SYNC_FLUSH || (this.onEnd(m.Z_OK), h.avail_out = 0, true);
                }, a.prototype.onData = function(e) {
                    this.chunks.push(e);
                }, a.prototype.onEnd = function(e) {
                    e === m.Z_OK && ("string" === this.options.to ? this.result = this.chunks.join("") : this.result = d.flattenChunks(this.chunks)), this.chunks = [], this.err = e, this.msg = this.strm.msg;
                }, r.Inflate = a, r.inflate = o, r.inflateRaw = function(e, t) {
                    return (t = t || {}).raw = !0, o(e, t);
                }, r.ungzip = o;
            },
            {
                "./utils/common": 41,
                "./utils/strings": 42,
                "./zlib/constants": 44,
                "./zlib/gzheader": 47,
                "./zlib/inflate": 49,
                "./zlib/messages": 51,
                "./zlib/zstream": 53
            }
        ],
        41: [
            function(e, t, r) {
                "use strict";
                var n = "undefined" != typeof Uint8Array && "undefined" != typeof Uint16Array && "undefined" != typeof Int32Array;
                r.assign = function(e) {
                    for(var t = Array.prototype.slice.call(arguments, 1); t.length;){
                        var r = t.shift();
                        if (r) {
                            if ("object" != typeof r) throw new TypeError(r + "must be non-object");
                            for(var n in r)r.hasOwnProperty(n) && (e[n] = r[n]);
                        }
                    }
                    return e;
                }, r.shrinkBuf = function(e, t) {
                    return e.length === t ? e : e.subarray ? e.subarray(0, t) : (e.length = t, e);
                };
                var i = {
                    arraySet: function(e, t, r, n, i) {
                        if (t.subarray && e.subarray) e.set(t.subarray(r, r + n), i);
                        else for(var s = 0; s < n; s++)e[i + s] = t[r + s];
                    },
                    flattenChunks: function(e) {
                        var t, r, n, i, s, a;
                        for(t = n = 0, r = e.length; t < r; t++)n += e[t].length;
                        for(a = new Uint8Array(n), t = i = 0, r = e.length; t < r; t++)s = e[t], a.set(s, i), i += s.length;
                        return a;
                    }
                }, s = {
                    arraySet: function(e, t, r, n, i) {
                        for(var s = 0; s < n; s++)e[i + s] = t[r + s];
                    },
                    flattenChunks: function(e) {
                        return [].concat.apply([], e);
                    }
                };
                r.setTyped = function(e) {
                    e ? (r.Buf8 = Uint8Array, r.Buf16 = Uint16Array, r.Buf32 = Int32Array, r.assign(r, i)) : (r.Buf8 = Array, r.Buf16 = Array, r.Buf32 = Array, r.assign(r, s));
                }, r.setTyped(n);
            },
            {}
        ],
        42: [
            function(e, t, r) {
                "use strict";
                var h = e("./common"), i = !0, s = !0;
                try {
                    String.fromCharCode.apply(null, [
                        0
                    ]);
                } catch (e) {
                    i = !1;
                }
                try {
                    String.fromCharCode.apply(null, new Uint8Array(1));
                } catch (e) {
                    s = !1;
                }
                for(var u = new h.Buf8(256), n = 0; n < 256; n++)u[n] = 252 <= n ? 6 : 248 <= n ? 5 : 240 <= n ? 4 : 224 <= n ? 3 : 192 <= n ? 2 : 1;
                function l(e, t) {
                    if (t < 65537 && (e.subarray && s || !e.subarray && i)) return String.fromCharCode.apply(null, h.shrinkBuf(e, t));
                    for(var r = "", n = 0; n < t; n++)r += String.fromCharCode(e[n]);
                    return r;
                }
                u[254] = u[254] = 1, r.string2buf = function(e) {
                    var t, r, n, i, s, a = e.length, o = 0;
                    for(i = 0; i < a; i++)55296 == (64512 & (r = e.charCodeAt(i))) && i + 1 < a && 56320 == (64512 & (n = e.charCodeAt(i + 1))) && (r = 65536 + (r - 55296 << 10) + (n - 56320), i++), o += r < 128 ? 1 : r < 2048 ? 2 : r < 65536 ? 3 : 4;
                    for(t = new h.Buf8(o), i = s = 0; s < o; i++)55296 == (64512 & (r = e.charCodeAt(i))) && i + 1 < a && 56320 == (64512 & (n = e.charCodeAt(i + 1))) && (r = 65536 + (r - 55296 << 10) + (n - 56320), i++), r < 128 ? t[s++] = r : (r < 2048 ? t[s++] = 192 | r >>> 6 : (r < 65536 ? t[s++] = 224 | r >>> 12 : (t[s++] = 240 | r >>> 18, t[s++] = 128 | r >>> 12 & 63), t[s++] = 128 | r >>> 6 & 63), t[s++] = 128 | 63 & r);
                    return t;
                }, r.buf2binstring = function(e) {
                    return l(e, e.length);
                }, r.binstring2buf = function(e) {
                    for(var t = new h.Buf8(e.length), r = 0, n = t.length; r < n; r++)t[r] = e.charCodeAt(r);
                    return t;
                }, r.buf2string = function(e, t) {
                    var r, n, i, s, a = t || e.length, o = new Array(2 * a);
                    for(r = n = 0; r < a;)if ((i = e[r++]) < 128) o[n++] = i;
                    else if (4 < (s = u[i])) o[n++] = 65533, r += s - 1;
                    else {
                        for(i &= 2 === s ? 31 : 3 === s ? 15 : 7; 1 < s && r < a;)i = i << 6 | 63 & e[r++], s--;
                        1 < s ? o[n++] = 65533 : i < 65536 ? o[n++] = i : (i -= 65536, o[n++] = 55296 | i >> 10 & 1023, o[n++] = 56320 | 1023 & i);
                    }
                    return l(o, n);
                }, r.utf8border = function(e, t) {
                    var r;
                    for((t = t || e.length) > e.length && (t = e.length), r = t - 1; 0 <= r && 128 == (192 & e[r]);)r--;
                    return r < 0 ? t : 0 === r ? t : r + u[e[r]] > t ? r : t;
                };
            },
            {
                "./common": 41
            }
        ],
        43: [
            function(e, t, r) {
                "use strict";
                t.exports = function(e, t, r, n) {
                    for(var i = 65535 & e | 0, s = e >>> 16 & 65535 | 0, a = 0; 0 !== r;){
                        for(r -= a = 2e3 < r ? 2e3 : r; s = s + (i = i + t[n++] | 0) | 0, --a;);
                        i %= 65521, s %= 65521;
                    }
                    return i | s << 16 | 0;
                };
            },
            {}
        ],
        44: [
            function(e, t, r) {
                "use strict";
                t.exports = {
                    Z_NO_FLUSH: 0,
                    Z_PARTIAL_FLUSH: 1,
                    Z_SYNC_FLUSH: 2,
                    Z_FULL_FLUSH: 3,
                    Z_FINISH: 4,
                    Z_BLOCK: 5,
                    Z_TREES: 6,
                    Z_OK: 0,
                    Z_STREAM_END: 1,
                    Z_NEED_DICT: 2,
                    Z_ERRNO: -1,
                    Z_STREAM_ERROR: -2,
                    Z_DATA_ERROR: -3,
                    Z_BUF_ERROR: -5,
                    Z_NO_COMPRESSION: 0,
                    Z_BEST_SPEED: 1,
                    Z_BEST_COMPRESSION: 9,
                    Z_DEFAULT_COMPRESSION: -1,
                    Z_FILTERED: 1,
                    Z_HUFFMAN_ONLY: 2,
                    Z_RLE: 3,
                    Z_FIXED: 4,
                    Z_DEFAULT_STRATEGY: 0,
                    Z_BINARY: 0,
                    Z_TEXT: 1,
                    Z_UNKNOWN: 2,
                    Z_DEFLATED: 8
                };
            },
            {}
        ],
        45: [
            function(e, t, r) {
                "use strict";
                var o = function() {
                    for(var e, t = [], r = 0; r < 256; r++){
                        e = r;
                        for(var n = 0; n < 8; n++)e = 1 & e ? 3988292384 ^ e >>> 1 : e >>> 1;
                        t[r] = e;
                    }
                    return t;
                }();
                t.exports = function(e, t, r, n) {
                    var i = o, s = n + r;
                    e ^= -1;
                    for(var a = n; a < s; a++)e = e >>> 8 ^ i[255 & (e ^ t[a])];
                    return -1 ^ e;
                };
            },
            {}
        ],
        46: [
            function(e, t, r) {
                "use strict";
                var h, c = e("../utils/common"), u = e("./trees"), d = e("./adler32"), p = e("./crc32"), n = e("./messages"), l = 0, f = 4, m = 0, _ = -2, g = -1, b = 4, i = 2, v = 8, y = 9, s = 286, a = 30, o = 19, w = 2 * s + 1, k = 15, x = 3, S = 258, z = S + x + 1, C = 42, E = 113, A = 1, I = 2, O = 3, B = 4;
                function R(e, t) {
                    return e.msg = n[t], t;
                }
                function T(e) {
                    return (e << 1) - (4 < e ? 9 : 0);
                }
                function D(e) {
                    for(var t = e.length; 0 <= --t;)e[t] = 0;
                }
                function F(e) {
                    var t = e.state, r = t.pending;
                    r > e.avail_out && (r = e.avail_out), 0 !== r && (c.arraySet(e.output, t.pending_buf, t.pending_out, r, e.next_out), e.next_out += r, t.pending_out += r, e.total_out += r, e.avail_out -= r, t.pending -= r, 0 === t.pending && (t.pending_out = 0));
                }
                function N(e, t) {
                    u._tr_flush_block(e, 0 <= e.block_start ? e.block_start : -1, e.strstart - e.block_start, t), e.block_start = e.strstart, F(e.strm);
                }
                function U(e, t) {
                    e.pending_buf[e.pending++] = t;
                }
                function P(e, t) {
                    e.pending_buf[e.pending++] = t >>> 8 & 255, e.pending_buf[e.pending++] = 255 & t;
                }
                function L(e, t) {
                    var r, n, i = e.max_chain_length, s = e.strstart, a = e.prev_length, o = e.nice_match, h = e.strstart > e.w_size - z ? e.strstart - (e.w_size - z) : 0, u = e.window, l = e.w_mask, f = e.prev, c = e.strstart + S, d = u[s + a - 1], p = u[s + a];
                    e.prev_length >= e.good_match && (i >>= 2), o > e.lookahead && (o = e.lookahead);
                    do if (u[(r = t) + a] === p && u[r + a - 1] === d && u[r] === u[s] && u[++r] === u[s + 1]) {
                        s += 2, r++;
                        do ;
                        while (u[++s] === u[++r] && u[++s] === u[++r] && u[++s] === u[++r] && u[++s] === u[++r] && u[++s] === u[++r] && u[++s] === u[++r] && u[++s] === u[++r] && u[++s] === u[++r] && s < c);
                        if (n = S - (c - s), s = c - S, a < n) {
                            if (e.match_start = t, o <= (a = n)) break;
                            d = u[s + a - 1], p = u[s + a];
                        }
                    }
                    while ((t = f[t & l]) > h && 0 != --i);
                    return a <= e.lookahead ? a : e.lookahead;
                }
                function j(e) {
                    var t, r, n, i, s, a, o, h, u, l, f = e.w_size;
                    do {
                        if (i = e.window_size - e.lookahead - e.strstart, e.strstart >= f + (f - z)) {
                            for(c.arraySet(e.window, e.window, f, f, 0), e.match_start -= f, e.strstart -= f, e.block_start -= f, t = r = e.hash_size; n = e.head[--t], e.head[t] = f <= n ? n - f : 0, --r;);
                            for(t = r = f; n = e.prev[--t], e.prev[t] = f <= n ? n - f : 0, --r;);
                            i += f;
                        }
                        if (0 === e.strm.avail_in) break;
                        if (a = e.strm, o = e.window, h = e.strstart + e.lookahead, u = i, l = void 0, l = a.avail_in, u < l && (l = u), r = 0 === l ? 0 : (a.avail_in -= l, c.arraySet(o, a.input, a.next_in, l, h), 1 === a.state.wrap ? a.adler = d(a.adler, o, l, h) : 2 === a.state.wrap && (a.adler = p(a.adler, o, l, h)), a.next_in += l, a.total_in += l, l), e.lookahead += r, e.lookahead + e.insert >= x) for(s = e.strstart - e.insert, e.ins_h = e.window[s], e.ins_h = (e.ins_h << e.hash_shift ^ e.window[s + 1]) & e.hash_mask; e.insert && (e.ins_h = (e.ins_h << e.hash_shift ^ e.window[s + x - 1]) & e.hash_mask, e.prev[s & e.w_mask] = e.head[e.ins_h], e.head[e.ins_h] = s, s++, e.insert--, !(e.lookahead + e.insert < x)););
                    }while (e.lookahead < z && 0 !== e.strm.avail_in);
                }
                function Z(e, t) {
                    for(var r, n;;){
                        if (e.lookahead < z) {
                            if (j(e), e.lookahead < z && t === l) return A;
                            if (0 === e.lookahead) break;
                        }
                        if (r = 0, e.lookahead >= x && (e.ins_h = (e.ins_h << e.hash_shift ^ e.window[e.strstart + x - 1]) & e.hash_mask, r = e.prev[e.strstart & e.w_mask] = e.head[e.ins_h], e.head[e.ins_h] = e.strstart), 0 !== r && e.strstart - r <= e.w_size - z && (e.match_length = L(e, r)), e.match_length >= x) {
                            if (n = u._tr_tally(e, e.strstart - e.match_start, e.match_length - x), e.lookahead -= e.match_length, e.match_length <= e.max_lazy_match && e.lookahead >= x) {
                                for(e.match_length--; e.strstart++, e.ins_h = (e.ins_h << e.hash_shift ^ e.window[e.strstart + x - 1]) & e.hash_mask, r = e.prev[e.strstart & e.w_mask] = e.head[e.ins_h], e.head[e.ins_h] = e.strstart, 0 != --e.match_length;);
                                e.strstart++;
                            } else e.strstart += e.match_length, e.match_length = 0, e.ins_h = e.window[e.strstart], e.ins_h = (e.ins_h << e.hash_shift ^ e.window[e.strstart + 1]) & e.hash_mask;
                        } else n = u._tr_tally(e, 0, e.window[e.strstart]), e.lookahead--, e.strstart++;
                        if (n && (N(e, !1), 0 === e.strm.avail_out)) return A;
                    }
                    return e.insert = e.strstart < x - 1 ? e.strstart : x - 1, t === f ? (N(e, !0), 0 === e.strm.avail_out ? O : B) : e.last_lit && (N(e, !1), 0 === e.strm.avail_out) ? A : I;
                }
                function W(e, t) {
                    for(var r, n, i;;){
                        if (e.lookahead < z) {
                            if (j(e), e.lookahead < z && t === l) return A;
                            if (0 === e.lookahead) break;
                        }
                        if (r = 0, e.lookahead >= x && (e.ins_h = (e.ins_h << e.hash_shift ^ e.window[e.strstart + x - 1]) & e.hash_mask, r = e.prev[e.strstart & e.w_mask] = e.head[e.ins_h], e.head[e.ins_h] = e.strstart), e.prev_length = e.match_length, e.prev_match = e.match_start, e.match_length = x - 1, 0 !== r && e.prev_length < e.max_lazy_match && e.strstart - r <= e.w_size - z && (e.match_length = L(e, r), e.match_length <= 5 && (1 === e.strategy || e.match_length === x && 4096 < e.strstart - e.match_start) && (e.match_length = x - 1)), e.prev_length >= x && e.match_length <= e.prev_length) {
                            for(i = e.strstart + e.lookahead - x, n = u._tr_tally(e, e.strstart - 1 - e.prev_match, e.prev_length - x), e.lookahead -= e.prev_length - 1, e.prev_length -= 2; ++e.strstart <= i && (e.ins_h = (e.ins_h << e.hash_shift ^ e.window[e.strstart + x - 1]) & e.hash_mask, r = e.prev[e.strstart & e.w_mask] = e.head[e.ins_h], e.head[e.ins_h] = e.strstart), 0 != --e.prev_length;);
                            if (e.match_available = 0, e.match_length = x - 1, e.strstart++, n && (N(e, !1), 0 === e.strm.avail_out)) return A;
                        } else if (e.match_available) {
                            if ((n = u._tr_tally(e, 0, e.window[e.strstart - 1])) && N(e, !1), e.strstart++, e.lookahead--, 0 === e.strm.avail_out) return A;
                        } else e.match_available = 1, e.strstart++, e.lookahead--;
                    }
                    return e.match_available && (n = u._tr_tally(e, 0, e.window[e.strstart - 1]), e.match_available = 0), e.insert = e.strstart < x - 1 ? e.strstart : x - 1, t === f ? (N(e, !0), 0 === e.strm.avail_out ? O : B) : e.last_lit && (N(e, !1), 0 === e.strm.avail_out) ? A : I;
                }
                function M(e, t, r, n, i) {
                    this.good_length = e, this.max_lazy = t, this.nice_length = r, this.max_chain = n, this.func = i;
                }
                function H() {
                    this.strm = null, this.status = 0, this.pending_buf = null, this.pending_buf_size = 0, this.pending_out = 0, this.pending = 0, this.wrap = 0, this.gzhead = null, this.gzindex = 0, this.method = v, this.last_flush = -1, this.w_size = 0, this.w_bits = 0, this.w_mask = 0, this.window = null, this.window_size = 0, this.prev = null, this.head = null, this.ins_h = 0, this.hash_size = 0, this.hash_bits = 0, this.hash_mask = 0, this.hash_shift = 0, this.block_start = 0, this.match_length = 0, this.prev_match = 0, this.match_available = 0, this.strstart = 0, this.match_start = 0, this.lookahead = 0, this.prev_length = 0, this.max_chain_length = 0, this.max_lazy_match = 0, this.level = 0, this.strategy = 0, this.good_match = 0, this.nice_match = 0, this.dyn_ltree = new c.Buf16(2 * w), this.dyn_dtree = new c.Buf16(2 * (2 * a + 1)), this.bl_tree = new c.Buf16(2 * (2 * o + 1)), D(this.dyn_ltree), D(this.dyn_dtree), D(this.bl_tree), this.l_desc = null, this.d_desc = null, this.bl_desc = null, this.bl_count = new c.Buf16(k + 1), this.heap = new c.Buf16(2 * s + 1), D(this.heap), this.heap_len = 0, this.heap_max = 0, this.depth = new c.Buf16(2 * s + 1), D(this.depth), this.l_buf = 0, this.lit_bufsize = 0, this.last_lit = 0, this.d_buf = 0, this.opt_len = 0, this.static_len = 0, this.matches = 0, this.insert = 0, this.bi_buf = 0, this.bi_valid = 0;
                }
                function G(e) {
                    var t;
                    return e && e.state ? (e.total_in = e.total_out = 0, e.data_type = i, (t = e.state).pending = 0, t.pending_out = 0, t.wrap < 0 && (t.wrap = -t.wrap), t.status = t.wrap ? C : E, e.adler = 2 === t.wrap ? 0 : 1, t.last_flush = l, u._tr_init(t), m) : R(e, _);
                }
                function K(e) {
                    var t = G(e);
                    return t === m && function(e) {
                        e.window_size = 2 * e.w_size, D(e.head), e.max_lazy_match = h[e.level].max_lazy, e.good_match = h[e.level].good_length, e.nice_match = h[e.level].nice_length, e.max_chain_length = h[e.level].max_chain, e.strstart = 0, e.block_start = 0, e.lookahead = 0, e.insert = 0, e.match_length = e.prev_length = x - 1, e.match_available = 0, e.ins_h = 0;
                    }(e.state), t;
                }
                function Y(e, t, r, n, i, s) {
                    if (!e) return _;
                    var a = 1;
                    if (t === g && (t = 6), n < 0 ? (a = 0, n = -n) : 15 < n && (a = 2, n -= 16), i < 1 || y < i || r !== v || n < 8 || 15 < n || t < 0 || 9 < t || s < 0 || b < s) return R(e, _);
                    8 === n && (n = 9);
                    var o = new H;
                    return (e.state = o).strm = e, o.wrap = a, o.gzhead = null, o.w_bits = n, o.w_size = 1 << o.w_bits, o.w_mask = o.w_size - 1, o.hash_bits = i + 7, o.hash_size = 1 << o.hash_bits, o.hash_mask = o.hash_size - 1, o.hash_shift = ~~((o.hash_bits + x - 1) / x), o.window = new c.Buf8(2 * o.w_size), o.head = new c.Buf16(o.hash_size), o.prev = new c.Buf16(o.w_size), o.lit_bufsize = 1 << i + 6, o.pending_buf_size = 4 * o.lit_bufsize, o.pending_buf = new c.Buf8(o.pending_buf_size), o.d_buf = 1 * o.lit_bufsize, o.l_buf = 3 * o.lit_bufsize, o.level = t, o.strategy = s, o.method = r, K(e);
                }
                h = [
                    new M(0, 0, 0, 0, function(e, t) {
                        var r = 65535;
                        for(r > e.pending_buf_size - 5 && (r = e.pending_buf_size - 5);;){
                            if (e.lookahead <= 1) {
                                if (j(e), 0 === e.lookahead && t === l) return A;
                                if (0 === e.lookahead) break;
                            }
                            e.strstart += e.lookahead, e.lookahead = 0;
                            var n = e.block_start + r;
                            if ((0 === e.strstart || e.strstart >= n) && (e.lookahead = e.strstart - n, e.strstart = n, N(e, !1), 0 === e.strm.avail_out)) return A;
                            if (e.strstart - e.block_start >= e.w_size - z && (N(e, !1), 0 === e.strm.avail_out)) return A;
                        }
                        return e.insert = 0, t === f ? (N(e, !0), 0 === e.strm.avail_out ? O : B) : (e.strstart > e.block_start && (N(e, !1), e.strm.avail_out), A);
                    }),
                    new M(4, 4, 8, 4, Z),
                    new M(4, 5, 16, 8, Z),
                    new M(4, 6, 32, 32, Z),
                    new M(4, 4, 16, 16, W),
                    new M(8, 16, 32, 32, W),
                    new M(8, 16, 128, 128, W),
                    new M(8, 32, 128, 256, W),
                    new M(32, 128, 258, 1024, W),
                    new M(32, 258, 258, 4096, W)
                ], r.deflateInit = function(e, t) {
                    return Y(e, t, v, 15, 8, 0);
                }, r.deflateInit2 = Y, r.deflateReset = K, r.deflateResetKeep = G, r.deflateSetHeader = function(e, t) {
                    return e && e.state ? 2 !== e.state.wrap ? _ : (e.state.gzhead = t, m) : _;
                }, r.deflate = function(e, t) {
                    var r, n, i, s;
                    if (!e || !e.state || 5 < t || t < 0) return e ? R(e, _) : _;
                    if (n = e.state, !e.output || !e.input && 0 !== e.avail_in || 666 === n.status && t !== f) return R(e, 0 === e.avail_out ? -5 : _);
                    if (n.strm = e, r = n.last_flush, n.last_flush = t, n.status === C) {
                        if (2 === n.wrap) e.adler = 0, U(n, 31), U(n, 139), U(n, 8), n.gzhead ? (U(n, (n.gzhead.text ? 1 : 0) + (n.gzhead.hcrc ? 2 : 0) + (n.gzhead.extra ? 4 : 0) + (n.gzhead.name ? 8 : 0) + (n.gzhead.comment ? 16 : 0)), U(n, 255 & n.gzhead.time), U(n, n.gzhead.time >> 8 & 255), U(n, n.gzhead.time >> 16 & 255), U(n, n.gzhead.time >> 24 & 255), U(n, 9 === n.level ? 2 : 2 <= n.strategy || n.level < 2 ? 4 : 0), U(n, 255 & n.gzhead.os), n.gzhead.extra && n.gzhead.extra.length && (U(n, 255 & n.gzhead.extra.length), U(n, n.gzhead.extra.length >> 8 & 255)), n.gzhead.hcrc && (e.adler = p(e.adler, n.pending_buf, n.pending, 0)), n.gzindex = 0, n.status = 69) : (U(n, 0), U(n, 0), U(n, 0), U(n, 0), U(n, 0), U(n, 9 === n.level ? 2 : 2 <= n.strategy || n.level < 2 ? 4 : 0), U(n, 3), n.status = E);
                        else {
                            var a = v + (n.w_bits - 8 << 4) << 8;
                            a |= (2 <= n.strategy || n.level < 2 ? 0 : n.level < 6 ? 1 : 6 === n.level ? 2 : 3) << 6, 0 !== n.strstart && (a |= 32), a += 31 - a % 31, n.status = E, P(n, a), 0 !== n.strstart && (P(n, e.adler >>> 16), P(n, 65535 & e.adler)), e.adler = 1;
                        }
                    }
                    if (69 === n.status) {
                        if (n.gzhead.extra) {
                            for(i = n.pending; n.gzindex < (65535 & n.gzhead.extra.length) && (n.pending !== n.pending_buf_size || (n.gzhead.hcrc && n.pending > i && (e.adler = p(e.adler, n.pending_buf, n.pending - i, i)), F(e), i = n.pending, n.pending !== n.pending_buf_size));)U(n, 255 & n.gzhead.extra[n.gzindex]), n.gzindex++;
                            n.gzhead.hcrc && n.pending > i && (e.adler = p(e.adler, n.pending_buf, n.pending - i, i)), n.gzindex === n.gzhead.extra.length && (n.gzindex = 0, n.status = 73);
                        } else n.status = 73;
                    }
                    if (73 === n.status) {
                        if (n.gzhead.name) {
                            i = n.pending;
                            do {
                                if (n.pending === n.pending_buf_size && (n.gzhead.hcrc && n.pending > i && (e.adler = p(e.adler, n.pending_buf, n.pending - i, i)), F(e), i = n.pending, n.pending === n.pending_buf_size)) {
                                    s = 1;
                                    break;
                                }
                                s = n.gzindex < n.gzhead.name.length ? 255 & n.gzhead.name.charCodeAt(n.gzindex++) : 0, U(n, s);
                            }while (0 !== s);
                            n.gzhead.hcrc && n.pending > i && (e.adler = p(e.adler, n.pending_buf, n.pending - i, i)), 0 === s && (n.gzindex = 0, n.status = 91);
                        } else n.status = 91;
                    }
                    if (91 === n.status) {
                        if (n.gzhead.comment) {
                            i = n.pending;
                            do {
                                if (n.pending === n.pending_buf_size && (n.gzhead.hcrc && n.pending > i && (e.adler = p(e.adler, n.pending_buf, n.pending - i, i)), F(e), i = n.pending, n.pending === n.pending_buf_size)) {
                                    s = 1;
                                    break;
                                }
                                s = n.gzindex < n.gzhead.comment.length ? 255 & n.gzhead.comment.charCodeAt(n.gzindex++) : 0, U(n, s);
                            }while (0 !== s);
                            n.gzhead.hcrc && n.pending > i && (e.adler = p(e.adler, n.pending_buf, n.pending - i, i)), 0 === s && (n.status = 103);
                        } else n.status = 103;
                    }
                    if (103 === n.status && (n.gzhead.hcrc ? (n.pending + 2 > n.pending_buf_size && F(e), n.pending + 2 <= n.pending_buf_size && (U(n, 255 & e.adler), U(n, e.adler >> 8 & 255), e.adler = 0, n.status = E)) : n.status = E), 0 !== n.pending) {
                        if (F(e), 0 === e.avail_out) return n.last_flush = -1, m;
                    } else if (0 === e.avail_in && T(t) <= T(r) && t !== f) return R(e, -5);
                    if (666 === n.status && 0 !== e.avail_in) return R(e, -5);
                    if (0 !== e.avail_in || 0 !== n.lookahead || t !== l && 666 !== n.status) {
                        var o = 2 === n.strategy ? function(e, t) {
                            for(var r;;){
                                if (0 === e.lookahead && (j(e), 0 === e.lookahead)) {
                                    if (t === l) return A;
                                    break;
                                }
                                if (e.match_length = 0, r = u._tr_tally(e, 0, e.window[e.strstart]), e.lookahead--, e.strstart++, r && (N(e, !1), 0 === e.strm.avail_out)) return A;
                            }
                            return e.insert = 0, t === f ? (N(e, !0), 0 === e.strm.avail_out ? O : B) : e.last_lit && (N(e, !1), 0 === e.strm.avail_out) ? A : I;
                        }(n, t) : 3 === n.strategy ? function(e, t) {
                            for(var r, n, i, s, a = e.window;;){
                                if (e.lookahead <= S) {
                                    if (j(e), e.lookahead <= S && t === l) return A;
                                    if (0 === e.lookahead) break;
                                }
                                if (e.match_length = 0, e.lookahead >= x && 0 < e.strstart && (n = a[i = e.strstart - 1]) === a[++i] && n === a[++i] && n === a[++i]) {
                                    s = e.strstart + S;
                                    do ;
                                    while (n === a[++i] && n === a[++i] && n === a[++i] && n === a[++i] && n === a[++i] && n === a[++i] && n === a[++i] && n === a[++i] && i < s);
                                    e.match_length = S - (s - i), e.match_length > e.lookahead && (e.match_length = e.lookahead);
                                }
                                if (e.match_length >= x ? (r = u._tr_tally(e, 1, e.match_length - x), e.lookahead -= e.match_length, e.strstart += e.match_length, e.match_length = 0) : (r = u._tr_tally(e, 0, e.window[e.strstart]), e.lookahead--, e.strstart++), r && (N(e, !1), 0 === e.strm.avail_out)) return A;
                            }
                            return e.insert = 0, t === f ? (N(e, !0), 0 === e.strm.avail_out ? O : B) : e.last_lit && (N(e, !1), 0 === e.strm.avail_out) ? A : I;
                        }(n, t) : h[n.level].func(n, t);
                        if (o !== O && o !== B || (n.status = 666), o === A || o === O) return 0 === e.avail_out && (n.last_flush = -1), m;
                        if (o === I && (1 === t ? u._tr_align(n) : 5 !== t && (u._tr_stored_block(n, 0, 0, !1), 3 === t && (D(n.head), 0 === n.lookahead && (n.strstart = 0, n.block_start = 0, n.insert = 0))), F(e), 0 === e.avail_out)) return n.last_flush = -1, m;
                    }
                    return t !== f ? m : n.wrap <= 0 ? 1 : (2 === n.wrap ? (U(n, 255 & e.adler), U(n, e.adler >> 8 & 255), U(n, e.adler >> 16 & 255), U(n, e.adler >> 24 & 255), U(n, 255 & e.total_in), U(n, e.total_in >> 8 & 255), U(n, e.total_in >> 16 & 255), U(n, e.total_in >> 24 & 255)) : (P(n, e.adler >>> 16), P(n, 65535 & e.adler)), F(e), 0 < n.wrap && (n.wrap = -n.wrap), 0 !== n.pending ? m : 1);
                }, r.deflateEnd = function(e) {
                    var t;
                    return e && e.state ? (t = e.state.status) !== C && 69 !== t && 73 !== t && 91 !== t && 103 !== t && t !== E && 666 !== t ? R(e, _) : (e.state = null, t === E ? R(e, -3) : m) : _;
                }, r.deflateSetDictionary = function(e, t) {
                    var r, n, i, s, a, o, h, u, l = t.length;
                    if (!e || !e.state) return _;
                    if (2 === (s = (r = e.state).wrap) || 1 === s && r.status !== C || r.lookahead) return _;
                    for(1 === s && (e.adler = d(e.adler, t, l, 0)), r.wrap = 0, l >= r.w_size && (0 === s && (D(r.head), r.strstart = 0, r.block_start = 0, r.insert = 0), u = new c.Buf8(r.w_size), c.arraySet(u, t, l - r.w_size, r.w_size, 0), t = u, l = r.w_size), a = e.avail_in, o = e.next_in, h = e.input, e.avail_in = l, e.next_in = 0, e.input = t, j(r); r.lookahead >= x;){
                        for(n = r.strstart, i = r.lookahead - (x - 1); r.ins_h = (r.ins_h << r.hash_shift ^ r.window[n + x - 1]) & r.hash_mask, r.prev[n & r.w_mask] = r.head[r.ins_h], r.head[r.ins_h] = n, n++, --i;);
                        r.strstart = n, r.lookahead = x - 1, j(r);
                    }
                    return r.strstart += r.lookahead, r.block_start = r.strstart, r.insert = r.lookahead, r.lookahead = 0, r.match_length = r.prev_length = x - 1, r.match_available = 0, e.next_in = o, e.input = h, e.avail_in = a, r.wrap = s, m;
                }, r.deflateInfo = "pako deflate (from Nodeca project)";
            },
            {
                "../utils/common": 41,
                "./adler32": 43,
                "./crc32": 45,
                "./messages": 51,
                "./trees": 52
            }
        ],
        47: [
            function(e, t, r) {
                "use strict";
                t.exports = function() {
                    this.text = 0, this.time = 0, this.xflags = 0, this.os = 0, this.extra = null, this.extra_len = 0, this.name = "", this.comment = "", this.hcrc = 0, this.done = !1;
                };
            },
            {}
        ],
        48: [
            function(e, t, r) {
                "use strict";
                t.exports = function(e, t) {
                    var r, n, i, s, a, o, h, u, l, f, c, d, p, m, _, g, b, v, y, w, k, x, S, z, C;
                    r = e.state, n = e.next_in, z = e.input, i = n + (e.avail_in - 5), s = e.next_out, C = e.output, a = s - (t - e.avail_out), o = s + (e.avail_out - 257), h = r.dmax, u = r.wsize, l = r.whave, f = r.wnext, c = r.window, d = r.hold, p = r.bits, m = r.lencode, _ = r.distcode, g = (1 << r.lenbits) - 1, b = (1 << r.distbits) - 1;
                    e: do {
                        p < 15 && (d += z[n++] << p, p += 8, d += z[n++] << p, p += 8), v = m[d & g];
                        t: for(;;){
                            if (d >>>= y = v >>> 24, p -= y, 0 === (y = v >>> 16 & 255)) C[s++] = 65535 & v;
                            else {
                                if (!(16 & y)) {
                                    if (0 == (64 & y)) {
                                        v = m[(65535 & v) + (d & (1 << y) - 1)];
                                        continue t;
                                    }
                                    if (32 & y) {
                                        r.mode = 12;
                                        break e;
                                    }
                                    e.msg = "invalid literal/length code", r.mode = 30;
                                    break e;
                                }
                                w = 65535 & v, (y &= 15) && (p < y && (d += z[n++] << p, p += 8), w += d & (1 << y) - 1, d >>>= y, p -= y), p < 15 && (d += z[n++] << p, p += 8, d += z[n++] << p, p += 8), v = _[d & b];
                                r: for(;;){
                                    if (d >>>= y = v >>> 24, p -= y, !(16 & (y = v >>> 16 & 255))) {
                                        if (0 == (64 & y)) {
                                            v = _[(65535 & v) + (d & (1 << y) - 1)];
                                            continue r;
                                        }
                                        e.msg = "invalid distance code", r.mode = 30;
                                        break e;
                                    }
                                    if (k = 65535 & v, p < (y &= 15) && (d += z[n++] << p, (p += 8) < y && (d += z[n++] << p, p += 8)), h < (k += d & (1 << y) - 1)) {
                                        e.msg = "invalid distance too far back", r.mode = 30;
                                        break e;
                                    }
                                    if (d >>>= y, p -= y, (y = s - a) < k) {
                                        if (l < (y = k - y) && r.sane) {
                                            e.msg = "invalid distance too far back", r.mode = 30;
                                            break e;
                                        }
                                        if (S = c, (x = 0) === f) {
                                            if (x += u - y, y < w) {
                                                for(w -= y; C[s++] = c[x++], --y;);
                                                x = s - k, S = C;
                                            }
                                        } else if (f < y) {
                                            if (x += u + f - y, (y -= f) < w) {
                                                for(w -= y; C[s++] = c[x++], --y;);
                                                if (x = 0, f < w) {
                                                    for(w -= y = f; C[s++] = c[x++], --y;);
                                                    x = s - k, S = C;
                                                }
                                            }
                                        } else if (x += f - y, y < w) {
                                            for(w -= y; C[s++] = c[x++], --y;);
                                            x = s - k, S = C;
                                        }
                                        for(; 2 < w;)C[s++] = S[x++], C[s++] = S[x++], C[s++] = S[x++], w -= 3;
                                        w && (C[s++] = S[x++], 1 < w && (C[s++] = S[x++]));
                                    } else {
                                        for(x = s - k; C[s++] = C[x++], C[s++] = C[x++], C[s++] = C[x++], 2 < (w -= 3););
                                        w && (C[s++] = C[x++], 1 < w && (C[s++] = C[x++]));
                                    }
                                    break;
                                }
                            }
                            break;
                        }
                    }while (n < i && s < o);
                    n -= w = p >> 3, d &= (1 << (p -= w << 3)) - 1, e.next_in = n, e.next_out = s, e.avail_in = n < i ? i - n + 5 : 5 - (n - i), e.avail_out = s < o ? o - s + 257 : 257 - (s - o), r.hold = d, r.bits = p;
                };
            },
            {}
        ],
        49: [
            function(e, t, r) {
                "use strict";
                var I = e("../utils/common"), O = e("./adler32"), B = e("./crc32"), R = e("./inffast"), T = e("./inftrees"), D = 1, F = 2, N = 0, U = -2, P = 1, n = 852, i = 592;
                function L(e) {
                    return (e >>> 24 & 255) + (e >>> 8 & 65280) + ((65280 & e) << 8) + ((255 & e) << 24);
                }
                function s() {
                    this.mode = 0, this.last = !1, this.wrap = 0, this.havedict = !1, this.flags = 0, this.dmax = 0, this.check = 0, this.total = 0, this.head = null, this.wbits = 0, this.wsize = 0, this.whave = 0, this.wnext = 0, this.window = null, this.hold = 0, this.bits = 0, this.length = 0, this.offset = 0, this.extra = 0, this.lencode = null, this.distcode = null, this.lenbits = 0, this.distbits = 0, this.ncode = 0, this.nlen = 0, this.ndist = 0, this.have = 0, this.next = null, this.lens = new I.Buf16(320), this.work = new I.Buf16(288), this.lendyn = null, this.distdyn = null, this.sane = 0, this.back = 0, this.was = 0;
                }
                function a(e) {
                    var t;
                    return e && e.state ? (t = e.state, e.total_in = e.total_out = t.total = 0, e.msg = "", t.wrap && (e.adler = 1 & t.wrap), t.mode = P, t.last = 0, t.havedict = 0, t.dmax = 32768, t.head = null, t.hold = 0, t.bits = 0, t.lencode = t.lendyn = new I.Buf32(n), t.distcode = t.distdyn = new I.Buf32(i), t.sane = 1, t.back = -1, N) : U;
                }
                function o(e) {
                    var t;
                    return e && e.state ? ((t = e.state).wsize = 0, t.whave = 0, t.wnext = 0, a(e)) : U;
                }
                function h(e, t) {
                    var r, n;
                    return e && e.state ? (n = e.state, t < 0 ? (r = 0, t = -t) : (r = 1 + (t >> 4), t < 48 && (t &= 15)), t && (t < 8 || 15 < t) ? U : (null !== n.window && n.wbits !== t && (n.window = null), n.wrap = r, n.wbits = t, o(e))) : U;
                }
                function u(e, t) {
                    var r, n;
                    return e ? (n = new s, (e.state = n).window = null, (r = h(e, t)) !== N && (e.state = null), r) : U;
                }
                var l, f, c = !0;
                function j(e) {
                    if (c) {
                        var t;
                        for(l = new I.Buf32(512), f = new I.Buf32(32), t = 0; t < 144;)e.lens[t++] = 8;
                        for(; t < 256;)e.lens[t++] = 9;
                        for(; t < 280;)e.lens[t++] = 7;
                        for(; t < 288;)e.lens[t++] = 8;
                        for(T(D, e.lens, 0, 288, l, 0, e.work, {
                            bits: 9
                        }), t = 0; t < 32;)e.lens[t++] = 5;
                        T(F, e.lens, 0, 32, f, 0, e.work, {
                            bits: 5
                        }), c = !1;
                    }
                    e.lencode = l, e.lenbits = 9, e.distcode = f, e.distbits = 5;
                }
                function Z(e, t, r, n) {
                    var i, s = e.state;
                    return null === s.window && (s.wsize = 1 << s.wbits, s.wnext = 0, s.whave = 0, s.window = new I.Buf8(s.wsize)), n >= s.wsize ? (I.arraySet(s.window, t, r - s.wsize, s.wsize, 0), s.wnext = 0, s.whave = s.wsize) : (n < (i = s.wsize - s.wnext) && (i = n), I.arraySet(s.window, t, r - n, i, s.wnext), (n -= i) ? (I.arraySet(s.window, t, r - n, n, 0), s.wnext = n, s.whave = s.wsize) : (s.wnext += i, s.wnext === s.wsize && (s.wnext = 0), s.whave < s.wsize && (s.whave += i))), 0;
                }
                r.inflateReset = o, r.inflateReset2 = h, r.inflateResetKeep = a, r.inflateInit = function(e) {
                    return u(e, 15);
                }, r.inflateInit2 = u, r.inflate = function(e, t) {
                    var r, n, i, s, a, o, h, u, l, f, c, d, p, m, _, g, b, v, y, w, k, x, S, z, C = 0, E = new I.Buf8(4), A = [
                        16,
                        17,
                        18,
                        0,
                        8,
                        7,
                        9,
                        6,
                        10,
                        5,
                        11,
                        4,
                        12,
                        3,
                        13,
                        2,
                        14,
                        1,
                        15
                    ];
                    if (!e || !e.state || !e.output || !e.input && 0 !== e.avail_in) return U;
                    12 === (r = e.state).mode && (r.mode = 13), a = e.next_out, i = e.output, h = e.avail_out, s = e.next_in, n = e.input, o = e.avail_in, u = r.hold, l = r.bits, f = o, c = h, x = N;
                    e: for(;;)switch(r.mode){
                        case P:
                            if (0 === r.wrap) {
                                r.mode = 13;
                                break;
                            }
                            for(; l < 16;){
                                if (0 === o) break e;
                                o--, u += n[s++] << l, l += 8;
                            }
                            if (2 & r.wrap && 35615 === u) {
                                E[r.check = 0] = 255 & u, E[1] = u >>> 8 & 255, r.check = B(r.check, E, 2, 0), l = u = 0, r.mode = 2;
                                break;
                            }
                            if (r.flags = 0, r.head && (r.head.done = !1), !(1 & r.wrap) || (((255 & u) << 8) + (u >> 8)) % 31) {
                                e.msg = "incorrect header check", r.mode = 30;
                                break;
                            }
                            if (8 != (15 & u)) {
                                e.msg = "unknown compression method", r.mode = 30;
                                break;
                            }
                            if (l -= 4, k = 8 + (15 & (u >>>= 4)), 0 === r.wbits) r.wbits = k;
                            else if (k > r.wbits) {
                                e.msg = "invalid window size", r.mode = 30;
                                break;
                            }
                            r.dmax = 1 << k, e.adler = r.check = 1, r.mode = 512 & u ? 10 : 12, l = u = 0;
                            break;
                        case 2:
                            for(; l < 16;){
                                if (0 === o) break e;
                                o--, u += n[s++] << l, l += 8;
                            }
                            if (r.flags = u, 8 != (255 & r.flags)) {
                                e.msg = "unknown compression method", r.mode = 30;
                                break;
                            }
                            if (57344 & r.flags) {
                                e.msg = "unknown header flags set", r.mode = 30;
                                break;
                            }
                            r.head && (r.head.text = u >> 8 & 1), 512 & r.flags && (E[0] = 255 & u, E[1] = u >>> 8 & 255, r.check = B(r.check, E, 2, 0)), l = u = 0, r.mode = 3;
                        case 3:
                            for(; l < 32;){
                                if (0 === o) break e;
                                o--, u += n[s++] << l, l += 8;
                            }
                            r.head && (r.head.time = u), 512 & r.flags && (E[0] = 255 & u, E[1] = u >>> 8 & 255, E[2] = u >>> 16 & 255, E[3] = u >>> 24 & 255, r.check = B(r.check, E, 4, 0)), l = u = 0, r.mode = 4;
                        case 4:
                            for(; l < 16;){
                                if (0 === o) break e;
                                o--, u += n[s++] << l, l += 8;
                            }
                            r.head && (r.head.xflags = 255 & u, r.head.os = u >> 8), 512 & r.flags && (E[0] = 255 & u, E[1] = u >>> 8 & 255, r.check = B(r.check, E, 2, 0)), l = u = 0, r.mode = 5;
                        case 5:
                            if (1024 & r.flags) {
                                for(; l < 16;){
                                    if (0 === o) break e;
                                    o--, u += n[s++] << l, l += 8;
                                }
                                r.length = u, r.head && (r.head.extra_len = u), 512 & r.flags && (E[0] = 255 & u, E[1] = u >>> 8 & 255, r.check = B(r.check, E, 2, 0)), l = u = 0;
                            } else r.head && (r.head.extra = null);
                            r.mode = 6;
                        case 6:
                            if (1024 & r.flags && (o < (d = r.length) && (d = o), d && (r.head && (k = r.head.extra_len - r.length, r.head.extra || (r.head.extra = new Array(r.head.extra_len)), I.arraySet(r.head.extra, n, s, d, k)), 512 & r.flags && (r.check = B(r.check, n, d, s)), o -= d, s += d, r.length -= d), r.length)) break e;
                            r.length = 0, r.mode = 7;
                        case 7:
                            if (2048 & r.flags) {
                                if (0 === o) break e;
                                for(d = 0; k = n[s + d++], r.head && k && r.length < 65536 && (r.head.name += String.fromCharCode(k)), k && d < o;);
                                if (512 & r.flags && (r.check = B(r.check, n, d, s)), o -= d, s += d, k) break e;
                            } else r.head && (r.head.name = null);
                            r.length = 0, r.mode = 8;
                        case 8:
                            if (4096 & r.flags) {
                                if (0 === o) break e;
                                for(d = 0; k = n[s + d++], r.head && k && r.length < 65536 && (r.head.comment += String.fromCharCode(k)), k && d < o;);
                                if (512 & r.flags && (r.check = B(r.check, n, d, s)), o -= d, s += d, k) break e;
                            } else r.head && (r.head.comment = null);
                            r.mode = 9;
                        case 9:
                            if (512 & r.flags) {
                                for(; l < 16;){
                                    if (0 === o) break e;
                                    o--, u += n[s++] << l, l += 8;
                                }
                                if (u !== (65535 & r.check)) {
                                    e.msg = "header crc mismatch", r.mode = 30;
                                    break;
                                }
                                l = u = 0;
                            }
                            r.head && (r.head.hcrc = r.flags >> 9 & 1, r.head.done = !0), e.adler = r.check = 0, r.mode = 12;
                            break;
                        case 10:
                            for(; l < 32;){
                                if (0 === o) break e;
                                o--, u += n[s++] << l, l += 8;
                            }
                            e.adler = r.check = L(u), l = u = 0, r.mode = 11;
                        case 11:
                            if (0 === r.havedict) return e.next_out = a, e.avail_out = h, e.next_in = s, e.avail_in = o, r.hold = u, r.bits = l, 2;
                            e.adler = r.check = 1, r.mode = 12;
                        case 12:
                            if (5 === t || 6 === t) break e;
                        case 13:
                            if (r.last) {
                                u >>>= 7 & l, l -= 7 & l, r.mode = 27;
                                break;
                            }
                            for(; l < 3;){
                                if (0 === o) break e;
                                o--, u += n[s++] << l, l += 8;
                            }
                            switch(r.last = 1 & u, l -= 1, 3 & (u >>>= 1)){
                                case 0:
                                    r.mode = 14;
                                    break;
                                case 1:
                                    if (j(r), r.mode = 20, 6 !== t) break;
                                    u >>>= 2, l -= 2;
                                    break e;
                                case 2:
                                    r.mode = 17;
                                    break;
                                case 3:
                                    e.msg = "invalid block type", r.mode = 30;
                            }
                            u >>>= 2, l -= 2;
                            break;
                        case 14:
                            for(u >>>= 7 & l, l -= 7 & l; l < 32;){
                                if (0 === o) break e;
                                o--, u += n[s++] << l, l += 8;
                            }
                            if ((65535 & u) != (u >>> 16 ^ 65535)) {
                                e.msg = "invalid stored block lengths", r.mode = 30;
                                break;
                            }
                            if (r.length = 65535 & u, l = u = 0, r.mode = 15, 6 === t) break e;
                        case 15:
                            r.mode = 16;
                        case 16:
                            if (d = r.length) {
                                if (o < d && (d = o), h < d && (d = h), 0 === d) break e;
                                I.arraySet(i, n, s, d, a), o -= d, s += d, h -= d, a += d, r.length -= d;
                                break;
                            }
                            r.mode = 12;
                            break;
                        case 17:
                            for(; l < 14;){
                                if (0 === o) break e;
                                o--, u += n[s++] << l, l += 8;
                            }
                            if (r.nlen = 257 + (31 & u), u >>>= 5, l -= 5, r.ndist = 1 + (31 & u), u >>>= 5, l -= 5, r.ncode = 4 + (15 & u), u >>>= 4, l -= 4, 286 < r.nlen || 30 < r.ndist) {
                                e.msg = "too many length or distance symbols", r.mode = 30;
                                break;
                            }
                            r.have = 0, r.mode = 18;
                        case 18:
                            for(; r.have < r.ncode;){
                                for(; l < 3;){
                                    if (0 === o) break e;
                                    o--, u += n[s++] << l, l += 8;
                                }
                                r.lens[A[r.have++]] = 7 & u, u >>>= 3, l -= 3;
                            }
                            for(; r.have < 19;)r.lens[A[r.have++]] = 0;
                            if (r.lencode = r.lendyn, r.lenbits = 7, S = {
                                bits: r.lenbits
                            }, x = T(0, r.lens, 0, 19, r.lencode, 0, r.work, S), r.lenbits = S.bits, x) {
                                e.msg = "invalid code lengths set", r.mode = 30;
                                break;
                            }
                            r.have = 0, r.mode = 19;
                        case 19:
                            for(; r.have < r.nlen + r.ndist;){
                                for(; g = (C = r.lencode[u & (1 << r.lenbits) - 1]) >>> 16 & 255, b = 65535 & C, !((_ = C >>> 24) <= l);){
                                    if (0 === o) break e;
                                    o--, u += n[s++] << l, l += 8;
                                }
                                if (b < 16) u >>>= _, l -= _, r.lens[r.have++] = b;
                                else {
                                    if (16 === b) {
                                        for(z = _ + 2; l < z;){
                                            if (0 === o) break e;
                                            o--, u += n[s++] << l, l += 8;
                                        }
                                        if (u >>>= _, l -= _, 0 === r.have) {
                                            e.msg = "invalid bit length repeat", r.mode = 30;
                                            break;
                                        }
                                        k = r.lens[r.have - 1], d = 3 + (3 & u), u >>>= 2, l -= 2;
                                    } else if (17 === b) {
                                        for(z = _ + 3; l < z;){
                                            if (0 === o) break e;
                                            o--, u += n[s++] << l, l += 8;
                                        }
                                        l -= _, k = 0, d = 3 + (7 & (u >>>= _)), u >>>= 3, l -= 3;
                                    } else {
                                        for(z = _ + 7; l < z;){
                                            if (0 === o) break e;
                                            o--, u += n[s++] << l, l += 8;
                                        }
                                        l -= _, k = 0, d = 11 + (127 & (u >>>= _)), u >>>= 7, l -= 7;
                                    }
                                    if (r.have + d > r.nlen + r.ndist) {
                                        e.msg = "invalid bit length repeat", r.mode = 30;
                                        break;
                                    }
                                    for(; d--;)r.lens[r.have++] = k;
                                }
                            }
                            if (30 === r.mode) break;
                            if (0 === r.lens[256]) {
                                e.msg = "invalid code -- missing end-of-block", r.mode = 30;
                                break;
                            }
                            if (r.lenbits = 9, S = {
                                bits: r.lenbits
                            }, x = T(D, r.lens, 0, r.nlen, r.lencode, 0, r.work, S), r.lenbits = S.bits, x) {
                                e.msg = "invalid literal/lengths set", r.mode = 30;
                                break;
                            }
                            if (r.distbits = 6, r.distcode = r.distdyn, S = {
                                bits: r.distbits
                            }, x = T(F, r.lens, r.nlen, r.ndist, r.distcode, 0, r.work, S), r.distbits = S.bits, x) {
                                e.msg = "invalid distances set", r.mode = 30;
                                break;
                            }
                            if (r.mode = 20, 6 === t) break e;
                        case 20:
                            r.mode = 21;
                        case 21:
                            if (6 <= o && 258 <= h) {
                                e.next_out = a, e.avail_out = h, e.next_in = s, e.avail_in = o, r.hold = u, r.bits = l, R(e, c), a = e.next_out, i = e.output, h = e.avail_out, s = e.next_in, n = e.input, o = e.avail_in, u = r.hold, l = r.bits, 12 === r.mode && (r.back = -1);
                                break;
                            }
                            for(r.back = 0; g = (C = r.lencode[u & (1 << r.lenbits) - 1]) >>> 16 & 255, b = 65535 & C, !((_ = C >>> 24) <= l);){
                                if (0 === o) break e;
                                o--, u += n[s++] << l, l += 8;
                            }
                            if (g && 0 == (240 & g)) {
                                for(v = _, y = g, w = b; g = (C = r.lencode[w + ((u & (1 << v + y) - 1) >> v)]) >>> 16 & 255, b = 65535 & C, !(v + (_ = C >>> 24) <= l);){
                                    if (0 === o) break e;
                                    o--, u += n[s++] << l, l += 8;
                                }
                                u >>>= v, l -= v, r.back += v;
                            }
                            if (u >>>= _, l -= _, r.back += _, r.length = b, 0 === g) {
                                r.mode = 26;
                                break;
                            }
                            if (32 & g) {
                                r.back = -1, r.mode = 12;
                                break;
                            }
                            if (64 & g) {
                                e.msg = "invalid literal/length code", r.mode = 30;
                                break;
                            }
                            r.extra = 15 & g, r.mode = 22;
                        case 22:
                            if (r.extra) {
                                for(z = r.extra; l < z;){
                                    if (0 === o) break e;
                                    o--, u += n[s++] << l, l += 8;
                                }
                                r.length += u & (1 << r.extra) - 1, u >>>= r.extra, l -= r.extra, r.back += r.extra;
                            }
                            r.was = r.length, r.mode = 23;
                        case 23:
                            for(; g = (C = r.distcode[u & (1 << r.distbits) - 1]) >>> 16 & 255, b = 65535 & C, !((_ = C >>> 24) <= l);){
                                if (0 === o) break e;
                                o--, u += n[s++] << l, l += 8;
                            }
                            if (0 == (240 & g)) {
                                for(v = _, y = g, w = b; g = (C = r.distcode[w + ((u & (1 << v + y) - 1) >> v)]) >>> 16 & 255, b = 65535 & C, !(v + (_ = C >>> 24) <= l);){
                                    if (0 === o) break e;
                                    o--, u += n[s++] << l, l += 8;
                                }
                                u >>>= v, l -= v, r.back += v;
                            }
                            if (u >>>= _, l -= _, r.back += _, 64 & g) {
                                e.msg = "invalid distance code", r.mode = 30;
                                break;
                            }
                            r.offset = b, r.extra = 15 & g, r.mode = 24;
                        case 24:
                            if (r.extra) {
                                for(z = r.extra; l < z;){
                                    if (0 === o) break e;
                                    o--, u += n[s++] << l, l += 8;
                                }
                                r.offset += u & (1 << r.extra) - 1, u >>>= r.extra, l -= r.extra, r.back += r.extra;
                            }
                            if (r.offset > r.dmax) {
                                e.msg = "invalid distance too far back", r.mode = 30;
                                break;
                            }
                            r.mode = 25;
                        case 25:
                            if (0 === h) break e;
                            if (d = c - h, r.offset > d) {
                                if ((d = r.offset - d) > r.whave && r.sane) {
                                    e.msg = "invalid distance too far back", r.mode = 30;
                                    break;
                                }
                                p = d > r.wnext ? (d -= r.wnext, r.wsize - d) : r.wnext - d, d > r.length && (d = r.length), m = r.window;
                            } else m = i, p = a - r.offset, d = r.length;
                            for(h < d && (d = h), h -= d, r.length -= d; i[a++] = m[p++], --d;);
                            0 === r.length && (r.mode = 21);
                            break;
                        case 26:
                            if (0 === h) break e;
                            i[a++] = r.length, h--, r.mode = 21;
                            break;
                        case 27:
                            if (r.wrap) {
                                for(; l < 32;){
                                    if (0 === o) break e;
                                    o--, u |= n[s++] << l, l += 8;
                                }
                                if (c -= h, e.total_out += c, r.total += c, c && (e.adler = r.check = r.flags ? B(r.check, i, c, a - c) : O(r.check, i, c, a - c)), c = h, (r.flags ? u : L(u)) !== r.check) {
                                    e.msg = "incorrect data check", r.mode = 30;
                                    break;
                                }
                                l = u = 0;
                            }
                            r.mode = 28;
                        case 28:
                            if (r.wrap && r.flags) {
                                for(; l < 32;){
                                    if (0 === o) break e;
                                    o--, u += n[s++] << l, l += 8;
                                }
                                if (u !== (4294967295 & r.total)) {
                                    e.msg = "incorrect length check", r.mode = 30;
                                    break;
                                }
                                l = u = 0;
                            }
                            r.mode = 29;
                        case 29:
                            x = 1;
                            break e;
                        case 30:
                            x = -3;
                            break e;
                        case 31:
                            return -4;
                        case 32:
                        default:
                            return U;
                    }
                    return e.next_out = a, e.avail_out = h, e.next_in = s, e.avail_in = o, r.hold = u, r.bits = l, (r.wsize || c !== e.avail_out && r.mode < 30 && (r.mode < 27 || 4 !== t)) && Z(e, e.output, e.next_out, c - e.avail_out) ? (r.mode = 31, -4) : (f -= e.avail_in, c -= e.avail_out, e.total_in += f, e.total_out += c, r.total += c, r.wrap && c && (e.adler = r.check = r.flags ? B(r.check, i, c, e.next_out - c) : O(r.check, i, c, e.next_out - c)), e.data_type = r.bits + (r.last ? 64 : 0) + (12 === r.mode ? 128 : 0) + (20 === r.mode || 15 === r.mode ? 256 : 0), (0 == f && 0 === c || 4 === t) && x === N && (x = -5), x);
                }, r.inflateEnd = function(e) {
                    if (!e || !e.state) return U;
                    var t = e.state;
                    return t.window && (t.window = null), e.state = null, N;
                }, r.inflateGetHeader = function(e, t) {
                    var r;
                    return e && e.state ? 0 == (2 & (r = e.state).wrap) ? U : ((r.head = t).done = !1, N) : U;
                }, r.inflateSetDictionary = function(e, t) {
                    var r, n = t.length;
                    return e && e.state ? 0 !== (r = e.state).wrap && 11 !== r.mode ? U : 11 === r.mode && O(1, t, n, 0) !== r.check ? -3 : Z(e, t, n, n) ? (r.mode = 31, -4) : (r.havedict = 1, N) : U;
                }, r.inflateInfo = "pako inflate (from Nodeca project)";
            },
            {
                "../utils/common": 41,
                "./adler32": 43,
                "./crc32": 45,
                "./inffast": 48,
                "./inftrees": 50
            }
        ],
        50: [
            function(e, t, r) {
                "use strict";
                var D = e("../utils/common"), F = [
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    13,
                    15,
                    17,
                    19,
                    23,
                    27,
                    31,
                    35,
                    43,
                    51,
                    59,
                    67,
                    83,
                    99,
                    115,
                    131,
                    163,
                    195,
                    227,
                    258,
                    0,
                    0
                ], N = [
                    16,
                    16,
                    16,
                    16,
                    16,
                    16,
                    16,
                    16,
                    17,
                    17,
                    17,
                    17,
                    18,
                    18,
                    18,
                    18,
                    19,
                    19,
                    19,
                    19,
                    20,
                    20,
                    20,
                    20,
                    21,
                    21,
                    21,
                    21,
                    16,
                    72,
                    78
                ], U = [
                    1,
                    2,
                    3,
                    4,
                    5,
                    7,
                    9,
                    13,
                    17,
                    25,
                    33,
                    49,
                    65,
                    97,
                    129,
                    193,
                    257,
                    385,
                    513,
                    769,
                    1025,
                    1537,
                    2049,
                    3073,
                    4097,
                    6145,
                    8193,
                    12289,
                    16385,
                    24577,
                    0,
                    0
                ], P = [
                    16,
                    16,
                    16,
                    16,
                    17,
                    17,
                    18,
                    18,
                    19,
                    19,
                    20,
                    20,
                    21,
                    21,
                    22,
                    22,
                    23,
                    23,
                    24,
                    24,
                    25,
                    25,
                    26,
                    26,
                    27,
                    27,
                    28,
                    28,
                    29,
                    29,
                    64,
                    64
                ];
                t.exports = function(e, t, r, n, i, s, a, o) {
                    var h, u, l, f, c, d, p, m, _, g = o.bits, b = 0, v = 0, y = 0, w = 0, k = 0, x = 0, S = 0, z = 0, C = 0, E = 0, A = null, I = 0, O = new D.Buf16(16), B = new D.Buf16(16), R = null, T = 0;
                    for(b = 0; b <= 15; b++)O[b] = 0;
                    for(v = 0; v < n; v++)O[t[r + v]]++;
                    for(k = g, w = 15; 1 <= w && 0 === O[w]; w--);
                    if (w < k && (k = w), 0 === w) return i[s++] = 20971520, i[s++] = 20971520, o.bits = 1, 0;
                    for(y = 1; y < w && 0 === O[y]; y++);
                    for(k < y && (k = y), b = z = 1; b <= 15; b++)if (z <<= 1, (z -= O[b]) < 0) return -1;
                    if (0 < z && (0 === e || 1 !== w)) return -1;
                    for(B[1] = 0, b = 1; b < 15; b++)B[b + 1] = B[b] + O[b];
                    for(v = 0; v < n; v++)0 !== t[r + v] && (a[B[t[r + v]]++] = v);
                    if (d = 0 === e ? (A = R = a, 19) : 1 === e ? (A = F, I -= 257, R = N, T -= 257, 256) : (A = U, R = P, -1), b = y, c = s, S = v = E = 0, l = -1, f = (C = 1 << (x = k)) - 1, 1 === e && 852 < C || 2 === e && 592 < C) return 1;
                    for(;;){
                        for(p = b - S, _ = a[v] < d ? (m = 0, a[v]) : a[v] > d ? (m = R[T + a[v]], A[I + a[v]]) : (m = 96, 0), h = 1 << b - S, y = u = 1 << x; i[c + (E >> S) + (u -= h)] = p << 24 | m << 16 | _ | 0, 0 !== u;);
                        for(h = 1 << b - 1; E & h;)h >>= 1;
                        if (0 !== h ? (E &= h - 1, E += h) : E = 0, v++, 0 == --O[b]) {
                            if (b === w) break;
                            b = t[r + a[v]];
                        }
                        if (k < b && (E & f) !== l) {
                            for(0 === S && (S = k), c += y, z = 1 << (x = b - S); x + S < w && !((z -= O[x + S]) <= 0);)x++, z <<= 1;
                            if (C += 1 << x, 1 === e && 852 < C || 2 === e && 592 < C) return 1;
                            i[l = E & f] = k << 24 | x << 16 | c - s | 0;
                        }
                    }
                    return 0 !== E && (i[c + E] = b - S << 24 | 4194304), o.bits = k, 0;
                };
            },
            {
                "../utils/common": 41
            }
        ],
        51: [
            function(e, t, r) {
                "use strict";
                t.exports = {
                    2: "need dictionary",
                    1: "stream end",
                    0: "",
                    "-1": "file error",
                    "-2": "stream error",
                    "-3": "data error",
                    "-4": "insufficient memory",
                    "-5": "buffer error",
                    "-6": "incompatible version"
                };
            },
            {}
        ],
        52: [
            function(e, t, r) {
                "use strict";
                var i = e("../utils/common"), o = 0, h = 1;
                function n(e) {
                    for(var t = e.length; 0 <= --t;)e[t] = 0;
                }
                var s = 0, a = 29, u = 256, l = u + 1 + a, f = 30, c = 19, _ = 2 * l + 1, g = 15, d = 16, p = 7, m = 256, b = 16, v = 17, y = 18, w = [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    0
                ], k = [
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    2,
                    2,
                    3,
                    3,
                    4,
                    4,
                    5,
                    5,
                    6,
                    6,
                    7,
                    7,
                    8,
                    8,
                    9,
                    9,
                    10,
                    10,
                    11,
                    11,
                    12,
                    12,
                    13,
                    13
                ], x = [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    3,
                    7
                ], S = [
                    16,
                    17,
                    18,
                    0,
                    8,
                    7,
                    9,
                    6,
                    10,
                    5,
                    11,
                    4,
                    12,
                    3,
                    13,
                    2,
                    14,
                    1,
                    15
                ], z = new Array(2 * (l + 2));
                n(z);
                var C = new Array(2 * f);
                n(C);
                var E = new Array(512);
                n(E);
                var A = new Array(256);
                n(A);
                var I = new Array(a);
                n(I);
                var O, B, R, T = new Array(f);
                function D(e, t, r, n, i) {
                    this.static_tree = e, this.extra_bits = t, this.extra_base = r, this.elems = n, this.max_length = i, this.has_stree = e && e.length;
                }
                function F(e, t) {
                    this.dyn_tree = e, this.max_code = 0, this.stat_desc = t;
                }
                function N(e) {
                    return e < 256 ? E[e] : E[256 + (e >>> 7)];
                }
                function U(e, t) {
                    e.pending_buf[e.pending++] = 255 & t, e.pending_buf[e.pending++] = t >>> 8 & 255;
                }
                function P(e, t, r) {
                    e.bi_valid > d - r ? (e.bi_buf |= t << e.bi_valid & 65535, U(e, e.bi_buf), e.bi_buf = t >> d - e.bi_valid, e.bi_valid += r - d) : (e.bi_buf |= t << e.bi_valid & 65535, e.bi_valid += r);
                }
                function L(e, t, r) {
                    P(e, r[2 * t], r[2 * t + 1]);
                }
                function j(e, t) {
                    for(var r = 0; r |= 1 & e, e >>>= 1, r <<= 1, 0 < --t;);
                    return r >>> 1;
                }
                function Z(e, t, r) {
                    var n, i, s = new Array(g + 1), a = 0;
                    for(n = 1; n <= g; n++)s[n] = a = a + r[n - 1] << 1;
                    for(i = 0; i <= t; i++){
                        var o = e[2 * i + 1];
                        0 !== o && (e[2 * i] = j(s[o]++, o));
                    }
                }
                function W(e) {
                    var t;
                    for(t = 0; t < l; t++)e.dyn_ltree[2 * t] = 0;
                    for(t = 0; t < f; t++)e.dyn_dtree[2 * t] = 0;
                    for(t = 0; t < c; t++)e.bl_tree[2 * t] = 0;
                    e.dyn_ltree[2 * m] = 1, e.opt_len = e.static_len = 0, e.last_lit = e.matches = 0;
                }
                function M(e) {
                    8 < e.bi_valid ? U(e, e.bi_buf) : 0 < e.bi_valid && (e.pending_buf[e.pending++] = e.bi_buf), e.bi_buf = 0, e.bi_valid = 0;
                }
                function H(e, t, r, n) {
                    var i = 2 * t, s = 2 * r;
                    return e[i] < e[s] || e[i] === e[s] && n[t] <= n[r];
                }
                function G(e, t, r) {
                    for(var n = e.heap[r], i = r << 1; i <= e.heap_len && (i < e.heap_len && H(t, e.heap[i + 1], e.heap[i], e.depth) && i++, !H(t, n, e.heap[i], e.depth));)e.heap[r] = e.heap[i], r = i, i <<= 1;
                    e.heap[r] = n;
                }
                function K(e, t, r) {
                    var n, i, s, a, o = 0;
                    if (0 !== e.last_lit) for(; n = e.pending_buf[e.d_buf + 2 * o] << 8 | e.pending_buf[e.d_buf + 2 * o + 1], i = e.pending_buf[e.l_buf + o], o++, 0 === n ? L(e, i, t) : (L(e, (s = A[i]) + u + 1, t), 0 !== (a = w[s]) && P(e, i -= I[s], a), L(e, s = N(--n), r), 0 !== (a = k[s]) && P(e, n -= T[s], a)), o < e.last_lit;);
                    L(e, m, t);
                }
                function Y(e, t) {
                    var r, n, i, s = t.dyn_tree, a = t.stat_desc.static_tree, o = t.stat_desc.has_stree, h = t.stat_desc.elems, u = -1;
                    for(e.heap_len = 0, e.heap_max = _, r = 0; r < h; r++)0 !== s[2 * r] ? (e.heap[++e.heap_len] = u = r, e.depth[r] = 0) : s[2 * r + 1] = 0;
                    for(; e.heap_len < 2;)s[2 * (i = e.heap[++e.heap_len] = u < 2 ? ++u : 0)] = 1, e.depth[i] = 0, e.opt_len--, o && (e.static_len -= a[2 * i + 1]);
                    for(t.max_code = u, r = e.heap_len >> 1; 1 <= r; r--)G(e, s, r);
                    for(i = h; r = e.heap[1], e.heap[1] = e.heap[e.heap_len--], G(e, s, 1), n = e.heap[1], e.heap[--e.heap_max] = r, e.heap[--e.heap_max] = n, s[2 * i] = s[2 * r] + s[2 * n], e.depth[i] = (e.depth[r] >= e.depth[n] ? e.depth[r] : e.depth[n]) + 1, s[2 * r + 1] = s[2 * n + 1] = i, e.heap[1] = i++, G(e, s, 1), 2 <= e.heap_len;);
                    e.heap[--e.heap_max] = e.heap[1], function(e, t) {
                        var r, n, i, s, a, o, h = t.dyn_tree, u = t.max_code, l = t.stat_desc.static_tree, f = t.stat_desc.has_stree, c = t.stat_desc.extra_bits, d = t.stat_desc.extra_base, p = t.stat_desc.max_length, m = 0;
                        for(s = 0; s <= g; s++)e.bl_count[s] = 0;
                        for(h[2 * e.heap[e.heap_max] + 1] = 0, r = e.heap_max + 1; r < _; r++)p < (s = h[2 * h[2 * (n = e.heap[r]) + 1] + 1] + 1) && (s = p, m++), h[2 * n + 1] = s, u < n || (e.bl_count[s]++, a = 0, d <= n && (a = c[n - d]), o = h[2 * n], e.opt_len += o * (s + a), f && (e.static_len += o * (l[2 * n + 1] + a)));
                        if (0 !== m) {
                            do {
                                for(s = p - 1; 0 === e.bl_count[s];)s--;
                                e.bl_count[s]--, e.bl_count[s + 1] += 2, e.bl_count[p]--, m -= 2;
                            }while (0 < m);
                            for(s = p; 0 !== s; s--)for(n = e.bl_count[s]; 0 !== n;)u < (i = e.heap[--r]) || (h[2 * i + 1] !== s && (e.opt_len += (s - h[2 * i + 1]) * h[2 * i], h[2 * i + 1] = s), n--);
                        }
                    }(e, t), Z(s, u, e.bl_count);
                }
                function X(e, t, r) {
                    var n, i, s = -1, a = t[1], o = 0, h = 7, u = 4;
                    for(0 === a && (h = 138, u = 3), t[2 * (r + 1) + 1] = 65535, n = 0; n <= r; n++)i = a, a = t[2 * (n + 1) + 1], ++o < h && i === a || (o < u ? e.bl_tree[2 * i] += o : 0 !== i ? (i !== s && e.bl_tree[2 * i]++, e.bl_tree[2 * b]++) : o <= 10 ? e.bl_tree[2 * v]++ : e.bl_tree[2 * y]++, s = i, u = (o = 0) === a ? (h = 138, 3) : i === a ? (h = 6, 3) : (h = 7, 4));
                }
                function V(e, t, r) {
                    var n, i, s = -1, a = t[1], o = 0, h = 7, u = 4;
                    for(0 === a && (h = 138, u = 3), n = 0; n <= r; n++)if (i = a, a = t[2 * (n + 1) + 1], !(++o < h && i === a)) {
                        if (o < u) for(; L(e, i, e.bl_tree), 0 != --o;);
                        else 0 !== i ? (i !== s && (L(e, i, e.bl_tree), o--), L(e, b, e.bl_tree), P(e, o - 3, 2)) : o <= 10 ? (L(e, v, e.bl_tree), P(e, o - 3, 3)) : (L(e, y, e.bl_tree), P(e, o - 11, 7));
                        s = i, u = (o = 0) === a ? (h = 138, 3) : i === a ? (h = 6, 3) : (h = 7, 4);
                    }
                }
                n(T);
                var q = !1;
                function J(e, t, r, n) {
                    P(e, (s << 1) + (n ? 1 : 0), 3), function(e, t, r, n) {
                        M(e), n && (U(e, r), U(e, ~r)), i.arraySet(e.pending_buf, e.window, t, r, e.pending), e.pending += r;
                    }(e, t, r, !0);
                }
                r._tr_init = function(e) {
                    q || (function() {
                        var e, t, r, n, i, s = new Array(g + 1);
                        for(n = r = 0; n < a - 1; n++)for(I[n] = r, e = 0; e < 1 << w[n]; e++)A[r++] = n;
                        for(A[r - 1] = n, n = i = 0; n < 16; n++)for(T[n] = i, e = 0; e < 1 << k[n]; e++)E[i++] = n;
                        for(i >>= 7; n < f; n++)for(T[n] = i << 7, e = 0; e < 1 << k[n] - 7; e++)E[256 + i++] = n;
                        for(t = 0; t <= g; t++)s[t] = 0;
                        for(e = 0; e <= 143;)z[2 * e + 1] = 8, e++, s[8]++;
                        for(; e <= 255;)z[2 * e + 1] = 9, e++, s[9]++;
                        for(; e <= 279;)z[2 * e + 1] = 7, e++, s[7]++;
                        for(; e <= 287;)z[2 * e + 1] = 8, e++, s[8]++;
                        for(Z(z, l + 1, s), e = 0; e < f; e++)C[2 * e + 1] = 5, C[2 * e] = j(e, 5);
                        O = new D(z, w, u + 1, l, g), B = new D(C, k, 0, f, g), R = new D(new Array(0), x, 0, c, p);
                    }(), q = !0), e.l_desc = new F(e.dyn_ltree, O), e.d_desc = new F(e.dyn_dtree, B), e.bl_desc = new F(e.bl_tree, R), e.bi_buf = 0, e.bi_valid = 0, W(e);
                }, r._tr_stored_block = J, r._tr_flush_block = function(e, t, r, n) {
                    var i, s, a = 0;
                    0 < e.level ? (2 === e.strm.data_type && (e.strm.data_type = function(e) {
                        var t, r = 4093624447;
                        for(t = 0; t <= 31; t++, r >>>= 1)if (1 & r && 0 !== e.dyn_ltree[2 * t]) return o;
                        if (0 !== e.dyn_ltree[18] || 0 !== e.dyn_ltree[20] || 0 !== e.dyn_ltree[26]) return h;
                        for(t = 32; t < u; t++)if (0 !== e.dyn_ltree[2 * t]) return h;
                        return o;
                    }(e)), Y(e, e.l_desc), Y(e, e.d_desc), a = function(e) {
                        var t;
                        for(X(e, e.dyn_ltree, e.l_desc.max_code), X(e, e.dyn_dtree, e.d_desc.max_code), Y(e, e.bl_desc), t = c - 1; 3 <= t && 0 === e.bl_tree[2 * S[t] + 1]; t--);
                        return e.opt_len += 3 * (t + 1) + 5 + 5 + 4, t;
                    }(e), i = e.opt_len + 3 + 7 >>> 3, (s = e.static_len + 3 + 7 >>> 3) <= i && (i = s)) : i = s = r + 5, r + 4 <= i && -1 !== t ? J(e, t, r, n) : 4 === e.strategy || s === i ? (P(e, 2 + (n ? 1 : 0), 3), K(e, z, C)) : (P(e, 4 + (n ? 1 : 0), 3), function(e, t, r, n) {
                        var i;
                        for(P(e, t - 257, 5), P(e, r - 1, 5), P(e, n - 4, 4), i = 0; i < n; i++)P(e, e.bl_tree[2 * S[i] + 1], 3);
                        V(e, e.dyn_ltree, t - 1), V(e, e.dyn_dtree, r - 1);
                    }(e, e.l_desc.max_code + 1, e.d_desc.max_code + 1, a + 1), K(e, e.dyn_ltree, e.dyn_dtree)), W(e), n && M(e);
                }, r._tr_tally = function(e, t, r) {
                    return e.pending_buf[e.d_buf + 2 * e.last_lit] = t >>> 8 & 255, e.pending_buf[e.d_buf + 2 * e.last_lit + 1] = 255 & t, e.pending_buf[e.l_buf + e.last_lit] = 255 & r, e.last_lit++, 0 === t ? e.dyn_ltree[2 * r]++ : (e.matches++, t--, e.dyn_ltree[2 * (A[r] + u + 1)]++, e.dyn_dtree[2 * N(t)]++), e.last_lit === e.lit_bufsize - 1;
                }, r._tr_align = function(e) {
                    P(e, 2, 3), L(e, m, z), function(e) {
                        16 === e.bi_valid ? (U(e, e.bi_buf), e.bi_buf = 0, e.bi_valid = 0) : 8 <= e.bi_valid && (e.pending_buf[e.pending++] = 255 & e.bi_buf, e.bi_buf >>= 8, e.bi_valid -= 8);
                    }(e);
                };
            },
            {
                "../utils/common": 41
            }
        ],
        53: [
            function(e, t, r) {
                "use strict";
                t.exports = function() {
                    this.input = null, this.next_in = 0, this.avail_in = 0, this.total_in = 0, this.output = null, this.next_out = 0, this.avail_out = 0, this.total_out = 0, this.msg = "", this.state = null, this.data_type = 2, this.adler = 0;
                };
            },
            {}
        ],
        54: [
            function(e, t, r) {
                (function(e) {
                    !function(r, n) {
                        "use strict";
                        if (!r.setImmediate) {
                            var i, s, t, a, o = 1, h = {}, u = !1, l = r.document, e = Object.getPrototypeOf && Object.getPrototypeOf(r);
                            e = e && e.setTimeout ? e : r, i = "[object process]" === ({}).toString.call(r.process) ? function(e) {
                                process.nextTick(function() {
                                    c(e);
                                });
                            } : function() {
                                if (r.postMessage && !r.importScripts) {
                                    var e = !0, t = r.onmessage;
                                    return r.onmessage = function() {
                                        e = !1;
                                    }, r.postMessage("", "*"), r.onmessage = t, e;
                                }
                            }() ? (a = "setImmediate$" + Math.random() + "$", r.addEventListener ? r.addEventListener("message", d, !1) : r.attachEvent("onmessage", d), function(e) {
                                r.postMessage(a + e, "*");
                            }) : r.MessageChannel ? ((t = new MessageChannel).port1.onmessage = function(e) {
                                c(e.data);
                            }, function(e) {
                                t.port2.postMessage(e);
                            }) : l && "onreadystatechange" in l.createElement("script") ? (s = l.documentElement, function(e) {
                                var t = l.createElement("script");
                                t.onreadystatechange = function() {
                                    c(e), t.onreadystatechange = null, s.removeChild(t), t = null;
                                }, s.appendChild(t);
                            }) : function(e) {
                                setTimeout(c, 0, e);
                            }, e.setImmediate = function(e) {
                                "function" != typeof e && (e = new Function("" + e));
                                for(var t = new Array(arguments.length - 1), r = 0; r < t.length; r++)t[r] = arguments[r + 1];
                                var n = {
                                    callback: e,
                                    args: t
                                };
                                return h[o] = n, i(o), o++;
                            }, e.clearImmediate = f;
                        }
                        function f(e) {
                            delete h[e];
                        }
                        function c(e) {
                            if (u) setTimeout(c, 0, e);
                            else {
                                var t = h[e];
                                if (t) {
                                    u = !0;
                                    try {
                                        !function(e) {
                                            var t = e.callback, r = e.args;
                                            switch(r.length){
                                                case 0:
                                                    t();
                                                    break;
                                                case 1:
                                                    t(r[0]);
                                                    break;
                                                case 2:
                                                    t(r[0], r[1]);
                                                    break;
                                                case 3:
                                                    t(r[0], r[1], r[2]);
                                                    break;
                                                default:
                                                    t.apply(n, r);
                                            }
                                        }(t);
                                    } finally{
                                        f(e), u = !1;
                                    }
                                }
                            }
                        }
                        function d(e) {
                            e.source === r && "string" == typeof e.data && 0 === e.data.indexOf(a) && c(+e.data.slice(a.length));
                        }
                    }("undefined" == typeof self ? void 0 === e ? this : e : self);
                }).call(this, "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});
            },
            {}
        ]
    }, {}, [
        10
    ])(10);
});

},{"f7295d6075386111":"6tQNr","cf30dbb97a1d82ba":"gq3cc"}],"jlOPZ":[function(require,module,exports) {
var global = arguments[3];
(function() {
    /** Used as a safe reference for `undefined` in pre-ES5 environments. */ var undefined;
    /** Used as the semantic version number. */ var VERSION = "4.17.21";
    /** Used as the size to enable large array optimizations. */ var LARGE_ARRAY_SIZE = 200;
    /** Error message constants. */ var CORE_ERROR_TEXT = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.", FUNC_ERROR_TEXT = "Expected a function", INVALID_TEMPL_VAR_ERROR_TEXT = "Invalid `variable` option passed into `_.template`";
    /** Used to stand-in for `undefined` hash values. */ var HASH_UNDEFINED = "__lodash_hash_undefined__";
    /** Used as the maximum memoize cache size. */ var MAX_MEMOIZE_SIZE = 500;
    /** Used as the internal argument placeholder. */ var PLACEHOLDER = "__lodash_placeholder__";
    /** Used to compose bitmasks for cloning. */ var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
    /** Used to compose bitmasks for value comparisons. */ var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
    /** Used to compose bitmasks for function metadata. */ var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256, WRAP_FLIP_FLAG = 512;
    /** Used as default options for `_.truncate`. */ var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = "...";
    /** Used to detect hot functions by number of calls within a span of milliseconds. */ var HOT_COUNT = 800, HOT_SPAN = 16;
    /** Used to indicate the type of lazy iteratees. */ var LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2, LAZY_WHILE_FLAG = 3;
    /** Used as references for various `Number` constants. */ var INFINITY = 1 / 0, MAX_SAFE_INTEGER = 9007199254740991, MAX_INTEGER = 1.7976931348623157e+308, NAN = 0 / 0;
    /** Used as references for the maximum length and index of an array. */ var MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
    /** Used to associate wrap methods with their bit flags. */ var wrapFlags = [
        [
            "ary",
            WRAP_ARY_FLAG
        ],
        [
            "bind",
            WRAP_BIND_FLAG
        ],
        [
            "bindKey",
            WRAP_BIND_KEY_FLAG
        ],
        [
            "curry",
            WRAP_CURRY_FLAG
        ],
        [
            "curryRight",
            WRAP_CURRY_RIGHT_FLAG
        ],
        [
            "flip",
            WRAP_FLIP_FLAG
        ],
        [
            "partial",
            WRAP_PARTIAL_FLAG
        ],
        [
            "partialRight",
            WRAP_PARTIAL_RIGHT_FLAG
        ],
        [
            "rearg",
            WRAP_REARG_FLAG
        ]
    ];
    /** `Object#toString` result references. */ var argsTag = "[object Arguments]", arrayTag = "[object Array]", asyncTag = "[object AsyncFunction]", boolTag = "[object Boolean]", dateTag = "[object Date]", domExcTag = "[object DOMException]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", nullTag = "[object Null]", objectTag = "[object Object]", promiseTag = "[object Promise]", proxyTag = "[object Proxy]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]", undefinedTag = "[object Undefined]", weakMapTag = "[object WeakMap]", weakSetTag = "[object WeakSet]";
    var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
    /** Used to match empty string literals in compiled template source. */ var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
    /** Used to match HTML entities and HTML characters. */ var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g, reUnescapedHtml = /[&<>"']/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
    /** Used to match template delimiters. */ var reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g;
    /** Used to match property names within property paths. */ var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */ var reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar.source);
    /** Used to match leading whitespace. */ var reTrimStart = /^\s+/;
    /** Used to match a single whitespace character. */ var reWhitespace = /\s/;
    /** Used to match wrap detail comments. */ var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /;
    /** Used to match words composed of alphanumeric characters. */ var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
    /**
   * Used to validate the `validate` option in `_.template` variable.
   *
   * Forbids characters which could potentially change the meaning of the function argument definition:
   * - "()," (modification of function parameters)
   * - "=" (default value)
   * - "[]{}" (destructuring of function parameters)
   * - "/" (beginning of a comment)
   * - whitespace
   */ var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
    /** Used to match backslashes in property paths. */ var reEscapeChar = /\\(\\)?/g;
    /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */ var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
    /** Used to match `RegExp` flags from their coerced string values. */ var reFlags = /\w*$/;
    /** Used to detect bad signed hexadecimal string values. */ var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    /** Used to detect binary string values. */ var reIsBinary = /^0b[01]+$/i;
    /** Used to detect host constructors (Safari). */ var reIsHostCtor = /^\[object .+?Constructor\]$/;
    /** Used to detect octal string values. */ var reIsOctal = /^0o[0-7]+$/i;
    /** Used to detect unsigned integer values. */ var reIsUint = /^(?:0|[1-9]\d*)$/;
    /** Used to match Latin Unicode letters (excluding mathematical operators). */ var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
    /** Used to ensure capturing order of template delimiters. */ var reNoMatch = /($^)/;
    /** Used to match unescaped characters in compiled string literals. */ var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
    /** Used to compose unicode character classes. */ var rsAstralRange = "\ud800-\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = "\\u2700-\\u27bf", rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff", rsMathOpRange = "\\xac\\xb1\\xd7\\xf7", rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", rsPunctuationRange = "\\u2000-\\u206f", rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde", rsVarRange = "\\ufe0e\\ufe0f", rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
    /** Used to compose unicode capture groups. */ var rsApos = "['’]", rsAstral = "[" + rsAstralRange + "]", rsBreak = "[" + rsBreakRange + "]", rsCombo = "[" + rsComboRange + "]", rsDigits = "\\d+", rsDingbat = "[" + rsDingbatRange + "]", rsLower = "[" + rsLowerRange + "]", rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]", rsFitz = "\ud83c[\udffb-\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\ud83c[\udde6-\uddff]){2}", rsSurrPair = "[\ud800-\udbff][\udc00-\udfff]", rsUpper = "[" + rsUpperRange + "]", rsZWJ = "\\u200d";
    /** Used to compose unicode regexes. */ var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")", rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")", rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?", rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?", reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [
        rsNonAstral,
        rsRegional,
        rsSurrPair
    ].join("|") + ")" + rsOptVar + reOptMod + ")*", rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = "(?:" + [
        rsDingbat,
        rsRegional,
        rsSurrPair
    ].join("|") + ")" + rsSeq, rsSymbol = "(?:" + [
        rsNonAstral + rsCombo + "?",
        rsCombo,
        rsRegional,
        rsSurrPair,
        rsAstral
    ].join("|") + ")";
    /** Used to match apostrophes. */ var reApos = RegExp(rsApos, "g");
    /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */ var reComboMark = RegExp(rsCombo, "g");
    /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */ var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
    /** Used to match complex or compound words. */ var reUnicodeWord = RegExp([
        rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [
            rsBreak,
            rsUpper,
            "$"
        ].join("|") + ")",
        rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [
            rsBreak,
            rsUpper + rsMiscLower,
            "$"
        ].join("|") + ")",
        rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
        rsUpper + "+" + rsOptContrUpper,
        rsOrdUpper,
        rsOrdLower,
        rsDigits,
        rsEmoji
    ].join("|"), "g");
    /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */ var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
    /** Used to detect strings that need a more robust regexp to match words. */ var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
    /** Used to assign default `context` object properties. */ var contextProps = [
        "Array",
        "Buffer",
        "DataView",
        "Date",
        "Error",
        "Float32Array",
        "Float64Array",
        "Function",
        "Int8Array",
        "Int16Array",
        "Int32Array",
        "Map",
        "Math",
        "Object",
        "Promise",
        "RegExp",
        "Set",
        "String",
        "Symbol",
        "TypeError",
        "Uint8Array",
        "Uint8ClampedArray",
        "Uint16Array",
        "Uint32Array",
        "WeakMap",
        "_",
        "clearTimeout",
        "isFinite",
        "parseInt",
        "setTimeout"
    ];
    /** Used to make template sourceURLs easier to identify. */ var templateCounter = -1;
    /** Used to identify `toStringTag` values of typed arrays. */ var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    /** Used to identify `toStringTag` values supported by `_.clone`. */ var cloneableTags = {};
    cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
    cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
    /** Used to map Latin Unicode letters to basic Latin letters. */ var deburredLetters = {
        // Latin-1 Supplement block.
        "\xc0": "A",
        "\xc1": "A",
        "\xc2": "A",
        "\xc3": "A",
        "\xc4": "A",
        "\xc5": "A",
        "\xe0": "a",
        "\xe1": "a",
        "\xe2": "a",
        "\xe3": "a",
        "\xe4": "a",
        "\xe5": "a",
        "\xc7": "C",
        "\xe7": "c",
        "\xd0": "D",
        "\xf0": "d",
        "\xc8": "E",
        "\xc9": "E",
        "\xca": "E",
        "\xcb": "E",
        "\xe8": "e",
        "\xe9": "e",
        "\xea": "e",
        "\xeb": "e",
        "\xcc": "I",
        "\xcd": "I",
        "\xce": "I",
        "\xcf": "I",
        "\xec": "i",
        "\xed": "i",
        "\xee": "i",
        "\xef": "i",
        "\xd1": "N",
        "\xf1": "n",
        "\xd2": "O",
        "\xd3": "O",
        "\xd4": "O",
        "\xd5": "O",
        "\xd6": "O",
        "\xd8": "O",
        "\xf2": "o",
        "\xf3": "o",
        "\xf4": "o",
        "\xf5": "o",
        "\xf6": "o",
        "\xf8": "o",
        "\xd9": "U",
        "\xda": "U",
        "\xdb": "U",
        "\xdc": "U",
        "\xf9": "u",
        "\xfa": "u",
        "\xfb": "u",
        "\xfc": "u",
        "\xdd": "Y",
        "\xfd": "y",
        "\xff": "y",
        "\xc6": "Ae",
        "\xe6": "ae",
        "\xde": "Th",
        "\xfe": "th",
        "\xdf": "ss",
        // Latin Extended-A block.
        "Ā": "A",
        "Ă": "A",
        "Ą": "A",
        "ā": "a",
        "ă": "a",
        "ą": "a",
        "Ć": "C",
        "Ĉ": "C",
        "Ċ": "C",
        "Č": "C",
        "ć": "c",
        "ĉ": "c",
        "ċ": "c",
        "č": "c",
        "Ď": "D",
        "Đ": "D",
        "ď": "d",
        "đ": "d",
        "Ē": "E",
        "Ĕ": "E",
        "Ė": "E",
        "Ę": "E",
        "Ě": "E",
        "ē": "e",
        "ĕ": "e",
        "ė": "e",
        "ę": "e",
        "ě": "e",
        "Ĝ": "G",
        "Ğ": "G",
        "Ġ": "G",
        "Ģ": "G",
        "ĝ": "g",
        "ğ": "g",
        "ġ": "g",
        "ģ": "g",
        "Ĥ": "H",
        "Ħ": "H",
        "ĥ": "h",
        "ħ": "h",
        "Ĩ": "I",
        "Ī": "I",
        "Ĭ": "I",
        "Į": "I",
        "İ": "I",
        "ĩ": "i",
        "ī": "i",
        "ĭ": "i",
        "į": "i",
        "ı": "i",
        "Ĵ": "J",
        "ĵ": "j",
        "Ķ": "K",
        "ķ": "k",
        "ĸ": "k",
        "Ĺ": "L",
        "Ļ": "L",
        "Ľ": "L",
        "Ŀ": "L",
        "Ł": "L",
        "ĺ": "l",
        "ļ": "l",
        "ľ": "l",
        "ŀ": "l",
        "ł": "l",
        "Ń": "N",
        "Ņ": "N",
        "Ň": "N",
        "Ŋ": "N",
        "ń": "n",
        "ņ": "n",
        "ň": "n",
        "ŋ": "n",
        "Ō": "O",
        "Ŏ": "O",
        "Ő": "O",
        "ō": "o",
        "ŏ": "o",
        "ő": "o",
        "Ŕ": "R",
        "Ŗ": "R",
        "Ř": "R",
        "ŕ": "r",
        "ŗ": "r",
        "ř": "r",
        "Ś": "S",
        "Ŝ": "S",
        "Ş": "S",
        "Š": "S",
        "ś": "s",
        "ŝ": "s",
        "ş": "s",
        "š": "s",
        "Ţ": "T",
        "Ť": "T",
        "Ŧ": "T",
        "ţ": "t",
        "ť": "t",
        "ŧ": "t",
        "Ũ": "U",
        "Ū": "U",
        "Ŭ": "U",
        "Ů": "U",
        "Ű": "U",
        "Ų": "U",
        "ũ": "u",
        "ū": "u",
        "ŭ": "u",
        "ů": "u",
        "ű": "u",
        "ų": "u",
        "Ŵ": "W",
        "ŵ": "w",
        "Ŷ": "Y",
        "ŷ": "y",
        "Ÿ": "Y",
        "Ź": "Z",
        "Ż": "Z",
        "Ž": "Z",
        "ź": "z",
        "ż": "z",
        "ž": "z",
        "Ĳ": "IJ",
        "ĳ": "ij",
        "Œ": "Oe",
        "œ": "oe",
        "ŉ": "'n",
        "ſ": "s"
    };
    /** Used to map characters to HTML entities. */ var htmlEscapes = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#39;"
    };
    /** Used to map HTML entities to characters. */ var htmlUnescapes = {
        "&amp;": "&",
        "&lt;": "<",
        "&gt;": ">",
        "&quot;": '"',
        "&#39;": "'"
    };
    /** Used to escape characters for inclusion in compiled string literals. */ var stringEscapes = {
        "\\": "\\",
        "'": "'",
        "\n": "n",
        "\r": "r",
        "\u2028": "u2028",
        "\u2029": "u2029"
    };
    /** Built-in method references without a dependency on `root`. */ var freeParseFloat = parseFloat, freeParseInt = parseInt;
    /** Detect free variable `global` from Node.js. */ var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    /** Detect free variable `self`. */ var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    /** Used as a reference to the global object. */ var root = freeGlobal || freeSelf || Function("return this")();
    /** Detect free variable `exports`. */ var freeExports = exports && !exports.nodeType && exports;
    /** Detect free variable `module`. */ var freeModule = freeExports && true && module && !module.nodeType && module;
    /** Detect the popular CommonJS extension `module.exports`. */ var moduleExports = freeModule && freeModule.exports === freeExports;
    /** Detect free variable `process` from Node.js. */ var freeProcess = moduleExports && freeGlobal.process;
    /** Used to access faster Node.js helpers. */ var nodeUtil = function() {
        try {
            // Use `util.types` for Node.js 10+.
            var types = freeModule && freeModule.require && freeModule.require("util").types;
            if (types) return types;
            // Legacy `process.binding('util')` for Node.js < 10.
            return freeProcess && freeProcess.binding && freeProcess.binding("util");
        } catch (e) {}
    }();
    /* Node.js helper references. */ var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer, nodeIsDate = nodeUtil && nodeUtil.isDate, nodeIsMap = nodeUtil && nodeUtil.isMap, nodeIsRegExp = nodeUtil && nodeUtil.isRegExp, nodeIsSet = nodeUtil && nodeUtil.isSet, nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    /*--------------------------------------------------------------------------*/ /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */ function apply(func, thisArg, args) {
        switch(args.length){
            case 0:
                return func.call(thisArg);
            case 1:
                return func.call(thisArg, args[0]);
            case 2:
                return func.call(thisArg, args[0], args[1]);
            case 3:
                return func.call(thisArg, args[0], args[1], args[2]);
        }
        return func.apply(thisArg, args);
    }
    /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */ function arrayAggregator(array, setter, iteratee, accumulator) {
        var index = -1, length = array == null ? 0 : array.length;
        while(++index < length){
            var value = array[index];
            setter(accumulator, value, iteratee(value), array);
        }
        return accumulator;
    }
    /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */ function arrayEach(array, iteratee) {
        var index = -1, length = array == null ? 0 : array.length;
        while(++index < length){
            if (iteratee(array[index], index, array) === false) break;
        }
        return array;
    }
    /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */ function arrayEachRight(array, iteratee) {
        var length = array == null ? 0 : array.length;
        while(length--){
            if (iteratee(array[length], length, array) === false) break;
        }
        return array;
    }
    /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */ function arrayEvery(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length;
        while(++index < length){
            if (!predicate(array[index], index, array)) return false;
        }
        return true;
    }
    /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */ function arrayFilter(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
        while(++index < length){
            var value = array[index];
            if (predicate(value, index, array)) result[resIndex++] = value;
        }
        return result;
    }
    /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */ function arrayIncludes(array, value) {
        var length = array == null ? 0 : array.length;
        return !!length && baseIndexOf(array, value, 0) > -1;
    }
    /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */ function arrayIncludesWith(array, value, comparator) {
        var index = -1, length = array == null ? 0 : array.length;
        while(++index < length){
            if (comparator(value, array[index])) return true;
        }
        return false;
    }
    /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */ function arrayMap(array, iteratee) {
        var index = -1, length = array == null ? 0 : array.length, result = Array(length);
        while(++index < length)result[index] = iteratee(array[index], index, array);
        return result;
    }
    /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */ function arrayPush(array, values) {
        var index = -1, length = values.length, offset = array.length;
        while(++index < length)array[offset + index] = values[index];
        return array;
    }
    /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */ function arrayReduce(array, iteratee, accumulator, initAccum) {
        var index = -1, length = array == null ? 0 : array.length;
        if (initAccum && length) accumulator = array[++index];
        while(++index < length)accumulator = iteratee(accumulator, array[index], index, array);
        return accumulator;
    }
    /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */ function arrayReduceRight(array, iteratee, accumulator, initAccum) {
        var length = array == null ? 0 : array.length;
        if (initAccum && length) accumulator = array[--length];
        while(length--)accumulator = iteratee(accumulator, array[length], length, array);
        return accumulator;
    }
    /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */ function arraySome(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length;
        while(++index < length){
            if (predicate(array[index], index, array)) return true;
        }
        return false;
    }
    /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */ var asciiSize = baseProperty("length");
    /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */ function asciiToArray(string) {
        return string.split("");
    }
    /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */ function asciiWords(string) {
        return string.match(reAsciiWord) || [];
    }
    /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */ function baseFindKey(collection, predicate, eachFunc) {
        var result;
        eachFunc(collection, function(value, key, collection) {
            if (predicate(value, key, collection)) {
                result = key;
                return false;
            }
        });
        return result;
    }
    /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */ function baseFindIndex(array, predicate, fromIndex, fromRight) {
        var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
        while(fromRight ? index-- : ++index < length){
            if (predicate(array[index], index, array)) return index;
        }
        return -1;
    }
    /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */ function baseIndexOf(array, value, fromIndex) {
        return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
    }
    /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */ function baseIndexOfWith(array, value, fromIndex, comparator) {
        var index = fromIndex - 1, length = array.length;
        while(++index < length){
            if (comparator(array[index], value)) return index;
        }
        return -1;
    }
    /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */ function baseIsNaN(value) {
        return value !== value;
    }
    /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */ function baseMean(array, iteratee) {
        var length = array == null ? 0 : array.length;
        return length ? baseSum(array, iteratee) / length : NAN;
    }
    /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */ function baseProperty(key) {
        return function(object) {
            return object == null ? undefined : object[key];
        };
    }
    /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */ function basePropertyOf(object) {
        return function(key) {
            return object == null ? undefined : object[key];
        };
    }
    /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */ function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
        eachFunc(collection, function(value, index, collection) {
            accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection);
        });
        return accumulator;
    }
    /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */ function baseSortBy(array, comparer) {
        var length = array.length;
        array.sort(comparer);
        while(length--)array[length] = array[length].value;
        return array;
    }
    /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */ function baseSum(array, iteratee) {
        var result, index = -1, length = array.length;
        while(++index < length){
            var current = iteratee(array[index]);
            if (current !== undefined) result = result === undefined ? current : result + current;
        }
        return result;
    }
    /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */ function baseTimes(n, iteratee) {
        var index = -1, result = Array(n);
        while(++index < n)result[index] = iteratee(index);
        return result;
    }
    /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */ function baseToPairs(object, props) {
        return arrayMap(props, function(key) {
            return [
                key,
                object[key]
            ];
        });
    }
    /**
   * The base implementation of `_.trim`.
   *
   * @private
   * @param {string} string The string to trim.
   * @returns {string} Returns the trimmed string.
   */ function baseTrim(string) {
        return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
    }
    /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */ function baseUnary(func) {
        return function(value) {
            return func(value);
        };
    }
    /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */ function baseValues(object, props) {
        return arrayMap(props, function(key) {
            return object[key];
        });
    }
    /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */ function cacheHas(cache, key) {
        return cache.has(key);
    }
    /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */ function charsStartIndex(strSymbols, chrSymbols) {
        var index = -1, length = strSymbols.length;
        while(++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1);
        return index;
    }
    /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */ function charsEndIndex(strSymbols, chrSymbols) {
        var index = strSymbols.length;
        while(index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1);
        return index;
    }
    /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */ function countHolders(array, placeholder) {
        var length = array.length, result = 0;
        while(length--)if (array[length] === placeholder) ++result;
        return result;
    }
    /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */ var deburrLetter = basePropertyOf(deburredLetters);
    /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */ var escapeHtmlChar = basePropertyOf(htmlEscapes);
    /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */ function escapeStringChar(chr) {
        return "\\" + stringEscapes[chr];
    }
    /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */ function getValue(object, key) {
        return object == null ? undefined : object[key];
    }
    /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */ function hasUnicode(string) {
        return reHasUnicode.test(string);
    }
    /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */ function hasUnicodeWord(string) {
        return reHasUnicodeWord.test(string);
    }
    /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */ function iteratorToArray(iterator) {
        var data, result = [];
        while(!(data = iterator.next()).done)result.push(data.value);
        return result;
    }
    /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */ function mapToArray(map) {
        var index = -1, result = Array(map.size);
        map.forEach(function(value, key) {
            result[++index] = [
                key,
                value
            ];
        });
        return result;
    }
    /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */ function overArg(func, transform) {
        return function(arg) {
            return func(transform(arg));
        };
    }
    /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */ function replaceHolders(array, placeholder) {
        var index = -1, length = array.length, resIndex = 0, result = [];
        while(++index < length){
            var value = array[index];
            if (value === placeholder || value === PLACEHOLDER) {
                array[index] = PLACEHOLDER;
                result[resIndex++] = index;
            }
        }
        return result;
    }
    /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */ function setToArray(set) {
        var index = -1, result = Array(set.size);
        set.forEach(function(value) {
            result[++index] = value;
        });
        return result;
    }
    /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */ function setToPairs(set) {
        var index = -1, result = Array(set.size);
        set.forEach(function(value) {
            result[++index] = [
                value,
                value
            ];
        });
        return result;
    }
    /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */ function strictIndexOf(array, value, fromIndex) {
        var index = fromIndex - 1, length = array.length;
        while(++index < length){
            if (array[index] === value) return index;
        }
        return -1;
    }
    /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */ function strictLastIndexOf(array, value, fromIndex) {
        var index = fromIndex + 1;
        while(index--){
            if (array[index] === value) return index;
        }
        return index;
    }
    /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */ function stringSize(string) {
        return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
    }
    /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */ function stringToArray(string) {
        return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
    }
    /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the last non-whitespace character.
   */ function trimmedEndIndex(string) {
        var index = string.length;
        while(index-- && reWhitespace.test(string.charAt(index)));
        return index;
    }
    /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */ var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
    /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */ function unicodeSize(string) {
        var result = reUnicode.lastIndex = 0;
        while(reUnicode.test(string))++result;
        return result;
    }
    /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */ function unicodeToArray(string) {
        return string.match(reUnicode) || [];
    }
    /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */ function unicodeWords(string) {
        return string.match(reUnicodeWord) || [];
    }
    /*--------------------------------------------------------------------------*/ /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */ var runInContext = function runInContext(context) {
        context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));
        /** Built-in constructor references. */ var Array1 = context.Array, Date = context.Date, Error = context.Error, Function1 = context.Function, Math = context.Math, Object1 = context.Object, RegExp1 = context.RegExp, String = context.String, TypeError = context.TypeError;
        /** Used for built-in method references. */ var arrayProto = Array1.prototype, funcProto = Function1.prototype, objectProto = Object1.prototype;
        /** Used to detect overreaching core-js shims. */ var coreJsData = context["__core-js_shared__"];
        /** Used to resolve the decompiled source of functions. */ var funcToString = funcProto.toString;
        /** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
        /** Used to generate unique IDs. */ var idCounter = 0;
        /** Used to detect methods masquerading as native. */ var maskSrcKey = function() {
            var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
            return uid ? "Symbol(src)_1." + uid : "";
        }();
        /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */ var nativeObjectToString = objectProto.toString;
        /** Used to infer the `Object` constructor. */ var objectCtorString = funcToString.call(Object1);
        /** Used to restore the original `_` reference in `_.noConflict`. */ var oldDash = root._;
        /** Used to detect if a method is native. */ var reIsNative = RegExp1("^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
        /** Built-in value references. */ var Buffer = moduleExports ? context.Buffer : undefined, Symbol = context.Symbol, Uint8Array = context.Uint8Array, allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined, getPrototype = overArg(Object1.getPrototypeOf, Object1), objectCreate = Object1.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice, spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined, symIterator = Symbol ? Symbol.iterator : undefined, symToStringTag = Symbol ? Symbol.toStringTag : undefined;
        var defineProperty = function() {
            try {
                var func = getNative(Object1, "defineProperty");
                func({}, "", {});
                return func;
            } catch (e) {}
        }();
        /** Mocked built-ins. */ var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout, ctxNow = Date && Date.now !== root.Date.now && Date.now, ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;
        /* Built-in method references for those with the same name as other `lodash` methods. */ var nativeCeil = Math.ceil, nativeFloor = Math.floor, nativeGetSymbols = Object1.getOwnPropertySymbols, nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined, nativeIsFinite = context.isFinite, nativeJoin = arrayProto.join, nativeKeys = overArg(Object1.keys, Object1), nativeMax = Math.max, nativeMin = Math.min, nativeNow = Date.now, nativeParseInt = context.parseInt, nativeRandom = Math.random, nativeReverse = arrayProto.reverse;
        /* Built-in method references that are verified to be native. */ var DataView = getNative(context, "DataView"), Map = getNative(context, "Map"), Promise = getNative(context, "Promise"), Set = getNative(context, "Set"), WeakMap = getNative(context, "WeakMap"), nativeCreate = getNative(Object1, "create");
        /** Used to store function metadata. */ var metaMap = WeakMap && new WeakMap;
        /** Used to lookup unminified function names. */ var realNames = {};
        /** Used to detect maps, sets, and weakmaps. */ var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map), promiseCtorString = toSource(Promise), setCtorString = toSource(Set), weakMapCtorString = toSource(WeakMap);
        /** Used to convert symbols to primitives and strings. */ var symbolProto = Symbol ? Symbol.prototype : undefined, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined, symbolToString = symbolProto ? symbolProto.toString : undefined;
        /*------------------------------------------------------------------------*/ /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */ function lodash(value) {
            if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
                if (value instanceof LodashWrapper) return value;
                if (hasOwnProperty.call(value, "__wrapped__")) return wrapperClone(value);
            }
            return new LodashWrapper(value);
        }
        /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */ var baseCreate = function() {
            function object() {}
            return function(proto) {
                if (!isObject(proto)) return {};
                if (objectCreate) return objectCreate(proto);
                object.prototype = proto;
                var result = new object;
                object.prototype = undefined;
                return result;
            };
        }();
        /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */ function baseLodash() {
        // No operation performed.
        }
        /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */ function LodashWrapper(value, chainAll) {
            this.__wrapped__ = value;
            this.__actions__ = [];
            this.__chain__ = !!chainAll;
            this.__index__ = 0;
            this.__values__ = undefined;
        }
        /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */ lodash.templateSettings = {
            /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */ "escape": reEscape,
            /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */ "evaluate": reEvaluate,
            /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */ "interpolate": reInterpolate,
            /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */ "variable": "",
            /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */ "imports": {
                /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */ "_": lodash
            }
        };
        // Ensure wrappers are instances of `baseLodash`.
        lodash.prototype = baseLodash.prototype;
        lodash.prototype.constructor = lodash;
        LodashWrapper.prototype = baseCreate(baseLodash.prototype);
        LodashWrapper.prototype.constructor = LodashWrapper;
        /*------------------------------------------------------------------------*/ /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */ function LazyWrapper(value) {
            this.__wrapped__ = value;
            this.__actions__ = [];
            this.__dir__ = 1;
            this.__filtered__ = false;
            this.__iteratees__ = [];
            this.__takeCount__ = MAX_ARRAY_LENGTH;
            this.__views__ = [];
        }
        /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */ function lazyClone() {
            var result = new LazyWrapper(this.__wrapped__);
            result.__actions__ = copyArray(this.__actions__);
            result.__dir__ = this.__dir__;
            result.__filtered__ = this.__filtered__;
            result.__iteratees__ = copyArray(this.__iteratees__);
            result.__takeCount__ = this.__takeCount__;
            result.__views__ = copyArray(this.__views__);
            return result;
        }
        /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */ function lazyReverse() {
            if (this.__filtered__) {
                var result = new LazyWrapper(this);
                result.__dir__ = -1;
                result.__filtered__ = true;
            } else {
                result = this.clone();
                result.__dir__ *= -1;
            }
            return result;
        }
        /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */ function lazyValue() {
            var array = this.__wrapped__.value(), dir = this.__dir__, isArr = isArray(array), isRight = dir < 0, arrLength = isArr ? array.length : 0, view = getView(0, arrLength, this.__views__), start = view.start, end = view.end, length = end - start, index = isRight ? end : start - 1, iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin(length, this.__takeCount__);
            if (!isArr || !isRight && arrLength == length && takeCount == length) return baseWrapperValue(array, this.__actions__);
            var result = [];
            outer: while(length-- && resIndex < takeCount){
                index += dir;
                var iterIndex = -1, value = array[index];
                while(++iterIndex < iterLength){
                    var data = iteratees[iterIndex], iteratee = data.iteratee, type = data.type, computed = iteratee(value);
                    if (type == LAZY_MAP_FLAG) value = computed;
                    else if (!computed) {
                        if (type == LAZY_FILTER_FLAG) continue outer;
                        else break outer;
                    }
                }
                result[resIndex++] = value;
            }
            return result;
        }
        // Ensure `LazyWrapper` is an instance of `baseLodash`.
        LazyWrapper.prototype = baseCreate(baseLodash.prototype);
        LazyWrapper.prototype.constructor = LazyWrapper;
        /*------------------------------------------------------------------------*/ /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */ function Hash(entries) {
            var index = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while(++index < length){
                var entry = entries[index];
                this.set(entry[0], entry[1]);
            }
        }
        /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */ function hashClear() {
            this.__data__ = nativeCreate ? nativeCreate(null) : {};
            this.size = 0;
        }
        /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */ function hashDelete(key) {
            var result = this.has(key) && delete this.__data__[key];
            this.size -= result ? 1 : 0;
            return result;
        }
        /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */ function hashGet(key) {
            var data = this.__data__;
            if (nativeCreate) {
                var result = data[key];
                return result === HASH_UNDEFINED ? undefined : result;
            }
            return hasOwnProperty.call(data, key) ? data[key] : undefined;
        }
        /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */ function hashHas(key) {
            var data = this.__data__;
            return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
        }
        /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */ function hashSet(key, value) {
            var data = this.__data__;
            this.size += this.has(key) ? 0 : 1;
            data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
            return this;
        }
        // Add methods to `Hash`.
        Hash.prototype.clear = hashClear;
        Hash.prototype["delete"] = hashDelete;
        Hash.prototype.get = hashGet;
        Hash.prototype.has = hashHas;
        Hash.prototype.set = hashSet;
        /*------------------------------------------------------------------------*/ /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */ function ListCache(entries) {
            var index = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while(++index < length){
                var entry = entries[index];
                this.set(entry[0], entry[1]);
            }
        }
        /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */ function listCacheClear() {
            this.__data__ = [];
            this.size = 0;
        }
        /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */ function listCacheDelete(key) {
            var data = this.__data__, index = assocIndexOf(data, key);
            if (index < 0) return false;
            var lastIndex = data.length - 1;
            if (index == lastIndex) data.pop();
            else splice.call(data, index, 1);
            --this.size;
            return true;
        }
        /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */ function listCacheGet(key) {
            var data = this.__data__, index = assocIndexOf(data, key);
            return index < 0 ? undefined : data[index][1];
        }
        /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */ function listCacheHas(key) {
            return assocIndexOf(this.__data__, key) > -1;
        }
        /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */ function listCacheSet(key, value) {
            var data = this.__data__, index = assocIndexOf(data, key);
            if (index < 0) {
                ++this.size;
                data.push([
                    key,
                    value
                ]);
            } else data[index][1] = value;
            return this;
        }
        // Add methods to `ListCache`.
        ListCache.prototype.clear = listCacheClear;
        ListCache.prototype["delete"] = listCacheDelete;
        ListCache.prototype.get = listCacheGet;
        ListCache.prototype.has = listCacheHas;
        ListCache.prototype.set = listCacheSet;
        /*------------------------------------------------------------------------*/ /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */ function MapCache(entries) {
            var index = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while(++index < length){
                var entry = entries[index];
                this.set(entry[0], entry[1]);
            }
        }
        /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */ function mapCacheClear() {
            this.size = 0;
            this.__data__ = {
                "hash": new Hash,
                "map": new (Map || ListCache),
                "string": new Hash
            };
        }
        /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */ function mapCacheDelete(key) {
            var result = getMapData(this, key)["delete"](key);
            this.size -= result ? 1 : 0;
            return result;
        }
        /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */ function mapCacheGet(key) {
            return getMapData(this, key).get(key);
        }
        /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */ function mapCacheHas(key) {
            return getMapData(this, key).has(key);
        }
        /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */ function mapCacheSet(key, value) {
            var data = getMapData(this, key), size = data.size;
            data.set(key, value);
            this.size += data.size == size ? 0 : 1;
            return this;
        }
        // Add methods to `MapCache`.
        MapCache.prototype.clear = mapCacheClear;
        MapCache.prototype["delete"] = mapCacheDelete;
        MapCache.prototype.get = mapCacheGet;
        MapCache.prototype.has = mapCacheHas;
        MapCache.prototype.set = mapCacheSet;
        /*------------------------------------------------------------------------*/ /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */ function SetCache(values) {
            var index = -1, length = values == null ? 0 : values.length;
            this.__data__ = new MapCache;
            while(++index < length)this.add(values[index]);
        }
        /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */ function setCacheAdd(value) {
            this.__data__.set(value, HASH_UNDEFINED);
            return this;
        }
        /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */ function setCacheHas(value) {
            return this.__data__.has(value);
        }
        // Add methods to `SetCache`.
        SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
        SetCache.prototype.has = setCacheHas;
        /*------------------------------------------------------------------------*/ /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */ function Stack(entries) {
            var data = this.__data__ = new ListCache(entries);
            this.size = data.size;
        }
        /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */ function stackClear() {
            this.__data__ = new ListCache;
            this.size = 0;
        }
        /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */ function stackDelete(key) {
            var data = this.__data__, result = data["delete"](key);
            this.size = data.size;
            return result;
        }
        /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */ function stackGet(key) {
            return this.__data__.get(key);
        }
        /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */ function stackHas(key) {
            return this.__data__.has(key);
        }
        /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */ function stackSet(key, value) {
            var data = this.__data__;
            if (data instanceof ListCache) {
                var pairs = data.__data__;
                if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
                    pairs.push([
                        key,
                        value
                    ]);
                    this.size = ++data.size;
                    return this;
                }
                data = this.__data__ = new MapCache(pairs);
            }
            data.set(key, value);
            this.size = data.size;
            return this;
        }
        // Add methods to `Stack`.
        Stack.prototype.clear = stackClear;
        Stack.prototype["delete"] = stackDelete;
        Stack.prototype.get = stackGet;
        Stack.prototype.has = stackHas;
        Stack.prototype.set = stackSet;
        /*------------------------------------------------------------------------*/ /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */ function arrayLikeKeys(value, inherited) {
            var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
            for(var key in value)if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
            (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
            isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
            isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
            isIndex(key, length)))) result.push(key);
            return result;
        }
        /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */ function arraySample(array) {
            var length = array.length;
            return length ? array[baseRandom(0, length - 1)] : undefined;
        }
        /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */ function arraySampleSize(array, n) {
            return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
        }
        /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */ function arrayShuffle(array) {
            return shuffleSelf(copyArray(array));
        }
        /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */ function assignMergeValue(object, key, value) {
            if (value !== undefined && !eq(object[key], value) || value === undefined && !(key in object)) baseAssignValue(object, key, value);
        }
        /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */ function assignValue(object, key, value) {
            var objValue = object[key];
            if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) baseAssignValue(object, key, value);
        }
        /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */ function assocIndexOf(array, key) {
            var length = array.length;
            while(length--){
                if (eq(array[length][0], key)) return length;
            }
            return -1;
        }
        /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */ function baseAggregator(collection, setter, iteratee, accumulator) {
            baseEach(collection, function(value, key, collection) {
                setter(accumulator, value, iteratee(value), collection);
            });
            return accumulator;
        }
        /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */ function baseAssign(object, source) {
            return object && copyObject(source, keys(source), object);
        }
        /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */ function baseAssignIn(object, source) {
            return object && copyObject(source, keysIn(source), object);
        }
        /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */ function baseAssignValue(object, key, value) {
            if (key == "__proto__" && defineProperty) defineProperty(object, key, {
                "configurable": true,
                "enumerable": true,
                "value": value,
                "writable": true
            });
            else object[key] = value;
        }
        /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */ function baseAt(object, paths) {
            var index = -1, length = paths.length, result = Array1(length), skip = object == null;
            while(++index < length)result[index] = skip ? undefined : get(object, paths[index]);
            return result;
        }
        /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */ function baseClamp(number, lower, upper) {
            if (number === number) {
                if (upper !== undefined) number = number <= upper ? number : upper;
                if (lower !== undefined) number = number >= lower ? number : lower;
            }
            return number;
        }
        /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */ function baseClone(value, bitmask, customizer, key, object, stack) {
            var result, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
            if (customizer) result = object ? customizer(value, key, object, stack) : customizer(value);
            if (result !== undefined) return result;
            if (!isObject(value)) return value;
            var isArr = isArray(value);
            if (isArr) {
                result = initCloneArray(value);
                if (!isDeep) return copyArray(value, result);
            } else {
                var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
                if (isBuffer(value)) return cloneBuffer(value, isDeep);
                if (tag == objectTag || tag == argsTag || isFunc && !object) {
                    result = isFlat || isFunc ? {} : initCloneObject(value);
                    if (!isDeep) return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
                } else {
                    if (!cloneableTags[tag]) return object ? value : {};
                    result = initCloneByTag(value, tag, isDeep);
                }
            }
            // Check for circular references and return its corresponding clone.
            stack || (stack = new Stack);
            var stacked = stack.get(value);
            if (stacked) return stacked;
            stack.set(value, result);
            if (isSet(value)) value.forEach(function(subValue) {
                result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
            });
            else if (isMap(value)) value.forEach(function(subValue, key) {
                result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
            });
            var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
            var props = isArr ? undefined : keysFunc(value);
            arrayEach(props || value, function(subValue, key) {
                if (props) {
                    key = subValue;
                    subValue = value[key];
                }
                // Recursively populate clone (susceptible to call stack limits).
                assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
            });
            return result;
        }
        /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */ function baseConforms(source) {
            var props = keys(source);
            return function(object) {
                return baseConformsTo(object, source, props);
            };
        }
        /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */ function baseConformsTo(object, source, props) {
            var length = props.length;
            if (object == null) return !length;
            object = Object1(object);
            while(length--){
                var key = props[length], predicate = source[key], value = object[key];
                if (value === undefined && !(key in object) || !predicate(value)) return false;
            }
            return true;
        }
        /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */ function baseDelay(func, wait, args) {
            if (typeof func != "function") throw new TypeError(FUNC_ERROR_TEXT);
            return setTimeout(function() {
                func.apply(undefined, args);
            }, wait);
        }
        /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */ function baseDifference(array, values, iteratee, comparator) {
            var index = -1, includes = arrayIncludes, isCommon = true, length = array.length, result = [], valuesLength = values.length;
            if (!length) return result;
            if (iteratee) values = arrayMap(values, baseUnary(iteratee));
            if (comparator) {
                includes = arrayIncludesWith;
                isCommon = false;
            } else if (values.length >= LARGE_ARRAY_SIZE) {
                includes = cacheHas;
                isCommon = false;
                values = new SetCache(values);
            }
            outer: while(++index < length){
                var value = array[index], computed = iteratee == null ? value : iteratee(value);
                value = comparator || value !== 0 ? value : 0;
                if (isCommon && computed === computed) {
                    var valuesIndex = valuesLength;
                    while(valuesIndex--){
                        if (values[valuesIndex] === computed) continue outer;
                    }
                    result.push(value);
                } else if (!includes(values, computed, comparator)) result.push(value);
            }
            return result;
        }
        /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */ var baseEach = createBaseEach(baseForOwn);
        /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */ var baseEachRight = createBaseEach(baseForOwnRight, true);
        /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */ function baseEvery(collection, predicate) {
            var result = true;
            baseEach(collection, function(value, index, collection) {
                result = !!predicate(value, index, collection);
                return result;
            });
            return result;
        }
        /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */ function baseExtremum(array, iteratee, comparator) {
            var index = -1, length = array.length;
            while(++index < length){
                var value = array[index], current = iteratee(value);
                if (current != null && (computed === undefined ? current === current && !isSymbol(current) : comparator(current, computed))) var computed = current, result = value;
            }
            return result;
        }
        /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */ function baseFill(array, value, start, end) {
            var length = array.length;
            start = toInteger(start);
            if (start < 0) start = -start > length ? 0 : length + start;
            end = end === undefined || end > length ? length : toInteger(end);
            if (end < 0) end += length;
            end = start > end ? 0 : toLength(end);
            while(start < end)array[start++] = value;
            return array;
        }
        /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */ function baseFilter(collection, predicate) {
            var result = [];
            baseEach(collection, function(value, index, collection) {
                if (predicate(value, index, collection)) result.push(value);
            });
            return result;
        }
        /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */ function baseFlatten(array, depth, predicate, isStrict, result) {
            var index = -1, length = array.length;
            predicate || (predicate = isFlattenable);
            result || (result = []);
            while(++index < length){
                var value = array[index];
                if (depth > 0 && predicate(value)) {
                    if (depth > 1) // Recursively flatten arrays (susceptible to call stack limits).
                    baseFlatten(value, depth - 1, predicate, isStrict, result);
                    else arrayPush(result, value);
                } else if (!isStrict) result[result.length] = value;
            }
            return result;
        }
        /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */ var baseFor = createBaseFor();
        /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */ var baseForRight = createBaseFor(true);
        /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */ function baseForOwn(object, iteratee) {
            return object && baseFor(object, iteratee, keys);
        }
        /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */ function baseForOwnRight(object, iteratee) {
            return object && baseForRight(object, iteratee, keys);
        }
        /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */ function baseFunctions(object, props) {
            return arrayFilter(props, function(key) {
                return isFunction(object[key]);
            });
        }
        /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */ function baseGet(object, path) {
            path = castPath(path, object);
            var index = 0, length = path.length;
            while(object != null && index < length)object = object[toKey(path[index++])];
            return index && index == length ? object : undefined;
        }
        /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */ function baseGetAllKeys(object, keysFunc, symbolsFunc) {
            var result = keysFunc(object);
            return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
        }
        /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */ function baseGetTag(value) {
            if (value == null) return value === undefined ? undefinedTag : nullTag;
            return symToStringTag && symToStringTag in Object1(value) ? getRawTag(value) : objectToString(value);
        }
        /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */ function baseGt(value, other) {
            return value > other;
        }
        /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */ function baseHas(object, key) {
            return object != null && hasOwnProperty.call(object, key);
        }
        /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */ function baseHasIn(object, key) {
            return object != null && key in Object1(object);
        }
        /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */ function baseInRange(number, start, end) {
            return number >= nativeMin(start, end) && number < nativeMax(start, end);
        }
        /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */ function baseIntersection(arrays, iteratee, comparator) {
            var includes = comparator ? arrayIncludesWith : arrayIncludes, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array1(othLength), maxLength = Infinity, result = [];
            while(othIndex--){
                var array = arrays[othIndex];
                if (othIndex && iteratee) array = arrayMap(array, baseUnary(iteratee));
                maxLength = nativeMin(array.length, maxLength);
                caches[othIndex] = !comparator && (iteratee || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined;
            }
            array = arrays[0];
            var index = -1, seen = caches[0];
            outer: while(++index < length && result.length < maxLength){
                var value = array[index], computed = iteratee ? iteratee(value) : value;
                value = comparator || value !== 0 ? value : 0;
                if (!(seen ? cacheHas(seen, computed) : includes(result, computed, comparator))) {
                    othIndex = othLength;
                    while(--othIndex){
                        var cache = caches[othIndex];
                        if (!(cache ? cacheHas(cache, computed) : includes(arrays[othIndex], computed, comparator))) continue outer;
                    }
                    if (seen) seen.push(computed);
                    result.push(value);
                }
            }
            return result;
        }
        /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */ function baseInverter(object, setter, iteratee, accumulator) {
            baseForOwn(object, function(value, key, object) {
                setter(accumulator, iteratee(value), key, object);
            });
            return accumulator;
        }
        /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */ function baseInvoke(object, path, args) {
            path = castPath(path, object);
            object = parent(object, path);
            var func = object == null ? object : object[toKey(last(path))];
            return func == null ? undefined : apply(func, object, args);
        }
        /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */ function baseIsArguments(value) {
            return isObjectLike(value) && baseGetTag(value) == argsTag;
        }
        /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */ function baseIsArrayBuffer(value) {
            return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
        }
        /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */ function baseIsDate(value) {
            return isObjectLike(value) && baseGetTag(value) == dateTag;
        }
        /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */ function baseIsEqual(value, other, bitmask, customizer, stack) {
            if (value === other) return true;
            if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) return value !== value && other !== other;
            return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
        }
        /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */ function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
            var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
            objTag = objTag == argsTag ? objectTag : objTag;
            othTag = othTag == argsTag ? objectTag : othTag;
            var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
            if (isSameTag && isBuffer(object)) {
                if (!isBuffer(other)) return false;
                objIsArr = true;
                objIsObj = false;
            }
            if (isSameTag && !objIsObj) {
                stack || (stack = new Stack);
                return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
            }
            if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
                var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
                if (objIsWrapped || othIsWrapped) {
                    var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
                    stack || (stack = new Stack);
                    return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
                }
            }
            if (!isSameTag) return false;
            stack || (stack = new Stack);
            return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
        }
        /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */ function baseIsMap(value) {
            return isObjectLike(value) && getTag(value) == mapTag;
        }
        /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */ function baseIsMatch(object, source, matchData, customizer) {
            var index = matchData.length, length = index, noCustomizer = !customizer;
            if (object == null) return !length;
            object = Object1(object);
            while(index--){
                var data = matchData[index];
                if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) return false;
            }
            while(++index < length){
                data = matchData[index];
                var key = data[0], objValue = object[key], srcValue = data[1];
                if (noCustomizer && data[2]) {
                    if (objValue === undefined && !(key in object)) return false;
                } else {
                    var stack = new Stack;
                    if (customizer) var result = customizer(objValue, srcValue, key, object, source, stack);
                    if (!(result === undefined ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) return false;
                }
            }
            return true;
        }
        /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */ function baseIsNative(value) {
            if (!isObject(value) || isMasked(value)) return false;
            var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
            return pattern.test(toSource(value));
        }
        /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */ function baseIsRegExp(value) {
            return isObjectLike(value) && baseGetTag(value) == regexpTag;
        }
        /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */ function baseIsSet(value) {
            return isObjectLike(value) && getTag(value) == setTag;
        }
        /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */ function baseIsTypedArray(value) {
            return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
        }
        /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */ function baseIteratee(value) {
            // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
            // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
            if (typeof value == "function") return value;
            if (value == null) return identity;
            if (typeof value == "object") return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
            return property(value);
        }
        /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */ function baseKeys(object) {
            if (!isPrototype(object)) return nativeKeys(object);
            var result = [];
            for(var key in Object1(object))if (hasOwnProperty.call(object, key) && key != "constructor") result.push(key);
            return result;
        }
        /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */ function baseKeysIn(object) {
            if (!isObject(object)) return nativeKeysIn(object);
            var isProto = isPrototype(object), result = [];
            for(var key in object)if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) result.push(key);
            return result;
        }
        /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */ function baseLt(value, other) {
            return value < other;
        }
        /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */ function baseMap(collection, iteratee) {
            var index = -1, result = isArrayLike(collection) ? Array1(collection.length) : [];
            baseEach(collection, function(value, key, collection) {
                result[++index] = iteratee(value, key, collection);
            });
            return result;
        }
        /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */ function baseMatches(source) {
            var matchData = getMatchData(source);
            if (matchData.length == 1 && matchData[0][2]) return matchesStrictComparable(matchData[0][0], matchData[0][1]);
            return function(object) {
                return object === source || baseIsMatch(object, source, matchData);
            };
        }
        /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */ function baseMatchesProperty(path, srcValue) {
            if (isKey(path) && isStrictComparable(srcValue)) return matchesStrictComparable(toKey(path), srcValue);
            return function(object) {
                var objValue = get(object, path);
                return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
            };
        }
        /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */ function baseMerge(object, source, srcIndex, customizer, stack) {
            if (object === source) return;
            baseFor(source, function(srcValue, key) {
                stack || (stack = new Stack);
                if (isObject(srcValue)) baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
                else {
                    var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : undefined;
                    if (newValue === undefined) newValue = srcValue;
                    assignMergeValue(object, key, newValue);
                }
            }, keysIn);
        }
        /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */ function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
            var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
            if (stacked) {
                assignMergeValue(object, key, stacked);
                return;
            }
            var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : undefined;
            var isCommon = newValue === undefined;
            if (isCommon) {
                var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
                newValue = srcValue;
                if (isArr || isBuff || isTyped) {
                    if (isArray(objValue)) newValue = objValue;
                    else if (isArrayLikeObject(objValue)) newValue = copyArray(objValue);
                    else if (isBuff) {
                        isCommon = false;
                        newValue = cloneBuffer(srcValue, true);
                    } else if (isTyped) {
                        isCommon = false;
                        newValue = cloneTypedArray(srcValue, true);
                    } else newValue = [];
                } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
                    newValue = objValue;
                    if (isArguments(objValue)) newValue = toPlainObject(objValue);
                    else if (!isObject(objValue) || isFunction(objValue)) newValue = initCloneObject(srcValue);
                } else isCommon = false;
            }
            if (isCommon) {
                // Recursively merge objects and arrays (susceptible to call stack limits).
                stack.set(srcValue, newValue);
                mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
                stack["delete"](srcValue);
            }
            assignMergeValue(object, key, newValue);
        }
        /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */ function baseNth(array, n) {
            var length = array.length;
            if (!length) return;
            n += n < 0 ? length : 0;
            return isIndex(n, length) ? array[n] : undefined;
        }
        /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */ function baseOrderBy(collection, iteratees, orders) {
            if (iteratees.length) iteratees = arrayMap(iteratees, function(iteratee) {
                if (isArray(iteratee)) return function(value) {
                    return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
                };
                return iteratee;
            });
            else iteratees = [
                identity
            ];
            var index = -1;
            iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
            var result = baseMap(collection, function(value, key, collection) {
                var criteria = arrayMap(iteratees, function(iteratee) {
                    return iteratee(value);
                });
                return {
                    "criteria": criteria,
                    "index": ++index,
                    "value": value
                };
            });
            return baseSortBy(result, function(object, other) {
                return compareMultiple(object, other, orders);
            });
        }
        /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */ function basePick(object, paths) {
            return basePickBy(object, paths, function(value, path) {
                return hasIn(object, path);
            });
        }
        /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */ function basePickBy(object, paths, predicate) {
            var index = -1, length = paths.length, result = {};
            while(++index < length){
                var path = paths[index], value = baseGet(object, path);
                if (predicate(value, path)) baseSet(result, castPath(path, object), value);
            }
            return result;
        }
        /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */ function basePropertyDeep(path) {
            return function(object) {
                return baseGet(object, path);
            };
        }
        /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */ function basePullAll(array, values, iteratee, comparator) {
            var indexOf = comparator ? baseIndexOfWith : baseIndexOf, index = -1, length = values.length, seen = array;
            if (array === values) values = copyArray(values);
            if (iteratee) seen = arrayMap(array, baseUnary(iteratee));
            while(++index < length){
                var fromIndex = 0, value = values[index], computed = iteratee ? iteratee(value) : value;
                while((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1){
                    if (seen !== array) splice.call(seen, fromIndex, 1);
                    splice.call(array, fromIndex, 1);
                }
            }
            return array;
        }
        /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */ function basePullAt(array, indexes) {
            var length = array ? indexes.length : 0, lastIndex = length - 1;
            while(length--){
                var index = indexes[length];
                if (length == lastIndex || index !== previous) {
                    var previous = index;
                    if (isIndex(index)) splice.call(array, index, 1);
                    else baseUnset(array, index);
                }
            }
            return array;
        }
        /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */ function baseRandom(lower, upper) {
            return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
        }
        /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */ function baseRange(start, end, step, fromRight) {
            var index = -1, length = nativeMax(nativeCeil((end - start) / (step || 1)), 0), result = Array1(length);
            while(length--){
                result[fromRight ? length : ++index] = start;
                start += step;
            }
            return result;
        }
        /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */ function baseRepeat(string, n) {
            var result = "";
            if (!string || n < 1 || n > MAX_SAFE_INTEGER) return result;
            // Leverage the exponentiation by squaring algorithm for a faster repeat.
            // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
            do {
                if (n % 2) result += string;
                n = nativeFloor(n / 2);
                if (n) string += string;
            }while (n);
            return result;
        }
        /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */ function baseRest(func, start) {
            return setToString(overRest(func, start, identity), func + "");
        }
        /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */ function baseSample(collection) {
            return arraySample(values(collection));
        }
        /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */ function baseSampleSize(collection, n) {
            var array = values(collection);
            return shuffleSelf(array, baseClamp(n, 0, array.length));
        }
        /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */ function baseSet(object, path, value, customizer) {
            if (!isObject(object)) return object;
            path = castPath(path, object);
            var index = -1, length = path.length, lastIndex = length - 1, nested = object;
            while(nested != null && ++index < length){
                var key = toKey(path[index]), newValue = value;
                if (key === "__proto__" || key === "constructor" || key === "prototype") return object;
                if (index != lastIndex) {
                    var objValue = nested[key];
                    newValue = customizer ? customizer(objValue, key, nested) : undefined;
                    if (newValue === undefined) newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
                }
                assignValue(nested, key, newValue);
                nested = nested[key];
            }
            return object;
        }
        /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */ var baseSetData = !metaMap ? identity : function(func, data) {
            metaMap.set(func, data);
            return func;
        };
        /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */ var baseSetToString = !defineProperty ? identity : function(func, string) {
            return defineProperty(func, "toString", {
                "configurable": true,
                "enumerable": false,
                "value": constant(string),
                "writable": true
            });
        };
        /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */ function baseShuffle(collection) {
            return shuffleSelf(values(collection));
        }
        /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */ function baseSlice(array, start, end) {
            var index = -1, length = array.length;
            if (start < 0) start = -start > length ? 0 : length + start;
            end = end > length ? length : end;
            if (end < 0) end += length;
            length = start > end ? 0 : end - start >>> 0;
            start >>>= 0;
            var result = Array1(length);
            while(++index < length)result[index] = array[index + start];
            return result;
        }
        /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */ function baseSome(collection, predicate) {
            var result;
            baseEach(collection, function(value, index, collection) {
                result = predicate(value, index, collection);
                return !result;
            });
            return !!result;
        }
        /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */ function baseSortedIndex(array, value, retHighest) {
            var low = 0, high = array == null ? low : array.length;
            if (typeof value == "number" && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
                while(low < high){
                    var mid = low + high >>> 1, computed = array[mid];
                    if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) low = mid + 1;
                    else high = mid;
                }
                return high;
            }
            return baseSortedIndexBy(array, value, identity, retHighest);
        }
        /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */ function baseSortedIndexBy(array, value, iteratee, retHighest) {
            var low = 0, high = array == null ? 0 : array.length;
            if (high === 0) return 0;
            value = iteratee(value);
            var valIsNaN = value !== value, valIsNull = value === null, valIsSymbol = isSymbol(value), valIsUndefined = value === undefined;
            while(low < high){
                var mid = nativeFloor((low + high) / 2), computed = iteratee(array[mid]), othIsDefined = computed !== undefined, othIsNull = computed === null, othIsReflexive = computed === computed, othIsSymbol = isSymbol(computed);
                if (valIsNaN) var setLow = retHighest || othIsReflexive;
                else if (valIsUndefined) setLow = othIsReflexive && (retHighest || othIsDefined);
                else if (valIsNull) setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
                else if (valIsSymbol) setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
                else if (othIsNull || othIsSymbol) setLow = false;
                else setLow = retHighest ? computed <= value : computed < value;
                if (setLow) low = mid + 1;
                else high = mid;
            }
            return nativeMin(high, MAX_ARRAY_INDEX);
        }
        /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */ function baseSortedUniq(array, iteratee) {
            var index = -1, length = array.length, resIndex = 0, result = [];
            while(++index < length){
                var value = array[index], computed = iteratee ? iteratee(value) : value;
                if (!index || !eq(computed, seen)) {
                    var seen = computed;
                    result[resIndex++] = value === 0 ? 0 : value;
                }
            }
            return result;
        }
        /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */ function baseToNumber(value) {
            if (typeof value == "number") return value;
            if (isSymbol(value)) return NAN;
            return +value;
        }
        /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */ function baseToString(value) {
            // Exit early for strings to avoid a performance hit in some environments.
            if (typeof value == "string") return value;
            if (isArray(value)) // Recursively convert values (susceptible to call stack limits).
            return arrayMap(value, baseToString) + "";
            if (isSymbol(value)) return symbolToString ? symbolToString.call(value) : "";
            var result = value + "";
            return result == "0" && 1 / value == -INFINITY ? "-0" : result;
        }
        /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */ function baseUniq(array, iteratee, comparator) {
            var index = -1, includes = arrayIncludes, length = array.length, isCommon = true, result = [], seen = result;
            if (comparator) {
                isCommon = false;
                includes = arrayIncludesWith;
            } else if (length >= LARGE_ARRAY_SIZE) {
                var set = iteratee ? null : createSet(array);
                if (set) return setToArray(set);
                isCommon = false;
                includes = cacheHas;
                seen = new SetCache;
            } else seen = iteratee ? [] : result;
            outer: while(++index < length){
                var value = array[index], computed = iteratee ? iteratee(value) : value;
                value = comparator || value !== 0 ? value : 0;
                if (isCommon && computed === computed) {
                    var seenIndex = seen.length;
                    while(seenIndex--){
                        if (seen[seenIndex] === computed) continue outer;
                    }
                    if (iteratee) seen.push(computed);
                    result.push(value);
                } else if (!includes(seen, computed, comparator)) {
                    if (seen !== result) seen.push(computed);
                    result.push(value);
                }
            }
            return result;
        }
        /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */ function baseUnset(object, path) {
            path = castPath(path, object);
            object = parent(object, path);
            return object == null || delete object[toKey(last(path))];
        }
        /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */ function baseUpdate(object, path, updater, customizer) {
            return baseSet(object, path, updater(baseGet(object, path)), customizer);
        }
        /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */ function baseWhile(array, predicate, isDrop, fromRight) {
            var length = array.length, index = fromRight ? length : -1;
            while((fromRight ? index-- : ++index < length) && predicate(array[index], index, array));
            return isDrop ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index);
        }
        /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */ function baseWrapperValue(value, actions) {
            var result = value;
            if (result instanceof LazyWrapper) result = result.value();
            return arrayReduce(actions, function(result, action) {
                return action.func.apply(action.thisArg, arrayPush([
                    result
                ], action.args));
            }, result);
        }
        /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */ function baseXor(arrays, iteratee, comparator) {
            var length = arrays.length;
            if (length < 2) return length ? baseUniq(arrays[0]) : [];
            var index = -1, result = Array1(length);
            while(++index < length){
                var array = arrays[index], othIndex = -1;
                while(++othIndex < length)if (othIndex != index) result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
            }
            return baseUniq(baseFlatten(result, 1), iteratee, comparator);
        }
        /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */ function baseZipObject(props, values, assignFunc) {
            var index = -1, length = props.length, valsLength = values.length, result = {};
            while(++index < length){
                var value = index < valsLength ? values[index] : undefined;
                assignFunc(result, props[index], value);
            }
            return result;
        }
        /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */ function castArrayLikeObject(value) {
            return isArrayLikeObject(value) ? value : [];
        }
        /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */ function castFunction(value) {
            return typeof value == "function" ? value : identity;
        }
        /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */ function castPath(value, object) {
            if (isArray(value)) return value;
            return isKey(value, object) ? [
                value
            ] : stringToPath(toString(value));
        }
        /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */ var castRest = baseRest;
        /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */ function castSlice(array, start, end) {
            var length = array.length;
            end = end === undefined ? length : end;
            return !start && end >= length ? array : baseSlice(array, start, end);
        }
        /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */ var clearTimeout = ctxClearTimeout || function(id) {
            return root.clearTimeout(id);
        };
        /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */ function cloneBuffer(buffer, isDeep) {
            if (isDeep) return buffer.slice();
            var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
            buffer.copy(result);
            return result;
        }
        /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */ function cloneArrayBuffer(arrayBuffer) {
            var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
            new Uint8Array(result).set(new Uint8Array(arrayBuffer));
            return result;
        }
        /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */ function cloneDataView(dataView, isDeep) {
            var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
            return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
        }
        /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */ function cloneRegExp(regexp) {
            var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
            result.lastIndex = regexp.lastIndex;
            return result;
        }
        /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */ function cloneSymbol(symbol) {
            return symbolValueOf ? Object1(symbolValueOf.call(symbol)) : {};
        }
        /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */ function cloneTypedArray(typedArray, isDeep) {
            var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
            return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
        }
        /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */ function compareAscending(value, other) {
            if (value !== other) {
                var valIsDefined = value !== undefined, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol(value);
                var othIsDefined = other !== undefined, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol(other);
                if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) return 1;
                if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) return -1;
            }
            return 0;
        }
        /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */ function compareMultiple(object, other, orders) {
            var index = -1, objCriteria = object.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
            while(++index < length){
                var result = compareAscending(objCriteria[index], othCriteria[index]);
                if (result) {
                    if (index >= ordersLength) return result;
                    var order = orders[index];
                    return result * (order == "desc" ? -1 : 1);
                }
            }
            // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
            // that causes it, under certain circumstances, to provide the same value for
            // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
            // for more details.
            //
            // This also ensures a stable sort in V8 and other engines.
            // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
            return object.index - other.index;
        }
        /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */ function composeArgs(args, partials, holders, isCurried) {
            var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result = Array1(leftLength + rangeLength), isUncurried = !isCurried;
            while(++leftIndex < leftLength)result[leftIndex] = partials[leftIndex];
            while(++argsIndex < holdersLength)if (isUncurried || argsIndex < argsLength) result[holders[argsIndex]] = args[argsIndex];
            while(rangeLength--)result[leftIndex++] = args[argsIndex++];
            return result;
        }
        /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */ function composeArgsRight(args, partials, holders, isCurried) {
            var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result = Array1(rangeLength + rightLength), isUncurried = !isCurried;
            while(++argsIndex < rangeLength)result[argsIndex] = args[argsIndex];
            var offset = argsIndex;
            while(++rightIndex < rightLength)result[offset + rightIndex] = partials[rightIndex];
            while(++holdersIndex < holdersLength)if (isUncurried || argsIndex < argsLength) result[offset + holders[holdersIndex]] = args[argsIndex++];
            return result;
        }
        /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */ function copyArray(source, array) {
            var index = -1, length = source.length;
            array || (array = Array1(length));
            while(++index < length)array[index] = source[index];
            return array;
        }
        /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */ function copyObject(source, props, object, customizer) {
            var isNew = !object;
            object || (object = {});
            var index = -1, length = props.length;
            while(++index < length){
                var key = props[index];
                var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;
                if (newValue === undefined) newValue = source[key];
                if (isNew) baseAssignValue(object, key, newValue);
                else assignValue(object, key, newValue);
            }
            return object;
        }
        /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */ function copySymbols(source, object) {
            return copyObject(source, getSymbols(source), object);
        }
        /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */ function copySymbolsIn(source, object) {
            return copyObject(source, getSymbolsIn(source), object);
        }
        /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */ function createAggregator(setter, initializer) {
            return function(collection, iteratee) {
                var func = isArray(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
                return func(collection, setter, getIteratee(iteratee, 2), accumulator);
            };
        }
        /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */ function createAssigner(assigner) {
            return baseRest(function(object, sources) {
                var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined, guard = length > 2 ? sources[2] : undefined;
                customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : undefined;
                if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                    customizer = length < 3 ? undefined : customizer;
                    length = 1;
                }
                object = Object1(object);
                while(++index < length){
                    var source = sources[index];
                    if (source) assigner(object, source, index, customizer);
                }
                return object;
            });
        }
        /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */ function createBaseEach(eachFunc, fromRight) {
            return function(collection, iteratee) {
                if (collection == null) return collection;
                if (!isArrayLike(collection)) return eachFunc(collection, iteratee);
                var length = collection.length, index = fromRight ? length : -1, iterable = Object1(collection);
                while(fromRight ? index-- : ++index < length){
                    if (iteratee(iterable[index], index, iterable) === false) break;
                }
                return collection;
            };
        }
        /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */ function createBaseFor(fromRight) {
            return function(object, iteratee, keysFunc) {
                var index = -1, iterable = Object1(object), props = keysFunc(object), length = props.length;
                while(length--){
                    var key = props[fromRight ? length : ++index];
                    if (iteratee(iterable[key], key, iterable) === false) break;
                }
                return object;
            };
        }
        /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */ function createBind(func, bitmask, thisArg) {
            var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
            function wrapper() {
                var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
                return fn.apply(isBind ? thisArg : this, arguments);
            }
            return wrapper;
        }
        /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */ function createCaseFirst(methodName) {
            return function(string) {
                string = toString(string);
                var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined;
                var chr = strSymbols ? strSymbols[0] : string.charAt(0);
                var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string.slice(1);
                return chr[methodName]() + trailing;
            };
        }
        /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */ function createCompounder(callback) {
            return function(string) {
                return arrayReduce(words(deburr(string).replace(reApos, "")), callback, "");
            };
        }
        /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */ function createCtor(Ctor) {
            return function() {
                // Use a `switch` statement to work with class constructors. See
                // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
                // for more details.
                var args = arguments;
                switch(args.length){
                    case 0:
                        return new Ctor;
                    case 1:
                        return new Ctor(args[0]);
                    case 2:
                        return new Ctor(args[0], args[1]);
                    case 3:
                        return new Ctor(args[0], args[1], args[2]);
                    case 4:
                        return new Ctor(args[0], args[1], args[2], args[3]);
                    case 5:
                        return new Ctor(args[0], args[1], args[2], args[3], args[4]);
                    case 6:
                        return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
                    case 7:
                        return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
                }
                var thisBinding = baseCreate(Ctor.prototype), result = Ctor.apply(thisBinding, args);
                // Mimic the constructor's `return` behavior.
                // See https://es5.github.io/#x13.2.2 for more details.
                return isObject(result) ? result : thisBinding;
            };
        }
        /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */ function createCurry(func, bitmask, arity) {
            var Ctor = createCtor(func);
            function wrapper() {
                var length = arguments.length, args = Array1(length), index = length, placeholder = getHolder(wrapper);
                while(index--)args[index] = arguments[index];
                var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
                length -= holders.length;
                if (length < arity) return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, undefined, args, holders, undefined, undefined, arity - length);
                var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
                return apply(fn, this, args);
            }
            return wrapper;
        }
        /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */ function createFind(findIndexFunc) {
            return function(collection, predicate, fromIndex) {
                var iterable = Object1(collection);
                if (!isArrayLike(collection)) {
                    var iteratee = getIteratee(predicate, 3);
                    collection = keys(collection);
                    predicate = function(key) {
                        return iteratee(iterable[key], key, iterable);
                    };
                }
                var index = findIndexFunc(collection, predicate, fromIndex);
                return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
            };
        }
        /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */ function createFlow(fromRight) {
            return flatRest(function(funcs) {
                var length = funcs.length, index = length, prereq = LodashWrapper.prototype.thru;
                if (fromRight) funcs.reverse();
                while(index--){
                    var func = funcs[index];
                    if (typeof func != "function") throw new TypeError(FUNC_ERROR_TEXT);
                    if (prereq && !wrapper && getFuncName(func) == "wrapper") var wrapper = new LodashWrapper([], true);
                }
                index = wrapper ? index : length;
                while(++index < length){
                    func = funcs[index];
                    var funcName = getFuncName(func), data = funcName == "wrapper" ? getData(func) : undefined;
                    if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
                    else wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
                }
                return function() {
                    var args = arguments, value = args[0];
                    if (wrapper && args.length == 1 && isArray(value)) return wrapper.plant(value).value();
                    var index = 0, result = length ? funcs[index].apply(this, args) : value;
                    while(++index < length)result = funcs[index].call(this, result);
                    return result;
                };
            });
        }
        /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */ function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
            var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? undefined : createCtor(func);
            function wrapper() {
                var length = arguments.length, args = Array1(length), index = length;
                while(index--)args[index] = arguments[index];
                if (isCurried) var placeholder = getHolder(wrapper), holdersCount = countHolders(args, placeholder);
                if (partials) args = composeArgs(args, partials, holders, isCurried);
                if (partialsRight) args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
                length -= holdersCount;
                if (isCurried && length < arity) {
                    var newHolders = replaceHolders(args, placeholder);
                    return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, thisArg, args, newHolders, argPos, ary, arity - length);
                }
                var thisBinding = isBind ? thisArg : this, fn = isBindKey ? thisBinding[func] : func;
                length = args.length;
                if (argPos) args = reorder(args, argPos);
                else if (isFlip && length > 1) args.reverse();
                if (isAry && ary < length) args.length = ary;
                if (this && this !== root && this instanceof wrapper) fn = Ctor || createCtor(fn);
                return fn.apply(thisBinding, args);
            }
            return wrapper;
        }
        /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */ function createInverter(setter, toIteratee) {
            return function(object, iteratee) {
                return baseInverter(object, setter, toIteratee(iteratee), {});
            };
        }
        /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */ function createMathOperation(operator, defaultValue) {
            return function(value, other) {
                var result;
                if (value === undefined && other === undefined) return defaultValue;
                if (value !== undefined) result = value;
                if (other !== undefined) {
                    if (result === undefined) return other;
                    if (typeof value == "string" || typeof other == "string") {
                        value = baseToString(value);
                        other = baseToString(other);
                    } else {
                        value = baseToNumber(value);
                        other = baseToNumber(other);
                    }
                    result = operator(value, other);
                }
                return result;
            };
        }
        /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */ function createOver(arrayFunc) {
            return flatRest(function(iteratees) {
                iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
                return baseRest(function(args) {
                    var thisArg = this;
                    return arrayFunc(iteratees, function(iteratee) {
                        return apply(iteratee, thisArg, args);
                    });
                });
            });
        }
        /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */ function createPadding(length, chars) {
            chars = chars === undefined ? " " : baseToString(chars);
            var charsLength = chars.length;
            if (charsLength < 2) return charsLength ? baseRepeat(chars, length) : chars;
            var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
            return hasUnicode(chars) ? castSlice(stringToArray(result), 0, length).join("") : result.slice(0, length);
        }
        /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */ function createPartial(func, bitmask, thisArg, partials) {
            var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
            function wrapper() {
                var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array1(leftLength + argsLength), fn = this && this !== root && this instanceof wrapper ? Ctor : func;
                while(++leftIndex < leftLength)args[leftIndex] = partials[leftIndex];
                while(argsLength--)args[leftIndex++] = arguments[++argsIndex];
                return apply(fn, isBind ? thisArg : this, args);
            }
            return wrapper;
        }
        /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */ function createRange(fromRight) {
            return function(start, end, step) {
                if (step && typeof step != "number" && isIterateeCall(start, end, step)) end = step = undefined;
                // Ensure the sign of `-0` is preserved.
                start = toFinite(start);
                if (end === undefined) {
                    end = start;
                    start = 0;
                } else end = toFinite(end);
                step = step === undefined ? start < end ? 1 : -1 : toFinite(step);
                return baseRange(start, end, step, fromRight);
            };
        }
        /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */ function createRelationalOperation(operator) {
            return function(value, other) {
                if (!(typeof value == "string" && typeof other == "string")) {
                    value = toNumber(value);
                    other = toNumber(other);
                }
                return operator(value, other);
            };
        }
        /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */ function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
            var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : undefined, newHoldersRight = isCurry ? undefined : holders, newPartials = isCurry ? partials : undefined, newPartialsRight = isCurry ? undefined : partials;
            bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
            bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
            if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
            var newData = [
                func,
                bitmask,
                thisArg,
                newPartials,
                newHolders,
                newPartialsRight,
                newHoldersRight,
                argPos,
                ary,
                arity
            ];
            var result = wrapFunc.apply(undefined, newData);
            if (isLaziable(func)) setData(result, newData);
            result.placeholder = placeholder;
            return setWrapToString(result, func, bitmask);
        }
        /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */ function createRound(methodName) {
            var func = Math[methodName];
            return function(number, precision) {
                number = toNumber(number);
                precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
                if (precision && nativeIsFinite(number)) {
                    // Shift with exponential notation to avoid floating-point issues.
                    // See [MDN](https://mdn.io/round#Examples) for more details.
                    var pair = (toString(number) + "e").split("e"), value = func(pair[0] + "e" + (+pair[1] + precision));
                    pair = (toString(value) + "e").split("e");
                    return +(pair[0] + "e" + (+pair[1] - precision));
                }
                return func(number);
            };
        }
        /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */ var createSet = !(Set && 1 / setToArray(new Set([
            ,
            -0
        ]))[1] == INFINITY) ? noop : function(values) {
            return new Set(values);
        };
        /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */ function createToPairs(keysFunc) {
            return function(object) {
                var tag = getTag(object);
                if (tag == mapTag) return mapToArray(object);
                if (tag == setTag) return setToPairs(object);
                return baseToPairs(object, keysFunc(object));
            };
        }
        /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */ function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
            var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
            if (!isBindKey && typeof func != "function") throw new TypeError(FUNC_ERROR_TEXT);
            var length = partials ? partials.length : 0;
            if (!length) {
                bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
                partials = holders = undefined;
            }
            ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
            arity = arity === undefined ? arity : toInteger(arity);
            length -= holders ? holders.length : 0;
            if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
                var partialsRight = partials, holdersRight = holders;
                partials = holders = undefined;
            }
            var data = isBindKey ? undefined : getData(func);
            var newData = [
                func,
                bitmask,
                thisArg,
                partials,
                holders,
                partialsRight,
                holdersRight,
                argPos,
                ary,
                arity
            ];
            if (data) mergeData(newData, data);
            func = newData[0];
            bitmask = newData[1];
            thisArg = newData[2];
            partials = newData[3];
            holders = newData[4];
            arity = newData[9] = newData[9] === undefined ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);
            if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
            if (!bitmask || bitmask == WRAP_BIND_FLAG) var result = createBind(func, bitmask, thisArg);
            else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) result = createCurry(func, bitmask, arity);
            else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) result = createPartial(func, bitmask, thisArg, partials);
            else result = createHybrid.apply(undefined, newData);
            var setter = data ? baseSetData : setData;
            return setWrapToString(setter(result, newData), func, bitmask);
        }
        /**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */ function customDefaultsAssignIn(objValue, srcValue, key, object) {
            if (objValue === undefined || eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key)) return srcValue;
            return objValue;
        }
        /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */ function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
            if (isObject(objValue) && isObject(srcValue)) {
                // Recursively merge objects and arrays (susceptible to call stack limits).
                stack.set(srcValue, objValue);
                baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
                stack["delete"](srcValue);
            }
            return objValue;
        }
        /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */ function customOmitClone(value) {
            return isPlainObject(value) ? undefined : value;
        }
        /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */ function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
            if (arrLength != othLength && !(isPartial && othLength > arrLength)) return false;
            // Check that cyclic values are equal.
            var arrStacked = stack.get(array);
            var othStacked = stack.get(other);
            if (arrStacked && othStacked) return arrStacked == other && othStacked == array;
            var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache : undefined;
            stack.set(array, other);
            stack.set(other, array);
            // Ignore non-index properties.
            while(++index < arrLength){
                var arrValue = array[index], othValue = other[index];
                if (customizer) var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
                if (compared !== undefined) {
                    if (compared) continue;
                    result = false;
                    break;
                }
                // Recursively compare arrays (susceptible to call stack limits).
                if (seen) {
                    if (!arraySome(other, function(othValue, othIndex) {
                        if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) return seen.push(othIndex);
                    })) {
                        result = false;
                        break;
                    }
                } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                    result = false;
                    break;
                }
            }
            stack["delete"](array);
            stack["delete"](other);
            return result;
        }
        /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */ function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
            switch(tag){
                case dataViewTag:
                    if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) return false;
                    object = object.buffer;
                    other = other.buffer;
                case arrayBufferTag:
                    if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) return false;
                    return true;
                case boolTag:
                case dateTag:
                case numberTag:
                    // Coerce booleans to `1` or `0` and dates to milliseconds.
                    // Invalid dates are coerced to `NaN`.
                    return eq(+object, +other);
                case errorTag:
                    return object.name == other.name && object.message == other.message;
                case regexpTag:
                case stringTag:
                    // Coerce regexes to strings and treat strings, primitives and objects,
                    // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
                    // for more details.
                    return object == other + "";
                case mapTag:
                    var convert = mapToArray;
                case setTag:
                    var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
                    convert || (convert = setToArray);
                    if (object.size != other.size && !isPartial) return false;
                    // Assume cyclic values are equal.
                    var stacked = stack.get(object);
                    if (stacked) return stacked == other;
                    bitmask |= COMPARE_UNORDERED_FLAG;
                    // Recursively compare objects (susceptible to call stack limits).
                    stack.set(object, other);
                    var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
                    stack["delete"](object);
                    return result;
                case symbolTag:
                    if (symbolValueOf) return symbolValueOf.call(object) == symbolValueOf.call(other);
            }
            return false;
        }
        /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */ function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
            if (objLength != othLength && !isPartial) return false;
            var index = objLength;
            while(index--){
                var key = objProps[index];
                if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) return false;
            }
            // Check that cyclic values are equal.
            var objStacked = stack.get(object);
            var othStacked = stack.get(other);
            if (objStacked && othStacked) return objStacked == other && othStacked == object;
            var result = true;
            stack.set(object, other);
            stack.set(other, object);
            var skipCtor = isPartial;
            while(++index < objLength){
                key = objProps[index];
                var objValue = object[key], othValue = other[key];
                if (customizer) var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
                // Recursively compare objects (susceptible to call stack limits).
                if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
                    result = false;
                    break;
                }
                skipCtor || (skipCtor = key == "constructor");
            }
            if (result && !skipCtor) {
                var objCtor = object.constructor, othCtor = other.constructor;
                // Non `Object` object instances with different constructors are not equal.
                if (objCtor != othCtor && "constructor" in object && "constructor" in other && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) result = false;
            }
            stack["delete"](object);
            stack["delete"](other);
            return result;
        }
        /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */ function flatRest(func) {
            return setToString(overRest(func, undefined, flatten), func + "");
        }
        /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */ function getAllKeys(object) {
            return baseGetAllKeys(object, keys, getSymbols);
        }
        /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */ function getAllKeysIn(object) {
            return baseGetAllKeys(object, keysIn, getSymbolsIn);
        }
        /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */ var getData = !metaMap ? noop : function(func) {
            return metaMap.get(func);
        };
        /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */ function getFuncName(func) {
            var result = func.name + "", array = realNames[result], length = hasOwnProperty.call(realNames, result) ? array.length : 0;
            while(length--){
                var data = array[length], otherFunc = data.func;
                if (otherFunc == null || otherFunc == func) return data.name;
            }
            return result;
        }
        /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */ function getHolder(func) {
            var object = hasOwnProperty.call(lodash, "placeholder") ? lodash : func;
            return object.placeholder;
        }
        /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */ function getIteratee() {
            var result = lodash.iteratee || iteratee;
            result = result === iteratee ? baseIteratee : result;
            return arguments.length ? result(arguments[0], arguments[1]) : result;
        }
        /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */ function getMapData(map, key) {
            var data = map.__data__;
            return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
        }
        /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */ function getMatchData(object) {
            var result = keys(object), length = result.length;
            while(length--){
                var key = result[length], value = object[key];
                result[length] = [
                    key,
                    value,
                    isStrictComparable(value)
                ];
            }
            return result;
        }
        /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */ function getNative(object, key) {
            var value = getValue(object, key);
            return baseIsNative(value) ? value : undefined;
        }
        /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */ function getRawTag(value) {
            var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
            try {
                value[symToStringTag] = undefined;
                var unmasked = true;
            } catch (e) {}
            var result = nativeObjectToString.call(value);
            if (unmasked) {
                if (isOwn) value[symToStringTag] = tag;
                else delete value[symToStringTag];
            }
            return result;
        }
        /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */ var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
            if (object == null) return [];
            object = Object1(object);
            return arrayFilter(nativeGetSymbols(object), function(symbol) {
                return propertyIsEnumerable.call(object, symbol);
            });
        };
        /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */ var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
            var result = [];
            while(object){
                arrayPush(result, getSymbols(object));
                object = getPrototype(object);
            }
            return result;
        };
        /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */ var getTag = baseGetTag;
        // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
        if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set) != setTag || WeakMap && getTag(new WeakMap) != weakMapTag) getTag = function(value) {
            var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : undefined, ctorString = Ctor ? toSource(Ctor) : "";
            if (ctorString) switch(ctorString){
                case dataViewCtorString:
                    return dataViewTag;
                case mapCtorString:
                    return mapTag;
                case promiseCtorString:
                    return promiseTag;
                case setCtorString:
                    return setTag;
                case weakMapCtorString:
                    return weakMapTag;
            }
            return result;
        };
        /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */ function getView(start, end, transforms) {
            var index = -1, length = transforms.length;
            while(++index < length){
                var data = transforms[index], size = data.size;
                switch(data.type){
                    case "drop":
                        start += size;
                        break;
                    case "dropRight":
                        end -= size;
                        break;
                    case "take":
                        end = nativeMin(end, start + size);
                        break;
                    case "takeRight":
                        start = nativeMax(start, end - size);
                        break;
                }
            }
            return {
                "start": start,
                "end": end
            };
        }
        /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */ function getWrapDetails(source) {
            var match = source.match(reWrapDetails);
            return match ? match[1].split(reSplitDetails) : [];
        }
        /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */ function hasPath(object, path, hasFunc) {
            path = castPath(path, object);
            var index = -1, length = path.length, result = false;
            while(++index < length){
                var key = toKey(path[index]);
                if (!(result = object != null && hasFunc(object, key))) break;
                object = object[key];
            }
            if (result || ++index != length) return result;
            length = object == null ? 0 : object.length;
            return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
        }
        /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */ function initCloneArray(array) {
            var length = array.length, result = new array.constructor(length);
            // Add properties assigned by `RegExp#exec`.
            if (length && typeof array[0] == "string" && hasOwnProperty.call(array, "index")) {
                result.index = array.index;
                result.input = array.input;
            }
            return result;
        }
        /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */ function initCloneObject(object) {
            return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
        }
        /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */ function initCloneByTag(object, tag, isDeep) {
            var Ctor = object.constructor;
            switch(tag){
                case arrayBufferTag:
                    return cloneArrayBuffer(object);
                case boolTag:
                case dateTag:
                    return new Ctor(+object);
                case dataViewTag:
                    return cloneDataView(object, isDeep);
                case float32Tag:
                case float64Tag:
                case int8Tag:
                case int16Tag:
                case int32Tag:
                case uint8Tag:
                case uint8ClampedTag:
                case uint16Tag:
                case uint32Tag:
                    return cloneTypedArray(object, isDeep);
                case mapTag:
                    return new Ctor;
                case numberTag:
                case stringTag:
                    return new Ctor(object);
                case regexpTag:
                    return cloneRegExp(object);
                case setTag:
                    return new Ctor;
                case symbolTag:
                    return cloneSymbol(object);
            }
        }
        /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */ function insertWrapDetails(source, details) {
            var length = details.length;
            if (!length) return source;
            var lastIndex = length - 1;
            details[lastIndex] = (length > 1 ? "& " : "") + details[lastIndex];
            details = details.join(length > 2 ? ", " : " ");
            return source.replace(reWrapComment, "{\n/* [wrapped with " + details + "] */\n");
        }
        /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */ function isFlattenable(value) {
            return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
        }
        /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */ function isIndex(value, length) {
            var type = typeof value;
            length = length == null ? MAX_SAFE_INTEGER : length;
            return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
        }
        /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */ function isIterateeCall(value, index, object) {
            if (!isObject(object)) return false;
            var type = typeof index;
            if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) return eq(object[index], value);
            return false;
        }
        /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */ function isKey(value, object) {
            if (isArray(value)) return false;
            var type = typeof value;
            if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) return true;
            return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object1(object);
        }
        /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */ function isKeyable(value) {
            var type = typeof value;
            return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
        }
        /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */ function isLaziable(func) {
            var funcName = getFuncName(func), other = lodash[funcName];
            if (typeof other != "function" || !(funcName in LazyWrapper.prototype)) return false;
            if (func === other) return true;
            var data = getData(other);
            return !!data && func === data[0];
        }
        /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */ function isMasked(func) {
            return !!maskSrcKey && maskSrcKey in func;
        }
        /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */ var isMaskable = coreJsData ? isFunction : stubFalse;
        /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */ function isPrototype(value) {
            var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
            return value === proto;
        }
        /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */ function isStrictComparable(value) {
            return value === value && !isObject(value);
        }
        /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */ function matchesStrictComparable(key, srcValue) {
            return function(object) {
                if (object == null) return false;
                return object[key] === srcValue && (srcValue !== undefined || key in Object1(object));
            };
        }
        /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */ function memoizeCapped(func) {
            var result = memoize(func, function(key) {
                if (cache.size === MAX_MEMOIZE_SIZE) cache.clear();
                return key;
            });
            var cache = result.cache;
            return result;
        }
        /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */ function mergeData(data, source) {
            var bitmask = data[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
            var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;
            // Exit early if metadata can't be merged.
            if (!(isCommon || isCombo)) return data;
            // Use source `thisArg` if available.
            if (srcBitmask & WRAP_BIND_FLAG) {
                data[2] = source[2];
                // Set when currying a bound function.
                newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
            }
            // Compose partial arguments.
            var value = source[3];
            if (value) {
                var partials = data[3];
                data[3] = partials ? composeArgs(partials, value, source[4]) : value;
                data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
            }
            // Compose partial right arguments.
            value = source[5];
            if (value) {
                partials = data[5];
                data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
                data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
            }
            // Use source `argPos` if available.
            value = source[7];
            if (value) data[7] = value;
            // Use source `ary` if it's smaller.
            if (srcBitmask & WRAP_ARY_FLAG) data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
            // Use source `arity` if one is not provided.
            if (data[9] == null) data[9] = source[9];
            // Use source `func` and merge bitmasks.
            data[0] = source[0];
            data[1] = newBitmask;
            return data;
        }
        /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */ function nativeKeysIn(object) {
            var result = [];
            if (object != null) for(var key in Object1(object))result.push(key);
            return result;
        }
        /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */ function objectToString(value) {
            return nativeObjectToString.call(value);
        }
        /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */ function overRest(func, start, transform) {
            start = nativeMax(start === undefined ? func.length - 1 : start, 0);
            return function() {
                var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array1(length);
                while(++index < length)array[index] = args[start + index];
                index = -1;
                var otherArgs = Array1(start + 1);
                while(++index < start)otherArgs[index] = args[index];
                otherArgs[start] = transform(array);
                return apply(func, this, otherArgs);
            };
        }
        /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */ function parent(object, path) {
            return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
        }
        /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */ function reorder(array, indexes) {
            var arrLength = array.length, length = nativeMin(indexes.length, arrLength), oldArray = copyArray(array);
            while(length--){
                var index = indexes[length];
                array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
            }
            return array;
        }
        /**
     * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */ function safeGet(object, key) {
            if (key === "constructor" && typeof object[key] === "function") return;
            if (key == "__proto__") return;
            return object[key];
        }
        /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */ var setData = shortOut(baseSetData);
        /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */ var setTimeout = ctxSetTimeout || function(func, wait) {
            return root.setTimeout(func, wait);
        };
        /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */ var setToString = shortOut(baseSetToString);
        /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */ function setWrapToString(wrapper, reference, bitmask) {
            var source = reference + "";
            return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
        }
        /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */ function shortOut(func) {
            var count = 0, lastCalled = 0;
            return function() {
                var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
                lastCalled = stamp;
                if (remaining > 0) {
                    if (++count >= HOT_COUNT) return arguments[0];
                } else count = 0;
                return func.apply(undefined, arguments);
            };
        }
        /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */ function shuffleSelf(array, size) {
            var index = -1, length = array.length, lastIndex = length - 1;
            size = size === undefined ? length : size;
            while(++index < size){
                var rand = baseRandom(index, lastIndex), value = array[rand];
                array[rand] = array[index];
                array[index] = value;
            }
            array.length = size;
            return array;
        }
        /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */ var stringToPath = memoizeCapped(function(string) {
            var result = [];
            if (string.charCodeAt(0) === 46 /* . */ ) result.push("");
            string.replace(rePropName, function(match, number, quote, subString) {
                result.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
            });
            return result;
        });
        /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */ function toKey(value) {
            if (typeof value == "string" || isSymbol(value)) return value;
            var result = value + "";
            return result == "0" && 1 / value == -INFINITY ? "-0" : result;
        }
        /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */ function toSource(func) {
            if (func != null) {
                try {
                    return funcToString.call(func);
                } catch (e) {}
                try {
                    return func + "";
                } catch (e) {}
            }
            return "";
        }
        /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */ function updateWrapDetails(details, bitmask) {
            arrayEach(wrapFlags, function(pair) {
                var value = "_." + pair[0];
                if (bitmask & pair[1] && !arrayIncludes(details, value)) details.push(value);
            });
            return details.sort();
        }
        /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */ function wrapperClone(wrapper) {
            if (wrapper instanceof LazyWrapper) return wrapper.clone();
            var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
            result.__actions__ = copyArray(wrapper.__actions__);
            result.__index__ = wrapper.__index__;
            result.__values__ = wrapper.__values__;
            return result;
        }
        /*------------------------------------------------------------------------*/ /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */ function chunk(array, size, guard) {
            if (guard ? isIterateeCall(array, size, guard) : size === undefined) size = 1;
            else size = nativeMax(toInteger(size), 0);
            var length = array == null ? 0 : array.length;
            if (!length || size < 1) return [];
            var index = 0, resIndex = 0, result = Array1(nativeCeil(length / size));
            while(index < length)result[resIndex++] = baseSlice(array, index, index += size);
            return result;
        }
        /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */ function compact(array) {
            var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
            while(++index < length){
                var value = array[index];
                if (value) result[resIndex++] = value;
            }
            return result;
        }
        /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */ function concat() {
            var length = arguments.length;
            if (!length) return [];
            var args = Array1(length - 1), array = arguments[0], index = length;
            while(index--)args[index - 1] = arguments[index];
            return arrayPush(isArray(array) ? copyArray(array) : [
                array
            ], baseFlatten(args, 1));
        }
        /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */ var difference = baseRest(function(array, values) {
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true)) : [];
        });
        /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */ var differenceBy = baseRest(function(array, values) {
            var iteratee = last(values);
            if (isArrayLikeObject(iteratee)) iteratee = undefined;
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2)) : [];
        });
        /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */ var differenceWith = baseRest(function(array, values) {
            var comparator = last(values);
            if (isArrayLikeObject(comparator)) comparator = undefined;
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator) : [];
        });
        /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */ function drop(array, n, guard) {
            var length = array == null ? 0 : array.length;
            if (!length) return [];
            n = guard || n === undefined ? 1 : toInteger(n);
            return baseSlice(array, n < 0 ? 0 : n, length);
        }
        /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */ function dropRight(array, n, guard) {
            var length = array == null ? 0 : array.length;
            if (!length) return [];
            n = guard || n === undefined ? 1 : toInteger(n);
            n = length - n;
            return baseSlice(array, 0, n < 0 ? 0 : n);
        }
        /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */ function dropRightWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
        }
        /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */ function dropWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
        }
        /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */ function fill(array, value, start, end) {
            var length = array == null ? 0 : array.length;
            if (!length) return [];
            if (start && typeof start != "number" && isIterateeCall(array, value, start)) {
                start = 0;
                end = length;
            }
            return baseFill(array, value, start, end);
        }
        /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */ function findIndex(array, predicate, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) return -1;
            var index = fromIndex == null ? 0 : toInteger(fromIndex);
            if (index < 0) index = nativeMax(length + index, 0);
            return baseFindIndex(array, getIteratee(predicate, 3), index);
        }
        /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */ function findLastIndex(array, predicate, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) return -1;
            var index = length - 1;
            if (fromIndex !== undefined) {
                index = toInteger(fromIndex);
                index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
            }
            return baseFindIndex(array, getIteratee(predicate, 3), index, true);
        }
        /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */ function flatten(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseFlatten(array, 1) : [];
        }
        /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */ function flattenDeep(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseFlatten(array, INFINITY) : [];
        }
        /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */ function flattenDepth(array, depth) {
            var length = array == null ? 0 : array.length;
            if (!length) return [];
            depth = depth === undefined ? 1 : toInteger(depth);
            return baseFlatten(array, depth);
        }
        /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */ function fromPairs(pairs) {
            var index = -1, length = pairs == null ? 0 : pairs.length, result = {};
            while(++index < length){
                var pair = pairs[index];
                result[pair[0]] = pair[1];
            }
            return result;
        }
        /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */ function head(array) {
            return array && array.length ? array[0] : undefined;
        }
        /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */ function indexOf(array, value, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) return -1;
            var index = fromIndex == null ? 0 : toInteger(fromIndex);
            if (index < 0) index = nativeMax(length + index, 0);
            return baseIndexOf(array, value, index);
        }
        /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */ function initial(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseSlice(array, 0, -1) : [];
        }
        /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */ var intersection = baseRest(function(arrays) {
            var mapped = arrayMap(arrays, castArrayLikeObject);
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
        });
        /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */ var intersectionBy = baseRest(function(arrays) {
            var iteratee = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
            if (iteratee === last(mapped)) iteratee = undefined;
            else mapped.pop();
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee, 2)) : [];
        });
        /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */ var intersectionWith = baseRest(function(arrays) {
            var comparator = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
            comparator = typeof comparator == "function" ? comparator : undefined;
            if (comparator) mapped.pop();
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined, comparator) : [];
        });
        /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */ function join(array, separator) {
            return array == null ? "" : nativeJoin.call(array, separator);
        }
        /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */ function last(array) {
            var length = array == null ? 0 : array.length;
            return length ? array[length - 1] : undefined;
        }
        /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */ function lastIndexOf(array, value, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) return -1;
            var index = length;
            if (fromIndex !== undefined) {
                index = toInteger(fromIndex);
                index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
            }
            return value === value ? strictLastIndexOf(array, value, index) : baseFindIndex(array, baseIsNaN, index, true);
        }
        /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */ function nth(array, n) {
            return array && array.length ? baseNth(array, toInteger(n)) : undefined;
        }
        /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */ var pull = baseRest(pullAll);
        /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */ function pullAll(array, values) {
            return array && array.length && values && values.length ? basePullAll(array, values) : array;
        }
        /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */ function pullAllBy(array, values, iteratee) {
            return array && array.length && values && values.length ? basePullAll(array, values, getIteratee(iteratee, 2)) : array;
        }
        /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */ function pullAllWith(array, values, comparator) {
            return array && array.length && values && values.length ? basePullAll(array, values, undefined, comparator) : array;
        }
        /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */ var pullAt = flatRest(function(array, indexes) {
            var length = array == null ? 0 : array.length, result = baseAt(array, indexes);
            basePullAt(array, arrayMap(indexes, function(index) {
                return isIndex(index, length) ? +index : index;
            }).sort(compareAscending));
            return result;
        });
        /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */ function remove(array, predicate) {
            var result = [];
            if (!(array && array.length)) return result;
            var index = -1, indexes = [], length = array.length;
            predicate = getIteratee(predicate, 3);
            while(++index < length){
                var value = array[index];
                if (predicate(value, index, array)) {
                    result.push(value);
                    indexes.push(index);
                }
            }
            basePullAt(array, indexes);
            return result;
        }
        /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */ function reverse(array) {
            return array == null ? array : nativeReverse.call(array);
        }
        /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */ function slice(array, start, end) {
            var length = array == null ? 0 : array.length;
            if (!length) return [];
            if (end && typeof end != "number" && isIterateeCall(array, start, end)) {
                start = 0;
                end = length;
            } else {
                start = start == null ? 0 : toInteger(start);
                end = end === undefined ? length : toInteger(end);
            }
            return baseSlice(array, start, end);
        }
        /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */ function sortedIndex(array, value) {
            return baseSortedIndex(array, value);
        }
        /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */ function sortedIndexBy(array, value, iteratee) {
            return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
        }
        /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */ function sortedIndexOf(array, value) {
            var length = array == null ? 0 : array.length;
            if (length) {
                var index = baseSortedIndex(array, value);
                if (index < length && eq(array[index], value)) return index;
            }
            return -1;
        }
        /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */ function sortedLastIndex(array, value) {
            return baseSortedIndex(array, value, true);
        }
        /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */ function sortedLastIndexBy(array, value, iteratee) {
            return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
        }
        /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */ function sortedLastIndexOf(array, value) {
            var length = array == null ? 0 : array.length;
            if (length) {
                var index = baseSortedIndex(array, value, true) - 1;
                if (eq(array[index], value)) return index;
            }
            return -1;
        }
        /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */ function sortedUniq(array) {
            return array && array.length ? baseSortedUniq(array) : [];
        }
        /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */ function sortedUniqBy(array, iteratee) {
            return array && array.length ? baseSortedUniq(array, getIteratee(iteratee, 2)) : [];
        }
        /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */ function tail(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseSlice(array, 1, length) : [];
        }
        /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */ function take(array, n, guard) {
            if (!(array && array.length)) return [];
            n = guard || n === undefined ? 1 : toInteger(n);
            return baseSlice(array, 0, n < 0 ? 0 : n);
        }
        /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */ function takeRight(array, n, guard) {
            var length = array == null ? 0 : array.length;
            if (!length) return [];
            n = guard || n === undefined ? 1 : toInteger(n);
            n = length - n;
            return baseSlice(array, n < 0 ? 0 : n, length);
        }
        /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */ function takeRightWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
        }
        /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */ function takeWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
        }
        /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */ var union = baseRest(function(arrays) {
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
        });
        /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */ var unionBy = baseRest(function(arrays) {
            var iteratee = last(arrays);
            if (isArrayLikeObject(iteratee)) iteratee = undefined;
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
        });
        /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */ var unionWith = baseRest(function(arrays) {
            var comparator = last(arrays);
            comparator = typeof comparator == "function" ? comparator : undefined;
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
        });
        /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */ function uniq(array) {
            return array && array.length ? baseUniq(array) : [];
        }
        /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */ function uniqBy(array, iteratee) {
            return array && array.length ? baseUniq(array, getIteratee(iteratee, 2)) : [];
        }
        /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */ function uniqWith(array, comparator) {
            comparator = typeof comparator == "function" ? comparator : undefined;
            return array && array.length ? baseUniq(array, undefined, comparator) : [];
        }
        /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */ function unzip(array) {
            if (!(array && array.length)) return [];
            var length = 0;
            array = arrayFilter(array, function(group) {
                if (isArrayLikeObject(group)) {
                    length = nativeMax(group.length, length);
                    return true;
                }
            });
            return baseTimes(length, function(index) {
                return arrayMap(array, baseProperty(index));
            });
        }
        /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */ function unzipWith(array, iteratee) {
            if (!(array && array.length)) return [];
            var result = unzip(array);
            if (iteratee == null) return result;
            return arrayMap(result, function(group) {
                return apply(iteratee, undefined, group);
            });
        }
        /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */ var without = baseRest(function(array, values) {
            return isArrayLikeObject(array) ? baseDifference(array, values) : [];
        });
        /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */ var xor = baseRest(function(arrays) {
            return baseXor(arrayFilter(arrays, isArrayLikeObject));
        });
        /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */ var xorBy = baseRest(function(arrays) {
            var iteratee = last(arrays);
            if (isArrayLikeObject(iteratee)) iteratee = undefined;
            return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
        });
        /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */ var xorWith = baseRest(function(arrays) {
            var comparator = last(arrays);
            comparator = typeof comparator == "function" ? comparator : undefined;
            return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
        });
        /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */ var zip = baseRest(unzip);
        /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */ function zipObject(props, values) {
            return baseZipObject(props || [], values || [], assignValue);
        }
        /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */ function zipObjectDeep(props, values) {
            return baseZipObject(props || [], values || [], baseSet);
        }
        /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */ var zipWith = baseRest(function(arrays) {
            var length = arrays.length, iteratee = length > 1 ? arrays[length - 1] : undefined;
            iteratee = typeof iteratee == "function" ? (arrays.pop(), iteratee) : undefined;
            return unzipWith(arrays, iteratee);
        });
        /*------------------------------------------------------------------------*/ /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */ function chain(value) {
            var result = lodash(value);
            result.__chain__ = true;
            return result;
        }
        /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */ function tap(value, interceptor) {
            interceptor(value);
            return value;
        }
        /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */ function thru(value, interceptor) {
            return interceptor(value);
        }
        /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */ var wrapperAt = flatRest(function(paths) {
            var length = paths.length, start = length ? paths[0] : 0, value = this.__wrapped__, interceptor = function(object) {
                return baseAt(object, paths);
            };
            if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) return this.thru(interceptor);
            value = value.slice(start, +start + (length ? 1 : 0));
            value.__actions__.push({
                "func": thru,
                "args": [
                    interceptor
                ],
                "thisArg": undefined
            });
            return new LodashWrapper(value, this.__chain__).thru(function(array) {
                if (length && !array.length) array.push(undefined);
                return array;
            });
        });
        /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */ function wrapperChain() {
            return chain(this);
        }
        /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */ function wrapperCommit() {
            return new LodashWrapper(this.value(), this.__chain__);
        }
        /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */ function wrapperNext() {
            if (this.__values__ === undefined) this.__values__ = toArray(this.value());
            var done = this.__index__ >= this.__values__.length, value = done ? undefined : this.__values__[this.__index__++];
            return {
                "done": done,
                "value": value
            };
        }
        /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */ function wrapperToIterator() {
            return this;
        }
        /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */ function wrapperPlant(value) {
            var result, parent = this;
            while(parent instanceof baseLodash){
                var clone = wrapperClone(parent);
                clone.__index__ = 0;
                clone.__values__ = undefined;
                if (result) previous.__wrapped__ = clone;
                else result = clone;
                var previous = clone;
                parent = parent.__wrapped__;
            }
            previous.__wrapped__ = value;
            return result;
        }
        /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */ function wrapperReverse() {
            var value = this.__wrapped__;
            if (value instanceof LazyWrapper) {
                var wrapped = value;
                if (this.__actions__.length) wrapped = new LazyWrapper(this);
                wrapped = wrapped.reverse();
                wrapped.__actions__.push({
                    "func": thru,
                    "args": [
                        reverse
                    ],
                    "thisArg": undefined
                });
                return new LodashWrapper(wrapped, this.__chain__);
            }
            return this.thru(reverse);
        }
        /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */ function wrapperValue() {
            return baseWrapperValue(this.__wrapped__, this.__actions__);
        }
        /*------------------------------------------------------------------------*/ /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */ var countBy = createAggregator(function(result, value, key) {
            if (hasOwnProperty.call(result, key)) ++result[key];
            else baseAssignValue(result, key, 1);
        });
        /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */ function every(collection, predicate, guard) {
            var func = isArray(collection) ? arrayEvery : baseEvery;
            if (guard && isIterateeCall(collection, predicate, guard)) predicate = undefined;
            return func(collection, getIteratee(predicate, 3));
        }
        /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     *
     * // Combining several predicates using `_.overEvery` or `_.overSome`.
     * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
     * // => objects for ['fred', 'barney']
     */ function filter(collection, predicate) {
            var func = isArray(collection) ? arrayFilter : baseFilter;
            return func(collection, getIteratee(predicate, 3));
        }
        /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */ var find = createFind(findIndex);
        /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */ var findLast = createFind(findLastIndex);
        /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */ function flatMap(collection, iteratee) {
            return baseFlatten(map(collection, iteratee), 1);
        }
        /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */ function flatMapDeep(collection, iteratee) {
            return baseFlatten(map(collection, iteratee), INFINITY);
        }
        /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */ function flatMapDepth(collection, iteratee, depth) {
            depth = depth === undefined ? 1 : toInteger(depth);
            return baseFlatten(map(collection, iteratee), depth);
        }
        /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */ function forEach(collection, iteratee) {
            var func = isArray(collection) ? arrayEach : baseEach;
            return func(collection, getIteratee(iteratee, 3));
        }
        /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */ function forEachRight(collection, iteratee) {
            var func = isArray(collection) ? arrayEachRight : baseEachRight;
            return func(collection, getIteratee(iteratee, 3));
        }
        /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */ var groupBy = createAggregator(function(result, value, key) {
            if (hasOwnProperty.call(result, key)) result[key].push(value);
            else baseAssignValue(result, key, [
                value
            ]);
        });
        /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */ function includes(collection, value, fromIndex, guard) {
            collection = isArrayLike(collection) ? collection : values(collection);
            fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
            var length = collection.length;
            if (fromIndex < 0) fromIndex = nativeMax(length + fromIndex, 0);
            return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
        }
        /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */ var invokeMap = baseRest(function(collection, path, args) {
            var index = -1, isFunc = typeof path == "function", result = isArrayLike(collection) ? Array1(collection.length) : [];
            baseEach(collection, function(value) {
                result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
            });
            return result;
        });
        /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */ var keyBy = createAggregator(function(result, value, key) {
            baseAssignValue(result, key, value);
        });
        /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */ function map(collection, iteratee) {
            var func = isArray(collection) ? arrayMap : baseMap;
            return func(collection, getIteratee(iteratee, 3));
        }
        /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */ function orderBy(collection, iteratees, orders, guard) {
            if (collection == null) return [];
            if (!isArray(iteratees)) iteratees = iteratees == null ? [] : [
                iteratees
            ];
            orders = guard ? undefined : orders;
            if (!isArray(orders)) orders = orders == null ? [] : [
                orders
            ];
            return baseOrderBy(collection, iteratees, orders);
        }
        /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */ var partition = createAggregator(function(result, value, key) {
            result[key ? 0 : 1].push(value);
        }, function() {
            return [
                [],
                []
            ];
        });
        /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */ function reduce(collection, iteratee, accumulator) {
            var func = isArray(collection) ? arrayReduce : baseReduce, initAccum = arguments.length < 3;
            return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
        }
        /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */ function reduceRight(collection, iteratee, accumulator) {
            var func = isArray(collection) ? arrayReduceRight : baseReduce, initAccum = arguments.length < 3;
            return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
        }
        /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */ function reject(collection, predicate) {
            var func = isArray(collection) ? arrayFilter : baseFilter;
            return func(collection, negate(getIteratee(predicate, 3)));
        }
        /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */ function sample(collection) {
            var func = isArray(collection) ? arraySample : baseSample;
            return func(collection);
        }
        /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */ function sampleSize(collection, n, guard) {
            if (guard ? isIterateeCall(collection, n, guard) : n === undefined) n = 1;
            else n = toInteger(n);
            var func = isArray(collection) ? arraySampleSize : baseSampleSize;
            return func(collection, n);
        }
        /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */ function shuffle(collection) {
            var func = isArray(collection) ? arrayShuffle : baseShuffle;
            return func(collection);
        }
        /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */ function size(collection) {
            if (collection == null) return 0;
            if (isArrayLike(collection)) return isString(collection) ? stringSize(collection) : collection.length;
            var tag = getTag(collection);
            if (tag == mapTag || tag == setTag) return collection.size;
            return baseKeys(collection).length;
        }
        /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */ function some(collection, predicate, guard) {
            var func = isArray(collection) ? arraySome : baseSome;
            if (guard && isIterateeCall(collection, predicate, guard)) predicate = undefined;
            return func(collection, getIteratee(predicate, 3));
        }
        /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 30 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
     */ var sortBy = baseRest(function(collection, iteratees) {
            if (collection == null) return [];
            var length = iteratees.length;
            if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) iteratees = [];
            else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) iteratees = [
                iteratees[0]
            ];
            return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
        });
        /*------------------------------------------------------------------------*/ /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */ var now = ctxNow || function() {
            return root.Date.now();
        };
        /*------------------------------------------------------------------------*/ /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */ function after(n, func) {
            if (typeof func != "function") throw new TypeError(FUNC_ERROR_TEXT);
            n = toInteger(n);
            return function() {
                if (--n < 1) return func.apply(this, arguments);
            };
        }
        /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */ function ary(func, n, guard) {
            n = guard ? undefined : n;
            n = func && n == null ? func.length : n;
            return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
        }
        /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */ function before(n, func) {
            var result;
            if (typeof func != "function") throw new TypeError(FUNC_ERROR_TEXT);
            n = toInteger(n);
            return function() {
                if (--n > 0) result = func.apply(this, arguments);
                if (n <= 1) func = undefined;
                return result;
            };
        }
        /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */ var bind = baseRest(function(func, thisArg, partials) {
            var bitmask = WRAP_BIND_FLAG;
            if (partials.length) {
                var holders = replaceHolders(partials, getHolder(bind));
                bitmask |= WRAP_PARTIAL_FLAG;
            }
            return createWrap(func, bitmask, thisArg, partials, holders);
        });
        /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */ var bindKey = baseRest(function(object, key, partials) {
            var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
            if (partials.length) {
                var holders = replaceHolders(partials, getHolder(bindKey));
                bitmask |= WRAP_PARTIAL_FLAG;
            }
            return createWrap(key, bitmask, object, partials, holders);
        });
        /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */ function curry(func, arity, guard) {
            arity = guard ? undefined : arity;
            var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
            result.placeholder = curry.placeholder;
            return result;
        }
        /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */ function curryRight(func, arity, guard) {
            arity = guard ? undefined : arity;
            var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
            result.placeholder = curryRight.placeholder;
            return result;
        }
        /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */ function debounce(func, wait, options) {
            var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
            if (typeof func != "function") throw new TypeError(FUNC_ERROR_TEXT);
            wait = toNumber(wait) || 0;
            if (isObject(options)) {
                leading = !!options.leading;
                maxing = "maxWait" in options;
                maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
                trailing = "trailing" in options ? !!options.trailing : trailing;
            }
            function invokeFunc(time) {
                var args = lastArgs, thisArg = lastThis;
                lastArgs = lastThis = undefined;
                lastInvokeTime = time;
                result = func.apply(thisArg, args);
                return result;
            }
            function leadingEdge(time) {
                // Reset any `maxWait` timer.
                lastInvokeTime = time;
                // Start the timer for the trailing edge.
                timerId = setTimeout(timerExpired, wait);
                // Invoke the leading edge.
                return leading ? invokeFunc(time) : result;
            }
            function remainingWait(time) {
                var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
                return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
            }
            function shouldInvoke(time) {
                var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
                // Either this is the first call, activity has stopped and we're at the
                // trailing edge, the system time has gone backwards and we're treating
                // it as the trailing edge, or we've hit the `maxWait` limit.
                return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
            }
            function timerExpired() {
                var time = now();
                if (shouldInvoke(time)) return trailingEdge(time);
                // Restart the timer.
                timerId = setTimeout(timerExpired, remainingWait(time));
            }
            function trailingEdge(time) {
                timerId = undefined;
                // Only invoke if we have `lastArgs` which means `func` has been
                // debounced at least once.
                if (trailing && lastArgs) return invokeFunc(time);
                lastArgs = lastThis = undefined;
                return result;
            }
            function cancel() {
                if (timerId !== undefined) clearTimeout(timerId);
                lastInvokeTime = 0;
                lastArgs = lastCallTime = lastThis = timerId = undefined;
            }
            function flush() {
                return timerId === undefined ? result : trailingEdge(now());
            }
            function debounced() {
                var time = now(), isInvoking = shouldInvoke(time);
                lastArgs = arguments;
                lastThis = this;
                lastCallTime = time;
                if (isInvoking) {
                    if (timerId === undefined) return leadingEdge(lastCallTime);
                    if (maxing) {
                        // Handle invocations in a tight loop.
                        clearTimeout(timerId);
                        timerId = setTimeout(timerExpired, wait);
                        return invokeFunc(lastCallTime);
                    }
                }
                if (timerId === undefined) timerId = setTimeout(timerExpired, wait);
                return result;
            }
            debounced.cancel = cancel;
            debounced.flush = flush;
            return debounced;
        }
        /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */ var defer = baseRest(function(func, args) {
            return baseDelay(func, 1, args);
        });
        /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */ var delay = baseRest(function(func, wait, args) {
            return baseDelay(func, toNumber(wait) || 0, args);
        });
        /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */ function flip(func) {
            return createWrap(func, WRAP_FLIP_FLAG);
        }
        /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */ function memoize(func, resolver) {
            if (typeof func != "function" || resolver != null && typeof resolver != "function") throw new TypeError(FUNC_ERROR_TEXT);
            var memoized = function() {
                var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
                if (cache.has(key)) return cache.get(key);
                var result = func.apply(this, args);
                memoized.cache = cache.set(key, result) || cache;
                return result;
            };
            memoized.cache = new (memoize.Cache || MapCache);
            return memoized;
        }
        // Expose `MapCache`.
        memoize.Cache = MapCache;
        /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */ function negate(predicate) {
            if (typeof predicate != "function") throw new TypeError(FUNC_ERROR_TEXT);
            return function() {
                var args = arguments;
                switch(args.length){
                    case 0:
                        return !predicate.call(this);
                    case 1:
                        return !predicate.call(this, args[0]);
                    case 2:
                        return !predicate.call(this, args[0], args[1]);
                    case 3:
                        return !predicate.call(this, args[0], args[1], args[2]);
                }
                return !predicate.apply(this, args);
            };
        }
        /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */ function once(func) {
            return before(2, func);
        }
        /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */ var overArgs = castRest(function(func, transforms) {
            transforms = transforms.length == 1 && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
            var funcsLength = transforms.length;
            return baseRest(function(args) {
                var index = -1, length = nativeMin(args.length, funcsLength);
                while(++index < length)args[index] = transforms[index].call(this, args[index]);
                return apply(func, this, args);
            });
        });
        /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */ var partial = baseRest(function(func, partials) {
            var holders = replaceHolders(partials, getHolder(partial));
            return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
        });
        /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */ var partialRight = baseRest(function(func, partials) {
            var holders = replaceHolders(partials, getHolder(partialRight));
            return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
        });
        /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */ var rearg = flatRest(function(func, indexes) {
            return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
        });
        /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */ function rest(func, start) {
            if (typeof func != "function") throw new TypeError(FUNC_ERROR_TEXT);
            start = start === undefined ? start : toInteger(start);
            return baseRest(func, start);
        }
        /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */ function spread(func, start) {
            if (typeof func != "function") throw new TypeError(FUNC_ERROR_TEXT);
            start = start == null ? 0 : nativeMax(toInteger(start), 0);
            return baseRest(function(args) {
                var array = args[start], otherArgs = castSlice(args, 0, start);
                if (array) arrayPush(otherArgs, array);
                return apply(func, this, otherArgs);
            });
        }
        /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */ function throttle(func, wait, options) {
            var leading = true, trailing = true;
            if (typeof func != "function") throw new TypeError(FUNC_ERROR_TEXT);
            if (isObject(options)) {
                leading = "leading" in options ? !!options.leading : leading;
                trailing = "trailing" in options ? !!options.trailing : trailing;
            }
            return debounce(func, wait, {
                "leading": leading,
                "maxWait": wait,
                "trailing": trailing
            });
        }
        /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */ function unary(func) {
            return ary(func, 1);
        }
        /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */ function wrap(value, wrapper) {
            return partial(castFunction(wrapper), value);
        }
        /*------------------------------------------------------------------------*/ /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */ function castArray() {
            if (!arguments.length) return [];
            var value = arguments[0];
            return isArray(value) ? value : [
                value
            ];
        }
        /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */ function clone(value) {
            return baseClone(value, CLONE_SYMBOLS_FLAG);
        }
        /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */ function cloneWith(value, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined;
            return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
        }
        /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */ function cloneDeep(value) {
            return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
        }
        /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */ function cloneDeepWith(value, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined;
            return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
        }
        /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */ function conformsTo(object, source) {
            return source == null || baseConformsTo(object, source, keys(source));
        }
        /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */ function eq(value, other) {
            return value === other || value !== value && other !== other;
        }
        /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */ var gt = createRelationalOperation(baseGt);
        /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */ var gte = createRelationalOperation(function(value, other) {
            return value >= other;
        });
        /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */ var isArguments = baseIsArguments(function() {
            return arguments;
        }()) ? baseIsArguments : function(value) {
            return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
        };
        /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */ var isArray = Array1.isArray;
        /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */ var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
        /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */ function isArrayLike(value) {
            return value != null && isLength(value.length) && !isFunction(value);
        }
        /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */ function isArrayLikeObject(value) {
            return isObjectLike(value) && isArrayLike(value);
        }
        /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */ function isBoolean(value) {
            return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
        }
        /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */ var isBuffer = nativeIsBuffer || stubFalse;
        /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */ var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
        /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */ function isElement(value) {
            return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
        }
        /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */ function isEmpty(value) {
            if (value == null) return true;
            if (isArrayLike(value) && (isArray(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer(value) || isTypedArray(value) || isArguments(value))) return !value.length;
            var tag = getTag(value);
            if (tag == mapTag || tag == setTag) return !value.size;
            if (isPrototype(value)) return !baseKeys(value).length;
            for(var key in value){
                if (hasOwnProperty.call(value, key)) return false;
            }
            return true;
        }
        /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */ function isEqual(value, other) {
            return baseIsEqual(value, other);
        }
        /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */ function isEqualWith(value, other, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined;
            var result = customizer ? customizer(value, other) : undefined;
            return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
        }
        /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */ function isError(value) {
            if (!isObjectLike(value)) return false;
            var tag = baseGetTag(value);
            return tag == errorTag || tag == domExcTag || typeof value.message == "string" && typeof value.name == "string" && !isPlainObject(value);
        }
        /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */ function isFinite(value) {
            return typeof value == "number" && nativeIsFinite(value);
        }
        /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */ function isFunction(value) {
            if (!isObject(value)) return false;
            // The use of `Object#toString` avoids issues with the `typeof` operator
            // in Safari 9 which returns 'object' for typed arrays and other constructors.
            var tag = baseGetTag(value);
            return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
        }
        /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */ function isInteger(value) {
            return typeof value == "number" && value == toInteger(value);
        }
        /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */ function isLength(value) {
            return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
        }
        /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */ function isObject(value) {
            var type = typeof value;
            return value != null && (type == "object" || type == "function");
        }
        /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */ function isObjectLike(value) {
            return value != null && typeof value == "object";
        }
        /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */ var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
        /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */ function isMatch(object, source) {
            return object === source || baseIsMatch(object, source, getMatchData(source));
        }
        /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */ function isMatchWith(object, source, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined;
            return baseIsMatch(object, source, getMatchData(source), customizer);
        }
        /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */ function isNaN(value) {
            // An `NaN` primitive is the only value that is not equal to itself.
            // Perform the `toStringTag` check first to avoid errors with some
            // ActiveX objects in IE.
            return isNumber(value) && value != +value;
        }
        /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */ function isNative(value) {
            if (isMaskable(value)) throw new Error(CORE_ERROR_TEXT);
            return baseIsNative(value);
        }
        /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */ function isNull(value) {
            return value === null;
        }
        /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */ function isNil(value) {
            return value == null;
        }
        /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */ function isNumber(value) {
            return typeof value == "number" || isObjectLike(value) && baseGetTag(value) == numberTag;
        }
        /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */ function isPlainObject(value) {
            if (!isObjectLike(value) || baseGetTag(value) != objectTag) return false;
            var proto = getPrototype(value);
            if (proto === null) return true;
            var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
            return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
        }
        /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */ var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
        /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */ function isSafeInteger(value) {
            return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
        }
        /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */ var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
        /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */ function isString(value) {
            return typeof value == "string" || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
        }
        /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */ function isSymbol(value) {
            return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
        }
        /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */ var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
        /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */ function isUndefined(value) {
            return value === undefined;
        }
        /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */ function isWeakMap(value) {
            return isObjectLike(value) && getTag(value) == weakMapTag;
        }
        /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */ function isWeakSet(value) {
            return isObjectLike(value) && baseGetTag(value) == weakSetTag;
        }
        /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */ var lt = createRelationalOperation(baseLt);
        /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */ var lte = createRelationalOperation(function(value, other) {
            return value <= other;
        });
        /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */ function toArray(value) {
            if (!value) return [];
            if (isArrayLike(value)) return isString(value) ? stringToArray(value) : copyArray(value);
            if (symIterator && value[symIterator]) return iteratorToArray(value[symIterator]());
            var tag = getTag(value), func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;
            return func(value);
        }
        /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */ function toFinite(value) {
            if (!value) return value === 0 ? value : 0;
            value = toNumber(value);
            if (value === INFINITY || value === -INFINITY) {
                var sign = value < 0 ? -1 : 1;
                return sign * MAX_INTEGER;
            }
            return value === value ? value : 0;
        }
        /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */ function toInteger(value) {
            var result = toFinite(value), remainder = result % 1;
            return result === result ? remainder ? result - remainder : result : 0;
        }
        /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */ function toLength(value) {
            return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
        }
        /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */ function toNumber(value) {
            if (typeof value == "number") return value;
            if (isSymbol(value)) return NAN;
            if (isObject(value)) {
                var other = typeof value.valueOf == "function" ? value.valueOf() : value;
                value = isObject(other) ? other + "" : other;
            }
            if (typeof value != "string") return value === 0 ? value : +value;
            value = baseTrim(value);
            var isBinary = reIsBinary.test(value);
            return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
        }
        /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */ function toPlainObject(value) {
            return copyObject(value, keysIn(value));
        }
        /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */ function toSafeInteger(value) {
            return value ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
        }
        /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */ function toString(value) {
            return value == null ? "" : baseToString(value);
        }
        /*------------------------------------------------------------------------*/ /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */ var assign = createAssigner(function(object, source) {
            if (isPrototype(source) || isArrayLike(source)) {
                copyObject(source, keys(source), object);
                return;
            }
            for(var key in source)if (hasOwnProperty.call(source, key)) assignValue(object, key, source[key]);
        });
        /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */ var assignIn = createAssigner(function(object, source) {
            copyObject(source, keysIn(source), object);
        });
        /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */ var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
            copyObject(source, keysIn(source), object, customizer);
        });
        /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */ var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
            copyObject(source, keys(source), object, customizer);
        });
        /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */ var at = flatRest(baseAt);
        /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */ function create(prototype, properties) {
            var result = baseCreate(prototype);
            return properties == null ? result : baseAssign(result, properties);
        }
        /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */ var defaults = baseRest(function(object, sources) {
            object = Object1(object);
            var index = -1;
            var length = sources.length;
            var guard = length > 2 ? sources[2] : undefined;
            if (guard && isIterateeCall(sources[0], sources[1], guard)) length = 1;
            while(++index < length){
                var source = sources[index];
                var props = keysIn(source);
                var propsIndex = -1;
                var propsLength = props.length;
                while(++propsIndex < propsLength){
                    var key = props[propsIndex];
                    var value = object[key];
                    if (value === undefined || eq(value, objectProto[key]) && !hasOwnProperty.call(object, key)) object[key] = source[key];
                }
            }
            return object;
        });
        /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */ var defaultsDeep = baseRest(function(args) {
            args.push(undefined, customDefaultsMerge);
            return apply(mergeWith, undefined, args);
        });
        /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */ function findKey(object, predicate) {
            return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
        }
        /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */ function findLastKey(object, predicate) {
            return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
        }
        /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */ function forIn(object, iteratee) {
            return object == null ? object : baseFor(object, getIteratee(iteratee, 3), keysIn);
        }
        /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */ function forInRight(object, iteratee) {
            return object == null ? object : baseForRight(object, getIteratee(iteratee, 3), keysIn);
        }
        /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */ function forOwn(object, iteratee) {
            return object && baseForOwn(object, getIteratee(iteratee, 3));
        }
        /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */ function forOwnRight(object, iteratee) {
            return object && baseForOwnRight(object, getIteratee(iteratee, 3));
        }
        /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */ function functions(object) {
            return object == null ? [] : baseFunctions(object, keys(object));
        }
        /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */ function functionsIn(object) {
            return object == null ? [] : baseFunctions(object, keysIn(object));
        }
        /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */ function get(object, path, defaultValue) {
            var result = object == null ? undefined : baseGet(object, path);
            return result === undefined ? defaultValue : result;
        }
        /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */ function has(object, path) {
            return object != null && hasPath(object, path, baseHas);
        }
        /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */ function hasIn(object, path) {
            return object != null && hasPath(object, path, baseHasIn);
        }
        /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */ var invert = createInverter(function(result, value, key) {
            if (value != null && typeof value.toString != "function") value = nativeObjectToString.call(value);
            result[value] = key;
        }, constant(identity));
        /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */ var invertBy = createInverter(function(result, value, key) {
            if (value != null && typeof value.toString != "function") value = nativeObjectToString.call(value);
            if (hasOwnProperty.call(result, value)) result[value].push(key);
            else result[value] = [
                key
            ];
        }, getIteratee);
        /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */ var invoke = baseRest(baseInvoke);
        /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */ function keys(object) {
            return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
        }
        /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */ function keysIn(object) {
            return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
        }
        /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */ function mapKeys(object, iteratee) {
            var result = {};
            iteratee = getIteratee(iteratee, 3);
            baseForOwn(object, function(value, key, object) {
                baseAssignValue(result, iteratee(value, key, object), value);
            });
            return result;
        }
        /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */ function mapValues(object, iteratee) {
            var result = {};
            iteratee = getIteratee(iteratee, 3);
            baseForOwn(object, function(value, key, object) {
                baseAssignValue(result, key, iteratee(value, key, object));
            });
            return result;
        }
        /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */ var merge = createAssigner(function(object, source, srcIndex) {
            baseMerge(object, source, srcIndex);
        });
        /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */ var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
            baseMerge(object, source, srcIndex, customizer);
        });
        /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */ var omit = flatRest(function(object, paths) {
            var result = {};
            if (object == null) return result;
            var isDeep = false;
            paths = arrayMap(paths, function(path) {
                path = castPath(path, object);
                isDeep || (isDeep = path.length > 1);
                return path;
            });
            copyObject(object, getAllKeysIn(object), result);
            if (isDeep) result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
            var length = paths.length;
            while(length--)baseUnset(result, paths[length]);
            return result;
        });
        /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */ function omitBy(object, predicate) {
            return pickBy(object, negate(getIteratee(predicate)));
        }
        /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */ var pick = flatRest(function(object, paths) {
            return object == null ? {} : basePick(object, paths);
        });
        /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */ function pickBy(object, predicate) {
            if (object == null) return {};
            var props = arrayMap(getAllKeysIn(object), function(prop) {
                return [
                    prop
                ];
            });
            predicate = getIteratee(predicate);
            return basePickBy(object, props, function(value, path) {
                return predicate(value, path[0]);
            });
        }
        /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */ function result(object, path, defaultValue) {
            path = castPath(path, object);
            var index = -1, length = path.length;
            // Ensure the loop is entered when path is empty.
            if (!length) {
                length = 1;
                object = undefined;
            }
            while(++index < length){
                var value = object == null ? undefined : object[toKey(path[index])];
                if (value === undefined) {
                    index = length;
                    value = defaultValue;
                }
                object = isFunction(value) ? value.call(object) : value;
            }
            return object;
        }
        /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */ function set(object, path, value) {
            return object == null ? object : baseSet(object, path, value);
        }
        /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */ function setWith(object, path, value, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined;
            return object == null ? object : baseSet(object, path, value, customizer);
        }
        /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */ var toPairs = createToPairs(keys);
        /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */ var toPairsIn = createToPairs(keysIn);
        /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */ function transform(object, iteratee, accumulator) {
            var isArr = isArray(object), isArrLike = isArr || isBuffer(object) || isTypedArray(object);
            iteratee = getIteratee(iteratee, 4);
            if (accumulator == null) {
                var Ctor = object && object.constructor;
                if (isArrLike) accumulator = isArr ? new Ctor : [];
                else if (isObject(object)) accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
                else accumulator = {};
            }
            (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
                return iteratee(accumulator, value, index, object);
            });
            return accumulator;
        }
        /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */ function unset(object, path) {
            return object == null ? true : baseUnset(object, path);
        }
        /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */ function update(object, path, updater) {
            return object == null ? object : baseUpdate(object, path, castFunction(updater));
        }
        /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */ function updateWith(object, path, updater, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined;
            return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
        }
        /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */ function values(object) {
            return object == null ? [] : baseValues(object, keys(object));
        }
        /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */ function valuesIn(object) {
            return object == null ? [] : baseValues(object, keysIn(object));
        }
        /*------------------------------------------------------------------------*/ /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */ function clamp(number, lower, upper) {
            if (upper === undefined) {
                upper = lower;
                lower = undefined;
            }
            if (upper !== undefined) {
                upper = toNumber(upper);
                upper = upper === upper ? upper : 0;
            }
            if (lower !== undefined) {
                lower = toNumber(lower);
                lower = lower === lower ? lower : 0;
            }
            return baseClamp(toNumber(number), lower, upper);
        }
        /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */ function inRange(number, start, end) {
            start = toFinite(start);
            if (end === undefined) {
                end = start;
                start = 0;
            } else end = toFinite(end);
            number = toNumber(number);
            return baseInRange(number, start, end);
        }
        /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */ function random(lower, upper, floating) {
            if (floating && typeof floating != "boolean" && isIterateeCall(lower, upper, floating)) upper = floating = undefined;
            if (floating === undefined) {
                if (typeof upper == "boolean") {
                    floating = upper;
                    upper = undefined;
                } else if (typeof lower == "boolean") {
                    floating = lower;
                    lower = undefined;
                }
            }
            if (lower === undefined && upper === undefined) {
                lower = 0;
                upper = 1;
            } else {
                lower = toFinite(lower);
                if (upper === undefined) {
                    upper = lower;
                    lower = 0;
                } else upper = toFinite(upper);
            }
            if (lower > upper) {
                var temp = lower;
                lower = upper;
                upper = temp;
            }
            if (floating || lower % 1 || upper % 1) {
                var rand = nativeRandom();
                return nativeMin(lower + rand * (upper - lower + freeParseFloat("1e-" + ((rand + "").length - 1))), upper);
            }
            return baseRandom(lower, upper);
        }
        /*------------------------------------------------------------------------*/ /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */ var camelCase = createCompounder(function(result, word, index) {
            word = word.toLowerCase();
            return result + (index ? capitalize(word) : word);
        });
        /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */ function capitalize(string) {
            return upperFirst(toString(string).toLowerCase());
        }
        /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */ function deburr(string) {
            string = toString(string);
            return string && string.replace(reLatin, deburrLetter).replace(reComboMark, "");
        }
        /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */ function endsWith(string, target, position) {
            string = toString(string);
            target = baseToString(target);
            var length = string.length;
            position = position === undefined ? length : baseClamp(toInteger(position), 0, length);
            var end = position;
            position -= target.length;
            return position >= 0 && string.slice(position, end) == target;
        }
        /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */ function escape(string) {
            string = toString(string);
            return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
        }
        /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */ function escapeRegExp(string) {
            string = toString(string);
            return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, "\\$&") : string;
        }
        /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */ var kebabCase = createCompounder(function(result, word, index) {
            return result + (index ? "-" : "") + word.toLowerCase();
        });
        /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */ var lowerCase = createCompounder(function(result, word, index) {
            return result + (index ? " " : "") + word.toLowerCase();
        });
        /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */ var lowerFirst = createCaseFirst("toLowerCase");
        /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */ function pad(string, length, chars) {
            string = toString(string);
            length = toInteger(length);
            var strLength = length ? stringSize(string) : 0;
            if (!length || strLength >= length) return string;
            var mid = (length - strLength) / 2;
            return createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars);
        }
        /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */ function padEnd(string, length, chars) {
            string = toString(string);
            length = toInteger(length);
            var strLength = length ? stringSize(string) : 0;
            return length && strLength < length ? string + createPadding(length - strLength, chars) : string;
        }
        /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */ function padStart(string, length, chars) {
            string = toString(string);
            length = toInteger(length);
            var strLength = length ? stringSize(string) : 0;
            return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
        }
        /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */ function parseInt1(string, radix, guard) {
            if (guard || radix == null) radix = 0;
            else if (radix) radix = +radix;
            return nativeParseInt(toString(string).replace(reTrimStart, ""), radix || 0);
        }
        /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */ function repeat(string, n, guard) {
            if (guard ? isIterateeCall(string, n, guard) : n === undefined) n = 1;
            else n = toInteger(n);
            return baseRepeat(toString(string), n);
        }
        /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */ function replace() {
            var args = arguments, string = toString(args[0]);
            return args.length < 3 ? string : string.replace(args[1], args[2]);
        }
        /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */ var snakeCase = createCompounder(function(result, word, index) {
            return result + (index ? "_" : "") + word.toLowerCase();
        });
        /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */ function split(string, separator, limit) {
            if (limit && typeof limit != "number" && isIterateeCall(string, separator, limit)) separator = limit = undefined;
            limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
            if (!limit) return [];
            string = toString(string);
            if (string && (typeof separator == "string" || separator != null && !isRegExp(separator))) {
                separator = baseToString(separator);
                if (!separator && hasUnicode(string)) return castSlice(stringToArray(string), 0, limit);
            }
            return string.split(separator, limit);
        }
        /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */ var startCase = createCompounder(function(result, word, index) {
            return result + (index ? " " : "") + upperFirst(word);
        });
        /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */ function startsWith(string, target, position) {
            string = toString(string);
            position = position == null ? 0 : baseClamp(toInteger(position), 0, string.length);
            target = baseToString(target);
            return string.slice(position, position + target.length) == target;
        }
        /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */ function template(string, options, guard) {
            // Based on John Resig's `tmpl` implementation
            // (http://ejohn.org/blog/javascript-micro-templating/)
            // and Laura Doktorova's doT.js (https://github.com/olado/doT).
            var settings = lodash.templateSettings;
            if (guard && isIterateeCall(string, options, guard)) options = undefined;
            string = toString(string);
            options = assignInWith({}, options, settings, customDefaultsAssignIn);
            var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys(imports), importsValues = baseValues(imports, importsKeys);
            var isEscaping, isEvaluating, index = 0, interpolate = options.interpolate || reNoMatch, source = "__p += '";
            // Compile the regexp to match each delimiter.
            var reDelimiters = RegExp1((options.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$", "g");
            // Use a sourceURL for easier debugging.
            // The sourceURL gets injected into the source that's eval-ed, so be careful
            // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
            // and escape the comment, thus injecting code that gets evaled.
            var sourceURL = "//# sourceURL=" + (hasOwnProperty.call(options, "sourceURL") ? (options.sourceURL + "").replace(/\s/g, " ") : "lodash.templateSources[" + ++templateCounter + "]") + "\n";
            string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
                interpolateValue || (interpolateValue = esTemplateValue);
                // Escape characters that can't be included in string literals.
                source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);
                // Replace delimiters with snippets.
                if (escapeValue) {
                    isEscaping = true;
                    source += "' +\n__e(" + escapeValue + ") +\n'";
                }
                if (evaluateValue) {
                    isEvaluating = true;
                    source += "';\n" + evaluateValue + ";\n__p += '";
                }
                if (interpolateValue) source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
                index = offset + match.length;
                // The JS engine embedded in Adobe products needs `match` returned in
                // order to produce the correct `offset` value.
                return match;
            });
            source += "';\n";
            // If `variable` is not specified wrap a with-statement around the generated
            // code to add the data object to the top of the scope chain.
            var variable = hasOwnProperty.call(options, "variable") && options.variable;
            if (!variable) source = "with (obj) {\n" + source + "\n}\n";
            else if (reForbiddenIdentifierChars.test(variable)) throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
            // Cleanup code by stripping empty strings.
            source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
            // Frame code as the function body.
            source = "function(" + (variable || "obj") + ") {\n" + (variable ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
            var result = attempt(function() {
                return Function1(importsKeys, sourceURL + "return " + source).apply(undefined, importsValues);
            });
            // Provide the compiled function's source by its `toString` method or
            // the `source` property as a convenience for inlining compiled templates.
            result.source = source;
            if (isError(result)) throw result;
            return result;
        }
        /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */ function toLower(value) {
            return toString(value).toLowerCase();
        }
        /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */ function toUpper(value) {
            return toString(value).toUpperCase();
        }
        /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */ function trim(string, chars, guard) {
            string = toString(string);
            if (string && (guard || chars === undefined)) return baseTrim(string);
            if (!string || !(chars = baseToString(chars))) return string;
            var strSymbols = stringToArray(string), chrSymbols = stringToArray(chars), start = charsStartIndex(strSymbols, chrSymbols), end = charsEndIndex(strSymbols, chrSymbols) + 1;
            return castSlice(strSymbols, start, end).join("");
        }
        /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */ function trimEnd(string, chars, guard) {
            string = toString(string);
            if (string && (guard || chars === undefined)) return string.slice(0, trimmedEndIndex(string) + 1);
            if (!string || !(chars = baseToString(chars))) return string;
            var strSymbols = stringToArray(string), end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
            return castSlice(strSymbols, 0, end).join("");
        }
        /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */ function trimStart(string, chars, guard) {
            string = toString(string);
            if (string && (guard || chars === undefined)) return string.replace(reTrimStart, "");
            if (!string || !(chars = baseToString(chars))) return string;
            var strSymbols = stringToArray(string), start = charsStartIndex(strSymbols, stringToArray(chars));
            return castSlice(strSymbols, start).join("");
        }
        /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */ function truncate(string, options) {
            var length = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
            if (isObject(options)) {
                var separator = "separator" in options ? options.separator : separator;
                length = "length" in options ? toInteger(options.length) : length;
                omission = "omission" in options ? baseToString(options.omission) : omission;
            }
            string = toString(string);
            var strLength = string.length;
            if (hasUnicode(string)) {
                var strSymbols = stringToArray(string);
                strLength = strSymbols.length;
            }
            if (length >= strLength) return string;
            var end = length - stringSize(omission);
            if (end < 1) return omission;
            var result = strSymbols ? castSlice(strSymbols, 0, end).join("") : string.slice(0, end);
            if (separator === undefined) return result + omission;
            if (strSymbols) end += result.length - end;
            if (isRegExp(separator)) {
                if (string.slice(end).search(separator)) {
                    var match, substring = result;
                    if (!separator.global) separator = RegExp1(separator.source, toString(reFlags.exec(separator)) + "g");
                    separator.lastIndex = 0;
                    while(match = separator.exec(substring))var newEnd = match.index;
                    result = result.slice(0, newEnd === undefined ? end : newEnd);
                }
            } else if (string.indexOf(baseToString(separator), end) != end) {
                var index = result.lastIndexOf(separator);
                if (index > -1) result = result.slice(0, index);
            }
            return result + omission;
        }
        /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */ function unescape(string) {
            string = toString(string);
            return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
        }
        /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */ var upperCase = createCompounder(function(result, word, index) {
            return result + (index ? " " : "") + word.toUpperCase();
        });
        /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */ var upperFirst = createCaseFirst("toUpperCase");
        /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */ function words(string, pattern, guard) {
            string = toString(string);
            pattern = guard ? undefined : pattern;
            if (pattern === undefined) return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
            return string.match(pattern) || [];
        }
        /*------------------------------------------------------------------------*/ /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */ var attempt = baseRest(function(func, args) {
            try {
                return apply(func, undefined, args);
            } catch (e) {
                return isError(e) ? e : new Error(e);
            }
        });
        /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */ var bindAll = flatRest(function(object, methodNames) {
            arrayEach(methodNames, function(key) {
                key = toKey(key);
                baseAssignValue(object, key, bind(object[key], object));
            });
            return object;
        });
        /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */ function cond(pairs) {
            var length = pairs == null ? 0 : pairs.length, toIteratee = getIteratee();
            pairs = !length ? [] : arrayMap(pairs, function(pair) {
                if (typeof pair[1] != "function") throw new TypeError(FUNC_ERROR_TEXT);
                return [
                    toIteratee(pair[0]),
                    pair[1]
                ];
            });
            return baseRest(function(args) {
                var index = -1;
                while(++index < length){
                    var pair = pairs[index];
                    if (apply(pair[0], this, args)) return apply(pair[1], this, args);
                }
            });
        }
        /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */ function conforms(source) {
            return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
        }
        /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */ function constant(value) {
            return function() {
                return value;
            };
        }
        /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */ function defaultTo(value, defaultValue) {
            return value == null || value !== value ? defaultValue : value;
        }
        /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */ var flow = createFlow();
        /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */ var flowRight = createFlow(true);
        /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */ function identity(value) {
            return value;
        }
        /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */ function iteratee(func) {
            return baseIteratee(typeof func == "function" ? func : baseClone(func, CLONE_DEEP_FLAG));
        }
        /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */ function matches(source) {
            return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
        }
        /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */ function matchesProperty(path, srcValue) {
            return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
        }
        /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */ var method = baseRest(function(path, args) {
            return function(object) {
                return baseInvoke(object, path, args);
            };
        });
        /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */ var methodOf = baseRest(function(object, args) {
            return function(path) {
                return baseInvoke(object, path, args);
            };
        });
        /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */ function mixin(object, source, options) {
            var props = keys(source), methodNames = baseFunctions(source, props);
            if (options == null && !(isObject(source) && (methodNames.length || !props.length))) {
                options = source;
                source = object;
                object = this;
                methodNames = baseFunctions(source, keys(source));
            }
            var chain = !(isObject(options) && "chain" in options) || !!options.chain, isFunc = isFunction(object);
            arrayEach(methodNames, function(methodName) {
                var func = source[methodName];
                object[methodName] = func;
                if (isFunc) object.prototype[methodName] = function() {
                    var chainAll = this.__chain__;
                    if (chain || chainAll) {
                        var result = object(this.__wrapped__), actions = result.__actions__ = copyArray(this.__actions__);
                        actions.push({
                            "func": func,
                            "args": arguments,
                            "thisArg": object
                        });
                        result.__chain__ = chainAll;
                        return result;
                    }
                    return func.apply(object, arrayPush([
                        this.value()
                    ], arguments));
                };
            });
            return object;
        }
        /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */ function noConflict() {
            if (root._ === this) root._ = oldDash;
            return this;
        }
        /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */ function noop() {
        // No operation performed.
        }
        /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */ function nthArg(n) {
            n = toInteger(n);
            return baseRest(function(args) {
                return baseNth(args, n);
            });
        }
        /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */ var over = createOver(arrayMap);
        /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */ var overEvery = createOver(arrayEvery);
        /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     *
     * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
     * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
     */ var overSome = createOver(arraySome);
        /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */ function property(path) {
            return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
        }
        /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */ function propertyOf(object) {
            return function(path) {
                return object == null ? undefined : baseGet(object, path);
            };
        }
        /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */ var range = createRange();
        /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */ var rangeRight = createRange(true);
        /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */ function stubArray() {
            return [];
        }
        /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */ function stubFalse() {
            return false;
        }
        /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */ function stubObject() {
            return {};
        }
        /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */ function stubString() {
            return "";
        }
        /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */ function stubTrue() {
            return true;
        }
        /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */ function times(n, iteratee) {
            n = toInteger(n);
            if (n < 1 || n > MAX_SAFE_INTEGER) return [];
            var index = MAX_ARRAY_LENGTH, length = nativeMin(n, MAX_ARRAY_LENGTH);
            iteratee = getIteratee(iteratee);
            n -= MAX_ARRAY_LENGTH;
            var result = baseTimes(length, iteratee);
            while(++index < n)iteratee(index);
            return result;
        }
        /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */ function toPath(value) {
            if (isArray(value)) return arrayMap(value, toKey);
            return isSymbol(value) ? [
                value
            ] : copyArray(stringToPath(toString(value)));
        }
        /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */ function uniqueId(prefix) {
            var id = ++idCounter;
            return toString(prefix) + id;
        }
        /*------------------------------------------------------------------------*/ /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */ var add = createMathOperation(function(augend, addend) {
            return augend + addend;
        }, 0);
        /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */ var ceil = createRound("ceil");
        /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */ var divide = createMathOperation(function(dividend, divisor) {
            return dividend / divisor;
        }, 1);
        /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */ var floor = createRound("floor");
        /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */ function max(array) {
            return array && array.length ? baseExtremum(array, identity, baseGt) : undefined;
        }
        /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */ function maxBy(array, iteratee) {
            return array && array.length ? baseExtremum(array, getIteratee(iteratee, 2), baseGt) : undefined;
        }
        /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */ function mean(array) {
            return baseMean(array, identity);
        }
        /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */ function meanBy(array, iteratee) {
            return baseMean(array, getIteratee(iteratee, 2));
        }
        /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */ function min(array) {
            return array && array.length ? baseExtremum(array, identity, baseLt) : undefined;
        }
        /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */ function minBy(array, iteratee) {
            return array && array.length ? baseExtremum(array, getIteratee(iteratee, 2), baseLt) : undefined;
        }
        /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */ var multiply = createMathOperation(function(multiplier, multiplicand) {
            return multiplier * multiplicand;
        }, 1);
        /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */ var round = createRound("round");
        /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */ var subtract = createMathOperation(function(minuend, subtrahend) {
            return minuend - subtrahend;
        }, 0);
        /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */ function sum(array) {
            return array && array.length ? baseSum(array, identity) : 0;
        }
        /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */ function sumBy(array, iteratee) {
            return array && array.length ? baseSum(array, getIteratee(iteratee, 2)) : 0;
        }
        /*------------------------------------------------------------------------*/ // Add methods that return wrapped values in chain sequences.
        lodash.after = after;
        lodash.ary = ary;
        lodash.assign = assign;
        lodash.assignIn = assignIn;
        lodash.assignInWith = assignInWith;
        lodash.assignWith = assignWith;
        lodash.at = at;
        lodash.before = before;
        lodash.bind = bind;
        lodash.bindAll = bindAll;
        lodash.bindKey = bindKey;
        lodash.castArray = castArray;
        lodash.chain = chain;
        lodash.chunk = chunk;
        lodash.compact = compact;
        lodash.concat = concat;
        lodash.cond = cond;
        lodash.conforms = conforms;
        lodash.constant = constant;
        lodash.countBy = countBy;
        lodash.create = create;
        lodash.curry = curry;
        lodash.curryRight = curryRight;
        lodash.debounce = debounce;
        lodash.defaults = defaults;
        lodash.defaultsDeep = defaultsDeep;
        lodash.defer = defer;
        lodash.delay = delay;
        lodash.difference = difference;
        lodash.differenceBy = differenceBy;
        lodash.differenceWith = differenceWith;
        lodash.drop = drop;
        lodash.dropRight = dropRight;
        lodash.dropRightWhile = dropRightWhile;
        lodash.dropWhile = dropWhile;
        lodash.fill = fill;
        lodash.filter = filter;
        lodash.flatMap = flatMap;
        lodash.flatMapDeep = flatMapDeep;
        lodash.flatMapDepth = flatMapDepth;
        lodash.flatten = flatten;
        lodash.flattenDeep = flattenDeep;
        lodash.flattenDepth = flattenDepth;
        lodash.flip = flip;
        lodash.flow = flow;
        lodash.flowRight = flowRight;
        lodash.fromPairs = fromPairs;
        lodash.functions = functions;
        lodash.functionsIn = functionsIn;
        lodash.groupBy = groupBy;
        lodash.initial = initial;
        lodash.intersection = intersection;
        lodash.intersectionBy = intersectionBy;
        lodash.intersectionWith = intersectionWith;
        lodash.invert = invert;
        lodash.invertBy = invertBy;
        lodash.invokeMap = invokeMap;
        lodash.iteratee = iteratee;
        lodash.keyBy = keyBy;
        lodash.keys = keys;
        lodash.keysIn = keysIn;
        lodash.map = map;
        lodash.mapKeys = mapKeys;
        lodash.mapValues = mapValues;
        lodash.matches = matches;
        lodash.matchesProperty = matchesProperty;
        lodash.memoize = memoize;
        lodash.merge = merge;
        lodash.mergeWith = mergeWith;
        lodash.method = method;
        lodash.methodOf = methodOf;
        lodash.mixin = mixin;
        lodash.negate = negate;
        lodash.nthArg = nthArg;
        lodash.omit = omit;
        lodash.omitBy = omitBy;
        lodash.once = once;
        lodash.orderBy = orderBy;
        lodash.over = over;
        lodash.overArgs = overArgs;
        lodash.overEvery = overEvery;
        lodash.overSome = overSome;
        lodash.partial = partial;
        lodash.partialRight = partialRight;
        lodash.partition = partition;
        lodash.pick = pick;
        lodash.pickBy = pickBy;
        lodash.property = property;
        lodash.propertyOf = propertyOf;
        lodash.pull = pull;
        lodash.pullAll = pullAll;
        lodash.pullAllBy = pullAllBy;
        lodash.pullAllWith = pullAllWith;
        lodash.pullAt = pullAt;
        lodash.range = range;
        lodash.rangeRight = rangeRight;
        lodash.rearg = rearg;
        lodash.reject = reject;
        lodash.remove = remove;
        lodash.rest = rest;
        lodash.reverse = reverse;
        lodash.sampleSize = sampleSize;
        lodash.set = set;
        lodash.setWith = setWith;
        lodash.shuffle = shuffle;
        lodash.slice = slice;
        lodash.sortBy = sortBy;
        lodash.sortedUniq = sortedUniq;
        lodash.sortedUniqBy = sortedUniqBy;
        lodash.split = split;
        lodash.spread = spread;
        lodash.tail = tail;
        lodash.take = take;
        lodash.takeRight = takeRight;
        lodash.takeRightWhile = takeRightWhile;
        lodash.takeWhile = takeWhile;
        lodash.tap = tap;
        lodash.throttle = throttle;
        lodash.thru = thru;
        lodash.toArray = toArray;
        lodash.toPairs = toPairs;
        lodash.toPairsIn = toPairsIn;
        lodash.toPath = toPath;
        lodash.toPlainObject = toPlainObject;
        lodash.transform = transform;
        lodash.unary = unary;
        lodash.union = union;
        lodash.unionBy = unionBy;
        lodash.unionWith = unionWith;
        lodash.uniq = uniq;
        lodash.uniqBy = uniqBy;
        lodash.uniqWith = uniqWith;
        lodash.unset = unset;
        lodash.unzip = unzip;
        lodash.unzipWith = unzipWith;
        lodash.update = update;
        lodash.updateWith = updateWith;
        lodash.values = values;
        lodash.valuesIn = valuesIn;
        lodash.without = without;
        lodash.words = words;
        lodash.wrap = wrap;
        lodash.xor = xor;
        lodash.xorBy = xorBy;
        lodash.xorWith = xorWith;
        lodash.zip = zip;
        lodash.zipObject = zipObject;
        lodash.zipObjectDeep = zipObjectDeep;
        lodash.zipWith = zipWith;
        // Add aliases.
        lodash.entries = toPairs;
        lodash.entriesIn = toPairsIn;
        lodash.extend = assignIn;
        lodash.extendWith = assignInWith;
        // Add methods to `lodash.prototype`.
        mixin(lodash, lodash);
        /*------------------------------------------------------------------------*/ // Add methods that return unwrapped values in chain sequences.
        lodash.add = add;
        lodash.attempt = attempt;
        lodash.camelCase = camelCase;
        lodash.capitalize = capitalize;
        lodash.ceil = ceil;
        lodash.clamp = clamp;
        lodash.clone = clone;
        lodash.cloneDeep = cloneDeep;
        lodash.cloneDeepWith = cloneDeepWith;
        lodash.cloneWith = cloneWith;
        lodash.conformsTo = conformsTo;
        lodash.deburr = deburr;
        lodash.defaultTo = defaultTo;
        lodash.divide = divide;
        lodash.endsWith = endsWith;
        lodash.eq = eq;
        lodash.escape = escape;
        lodash.escapeRegExp = escapeRegExp;
        lodash.every = every;
        lodash.find = find;
        lodash.findIndex = findIndex;
        lodash.findKey = findKey;
        lodash.findLast = findLast;
        lodash.findLastIndex = findLastIndex;
        lodash.findLastKey = findLastKey;
        lodash.floor = floor;
        lodash.forEach = forEach;
        lodash.forEachRight = forEachRight;
        lodash.forIn = forIn;
        lodash.forInRight = forInRight;
        lodash.forOwn = forOwn;
        lodash.forOwnRight = forOwnRight;
        lodash.get = get;
        lodash.gt = gt;
        lodash.gte = gte;
        lodash.has = has;
        lodash.hasIn = hasIn;
        lodash.head = head;
        lodash.identity = identity;
        lodash.includes = includes;
        lodash.indexOf = indexOf;
        lodash.inRange = inRange;
        lodash.invoke = invoke;
        lodash.isArguments = isArguments;
        lodash.isArray = isArray;
        lodash.isArrayBuffer = isArrayBuffer;
        lodash.isArrayLike = isArrayLike;
        lodash.isArrayLikeObject = isArrayLikeObject;
        lodash.isBoolean = isBoolean;
        lodash.isBuffer = isBuffer;
        lodash.isDate = isDate;
        lodash.isElement = isElement;
        lodash.isEmpty = isEmpty;
        lodash.isEqual = isEqual;
        lodash.isEqualWith = isEqualWith;
        lodash.isError = isError;
        lodash.isFinite = isFinite;
        lodash.isFunction = isFunction;
        lodash.isInteger = isInteger;
        lodash.isLength = isLength;
        lodash.isMap = isMap;
        lodash.isMatch = isMatch;
        lodash.isMatchWith = isMatchWith;
        lodash.isNaN = isNaN;
        lodash.isNative = isNative;
        lodash.isNil = isNil;
        lodash.isNull = isNull;
        lodash.isNumber = isNumber;
        lodash.isObject = isObject;
        lodash.isObjectLike = isObjectLike;
        lodash.isPlainObject = isPlainObject;
        lodash.isRegExp = isRegExp;
        lodash.isSafeInteger = isSafeInteger;
        lodash.isSet = isSet;
        lodash.isString = isString;
        lodash.isSymbol = isSymbol;
        lodash.isTypedArray = isTypedArray;
        lodash.isUndefined = isUndefined;
        lodash.isWeakMap = isWeakMap;
        lodash.isWeakSet = isWeakSet;
        lodash.join = join;
        lodash.kebabCase = kebabCase;
        lodash.last = last;
        lodash.lastIndexOf = lastIndexOf;
        lodash.lowerCase = lowerCase;
        lodash.lowerFirst = lowerFirst;
        lodash.lt = lt;
        lodash.lte = lte;
        lodash.max = max;
        lodash.maxBy = maxBy;
        lodash.mean = mean;
        lodash.meanBy = meanBy;
        lodash.min = min;
        lodash.minBy = minBy;
        lodash.stubArray = stubArray;
        lodash.stubFalse = stubFalse;
        lodash.stubObject = stubObject;
        lodash.stubString = stubString;
        lodash.stubTrue = stubTrue;
        lodash.multiply = multiply;
        lodash.nth = nth;
        lodash.noConflict = noConflict;
        lodash.noop = noop;
        lodash.now = now;
        lodash.pad = pad;
        lodash.padEnd = padEnd;
        lodash.padStart = padStart;
        lodash.parseInt = parseInt1;
        lodash.random = random;
        lodash.reduce = reduce;
        lodash.reduceRight = reduceRight;
        lodash.repeat = repeat;
        lodash.replace = replace;
        lodash.result = result;
        lodash.round = round;
        lodash.runInContext = runInContext;
        lodash.sample = sample;
        lodash.size = size;
        lodash.snakeCase = snakeCase;
        lodash.some = some;
        lodash.sortedIndex = sortedIndex;
        lodash.sortedIndexBy = sortedIndexBy;
        lodash.sortedIndexOf = sortedIndexOf;
        lodash.sortedLastIndex = sortedLastIndex;
        lodash.sortedLastIndexBy = sortedLastIndexBy;
        lodash.sortedLastIndexOf = sortedLastIndexOf;
        lodash.startCase = startCase;
        lodash.startsWith = startsWith;
        lodash.subtract = subtract;
        lodash.sum = sum;
        lodash.sumBy = sumBy;
        lodash.template = template;
        lodash.times = times;
        lodash.toFinite = toFinite;
        lodash.toInteger = toInteger;
        lodash.toLength = toLength;
        lodash.toLower = toLower;
        lodash.toNumber = toNumber;
        lodash.toSafeInteger = toSafeInteger;
        lodash.toString = toString;
        lodash.toUpper = toUpper;
        lodash.trim = trim;
        lodash.trimEnd = trimEnd;
        lodash.trimStart = trimStart;
        lodash.truncate = truncate;
        lodash.unescape = unescape;
        lodash.uniqueId = uniqueId;
        lodash.upperCase = upperCase;
        lodash.upperFirst = upperFirst;
        // Add aliases.
        lodash.each = forEach;
        lodash.eachRight = forEachRight;
        lodash.first = head;
        mixin(lodash, function() {
            var source = {};
            baseForOwn(lodash, function(func, methodName) {
                if (!hasOwnProperty.call(lodash.prototype, methodName)) source[methodName] = func;
            });
            return source;
        }(), {
            "chain": false
        });
        /*------------------------------------------------------------------------*/ /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */ lodash.VERSION = VERSION;
        // Assign default placeholders.
        arrayEach([
            "bind",
            "bindKey",
            "curry",
            "curryRight",
            "partial",
            "partialRight"
        ], function(methodName) {
            lodash[methodName].placeholder = lodash;
        });
        // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
        arrayEach([
            "drop",
            "take"
        ], function(methodName, index) {
            LazyWrapper.prototype[methodName] = function(n) {
                n = n === undefined ? 1 : nativeMax(toInteger(n), 0);
                var result = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();
                if (result.__filtered__) result.__takeCount__ = nativeMin(n, result.__takeCount__);
                else result.__views__.push({
                    "size": nativeMin(n, MAX_ARRAY_LENGTH),
                    "type": methodName + (result.__dir__ < 0 ? "Right" : "")
                });
                return result;
            };
            LazyWrapper.prototype[methodName + "Right"] = function(n) {
                return this.reverse()[methodName](n).reverse();
            };
        });
        // Add `LazyWrapper` methods that accept an `iteratee` value.
        arrayEach([
            "filter",
            "map",
            "takeWhile"
        ], function(methodName, index) {
            var type = index + 1, isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
            LazyWrapper.prototype[methodName] = function(iteratee) {
                var result = this.clone();
                result.__iteratees__.push({
                    "iteratee": getIteratee(iteratee, 3),
                    "type": type
                });
                result.__filtered__ = result.__filtered__ || isFilter;
                return result;
            };
        });
        // Add `LazyWrapper` methods for `_.head` and `_.last`.
        arrayEach([
            "head",
            "last"
        ], function(methodName, index) {
            var takeName = "take" + (index ? "Right" : "");
            LazyWrapper.prototype[methodName] = function() {
                return this[takeName](1).value()[0];
            };
        });
        // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
        arrayEach([
            "initial",
            "tail"
        ], function(methodName, index) {
            var dropName = "drop" + (index ? "" : "Right");
            LazyWrapper.prototype[methodName] = function() {
                return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
            };
        });
        LazyWrapper.prototype.compact = function() {
            return this.filter(identity);
        };
        LazyWrapper.prototype.find = function(predicate) {
            return this.filter(predicate).head();
        };
        LazyWrapper.prototype.findLast = function(predicate) {
            return this.reverse().find(predicate);
        };
        LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
            if (typeof path == "function") return new LazyWrapper(this);
            return this.map(function(value) {
                return baseInvoke(value, path, args);
            });
        });
        LazyWrapper.prototype.reject = function(predicate) {
            return this.filter(negate(getIteratee(predicate)));
        };
        LazyWrapper.prototype.slice = function(start, end) {
            start = toInteger(start);
            var result = this;
            if (result.__filtered__ && (start > 0 || end < 0)) return new LazyWrapper(result);
            if (start < 0) result = result.takeRight(-start);
            else if (start) result = result.drop(start);
            if (end !== undefined) {
                end = toInteger(end);
                result = end < 0 ? result.dropRight(-end) : result.take(end - start);
            }
            return result;
        };
        LazyWrapper.prototype.takeRightWhile = function(predicate) {
            return this.reverse().takeWhile(predicate).reverse();
        };
        LazyWrapper.prototype.toArray = function() {
            return this.take(MAX_ARRAY_LENGTH);
        };
        // Add `LazyWrapper` methods to `lodash.prototype`.
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
            var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = lodash[isTaker ? "take" + (methodName == "last" ? "Right" : "") : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
            if (!lodashFunc) return;
            lodash.prototype[methodName] = function() {
                var value = this.__wrapped__, args = isTaker ? [
                    1
                ] : arguments, isLazy = value instanceof LazyWrapper, iteratee = args[0], useLazy = isLazy || isArray(value);
                var interceptor = function(value) {
                    var result = lodashFunc.apply(lodash, arrayPush([
                        value
                    ], args));
                    return isTaker && chainAll ? result[0] : result;
                };
                if (useLazy && checkIteratee && typeof iteratee == "function" && iteratee.length != 1) // Avoid lazy use if the iteratee has a "length" value other than `1`.
                isLazy = useLazy = false;
                var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
                if (!retUnwrapped && useLazy) {
                    value = onlyLazy ? value : new LazyWrapper(this);
                    var result = func.apply(value, args);
                    result.__actions__.push({
                        "func": thru,
                        "args": [
                            interceptor
                        ],
                        "thisArg": undefined
                    });
                    return new LodashWrapper(result, chainAll);
                }
                if (isUnwrapped && onlyLazy) return func.apply(this, args);
                result = this.thru(interceptor);
                return isUnwrapped ? isTaker ? result.value()[0] : result.value() : result;
            };
        });
        // Add `Array` methods to `lodash.prototype`.
        arrayEach([
            "pop",
            "push",
            "shift",
            "sort",
            "splice",
            "unshift"
        ], function(methodName) {
            var func = arrayProto[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? "tap" : "thru", retUnwrapped = /^(?:pop|shift)$/.test(methodName);
            lodash.prototype[methodName] = function() {
                var args = arguments;
                if (retUnwrapped && !this.__chain__) {
                    var value = this.value();
                    return func.apply(isArray(value) ? value : [], args);
                }
                return this[chainName](function(value) {
                    return func.apply(isArray(value) ? value : [], args);
                });
            };
        });
        // Map minified method names to their real names.
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
            var lodashFunc = lodash[methodName];
            if (lodashFunc) {
                var key = lodashFunc.name + "";
                if (!hasOwnProperty.call(realNames, key)) realNames[key] = [];
                realNames[key].push({
                    "name": methodName,
                    "func": lodashFunc
                });
            }
        });
        realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [
            {
                "name": "wrapper",
                "func": undefined
            }
        ];
        // Add methods to `LazyWrapper`.
        LazyWrapper.prototype.clone = lazyClone;
        LazyWrapper.prototype.reverse = lazyReverse;
        LazyWrapper.prototype.value = lazyValue;
        // Add chain sequence methods to the `lodash` wrapper.
        lodash.prototype.at = wrapperAt;
        lodash.prototype.chain = wrapperChain;
        lodash.prototype.commit = wrapperCommit;
        lodash.prototype.next = wrapperNext;
        lodash.prototype.plant = wrapperPlant;
        lodash.prototype.reverse = wrapperReverse;
        lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
        // Add lazy aliases.
        lodash.prototype.first = lodash.prototype.head;
        if (symIterator) lodash.prototype[symIterator] = wrapperToIterator;
        return lodash;
    };
    /*--------------------------------------------------------------------------*/ // Export lodash.
    var _ = runInContext();
    // Some AMD build optimizers, like r.js, check for condition patterns like:
    if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
        // Expose Lodash on the global object to prevent errors when Lodash is
        // loaded by a script tag in the presence of an AMD loader.
        // See http://requirejs.org/docs/errors.html#mismatch for more details.
        // Use `_.noConflict` to remove Lodash from the global object.
        root._ = _;
        // Define as an anonymous module so, through path mapping, it can be
        // referenced as the "underscore" module.
        define(function() {
            return _;
        });
    } else if (freeModule) {
        // Export for Node.js.
        (freeModule.exports = _)._ = _;
        // Export for CommonJS support.
        freeExports._ = _;
    } else // Export to the global object.
    root._ = _;
}).call(this);

},{}],"lkzyF":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.shake256 = exports.shake128 = exports.keccak_512 = exports.keccak_384 = exports.keccak_256 = exports.keccak_224 = exports.sha3_512 = exports.sha3_384 = exports.sha3_256 = exports.sha3_224 = exports.Keccak = exports.keccakP = void 0;
const _assert_js_1 = require("14db7b8ea2b5bceb");
const _u64_js_1 = require("45e8a44e40fd6b7f");
const utils_js_1 = require("5a04751f3e786b49");
// Various per round constants calculations
const [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [
    [],
    [],
    []
];
const _0n = BigInt(0);
const _1n = BigInt(1);
const _2n = BigInt(2);
const _7n = BigInt(7);
const _256n = BigInt(256);
const _0x71n = BigInt(0x71);
for(let round = 0, R = _1n, x = 1, y = 0; round < 24; round++){
    // Pi
    [x, y] = [
        y,
        (2 * x + 3 * y) % 5
    ];
    SHA3_PI.push(2 * (5 * y + x));
    // Rotational
    SHA3_ROTL.push((round + 1) * (round + 2) / 2 % 64);
    // Iota
    let t = _0n;
    for(let j = 0; j < 7; j++){
        R = (R << _1n ^ (R >> _7n) * _0x71n) % _256n;
        if (R & _2n) t ^= _1n << (_1n << BigInt(j)) - _1n;
    }
    _SHA3_IOTA.push(t);
}
const [SHA3_IOTA_H, SHA3_IOTA_L] = _u64_js_1.default.split(_SHA3_IOTA, true);
// Left rotation (without 0, 32, 64)
const rotlH = (h, l, s)=>s > 32 ? _u64_js_1.default.rotlBH(h, l, s) : _u64_js_1.default.rotlSH(h, l, s);
const rotlL = (h, l, s)=>s > 32 ? _u64_js_1.default.rotlBL(h, l, s) : _u64_js_1.default.rotlSL(h, l, s);
// Same as keccakf1600, but allows to skip some rounds
function keccakP(s, rounds = 24) {
    const B = new Uint32Array(10);
    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)
    for(let round = 24 - rounds; round < 24; round++){
        // Theta θ
        for(let x = 0; x < 10; x++)B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];
        for(let x = 0; x < 10; x += 2){
            const idx1 = (x + 8) % 10;
            const idx0 = (x + 2) % 10;
            const B0 = B[idx0];
            const B1 = B[idx0 + 1];
            const Th = rotlH(B0, B1, 1) ^ B[idx1];
            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];
            for(let y = 0; y < 50; y += 10){
                s[x + y] ^= Th;
                s[x + y + 1] ^= Tl;
            }
        }
        // Rho (ρ) and Pi (π)
        let curH = s[2];
        let curL = s[3];
        for(let t = 0; t < 24; t++){
            const shift = SHA3_ROTL[t];
            const Th = rotlH(curH, curL, shift);
            const Tl = rotlL(curH, curL, shift);
            const PI = SHA3_PI[t];
            curH = s[PI];
            curL = s[PI + 1];
            s[PI] = Th;
            s[PI + 1] = Tl;
        }
        // Chi (χ)
        for(let y = 0; y < 50; y += 10){
            for(let x = 0; x < 10; x++)B[x] = s[y + x];
            for(let x = 0; x < 10; x++)s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];
        }
        // Iota (ι)
        s[0] ^= SHA3_IOTA_H[round];
        s[1] ^= SHA3_IOTA_L[round];
    }
    B.fill(0);
}
exports.keccakP = keccakP;
class Keccak extends utils_js_1.Hash {
    // NOTE: we accept arguments in bytes instead of bits here.
    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24){
        super();
        this.blockLen = blockLen;
        this.suffix = suffix;
        this.outputLen = outputLen;
        this.enableXOF = enableXOF;
        this.rounds = rounds;
        this.pos = 0;
        this.posOut = 0;
        this.finished = false;
        this.destroyed = false;
        // Can be passed from user as dkLen
        _assert_js_1.default.number(outputLen);
        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes
        if (0 >= this.blockLen || this.blockLen >= 200) throw new Error("Sha3 supports only keccak-f1600 function");
        this.state = new Uint8Array(200);
        this.state32 = (0, utils_js_1.u32)(this.state);
    }
    keccak() {
        keccakP(this.state32, this.rounds);
        this.posOut = 0;
        this.pos = 0;
    }
    update(data) {
        _assert_js_1.default.exists(this);
        const { blockLen, state } = this;
        data = (0, utils_js_1.toBytes)(data);
        const len = data.length;
        for(let pos = 0; pos < len;){
            const take = Math.min(blockLen - this.pos, len - pos);
            for(let i = 0; i < take; i++)state[this.pos++] ^= data[pos++];
            if (this.pos === blockLen) this.keccak();
        }
        return this;
    }
    finish() {
        if (this.finished) return;
        this.finished = true;
        const { state, suffix, pos, blockLen } = this;
        // Do the padding
        state[pos] ^= suffix;
        if ((suffix & 0x80) !== 0 && pos === blockLen - 1) this.keccak();
        state[blockLen - 1] ^= 0x80;
        this.keccak();
    }
    writeInto(out) {
        _assert_js_1.default.exists(this, false);
        _assert_js_1.default.bytes(out);
        this.finish();
        const bufferOut = this.state;
        const { blockLen } = this;
        for(let pos = 0, len = out.length; pos < len;){
            if (this.posOut >= blockLen) this.keccak();
            const take = Math.min(blockLen - this.posOut, len - pos);
            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);
            this.posOut += take;
            pos += take;
        }
        return out;
    }
    xofInto(out) {
        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF
        if (!this.enableXOF) throw new Error("XOF is not possible for this instance");
        return this.writeInto(out);
    }
    xof(bytes) {
        _assert_js_1.default.number(bytes);
        return this.xofInto(new Uint8Array(bytes));
    }
    digestInto(out) {
        _assert_js_1.default.output(out, this);
        if (this.finished) throw new Error("digest() was already called");
        this.writeInto(out);
        this.destroy();
        return out;
    }
    digest() {
        return this.digestInto(new Uint8Array(this.outputLen));
    }
    destroy() {
        this.destroyed = true;
        this.state.fill(0);
    }
    _cloneInto(to) {
        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));
        to.state32.set(this.state32);
        to.pos = this.pos;
        to.posOut = this.posOut;
        to.finished = this.finished;
        to.rounds = rounds;
        // Suffix can change in cSHAKE
        to.suffix = suffix;
        to.outputLen = outputLen;
        to.enableXOF = enableXOF;
        to.destroyed = this.destroyed;
        return to;
    }
}
exports.Keccak = Keccak;
const gen = (suffix, blockLen, outputLen)=>(0, utils_js_1.wrapConstructor)(()=>new Keccak(blockLen, suffix, outputLen));
exports.sha3_224 = gen(0x06, 144, 28);
/**
 * SHA3-256 hash function
 * @param message - that would be hashed
 */ exports.sha3_256 = gen(0x06, 136, 32);
exports.sha3_384 = gen(0x06, 104, 48);
exports.sha3_512 = gen(0x06, 72, 64);
exports.keccak_224 = gen(0x01, 144, 28);
/**
 * keccak-256 hash function. Different from SHA3-256.
 * @param message - that would be hashed
 */ exports.keccak_256 = gen(0x01, 136, 32);
exports.keccak_384 = gen(0x01, 104, 48);
exports.keccak_512 = gen(0x01, 72, 64);
const genShake = (suffix, blockLen, outputLen)=>(0, utils_js_1.wrapXOFConstructorWithOpts)((opts = {})=>new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));
exports.shake128 = genShake(0x1f, 168, 16);
exports.shake256 = genShake(0x1f, 136, 32);

},{"14db7b8ea2b5bceb":"3TVXa","45e8a44e40fd6b7f":"26uEn","5a04751f3e786b49":"1jA8a"}],"f6K5D":[function(require,module,exports) {
var Buffer = require("f8912e9ef099b050").Buffer;
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.decodeSeed = exports.deriveNodeAddress = exports.deriveAddress = exports.verify = exports.sign = exports.deriveKeypair = exports.generateSeed = void 0;
const assert = __importStar(require("9373fd8e16b3934f"));
const brorand = require("ddce0cb2be09d995");
const hashjs = __importStar(require("bb124c6e0d4b10"));
const elliptic = __importStar(require("3be93144c8c8bbee"));
const addressCodec = __importStar(require("35a6259c9a03013a"));
const secp256k1_1 = require("d4623bd4a9a98984");
const utils = __importStar(require("5f422e7821c1313c"));
const Ed25519 = elliptic.eddsa("ed25519");
const Secp256k1 = elliptic.ec("secp256k1");
const { hexToBytes } = utils;
const { bytesToHex } = utils;
function generateSeed(options = {}) {
    assert.ok(!options.entropy || options.entropy.length >= 16, "entropy too short");
    const entropy = options.entropy ? options.entropy.slice(0, 16) : brorand(16);
    const type = options.algorithm === "ed25519" ? "ed25519" : "secp256k1";
    return addressCodec.encodeSeed(Buffer.from(entropy), type);
}
exports.generateSeed = generateSeed;
function hash(message) {
    return hashjs.sha512().update(message).digest().slice(0, 32);
}
const secp256k1 = {
    deriveKeypair (entropy, options) {
        const prefix = "00";
        const privateKey = prefix + (0, secp256k1_1.derivePrivateKey)(entropy, options).toString(16, 64).toUpperCase();
        const publicKey = bytesToHex(Secp256k1.keyFromPrivate(privateKey.slice(2)).getPublic().encodeCompressed());
        return {
            privateKey,
            publicKey
        };
    },
    sign (message, privateKey) {
        return bytesToHex(Secp256k1.sign(hash(message), hexToBytes(privateKey), {
            canonical: true
        }).toDER());
    },
    verify (message, signature, publicKey) {
        return Secp256k1.verify(hash(message), signature, hexToBytes(publicKey));
    }
};
const ed25519 = {
    deriveKeypair (entropy) {
        const prefix = "ED";
        const rawPrivateKey = hash(entropy);
        const privateKey = prefix + bytesToHex(rawPrivateKey);
        const publicKey = prefix + bytesToHex(Ed25519.keyFromSecret(rawPrivateKey).pubBytes());
        return {
            privateKey,
            publicKey
        };
    },
    sign (message, privateKey) {
        // caution: Ed25519.sign interprets all strings as hex, stripping
        // any non-hex characters without warning
        assert.ok(Array.isArray(message), "message must be array of octets");
        return bytesToHex(Ed25519.sign(message, hexToBytes(privateKey).slice(1)).toBytes());
    },
    verify (message, signature, publicKey) {
        return Ed25519.verify(message, hexToBytes(signature), hexToBytes(publicKey).slice(1));
    }
};
function select(algorithm) {
    const methods = {
        "ecdsa-secp256k1": secp256k1,
        ed25519
    };
    return methods[algorithm];
}
function deriveKeypair(seed, options) {
    const decoded = addressCodec.decodeSeed(seed);
    const algorithm = decoded.type === "ed25519" ? "ed25519" : "ecdsa-secp256k1";
    const method = select(algorithm);
    const keypair = method.deriveKeypair(decoded.bytes, options);
    const messageToVerify = hash("This test message should verify.");
    const signature = method.sign(messageToVerify, keypair.privateKey);
    /* istanbul ignore if */ if (method.verify(messageToVerify, signature, keypair.publicKey) !== true) throw new Error("derived keypair did not generate verifiable signature");
    return keypair;
}
exports.deriveKeypair = deriveKeypair;
function getAlgorithmFromKey(key) {
    const bytes = hexToBytes(key);
    return bytes.length === 33 && bytes[0] === 0xed ? "ed25519" : "ecdsa-secp256k1";
}
function sign(messageHex, privateKey) {
    const algorithm = getAlgorithmFromKey(privateKey);
    return select(algorithm).sign(hexToBytes(messageHex), privateKey);
}
exports.sign = sign;
function verify(messageHex, signature, publicKey) {
    const algorithm = getAlgorithmFromKey(publicKey);
    return select(algorithm).verify(hexToBytes(messageHex), signature, publicKey);
}
exports.verify = verify;
function deriveAddressFromBytes(publicKeyBytes) {
    return addressCodec.encodeAccountID(utils.computePublicKeyHash(publicKeyBytes));
}
function deriveAddress(publicKey) {
    return deriveAddressFromBytes(Buffer.from(hexToBytes(publicKey)));
}
exports.deriveAddress = deriveAddress;
function deriveNodeAddress(publicKey) {
    const generatorBytes = addressCodec.decodeNodePublic(publicKey);
    const accountPublicBytes = (0, secp256k1_1.accountPublicFromPublicGenerator)(generatorBytes);
    return deriveAddressFromBytes(accountPublicBytes);
}
exports.deriveNodeAddress = deriveNodeAddress;
const { decodeSeed } = addressCodec;
exports.decodeSeed = decodeSeed;

},{"f8912e9ef099b050":"6tQNr","9373fd8e16b3934f":"hnNl4","ddce0cb2be09d995":"jO3c2","bb124c6e0d4b10":"dUx6k","3be93144c8c8bbee":"7iEbc","35a6259c9a03013a":"3Q80F","d4623bd4a9a98984":"51Jyu","5f422e7821c1313c":"kt3F2"}],"hnNl4":[function(require,module,exports) {
// Currently in sync with Node.js lib/assert.js
// https://github.com/nodejs/node/commit/2a51ae424a513ec9a6aa3466baa0cc1d55dd4f3b
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
var process = require("17530e9a8e9dd8de");
"use strict";
function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") _typeof = function _typeof(obj) {
        return typeof obj;
    };
    else _typeof = function _typeof(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
    return _typeof(obj);
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
var _require = require("67930e3bebc18ea9"), _require$codes = _require.codes, ERR_AMBIGUOUS_ARGUMENT = _require$codes.ERR_AMBIGUOUS_ARGUMENT, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_INVALID_ARG_VALUE = _require$codes.ERR_INVALID_ARG_VALUE, ERR_INVALID_RETURN_VALUE = _require$codes.ERR_INVALID_RETURN_VALUE, ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS;
var AssertionError = require("11bdd262fb706a54");
var _require2 = require("d61a3396666721b6"), inspect = _require2.inspect;
var _require$types = require("d61a3396666721b6").types, isPromise = _require$types.isPromise, isRegExp = _require$types.isRegExp;
var objectAssign = Object.assign ? Object.assign : require("613bbc2cfb4d4558").assign;
var objectIs = Object.is ? Object.is : require("f909244cb7b0ea0c");
var errorCache = new Map();
var isDeepEqual;
var isDeepStrictEqual;
var parseExpressionAt;
var findNodeAround;
var decoder;
function lazyLoadComparison() {
    var comparison = require("131e25d2408617a4");
    isDeepEqual = comparison.isDeepEqual;
    isDeepStrictEqual = comparison.isDeepStrictEqual;
} // Escape control characters but not \n and \t to keep the line breaks and
// indentation intact.
// eslint-disable-next-line no-control-regex
var escapeSequencesRegExp = /[\x00-\x08\x0b\x0c\x0e-\x1f]/g;
var meta = [
    "\\u0000",
    "\\u0001",
    "\\u0002",
    "\\u0003",
    "\\u0004",
    "\\u0005",
    "\\u0006",
    "\\u0007",
    "\\b",
    "",
    "",
    "\\u000b",
    "\\f",
    "",
    "\\u000e",
    "\\u000f",
    "\\u0010",
    "\\u0011",
    "\\u0012",
    "\\u0013",
    "\\u0014",
    "\\u0015",
    "\\u0016",
    "\\u0017",
    "\\u0018",
    "\\u0019",
    "\\u001a",
    "\\u001b",
    "\\u001c",
    "\\u001d",
    "\\u001e",
    "\\u001f"
];
var escapeFn = function escapeFn(str) {
    return meta[str.charCodeAt(0)];
};
var warned = false; // The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.
var assert = module.exports = ok;
var NO_EXCEPTION_SENTINEL = {}; // All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided. All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.
function innerFail(obj) {
    if (obj.message instanceof Error) throw obj.message;
    throw new AssertionError(obj);
}
function fail(actual, expected, message, operator, stackStartFn) {
    var argsLen = arguments.length;
    var internalMessage;
    if (argsLen === 0) internalMessage = "Failed";
    else if (argsLen === 1) {
        message = actual;
        actual = undefined;
    } else {
        if (warned === false) {
            warned = true;
            var warn = process.emitWarning ? process.emitWarning : console.warn.bind(console);
            warn("assert.fail() with more than one argument is deprecated. Please use assert.strictEqual() instead or only pass a message.", "DeprecationWarning", "DEP0094");
        }
        if (argsLen === 2) operator = "!=";
    }
    if (message instanceof Error) throw message;
    var errArgs = {
        actual: actual,
        expected: expected,
        operator: operator === undefined ? "fail" : operator,
        stackStartFn: stackStartFn || fail
    };
    if (message !== undefined) errArgs.message = message;
    var err = new AssertionError(errArgs);
    if (internalMessage) {
        err.message = internalMessage;
        err.generatedMessage = true;
    }
    throw err;
}
assert.fail = fail; // The AssertionError is defined in internal/error.
assert.AssertionError = AssertionError;
function innerOk(fn, argLen, value, message) {
    if (!value) {
        var generatedMessage = false;
        if (argLen === 0) {
            generatedMessage = true;
            message = "No value argument passed to `assert.ok()`";
        } else if (message instanceof Error) throw message;
        var err = new AssertionError({
            actual: value,
            expected: true,
            message: message,
            operator: "==",
            stackStartFn: fn
        });
        err.generatedMessage = generatedMessage;
        throw err;
    }
} // Pure assertion tests whether a value is truthy, as determined
// by !!value.
function ok() {
    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
    innerOk.apply(void 0, [
        ok,
        args.length
    ].concat(args));
}
assert.ok = ok; // The equality assertion tests shallow, coercive equality with ==.
/* eslint-disable no-restricted-properties */ assert.equal = function equal(actual, expected, message) {
    if (arguments.length < 2) throw new ERR_MISSING_ARGS("actual", "expected");
     // eslint-disable-next-line eqeqeq
    if (actual != expected) innerFail({
        actual: actual,
        expected: expected,
        message: message,
        operator: "==",
        stackStartFn: equal
    });
}; // The non-equality assertion tests for whether two objects are not
// equal with !=.
assert.notEqual = function notEqual(actual, expected, message) {
    if (arguments.length < 2) throw new ERR_MISSING_ARGS("actual", "expected");
     // eslint-disable-next-line eqeqeq
    if (actual == expected) innerFail({
        actual: actual,
        expected: expected,
        message: message,
        operator: "!=",
        stackStartFn: notEqual
    });
}; // The equivalence assertion tests a deep equality relation.
assert.deepEqual = function deepEqual(actual, expected, message) {
    if (arguments.length < 2) throw new ERR_MISSING_ARGS("actual", "expected");
    if (isDeepEqual === undefined) lazyLoadComparison();
    if (!isDeepEqual(actual, expected)) innerFail({
        actual: actual,
        expected: expected,
        message: message,
        operator: "deepEqual",
        stackStartFn: deepEqual
    });
}; // The non-equivalence assertion tests for any deep inequality.
assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
    if (arguments.length < 2) throw new ERR_MISSING_ARGS("actual", "expected");
    if (isDeepEqual === undefined) lazyLoadComparison();
    if (isDeepEqual(actual, expected)) innerFail({
        actual: actual,
        expected: expected,
        message: message,
        operator: "notDeepEqual",
        stackStartFn: notDeepEqual
    });
};
/* eslint-enable */ assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
    if (arguments.length < 2) throw new ERR_MISSING_ARGS("actual", "expected");
    if (isDeepEqual === undefined) lazyLoadComparison();
    if (!isDeepStrictEqual(actual, expected)) innerFail({
        actual: actual,
        expected: expected,
        message: message,
        operator: "deepStrictEqual",
        stackStartFn: deepStrictEqual
    });
};
assert.notDeepStrictEqual = notDeepStrictEqual;
function notDeepStrictEqual(actual, expected, message) {
    if (arguments.length < 2) throw new ERR_MISSING_ARGS("actual", "expected");
    if (isDeepEqual === undefined) lazyLoadComparison();
    if (isDeepStrictEqual(actual, expected)) innerFail({
        actual: actual,
        expected: expected,
        message: message,
        operator: "notDeepStrictEqual",
        stackStartFn: notDeepStrictEqual
    });
}
assert.strictEqual = function strictEqual(actual, expected, message) {
    if (arguments.length < 2) throw new ERR_MISSING_ARGS("actual", "expected");
    if (!objectIs(actual, expected)) innerFail({
        actual: actual,
        expected: expected,
        message: message,
        operator: "strictEqual",
        stackStartFn: strictEqual
    });
};
assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
    if (arguments.length < 2) throw new ERR_MISSING_ARGS("actual", "expected");
    if (objectIs(actual, expected)) innerFail({
        actual: actual,
        expected: expected,
        message: message,
        operator: "notStrictEqual",
        stackStartFn: notStrictEqual
    });
};
var Comparison = function Comparison(obj, keys, actual) {
    var _this = this;
    _classCallCheck(this, Comparison);
    keys.forEach(function(key) {
        if (key in obj) {
            if (actual !== undefined && typeof actual[key] === "string" && isRegExp(obj[key]) && obj[key].test(actual[key])) _this[key] = actual[key];
            else _this[key] = obj[key];
        }
    });
};
function compareExceptionKey(actual, expected, key, message, keys, fn) {
    if (!(key in actual) || !isDeepStrictEqual(actual[key], expected[key])) {
        if (!message) {
            // Create placeholder objects to create a nice output.
            var a = new Comparison(actual, keys);
            var b = new Comparison(expected, keys, actual);
            var err = new AssertionError({
                actual: a,
                expected: b,
                operator: "deepStrictEqual",
                stackStartFn: fn
            });
            err.actual = actual;
            err.expected = expected;
            err.operator = fn.name;
            throw err;
        }
        innerFail({
            actual: actual,
            expected: expected,
            message: message,
            operator: fn.name,
            stackStartFn: fn
        });
    }
}
function expectedException(actual, expected, msg, fn) {
    if (typeof expected !== "function") {
        if (isRegExp(expected)) return expected.test(actual); // assert.doesNotThrow does not accept objects.
        if (arguments.length === 2) throw new ERR_INVALID_ARG_TYPE("expected", [
            "Function",
            "RegExp"
        ], expected);
         // Handle primitives properly.
        if (_typeof(actual) !== "object" || actual === null) {
            var err = new AssertionError({
                actual: actual,
                expected: expected,
                message: msg,
                operator: "deepStrictEqual",
                stackStartFn: fn
            });
            err.operator = fn.name;
            throw err;
        }
        var keys = Object.keys(expected); // Special handle errors to make sure the name and the message are compared
        // as well.
        if (expected instanceof Error) keys.push("name", "message");
        else if (keys.length === 0) throw new ERR_INVALID_ARG_VALUE("error", expected, "may not be an empty object");
        if (isDeepEqual === undefined) lazyLoadComparison();
        keys.forEach(function(key) {
            if (typeof actual[key] === "string" && isRegExp(expected[key]) && expected[key].test(actual[key])) return;
            compareExceptionKey(actual, expected, key, msg, keys, fn);
        });
        return true;
    } // Guard instanceof against arrow functions as they don't have a prototype.
    if (expected.prototype !== undefined && actual instanceof expected) return true;
    if (Error.isPrototypeOf(expected)) return false;
    return expected.call({}, actual) === true;
}
function getActual(fn) {
    if (typeof fn !== "function") throw new ERR_INVALID_ARG_TYPE("fn", "Function", fn);
    try {
        fn();
    } catch (e) {
        return e;
    }
    return NO_EXCEPTION_SENTINEL;
}
function checkIsPromise(obj) {
    // Accept native ES6 promises and promises that are implemented in a similar
    // way. Do not accept thenables that use a function as `obj` and that have no
    // `catch` handler.
    // TODO: thenables are checked up until they have the correct methods,
    // but according to documentation, the `then` method should receive
    // the `fulfill` and `reject` arguments as well or it may be never resolved.
    return isPromise(obj) || obj !== null && _typeof(obj) === "object" && typeof obj.then === "function" && typeof obj.catch === "function";
}
function waitForActual(promiseFn) {
    return Promise.resolve().then(function() {
        var resultPromise;
        if (typeof promiseFn === "function") {
            // Return a rejected promise if `promiseFn` throws synchronously.
            resultPromise = promiseFn(); // Fail in case no promise is returned.
            if (!checkIsPromise(resultPromise)) throw new ERR_INVALID_RETURN_VALUE("instance of Promise", "promiseFn", resultPromise);
        } else if (checkIsPromise(promiseFn)) resultPromise = promiseFn;
        else throw new ERR_INVALID_ARG_TYPE("promiseFn", [
            "Function",
            "Promise"
        ], promiseFn);
        return Promise.resolve().then(function() {
            return resultPromise;
        }).then(function() {
            return NO_EXCEPTION_SENTINEL;
        }).catch(function(e) {
            return e;
        });
    });
}
function expectsError(stackStartFn, actual, error, message) {
    if (typeof error === "string") {
        if (arguments.length === 4) throw new ERR_INVALID_ARG_TYPE("error", [
            "Object",
            "Error",
            "Function",
            "RegExp"
        ], error);
        if (_typeof(actual) === "object" && actual !== null) {
            if (actual.message === error) throw new ERR_AMBIGUOUS_ARGUMENT("error/message", 'The error message "'.concat(actual.message, '" is identical to the message.'));
        } else if (actual === error) throw new ERR_AMBIGUOUS_ARGUMENT("error/message", 'The error "'.concat(actual, '" is identical to the message.'));
        message = error;
        error = undefined;
    } else if (error != null && _typeof(error) !== "object" && typeof error !== "function") throw new ERR_INVALID_ARG_TYPE("error", [
        "Object",
        "Error",
        "Function",
        "RegExp"
    ], error);
    if (actual === NO_EXCEPTION_SENTINEL) {
        var details = "";
        if (error && error.name) details += " (".concat(error.name, ")");
        details += message ? ": ".concat(message) : ".";
        var fnType = stackStartFn.name === "rejects" ? "rejection" : "exception";
        innerFail({
            actual: undefined,
            expected: error,
            operator: stackStartFn.name,
            message: "Missing expected ".concat(fnType).concat(details),
            stackStartFn: stackStartFn
        });
    }
    if (error && !expectedException(actual, error, message, stackStartFn)) throw actual;
}
function expectsNoError(stackStartFn, actual, error, message) {
    if (actual === NO_EXCEPTION_SENTINEL) return;
    if (typeof error === "string") {
        message = error;
        error = undefined;
    }
    if (!error || expectedException(actual, error)) {
        var details = message ? ": ".concat(message) : ".";
        var fnType = stackStartFn.name === "doesNotReject" ? "rejection" : "exception";
        innerFail({
            actual: actual,
            expected: error,
            operator: stackStartFn.name,
            message: "Got unwanted ".concat(fnType).concat(details, "\n") + 'Actual message: "'.concat(actual && actual.message, '"'),
            stackStartFn: stackStartFn
        });
    }
    throw actual;
}
assert.throws = function throws(promiseFn) {
    for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)args[_key2 - 1] = arguments[_key2];
    expectsError.apply(void 0, [
        throws,
        getActual(promiseFn)
    ].concat(args));
};
assert.rejects = function rejects(promiseFn) {
    for(var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++)args[_key3 - 1] = arguments[_key3];
    return waitForActual(promiseFn).then(function(result) {
        return expectsError.apply(void 0, [
            rejects,
            result
        ].concat(args));
    });
};
assert.doesNotThrow = function doesNotThrow(fn) {
    for(var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++)args[_key4 - 1] = arguments[_key4];
    expectsNoError.apply(void 0, [
        doesNotThrow,
        getActual(fn)
    ].concat(args));
};
assert.doesNotReject = function doesNotReject(fn) {
    for(var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++)args[_key5 - 1] = arguments[_key5];
    return waitForActual(fn).then(function(result) {
        return expectsNoError.apply(void 0, [
            doesNotReject,
            result
        ].concat(args));
    });
};
assert.ifError = function ifError(err) {
    if (err !== null && err !== undefined) {
        var message = "ifError got unwanted exception: ";
        if (_typeof(err) === "object" && typeof err.message === "string") {
            if (err.message.length === 0 && err.constructor) message += err.constructor.name;
            else message += err.message;
        } else message += inspect(err);
        var newErr = new AssertionError({
            actual: err,
            expected: null,
            operator: "ifError",
            message: message,
            stackStartFn: ifError
        }); // Make sure we actually have a stack trace!
        var origStack = err.stack;
        if (typeof origStack === "string") {
            // This will remove any duplicated frames from the error frames taken
            // from within `ifError` and add the original error frames to the newly
            // created ones.
            var tmp2 = origStack.split("\n");
            tmp2.shift(); // Filter all frames existing in err.stack.
            var tmp1 = newErr.stack.split("\n");
            for(var i = 0; i < tmp2.length; i++){
                // Find the first occurrence of the frame.
                var pos = tmp1.indexOf(tmp2[i]);
                if (pos !== -1) {
                    // Only keep new frames.
                    tmp1 = tmp1.slice(0, pos);
                    break;
                }
            }
            newErr.stack = "".concat(tmp1.join("\n"), "\n").concat(tmp2.join("\n"));
        }
        throw newErr;
    }
}; // Expose a strict only variant of assert
function strict() {
    for(var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++)args[_key6] = arguments[_key6];
    innerOk.apply(void 0, [
        strict,
        args.length
    ].concat(args));
}
assert.strict = objectAssign(strict, assert, {
    equal: assert.strictEqual,
    deepEqual: assert.deepStrictEqual,
    notEqual: assert.notStrictEqual,
    notDeepEqual: assert.notDeepStrictEqual
});
assert.strict.strict = assert.strict;

},{"17530e9a8e9dd8de":"gq3cc","67930e3bebc18ea9":"kqSBO","11bdd262fb706a54":"4CZbl","d61a3396666721b6":"hldjw","613bbc2cfb4d4558":"iA8VU","f909244cb7b0ea0c":"jinnx","131e25d2408617a4":"11STT"}],"kqSBO":[function(require,module,exports) {
// Currently in sync with Node.js lib/internal/errors.js
// https://github.com/nodejs/node/commit/3b044962c48fe313905877a96b5d0894a5404f6f
/* eslint node-core/documented-errors: "error" */ /* eslint node-core/alphabetize-errors: "error" */ /* eslint node-core/prefer-util-format-errors: "error" */ "use strict"; // The whole point behind this internal module is to allow Node.js to no
// longer be forced to treat every error message change as a semver-major
// change. The NodeError classes here all expose a `code` property whose
// value statically and permanently identifies the error. While the error
// message may change, the code should not.
function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") _typeof = function _typeof(obj) {
        return typeof obj;
    };
    else _typeof = function _typeof(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
    return _typeof(obj);
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
function _possibleConstructorReturn(self, call) {
    if (call && (_typeof(call) === "object" || typeof call === "function")) return call;
    return _assertThisInitialized(self);
}
function _assertThisInitialized(self) {
    if (self === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return self;
}
function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) throw new TypeError("Super expression must either be null or a function");
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
}
function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _setPrototypeOf(o, p);
}
var codes = {}; // Lazy loaded
var assert;
var util;
function createErrorType(code, message, Base) {
    if (!Base) Base = Error;
    function getMessage(arg1, arg2, arg3) {
        if (typeof message === "string") return message;
        else return message(arg1, arg2, arg3);
    }
    var NodeError = /*#__PURE__*/ function(_Base) {
        _inherits(NodeError, _Base);
        function NodeError(arg1, arg2, arg3) {
            var _this;
            _classCallCheck(this, NodeError);
            _this = _possibleConstructorReturn(this, _getPrototypeOf(NodeError).call(this, getMessage(arg1, arg2, arg3)));
            _this.code = code;
            return _this;
        }
        return NodeError;
    }(Base);
    codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js
function oneOf(expected, thing) {
    if (Array.isArray(expected)) {
        var len = expected.length;
        expected = expected.map(function(i) {
            return String(i);
        });
        if (len > 2) return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(", "), ", or ") + expected[len - 1];
        else if (len === 2) return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
        else return "of ".concat(thing, " ").concat(expected[0]);
    } else return "of ".concat(thing, " ").concat(String(expected));
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith
function startsWith(str, search, pos) {
    return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
function endsWith(str, search, this_len) {
    if (this_len === undefined || this_len > str.length) this_len = str.length;
    return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
function includes(str, search, start) {
    if (typeof start !== "number") start = 0;
    if (start + search.length > str.length) return false;
    else return str.indexOf(search, start) !== -1;
}
createErrorType("ERR_AMBIGUOUS_ARGUMENT", 'The "%s" argument is ambiguous. %s', TypeError);
createErrorType("ERR_INVALID_ARG_TYPE", function(name, expected, actual) {
    if (assert === undefined) assert = require("f73a3052b95b9ed");
    assert(typeof name === "string", "'name' must be a string"); // determiner: 'must be' or 'must not be'
    var determiner;
    if (typeof expected === "string" && startsWith(expected, "not ")) {
        determiner = "must not be";
        expected = expected.replace(/^not /, "");
    } else determiner = "must be";
    var msg;
    if (endsWith(name, " argument")) // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
    else {
        var type = includes(name, ".") ? "property" : "argument";
        msg = 'The "'.concat(name, '" ').concat(type, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
    } // TODO(BridgeAR): Improve the output by showing `null` and similar.
    msg += ". Received type ".concat(_typeof(actual));
    return msg;
}, TypeError);
createErrorType("ERR_INVALID_ARG_VALUE", function(name, value) {
    var reason = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "is invalid";
    if (util === undefined) util = require("1fd472100fa8826f");
    var inspected = util.inspect(value);
    if (inspected.length > 128) inspected = "".concat(inspected.slice(0, 128), "...");
    return "The argument '".concat(name, "' ").concat(reason, ". Received ").concat(inspected);
}, TypeError, RangeError);
createErrorType("ERR_INVALID_RETURN_VALUE", function(input, name, value) {
    var type;
    if (value && value.constructor && value.constructor.name) type = "instance of ".concat(value.constructor.name);
    else type = "type ".concat(_typeof(value));
    return "Expected ".concat(input, ' to be returned from the "').concat(name, '"') + " function but got ".concat(type, ".");
}, TypeError);
createErrorType("ERR_MISSING_ARGS", function() {
    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
    if (assert === undefined) assert = require("f73a3052b95b9ed");
    assert(args.length > 0, "At least one arg needs to be specified");
    var msg = "The ";
    var len = args.length;
    args = args.map(function(a) {
        return '"'.concat(a, '"');
    });
    switch(len){
        case 1:
            msg += "".concat(args[0], " argument");
            break;
        case 2:
            msg += "".concat(args[0], " and ").concat(args[1], " arguments");
            break;
        default:
            msg += args.slice(0, len - 1).join(", ");
            msg += ", and ".concat(args[len - 1], " arguments");
            break;
    }
    return "".concat(msg, " must be specified");
}, TypeError);
module.exports.codes = codes;

},{"f73a3052b95b9ed":"hnNl4","1fd472100fa8826f":"hldjw"}],"hldjw":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
var process = require("bc23a3ea4a141c0b");
var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors(obj) {
    var keys = Object.keys(obj);
    var descriptors = {};
    for(var i = 0; i < keys.length; i++)descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
    return descriptors;
};
var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
    if (!isString(f)) {
        var objects = [];
        for(var i = 0; i < arguments.length; i++)objects.push(inspect(arguments[i]));
        return objects.join(" ");
    }
    var i = 1;
    var args = arguments;
    var len = args.length;
    var str = String(f).replace(formatRegExp, function(x) {
        if (x === "%%") return "%";
        if (i >= len) return x;
        switch(x){
            case "%s":
                return String(args[i++]);
            case "%d":
                return Number(args[i++]);
            case "%j":
                try {
                    return JSON.stringify(args[i++]);
                } catch (_) {
                    return "[Circular]";
                }
            default:
                return x;
        }
    });
    for(var x = args[i]; i < len; x = args[++i])if (isNull(x) || !isObject(x)) str += " " + x;
    else str += " " + inspect(x);
    return str;
};
// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
    if (typeof process !== "undefined" && process.noDeprecation === true) return fn;
    // Allow for deprecating things in the process of starting up.
    if (typeof process === "undefined") return function() {
        return exports.deprecate(fn, msg).apply(this, arguments);
    };
    var warned = false;
    function deprecated() {
        if (!warned) {
            if (process.throwDeprecation) throw new Error(msg);
            else if (process.traceDeprecation) console.trace(msg);
            else console.error(msg);
            warned = true;
        }
        return fn.apply(this, arguments);
    }
    return deprecated;
};
var debugs = {};
var debugEnvRegex = /^$/;
var debugEnv;
exports.debuglog = function(set) {
    set = set.toUpperCase();
    if (!debugs[set]) {
        if (debugEnvRegex.test(set)) {
            var pid = process.pid;
            debugs[set] = function() {
                var msg = exports.format.apply(exports, arguments);
                console.error("%s %d: %s", set, pid, msg);
            };
        } else debugs[set] = function() {};
    }
    return debugs[set];
};
/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */ /* legacy: obj, showHidden, depth, colors*/ function inspect(obj, opts) {
    // default options
    var ctx = {
        seen: [],
        stylize: stylizeNoColor
    };
    // legacy...
    if (arguments.length >= 3) ctx.depth = arguments[2];
    if (arguments.length >= 4) ctx.colors = arguments[3];
    if (isBoolean(opts)) // legacy...
    ctx.showHidden = opts;
    else if (opts) // got an "options" object
    exports._extend(ctx, opts);
    // set default options
    if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
    if (isUndefined(ctx.depth)) ctx.depth = 2;
    if (isUndefined(ctx.colors)) ctx.colors = false;
    if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
    if (ctx.colors) ctx.stylize = stylizeWithColor;
    return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;
// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
    "bold": [
        1,
        22
    ],
    "italic": [
        3,
        23
    ],
    "underline": [
        4,
        24
    ],
    "inverse": [
        7,
        27
    ],
    "white": [
        37,
        39
    ],
    "grey": [
        90,
        39
    ],
    "black": [
        30,
        39
    ],
    "blue": [
        34,
        39
    ],
    "cyan": [
        36,
        39
    ],
    "green": [
        32,
        39
    ],
    "magenta": [
        35,
        39
    ],
    "red": [
        31,
        39
    ],
    "yellow": [
        33,
        39
    ]
};
// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
    "special": "cyan",
    "number": "yellow",
    "boolean": "yellow",
    "undefined": "grey",
    "null": "bold",
    "string": "green",
    "date": "magenta",
    // "name": intentionally not styling
    "regexp": "red"
};
function stylizeWithColor(str, styleType) {
    var style = inspect.styles[styleType];
    if (style) return "\x1b[" + inspect.colors[style][0] + "m" + str + "\x1b[" + inspect.colors[style][1] + "m";
    else return str;
}
function stylizeNoColor(str, styleType) {
    return str;
}
function arrayToHash(array) {
    var hash = {};
    array.forEach(function(val, idx) {
        hash[val] = true;
    });
    return hash;
}
function formatValue(ctx, value, recurseTimes) {
    // Provide a hook for user-specified inspect functions.
    // Check that value is an object with an inspect function on it
    if (ctx.customInspect && value && isFunction(value.inspect) && // Filter out the util module, it's inspect function is special
    value.inspect !== exports.inspect && // Also filter out any prototype objects using the circular check.
    !(value.constructor && value.constructor.prototype === value)) {
        var ret = value.inspect(recurseTimes, ctx);
        if (!isString(ret)) ret = formatValue(ctx, ret, recurseTimes);
        return ret;
    }
    // Primitive types cannot have properties
    var primitive = formatPrimitive(ctx, value);
    if (primitive) return primitive;
    // Look up the keys of the object.
    var keys = Object.keys(value);
    var visibleKeys = arrayToHash(keys);
    if (ctx.showHidden) keys = Object.getOwnPropertyNames(value);
    // IE doesn't make error fields non-enumerable
    // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
    if (isError(value) && (keys.indexOf("message") >= 0 || keys.indexOf("description") >= 0)) return formatError(value);
    // Some type of object without properties can be shortcutted.
    if (keys.length === 0) {
        if (isFunction(value)) {
            var name = value.name ? ": " + value.name : "";
            return ctx.stylize("[Function" + name + "]", "special");
        }
        if (isRegExp(value)) return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
        if (isDate(value)) return ctx.stylize(Date.prototype.toString.call(value), "date");
        if (isError(value)) return formatError(value);
    }
    var base = "", array = false, braces = [
        "{",
        "}"
    ];
    // Make Array say that they are Array
    if (isArray(value)) {
        array = true;
        braces = [
            "[",
            "]"
        ];
    }
    // Make functions say that they are functions
    if (isFunction(value)) {
        var n = value.name ? ": " + value.name : "";
        base = " [Function" + n + "]";
    }
    // Make RegExps say that they are RegExps
    if (isRegExp(value)) base = " " + RegExp.prototype.toString.call(value);
    // Make dates with properties first say the date
    if (isDate(value)) base = " " + Date.prototype.toUTCString.call(value);
    // Make error with message first say the error
    if (isError(value)) base = " " + formatError(value);
    if (keys.length === 0 && (!array || value.length == 0)) return braces[0] + base + braces[1];
    if (recurseTimes < 0) {
        if (isRegExp(value)) return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
        else return ctx.stylize("[Object]", "special");
    }
    ctx.seen.push(value);
    var output;
    if (array) output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
    else output = keys.map(function(key) {
        return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
    ctx.seen.pop();
    return reduceToSingleString(output, base, braces);
}
function formatPrimitive(ctx, value) {
    if (isUndefined(value)) return ctx.stylize("undefined", "undefined");
    if (isString(value)) {
        var simple = "'" + JSON.stringify(value).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
        return ctx.stylize(simple, "string");
    }
    if (isNumber(value)) return ctx.stylize("" + value, "number");
    if (isBoolean(value)) return ctx.stylize("" + value, "boolean");
    // For some reason typeof null is "object", so special case here.
    if (isNull(value)) return ctx.stylize("null", "null");
}
function formatError(value) {
    return "[" + Error.prototype.toString.call(value) + "]";
}
function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
    var output = [];
    for(var i = 0, l = value.length; i < l; ++i)if (hasOwnProperty(value, String(i))) output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
    else output.push("");
    keys.forEach(function(key) {
        if (!key.match(/^\d+$/)) output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
    });
    return output;
}
function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
    var name, str, desc;
    desc = Object.getOwnPropertyDescriptor(value, key) || {
        value: value[key]
    };
    if (desc.get) {
        if (desc.set) str = ctx.stylize("[Getter/Setter]", "special");
        else str = ctx.stylize("[Getter]", "special");
    } else if (desc.set) str = ctx.stylize("[Setter]", "special");
    if (!hasOwnProperty(visibleKeys, key)) name = "[" + key + "]";
    if (!str) {
        if (ctx.seen.indexOf(desc.value) < 0) {
            if (isNull(recurseTimes)) str = formatValue(ctx, desc.value, null);
            else str = formatValue(ctx, desc.value, recurseTimes - 1);
            if (str.indexOf("\n") > -1) {
                if (array) str = str.split("\n").map(function(line) {
                    return "  " + line;
                }).join("\n").slice(2);
                else str = "\n" + str.split("\n").map(function(line) {
                    return "   " + line;
                }).join("\n");
            }
        } else str = ctx.stylize("[Circular]", "special");
    }
    if (isUndefined(name)) {
        if (array && key.match(/^\d+$/)) return str;
        name = JSON.stringify("" + key);
        if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
            name = name.slice(1, -1);
            name = ctx.stylize(name, "name");
        } else {
            name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
            name = ctx.stylize(name, "string");
        }
    }
    return name + ": " + str;
}
function reduceToSingleString(output, base, braces) {
    var numLinesEst = 0;
    var length = output.reduce(function(prev, cur) {
        numLinesEst++;
        if (cur.indexOf("\n") >= 0) numLinesEst++;
        return prev + cur.replace(/\u001b\[\d\d?m/g, "").length + 1;
    }, 0);
    if (length > 60) return braces[0] + (base === "" ? "" : base + "\n ") + " " + output.join(",\n  ") + " " + braces[1];
    return braces[0] + base + " " + output.join(", ") + " " + braces[1];
}
// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
exports.types = require("6a1c15bae847a134");
function isArray(ar) {
    return Array.isArray(ar);
}
exports.isArray = isArray;
function isBoolean(arg) {
    return typeof arg === "boolean";
}
exports.isBoolean = isBoolean;
function isNull(arg) {
    return arg === null;
}
exports.isNull = isNull;
function isNullOrUndefined(arg) {
    return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;
function isNumber(arg) {
    return typeof arg === "number";
}
exports.isNumber = isNumber;
function isString(arg) {
    return typeof arg === "string";
}
exports.isString = isString;
function isSymbol(arg) {
    return typeof arg === "symbol";
}
exports.isSymbol = isSymbol;
function isUndefined(arg) {
    return arg === void 0;
}
exports.isUndefined = isUndefined;
function isRegExp(re) {
    return isObject(re) && objectToString(re) === "[object RegExp]";
}
exports.isRegExp = isRegExp;
exports.types.isRegExp = isRegExp;
function isObject(arg) {
    return typeof arg === "object" && arg !== null;
}
exports.isObject = isObject;
function isDate(d) {
    return isObject(d) && objectToString(d) === "[object Date]";
}
exports.isDate = isDate;
exports.types.isDate = isDate;
function isError(e) {
    return isObject(e) && (objectToString(e) === "[object Error]" || e instanceof Error);
}
exports.isError = isError;
exports.types.isNativeError = isError;
function isFunction(arg) {
    return typeof arg === "function";
}
exports.isFunction = isFunction;
function isPrimitive(arg) {
    return arg === null || typeof arg === "boolean" || typeof arg === "number" || typeof arg === "string" || typeof arg === "symbol" || // ES6 symbol
    typeof arg === "undefined";
}
exports.isPrimitive = isPrimitive;
exports.isBuffer = require("a42137cd7fc8700d");
function objectToString(o) {
    return Object.prototype.toString.call(o);
}
function pad(n) {
    return n < 10 ? "0" + n.toString(10) : n.toString(10);
}
var months = [
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "May",
    "Jun",
    "Jul",
    "Aug",
    "Sep",
    "Oct",
    "Nov",
    "Dec"
];
// 26 Feb 16:19:34
function timestamp() {
    var d = new Date();
    var time = [
        pad(d.getHours()),
        pad(d.getMinutes()),
        pad(d.getSeconds())
    ].join(":");
    return [
        d.getDate(),
        months[d.getMonth()],
        time
    ].join(" ");
}
// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
    console.log("%s - %s", timestamp(), exports.format.apply(exports, arguments));
};
/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */ exports.inherits = require("a792e8e3e2aa1973");
exports._extend = function(origin, add) {
    // Don't do anything if add isn't an object
    if (!add || !isObject(add)) return origin;
    var keys = Object.keys(add);
    var i = keys.length;
    while(i--)origin[keys[i]] = add[keys[i]];
    return origin;
};
function hasOwnProperty(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
}
var kCustomPromisifiedSymbol = typeof Symbol !== "undefined" ? Symbol("util.promisify.custom") : undefined;
exports.promisify = function promisify(original) {
    if (typeof original !== "function") throw new TypeError('The "original" argument must be of type Function');
    if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
        var fn = original[kCustomPromisifiedSymbol];
        if (typeof fn !== "function") throw new TypeError('The "util.promisify.custom" argument must be of type Function');
        Object.defineProperty(fn, kCustomPromisifiedSymbol, {
            value: fn,
            enumerable: false,
            writable: false,
            configurable: true
        });
        return fn;
    }
    function fn() {
        var promiseResolve, promiseReject;
        var promise = new Promise(function(resolve, reject) {
            promiseResolve = resolve;
            promiseReject = reject;
        });
        var args = [];
        for(var i = 0; i < arguments.length; i++)args.push(arguments[i]);
        args.push(function(err, value) {
            if (err) promiseReject(err);
            else promiseResolve(value);
        });
        try {
            original.apply(this, args);
        } catch (err) {
            promiseReject(err);
        }
        return promise;
    }
    Object.setPrototypeOf(fn, Object.getPrototypeOf(original));
    if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
        value: fn,
        enumerable: false,
        writable: false,
        configurable: true
    });
    return Object.defineProperties(fn, getOwnPropertyDescriptors(original));
};
exports.promisify.custom = kCustomPromisifiedSymbol;
function callbackifyOnRejected(reason, cb) {
    // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
    // Because `null` is a special error value in callbacks which means "no error
    // occurred", we error-wrap so the callback consumer can distinguish between
    // "the promise rejected with null" or "the promise fulfilled with undefined".
    if (!reason) {
        var newReason = new Error("Promise was rejected with a falsy value");
        newReason.reason = reason;
        reason = newReason;
    }
    return cb(reason);
}
function callbackify(original) {
    if (typeof original !== "function") throw new TypeError('The "original" argument must be of type Function');
    // We DO NOT return the promise as it gives the user a false sense that
    // the promise is actually somehow related to the callback's execution
    // and that the callback throwing will reject the promise.
    function callbackified() {
        var args = [];
        for(var i = 0; i < arguments.length; i++)args.push(arguments[i]);
        var maybeCb = args.pop();
        if (typeof maybeCb !== "function") throw new TypeError("The last argument must be of type Function");
        var self = this;
        var cb = function() {
            return maybeCb.apply(self, arguments);
        };
        // In true node style we process the callback on `nextTick` with all the
        // implications (stack, `uncaughtException`, `async_hooks`)
        original.apply(this, args).then(function(ret) {
            process.nextTick(cb.bind(null, null, ret));
        }, function(rej) {
            process.nextTick(callbackifyOnRejected.bind(null, rej, cb));
        });
    }
    Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
    Object.defineProperties(callbackified, getOwnPropertyDescriptors(original));
    return callbackified;
}
exports.callbackify = callbackify;

},{"bc23a3ea4a141c0b":"gq3cc","6a1c15bae847a134":"gxqll","a42137cd7fc8700d":"2LoeM","a792e8e3e2aa1973":"l3bOz"}],"gxqll":[function(require,module,exports) {
// Currently in sync with Node.js lib/internal/util/types.js
// https://github.com/nodejs/node/commit/112cc7c27551254aa2b17098fb774867f05ed0d9
"use strict";
var isArgumentsObject = require("6b5f9ae3e436d527");
var isGeneratorFunction = require("285c2b8081bf4b68");
var whichTypedArray = require("e95b88ccd80e1671");
var isTypedArray = require("7db151546a22c2a8");
function uncurryThis(f) {
    return f.call.bind(f);
}
var BigIntSupported = typeof BigInt !== "undefined";
var SymbolSupported = typeof Symbol !== "undefined";
var ObjectToString = uncurryThis(Object.prototype.toString);
var numberValue = uncurryThis(Number.prototype.valueOf);
var stringValue = uncurryThis(String.prototype.valueOf);
var booleanValue = uncurryThis(Boolean.prototype.valueOf);
if (BigIntSupported) var bigIntValue = uncurryThis(BigInt.prototype.valueOf);
if (SymbolSupported) var symbolValue = uncurryThis(Symbol.prototype.valueOf);
function checkBoxedPrimitive(value, prototypeValueOf) {
    if (typeof value !== "object") return false;
    try {
        prototypeValueOf(value);
        return true;
    } catch (e) {
        return false;
    }
}
exports.isArgumentsObject = isArgumentsObject;
exports.isGeneratorFunction = isGeneratorFunction;
exports.isTypedArray = isTypedArray;
// Taken from here and modified for better browser support
// https://github.com/sindresorhus/p-is-promise/blob/cda35a513bda03f977ad5cde3a079d237e82d7ef/index.js
function isPromise(input) {
    return typeof Promise !== "undefined" && input instanceof Promise || input !== null && typeof input === "object" && typeof input.then === "function" && typeof input.catch === "function";
}
exports.isPromise = isPromise;
function isArrayBufferView(value) {
    if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) return ArrayBuffer.isView(value);
    return isTypedArray(value) || isDataView(value);
}
exports.isArrayBufferView = isArrayBufferView;
function isUint8Array(value) {
    return whichTypedArray(value) === "Uint8Array";
}
exports.isUint8Array = isUint8Array;
function isUint8ClampedArray(value) {
    return whichTypedArray(value) === "Uint8ClampedArray";
}
exports.isUint8ClampedArray = isUint8ClampedArray;
function isUint16Array(value) {
    return whichTypedArray(value) === "Uint16Array";
}
exports.isUint16Array = isUint16Array;
function isUint32Array(value) {
    return whichTypedArray(value) === "Uint32Array";
}
exports.isUint32Array = isUint32Array;
function isInt8Array(value) {
    return whichTypedArray(value) === "Int8Array";
}
exports.isInt8Array = isInt8Array;
function isInt16Array(value) {
    return whichTypedArray(value) === "Int16Array";
}
exports.isInt16Array = isInt16Array;
function isInt32Array(value) {
    return whichTypedArray(value) === "Int32Array";
}
exports.isInt32Array = isInt32Array;
function isFloat32Array(value) {
    return whichTypedArray(value) === "Float32Array";
}
exports.isFloat32Array = isFloat32Array;
function isFloat64Array(value) {
    return whichTypedArray(value) === "Float64Array";
}
exports.isFloat64Array = isFloat64Array;
function isBigInt64Array(value) {
    return whichTypedArray(value) === "BigInt64Array";
}
exports.isBigInt64Array = isBigInt64Array;
function isBigUint64Array(value) {
    return whichTypedArray(value) === "BigUint64Array";
}
exports.isBigUint64Array = isBigUint64Array;
function isMapToString(value) {
    return ObjectToString(value) === "[object Map]";
}
isMapToString.working = typeof Map !== "undefined" && isMapToString(new Map());
function isMap(value) {
    if (typeof Map === "undefined") return false;
    return isMapToString.working ? isMapToString(value) : value instanceof Map;
}
exports.isMap = isMap;
function isSetToString(value) {
    return ObjectToString(value) === "[object Set]";
}
isSetToString.working = typeof Set !== "undefined" && isSetToString(new Set());
function isSet(value) {
    if (typeof Set === "undefined") return false;
    return isSetToString.working ? isSetToString(value) : value instanceof Set;
}
exports.isSet = isSet;
function isWeakMapToString(value) {
    return ObjectToString(value) === "[object WeakMap]";
}
isWeakMapToString.working = typeof WeakMap !== "undefined" && isWeakMapToString(new WeakMap());
function isWeakMap(value) {
    if (typeof WeakMap === "undefined") return false;
    return isWeakMapToString.working ? isWeakMapToString(value) : value instanceof WeakMap;
}
exports.isWeakMap = isWeakMap;
function isWeakSetToString(value) {
    return ObjectToString(value) === "[object WeakSet]";
}
isWeakSetToString.working = typeof WeakSet !== "undefined" && isWeakSetToString(new WeakSet());
function isWeakSet(value) {
    return isWeakSetToString(value);
}
exports.isWeakSet = isWeakSet;
function isArrayBufferToString(value) {
    return ObjectToString(value) === "[object ArrayBuffer]";
}
isArrayBufferToString.working = typeof ArrayBuffer !== "undefined" && isArrayBufferToString(new ArrayBuffer());
function isArrayBuffer(value) {
    if (typeof ArrayBuffer === "undefined") return false;
    return isArrayBufferToString.working ? isArrayBufferToString(value) : value instanceof ArrayBuffer;
}
exports.isArrayBuffer = isArrayBuffer;
function isDataViewToString(value) {
    return ObjectToString(value) === "[object DataView]";
}
isDataViewToString.working = typeof ArrayBuffer !== "undefined" && typeof DataView !== "undefined" && isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1));
function isDataView(value) {
    if (typeof DataView === "undefined") return false;
    return isDataViewToString.working ? isDataViewToString(value) : value instanceof DataView;
}
exports.isDataView = isDataView;
// Store a copy of SharedArrayBuffer in case it's deleted elsewhere
var SharedArrayBufferCopy = typeof SharedArrayBuffer !== "undefined" ? SharedArrayBuffer : undefined;
function isSharedArrayBufferToString(value) {
    return ObjectToString(value) === "[object SharedArrayBuffer]";
}
function isSharedArrayBuffer(value) {
    if (typeof SharedArrayBufferCopy === "undefined") return false;
    if (typeof isSharedArrayBufferToString.working === "undefined") isSharedArrayBufferToString.working = isSharedArrayBufferToString(new SharedArrayBufferCopy());
    return isSharedArrayBufferToString.working ? isSharedArrayBufferToString(value) : value instanceof SharedArrayBufferCopy;
}
exports.isSharedArrayBuffer = isSharedArrayBuffer;
function isAsyncFunction(value) {
    return ObjectToString(value) === "[object AsyncFunction]";
}
exports.isAsyncFunction = isAsyncFunction;
function isMapIterator(value) {
    return ObjectToString(value) === "[object Map Iterator]";
}
exports.isMapIterator = isMapIterator;
function isSetIterator(value) {
    return ObjectToString(value) === "[object Set Iterator]";
}
exports.isSetIterator = isSetIterator;
function isGeneratorObject(value) {
    return ObjectToString(value) === "[object Generator]";
}
exports.isGeneratorObject = isGeneratorObject;
function isWebAssemblyCompiledModule(value) {
    return ObjectToString(value) === "[object WebAssembly.Module]";
}
exports.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule;
function isNumberObject(value) {
    return checkBoxedPrimitive(value, numberValue);
}
exports.isNumberObject = isNumberObject;
function isStringObject(value) {
    return checkBoxedPrimitive(value, stringValue);
}
exports.isStringObject = isStringObject;
function isBooleanObject(value) {
    return checkBoxedPrimitive(value, booleanValue);
}
exports.isBooleanObject = isBooleanObject;
function isBigIntObject(value) {
    return BigIntSupported && checkBoxedPrimitive(value, bigIntValue);
}
exports.isBigIntObject = isBigIntObject;
function isSymbolObject(value) {
    return SymbolSupported && checkBoxedPrimitive(value, symbolValue);
}
exports.isSymbolObject = isSymbolObject;
function isBoxedPrimitive(value) {
    return isNumberObject(value) || isStringObject(value) || isBooleanObject(value) || isBigIntObject(value) || isSymbolObject(value);
}
exports.isBoxedPrimitive = isBoxedPrimitive;
function isAnyArrayBuffer(value) {
    return typeof Uint8Array !== "undefined" && (isArrayBuffer(value) || isSharedArrayBuffer(value));
}
exports.isAnyArrayBuffer = isAnyArrayBuffer;
[
    "isProxy",
    "isExternal",
    "isModuleNamespaceObject"
].forEach(function(method) {
    Object.defineProperty(exports, method, {
        enumerable: false,
        value: function() {
            throw new Error(method + " is not supported in userland");
        }
    });
});

},{"6b5f9ae3e436d527":"8h2Wj","285c2b8081bf4b68":"gP5bs","e95b88ccd80e1671":"lwBGC","7db151546a22c2a8":"87p22"}],"8h2Wj":[function(require,module,exports) {
"use strict";
var hasToStringTag = require("e2b01ce809f132fb")();
var callBound = require("649cbf9949986a39");
var $toString = callBound("Object.prototype.toString");
var isStandardArguments = function isArguments(value) {
    if (hasToStringTag && value && typeof value === "object" && Symbol.toStringTag in value) return false;
    return $toString(value) === "[object Arguments]";
};
var isLegacyArguments = function isArguments(value) {
    if (isStandardArguments(value)) return true;
    return value !== null && typeof value === "object" && typeof value.length === "number" && value.length >= 0 && $toString(value) !== "[object Array]" && $toString(value.callee) === "[object Function]";
};
var supportsStandardArguments = function() {
    return isStandardArguments(arguments);
}();
isStandardArguments.isLegacyArguments = isLegacyArguments; // for tests
module.exports = supportsStandardArguments ? isStandardArguments : isLegacyArguments;

},{"e2b01ce809f132fb":"54EkR","649cbf9949986a39":"fflB1"}],"54EkR":[function(require,module,exports) {
"use strict";
var hasSymbols = require("2ef89576d4959bff");
module.exports = function hasToStringTagShams() {
    return hasSymbols() && !!Symbol.toStringTag;
};

},{"2ef89576d4959bff":"aARZX"}],"aARZX":[function(require,module,exports) {
"use strict";
/* eslint complexity: [2, 18], max-statements: [2, 33] */ module.exports = function hasSymbols() {
    if (typeof Symbol !== "function" || typeof Object.getOwnPropertySymbols !== "function") return false;
    if (typeof Symbol.iterator === "symbol") return true;
    var obj = {};
    var sym = Symbol("test");
    var symObj = Object(sym);
    if (typeof sym === "string") return false;
    if (Object.prototype.toString.call(sym) !== "[object Symbol]") return false;
    if (Object.prototype.toString.call(symObj) !== "[object Symbol]") return false;
    // temp disabled per https://github.com/ljharb/object.assign/issues/17
    // if (sym instanceof Symbol) { return false; }
    // temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
    // if (!(symObj instanceof Symbol)) { return false; }
    // if (typeof Symbol.prototype.toString !== 'function') { return false; }
    // if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }
    var symVal = 42;
    obj[sym] = symVal;
    for(sym in obj)return false;
     // eslint-disable-line no-restricted-syntax, no-unreachable-loop
    if (typeof Object.keys === "function" && Object.keys(obj).length !== 0) return false;
    if (typeof Object.getOwnPropertyNames === "function" && Object.getOwnPropertyNames(obj).length !== 0) return false;
    var syms = Object.getOwnPropertySymbols(obj);
    if (syms.length !== 1 || syms[0] !== sym) return false;
    if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) return false;
    if (typeof Object.getOwnPropertyDescriptor === "function") {
        var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
        if (descriptor.value !== symVal || descriptor.enumerable !== true) return false;
    }
    return true;
};

},{}],"fflB1":[function(require,module,exports) {
"use strict";
var GetIntrinsic = require("8b08ecb81cf4de17");
var callBind = require("266fc50410cfc4a");
var $indexOf = callBind(GetIntrinsic("String.prototype.indexOf"));
module.exports = function callBoundIntrinsic(name, allowMissing) {
    var intrinsic = GetIntrinsic(name, !!allowMissing);
    if (typeof intrinsic === "function" && $indexOf(name, ".prototype.") > -1) return callBind(intrinsic);
    return intrinsic;
};

},{"8b08ecb81cf4de17":"fLGpS","266fc50410cfc4a":"jcpLY"}],"fLGpS":[function(require,module,exports) {
"use strict";
var undefined;
var $SyntaxError = SyntaxError;
var $Function = Function;
var $TypeError = TypeError;
// eslint-disable-next-line consistent-return
var getEvalledConstructor = function(expressionSyntax) {
    try {
        return $Function('"use strict"; return (' + expressionSyntax + ").constructor;")();
    } catch (e) {}
};
var $gOPD = Object.getOwnPropertyDescriptor;
if ($gOPD) try {
    $gOPD({}, "");
} catch (e) {
    $gOPD = null; // this is IE 8, which has a broken gOPD
}
var throwTypeError = function() {
    throw new $TypeError();
};
var ThrowTypeError = $gOPD ? function() {
    try {
        // eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
        arguments.callee; // IE 8 does not throw here
        return throwTypeError;
    } catch (calleeThrows) {
        try {
            // IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
            return $gOPD(arguments, "callee").get;
        } catch (gOPDthrows) {
            return throwTypeError;
        }
    }
}() : throwTypeError;
var hasSymbols = require("1f00f712d594ccf")();
var hasProto = require("23730654306aa64c")();
var getProto = Object.getPrototypeOf || (hasProto ? function(x) {
    return x.__proto__;
} // eslint-disable-line no-proto
 : null);
var needsEval = {};
var TypedArray = typeof Uint8Array === "undefined" || !getProto ? undefined : getProto(Uint8Array);
var INTRINSICS = {
    "%AggregateError%": typeof AggregateError === "undefined" ? undefined : AggregateError,
    "%Array%": Array,
    "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? undefined : ArrayBuffer,
    "%ArrayIteratorPrototype%": hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined,
    "%AsyncFromSyncIteratorPrototype%": undefined,
    "%AsyncFunction%": needsEval,
    "%AsyncGenerator%": needsEval,
    "%AsyncGeneratorFunction%": needsEval,
    "%AsyncIteratorPrototype%": needsEval,
    "%Atomics%": typeof Atomics === "undefined" ? undefined : Atomics,
    "%BigInt%": typeof BigInt === "undefined" ? undefined : BigInt,
    "%BigInt64Array%": typeof BigInt64Array === "undefined" ? undefined : BigInt64Array,
    "%BigUint64Array%": typeof BigUint64Array === "undefined" ? undefined : BigUint64Array,
    "%Boolean%": Boolean,
    "%DataView%": typeof DataView === "undefined" ? undefined : DataView,
    "%Date%": Date,
    "%decodeURI%": decodeURI,
    "%decodeURIComponent%": decodeURIComponent,
    "%encodeURI%": encodeURI,
    "%encodeURIComponent%": encodeURIComponent,
    "%Error%": Error,
    "%eval%": eval,
    "%EvalError%": EvalError,
    "%Float32Array%": typeof Float32Array === "undefined" ? undefined : Float32Array,
    "%Float64Array%": typeof Float64Array === "undefined" ? undefined : Float64Array,
    "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? undefined : FinalizationRegistry,
    "%Function%": $Function,
    "%GeneratorFunction%": needsEval,
    "%Int8Array%": typeof Int8Array === "undefined" ? undefined : Int8Array,
    "%Int16Array%": typeof Int16Array === "undefined" ? undefined : Int16Array,
    "%Int32Array%": typeof Int32Array === "undefined" ? undefined : Int32Array,
    "%isFinite%": isFinite,
    "%isNaN%": isNaN,
    "%IteratorPrototype%": hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined,
    "%JSON%": typeof JSON === "object" ? JSON : undefined,
    "%Map%": typeof Map === "undefined" ? undefined : Map,
    "%MapIteratorPrototype%": typeof Map === "undefined" || !hasSymbols || !getProto ? undefined : getProto(new Map()[Symbol.iterator]()),
    "%Math%": Math,
    "%Number%": Number,
    "%Object%": Object,
    "%parseFloat%": parseFloat,
    "%parseInt%": parseInt,
    "%Promise%": typeof Promise === "undefined" ? undefined : Promise,
    "%Proxy%": typeof Proxy === "undefined" ? undefined : Proxy,
    "%RangeError%": RangeError,
    "%ReferenceError%": ReferenceError,
    "%Reflect%": typeof Reflect === "undefined" ? undefined : Reflect,
    "%RegExp%": RegExp,
    "%Set%": typeof Set === "undefined" ? undefined : Set,
    "%SetIteratorPrototype%": typeof Set === "undefined" || !hasSymbols || !getProto ? undefined : getProto(new Set()[Symbol.iterator]()),
    "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? undefined : SharedArrayBuffer,
    "%String%": String,
    "%StringIteratorPrototype%": hasSymbols && getProto ? getProto(""[Symbol.iterator]()) : undefined,
    "%Symbol%": hasSymbols ? Symbol : undefined,
    "%SyntaxError%": $SyntaxError,
    "%ThrowTypeError%": ThrowTypeError,
    "%TypedArray%": TypedArray,
    "%TypeError%": $TypeError,
    "%Uint8Array%": typeof Uint8Array === "undefined" ? undefined : Uint8Array,
    "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? undefined : Uint8ClampedArray,
    "%Uint16Array%": typeof Uint16Array === "undefined" ? undefined : Uint16Array,
    "%Uint32Array%": typeof Uint32Array === "undefined" ? undefined : Uint32Array,
    "%URIError%": URIError,
    "%WeakMap%": typeof WeakMap === "undefined" ? undefined : WeakMap,
    "%WeakRef%": typeof WeakRef === "undefined" ? undefined : WeakRef,
    "%WeakSet%": typeof WeakSet === "undefined" ? undefined : WeakSet
};
if (getProto) try {
    null.error; // eslint-disable-line no-unused-expressions
} catch (e) {
    // https://github.com/tc39/proposal-shadowrealm/pull/384#issuecomment-1364264229
    var errorProto = getProto(getProto(e));
    INTRINSICS["%Error.prototype%"] = errorProto;
}
var doEval = function doEval(name) {
    var value;
    if (name === "%AsyncFunction%") value = getEvalledConstructor("async function () {}");
    else if (name === "%GeneratorFunction%") value = getEvalledConstructor("function* () {}");
    else if (name === "%AsyncGeneratorFunction%") value = getEvalledConstructor("async function* () {}");
    else if (name === "%AsyncGenerator%") {
        var fn = doEval("%AsyncGeneratorFunction%");
        if (fn) value = fn.prototype;
    } else if (name === "%AsyncIteratorPrototype%") {
        var gen = doEval("%AsyncGenerator%");
        if (gen && getProto) value = getProto(gen.prototype);
    }
    INTRINSICS[name] = value;
    return value;
};
var LEGACY_ALIASES = {
    "%ArrayBufferPrototype%": [
        "ArrayBuffer",
        "prototype"
    ],
    "%ArrayPrototype%": [
        "Array",
        "prototype"
    ],
    "%ArrayProto_entries%": [
        "Array",
        "prototype",
        "entries"
    ],
    "%ArrayProto_forEach%": [
        "Array",
        "prototype",
        "forEach"
    ],
    "%ArrayProto_keys%": [
        "Array",
        "prototype",
        "keys"
    ],
    "%ArrayProto_values%": [
        "Array",
        "prototype",
        "values"
    ],
    "%AsyncFunctionPrototype%": [
        "AsyncFunction",
        "prototype"
    ],
    "%AsyncGenerator%": [
        "AsyncGeneratorFunction",
        "prototype"
    ],
    "%AsyncGeneratorPrototype%": [
        "AsyncGeneratorFunction",
        "prototype",
        "prototype"
    ],
    "%BooleanPrototype%": [
        "Boolean",
        "prototype"
    ],
    "%DataViewPrototype%": [
        "DataView",
        "prototype"
    ],
    "%DatePrototype%": [
        "Date",
        "prototype"
    ],
    "%ErrorPrototype%": [
        "Error",
        "prototype"
    ],
    "%EvalErrorPrototype%": [
        "EvalError",
        "prototype"
    ],
    "%Float32ArrayPrototype%": [
        "Float32Array",
        "prototype"
    ],
    "%Float64ArrayPrototype%": [
        "Float64Array",
        "prototype"
    ],
    "%FunctionPrototype%": [
        "Function",
        "prototype"
    ],
    "%Generator%": [
        "GeneratorFunction",
        "prototype"
    ],
    "%GeneratorPrototype%": [
        "GeneratorFunction",
        "prototype",
        "prototype"
    ],
    "%Int8ArrayPrototype%": [
        "Int8Array",
        "prototype"
    ],
    "%Int16ArrayPrototype%": [
        "Int16Array",
        "prototype"
    ],
    "%Int32ArrayPrototype%": [
        "Int32Array",
        "prototype"
    ],
    "%JSONParse%": [
        "JSON",
        "parse"
    ],
    "%JSONStringify%": [
        "JSON",
        "stringify"
    ],
    "%MapPrototype%": [
        "Map",
        "prototype"
    ],
    "%NumberPrototype%": [
        "Number",
        "prototype"
    ],
    "%ObjectPrototype%": [
        "Object",
        "prototype"
    ],
    "%ObjProto_toString%": [
        "Object",
        "prototype",
        "toString"
    ],
    "%ObjProto_valueOf%": [
        "Object",
        "prototype",
        "valueOf"
    ],
    "%PromisePrototype%": [
        "Promise",
        "prototype"
    ],
    "%PromiseProto_then%": [
        "Promise",
        "prototype",
        "then"
    ],
    "%Promise_all%": [
        "Promise",
        "all"
    ],
    "%Promise_reject%": [
        "Promise",
        "reject"
    ],
    "%Promise_resolve%": [
        "Promise",
        "resolve"
    ],
    "%RangeErrorPrototype%": [
        "RangeError",
        "prototype"
    ],
    "%ReferenceErrorPrototype%": [
        "ReferenceError",
        "prototype"
    ],
    "%RegExpPrototype%": [
        "RegExp",
        "prototype"
    ],
    "%SetPrototype%": [
        "Set",
        "prototype"
    ],
    "%SharedArrayBufferPrototype%": [
        "SharedArrayBuffer",
        "prototype"
    ],
    "%StringPrototype%": [
        "String",
        "prototype"
    ],
    "%SymbolPrototype%": [
        "Symbol",
        "prototype"
    ],
    "%SyntaxErrorPrototype%": [
        "SyntaxError",
        "prototype"
    ],
    "%TypedArrayPrototype%": [
        "TypedArray",
        "prototype"
    ],
    "%TypeErrorPrototype%": [
        "TypeError",
        "prototype"
    ],
    "%Uint8ArrayPrototype%": [
        "Uint8Array",
        "prototype"
    ],
    "%Uint8ClampedArrayPrototype%": [
        "Uint8ClampedArray",
        "prototype"
    ],
    "%Uint16ArrayPrototype%": [
        "Uint16Array",
        "prototype"
    ],
    "%Uint32ArrayPrototype%": [
        "Uint32Array",
        "prototype"
    ],
    "%URIErrorPrototype%": [
        "URIError",
        "prototype"
    ],
    "%WeakMapPrototype%": [
        "WeakMap",
        "prototype"
    ],
    "%WeakSetPrototype%": [
        "WeakSet",
        "prototype"
    ]
};
var bind = require("7c5e688e48cd07b0");
var hasOwn = require("b03d0058935d00bf");
var $concat = bind.call(Function.call, Array.prototype.concat);
var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
var $replace = bind.call(Function.call, String.prototype.replace);
var $strSlice = bind.call(Function.call, String.prototype.slice);
var $exec = bind.call(Function.call, RegExp.prototype.exec);
/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */ var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */ 
var stringToPath = function stringToPath(string) {
    var first = $strSlice(string, 0, 1);
    var last = $strSlice(string, -1);
    if (first === "%" && last !== "%") throw new $SyntaxError("invalid intrinsic syntax, expected closing `%`");
    else if (last === "%" && first !== "%") throw new $SyntaxError("invalid intrinsic syntax, expected opening `%`");
    var result = [];
    $replace(string, rePropName, function(match, number, quote, subString) {
        result[result.length] = quote ? $replace(subString, reEscapeChar, "$1") : number || match;
    });
    return result;
};
/* end adaptation */ var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
    var intrinsicName = name;
    var alias;
    if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
        alias = LEGACY_ALIASES[intrinsicName];
        intrinsicName = "%" + alias[0] + "%";
    }
    if (hasOwn(INTRINSICS, intrinsicName)) {
        var value = INTRINSICS[intrinsicName];
        if (value === needsEval) value = doEval(intrinsicName);
        if (typeof value === "undefined" && !allowMissing) throw new $TypeError("intrinsic " + name + " exists, but is not available. Please file an issue!");
        return {
            alias: alias,
            name: intrinsicName,
            value: value
        };
    }
    throw new $SyntaxError("intrinsic " + name + " does not exist!");
};
module.exports = function GetIntrinsic(name, allowMissing) {
    if (typeof name !== "string" || name.length === 0) throw new $TypeError("intrinsic name must be a non-empty string");
    if (arguments.length > 1 && typeof allowMissing !== "boolean") throw new $TypeError('"allowMissing" argument must be a boolean');
    if ($exec(/^%?[^%]*%?$/, name) === null) throw new $SyntaxError("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
    var parts = stringToPath(name);
    var intrinsicBaseName = parts.length > 0 ? parts[0] : "";
    var intrinsic = getBaseIntrinsic("%" + intrinsicBaseName + "%", allowMissing);
    var intrinsicRealName = intrinsic.name;
    var value = intrinsic.value;
    var skipFurtherCaching = false;
    var alias = intrinsic.alias;
    if (alias) {
        intrinsicBaseName = alias[0];
        $spliceApply(parts, $concat([
            0,
            1
        ], alias));
    }
    for(var i = 1, isOwn = true; i < parts.length; i += 1){
        var part = parts[i];
        var first = $strSlice(part, 0, 1);
        var last = $strSlice(part, -1);
        if ((first === '"' || first === "'" || first === "`" || last === '"' || last === "'" || last === "`") && first !== last) throw new $SyntaxError("property names with quotes must have matching quotes");
        if (part === "constructor" || !isOwn) skipFurtherCaching = true;
        intrinsicBaseName += "." + part;
        intrinsicRealName = "%" + intrinsicBaseName + "%";
        if (hasOwn(INTRINSICS, intrinsicRealName)) value = INTRINSICS[intrinsicRealName];
        else if (value != null) {
            if (!(part in value)) {
                if (!allowMissing) throw new $TypeError("base intrinsic for " + name + " exists, but the property is not available.");
                return void 0;
            }
            if ($gOPD && i + 1 >= parts.length) {
                var desc = $gOPD(value, part);
                isOwn = !!desc;
                // By convention, when a data property is converted to an accessor
                // property to emulate a data property that does not suffer from
                // the override mistake, that accessor's getter is marked with
                // an `originalValue` property. Here, when we detect this, we
                // uphold the illusion by pretending to see that original data
                // property, i.e., returning the value rather than the getter
                // itself.
                if (isOwn && "get" in desc && !("originalValue" in desc.get)) value = desc.get;
                else value = value[part];
            } else {
                isOwn = hasOwn(value, part);
                value = value[part];
            }
            if (isOwn && !skipFurtherCaching) INTRINSICS[intrinsicRealName] = value;
        }
    }
    return value;
};

},{"1f00f712d594ccf":"aTWGV","23730654306aa64c":"8eRgL","7c5e688e48cd07b0":"29p7Z","b03d0058935d00bf":"mx2eX"}],"aTWGV":[function(require,module,exports) {
"use strict";
var origSymbol = typeof Symbol !== "undefined" && Symbol;
var hasSymbolSham = require("3fb25678c62d2fce");
module.exports = function hasNativeSymbols() {
    if (typeof origSymbol !== "function") return false;
    if (typeof Symbol !== "function") return false;
    if (typeof origSymbol("foo") !== "symbol") return false;
    if (typeof Symbol("bar") !== "symbol") return false;
    return hasSymbolSham();
};

},{"3fb25678c62d2fce":"aARZX"}],"8eRgL":[function(require,module,exports) {
"use strict";
var test = {
    foo: {}
};
var $Object = Object;
module.exports = function hasProto() {
    return ({
        __proto__: test
    }).foo === test.foo && !(({
        __proto__: null
    }) instanceof $Object);
};

},{}],"29p7Z":[function(require,module,exports) {
"use strict";
var implementation = require("12e173b4dbaee960");
module.exports = Function.prototype.bind || implementation;

},{"12e173b4dbaee960":"kKUiD"}],"kKUiD":[function(require,module,exports) {
"use strict";
/* eslint no-invalid-this: 1 */ var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
var slice = Array.prototype.slice;
var toStr = Object.prototype.toString;
var funcType = "[object Function]";
module.exports = function bind(that) {
    var target = this;
    if (typeof target !== "function" || toStr.call(target) !== funcType) throw new TypeError(ERROR_MESSAGE + target);
    var args = slice.call(arguments, 1);
    var bound;
    var binder = function() {
        if (this instanceof bound) {
            var result = target.apply(this, args.concat(slice.call(arguments)));
            if (Object(result) === result) return result;
            return this;
        } else return target.apply(that, args.concat(slice.call(arguments)));
    };
    var boundLength = Math.max(0, target.length - args.length);
    var boundArgs = [];
    for(var i = 0; i < boundLength; i++)boundArgs.push("$" + i);
    bound = Function("binder", "return function (" + boundArgs.join(",") + "){ return binder.apply(this,arguments); }")(binder);
    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }
    return bound;
};

},{}],"mx2eX":[function(require,module,exports) {
"use strict";
var bind = require("ec4f1e1d3f29fa3e");
module.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);

},{"ec4f1e1d3f29fa3e":"29p7Z"}],"jcpLY":[function(require,module,exports) {
"use strict";
var bind = require("4f9d84d5de4909bc");
var GetIntrinsic = require("68d2ad3775278f43");
var $apply = GetIntrinsic("%Function.prototype.apply%");
var $call = GetIntrinsic("%Function.prototype.call%");
var $reflectApply = GetIntrinsic("%Reflect.apply%", true) || bind.call($call, $apply);
var $gOPD = GetIntrinsic("%Object.getOwnPropertyDescriptor%", true);
var $defineProperty = GetIntrinsic("%Object.defineProperty%", true);
var $max = GetIntrinsic("%Math.max%");
if ($defineProperty) try {
    $defineProperty({}, "a", {
        value: 1
    });
} catch (e) {
    // IE 8 has a broken defineProperty
    $defineProperty = null;
}
module.exports = function callBind(originalFunction) {
    var func = $reflectApply(bind, $call, arguments);
    if ($gOPD && $defineProperty) {
        var desc = $gOPD(func, "length");
        if (desc.configurable) // original length, plus the receiver, minus any additional arguments (after the receiver)
        $defineProperty(func, "length", {
            value: 1 + $max(0, originalFunction.length - (arguments.length - 1))
        });
    }
    return func;
};
var applyBind = function applyBind() {
    return $reflectApply(bind, $apply, arguments);
};
if ($defineProperty) $defineProperty(module.exports, "apply", {
    value: applyBind
});
else module.exports.apply = applyBind;

},{"4f9d84d5de4909bc":"29p7Z","68d2ad3775278f43":"fLGpS"}],"gP5bs":[function(require,module,exports) {
"use strict";
var toStr = Object.prototype.toString;
var fnToStr = Function.prototype.toString;
var isFnRegex = /^\s*(?:function)?\*/;
var hasToStringTag = require("b42ab74c25dbb155")();
var getProto = Object.getPrototypeOf;
var getGeneratorFunc = function() {
    if (!hasToStringTag) return false;
    try {
        return Function("return function*() {}")();
    } catch (e) {}
};
var GeneratorFunction;
module.exports = function isGeneratorFunction(fn) {
    if (typeof fn !== "function") return false;
    if (isFnRegex.test(fnToStr.call(fn))) return true;
    if (!hasToStringTag) {
        var str = toStr.call(fn);
        return str === "[object GeneratorFunction]";
    }
    if (!getProto) return false;
    if (typeof GeneratorFunction === "undefined") {
        var generatorFunc = getGeneratorFunc();
        GeneratorFunction = generatorFunc ? getProto(generatorFunc) : false;
    }
    return getProto(fn) === GeneratorFunction;
};

},{"b42ab74c25dbb155":"54EkR"}],"lwBGC":[function(require,module,exports) {
var global = arguments[3];
"use strict";
var forEach = require("2941d48f36957e3c");
var availableTypedArrays = require("beaf5502a5823cce");
var callBind = require("e5d203a1b4c809f9");
var callBound = require("83f633f9b335db8f");
var gOPD = require("ce6b45c571ba4e3e");
var $toString = callBound("Object.prototype.toString");
var hasToStringTag = require("9e7ef6c88184c56")();
var g = typeof globalThis === "undefined" ? global : globalThis;
var typedArrays = availableTypedArrays();
var $slice = callBound("String.prototype.slice");
var getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');
var $indexOf = callBound("Array.prototype.indexOf", true) || function indexOf(array, value) {
    for(var i = 0; i < array.length; i += 1){
        if (array[i] === value) return i;
    }
    return -1;
};
var cache = {
    __proto__: null
};
if (hasToStringTag && gOPD && getPrototypeOf) forEach(typedArrays, function(typedArray) {
    var arr = new g[typedArray]();
    if (Symbol.toStringTag in arr) {
        var proto = getPrototypeOf(arr);
        var descriptor = gOPD(proto, Symbol.toStringTag);
        if (!descriptor) {
            var superProto = getPrototypeOf(proto);
            descriptor = gOPD(superProto, Symbol.toStringTag);
        }
        cache["$" + typedArray] = callBind(descriptor.get);
    }
});
else forEach(typedArrays, function(typedArray) {
    var arr = new g[typedArray]();
    cache["$" + typedArray] = callBind(arr.slice);
});
var tryTypedArrays = function tryAllTypedArrays(value) {
    var found = false;
    forEach(cache, function(getter, typedArray) {
        if (!found) try {
            if ("$" + getter(value) === typedArray) found = $slice(typedArray, 1);
        } catch (e) {}
    });
    return found;
};
var trySlices = function tryAllSlices(value) {
    var found = false;
    forEach(cache, function(getter, name) {
        if (!found) try {
            getter(value);
            found = $slice(name, 1);
        } catch (e) {}
    });
    return found;
};
module.exports = function whichTypedArray(value) {
    if (!value || typeof value !== "object") return false;
    if (!hasToStringTag) {
        var tag = $slice($toString(value), 8, -1);
        if ($indexOf(typedArrays, tag) > -1) return tag;
        if (tag !== "Object") return false;
        // node < 0.6 hits here on real Typed Arrays
        return trySlices(value);
    }
    if (!gOPD) return null;
     // unknown engine
    return tryTypedArrays(value);
};

},{"2941d48f36957e3c":"9GBKE","beaf5502a5823cce":"8em50","e5d203a1b4c809f9":"jcpLY","83f633f9b335db8f":"fflB1","ce6b45c571ba4e3e":"iGdut","9e7ef6c88184c56":"54EkR"}],"9GBKE":[function(require,module,exports) {
"use strict";
var isCallable = require("e50ebc24bbb25feb");
var toStr = Object.prototype.toString;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var forEachArray = function forEachArray(array, iterator, receiver) {
    for(var i = 0, len = array.length; i < len; i++)if (hasOwnProperty.call(array, i)) {
        if (receiver == null) iterator(array[i], i, array);
        else iterator.call(receiver, array[i], i, array);
    }
};
var forEachString = function forEachString(string, iterator, receiver) {
    for(var i = 0, len = string.length; i < len; i++)// no such thing as a sparse string.
    if (receiver == null) iterator(string.charAt(i), i, string);
    else iterator.call(receiver, string.charAt(i), i, string);
};
var forEachObject = function forEachObject(object, iterator, receiver) {
    for(var k in object)if (hasOwnProperty.call(object, k)) {
        if (receiver == null) iterator(object[k], k, object);
        else iterator.call(receiver, object[k], k, object);
    }
};
var forEach = function forEach(list, iterator, thisArg) {
    if (!isCallable(iterator)) throw new TypeError("iterator must be a function");
    var receiver;
    if (arguments.length >= 3) receiver = thisArg;
    if (toStr.call(list) === "[object Array]") forEachArray(list, iterator, receiver);
    else if (typeof list === "string") forEachString(list, iterator, receiver);
    else forEachObject(list, iterator, receiver);
};
module.exports = forEach;

},{"e50ebc24bbb25feb":"hiJAI"}],"hiJAI":[function(require,module,exports) {
"use strict";
var fnToStr = Function.prototype.toString;
var reflectApply = typeof Reflect === "object" && Reflect !== null && Reflect.apply;
var badArrayLike;
var isCallableMarker;
if (typeof reflectApply === "function" && typeof Object.defineProperty === "function") try {
    badArrayLike = Object.defineProperty({}, "length", {
        get: function() {
            throw isCallableMarker;
        }
    });
    isCallableMarker = {};
    // eslint-disable-next-line no-throw-literal
    reflectApply(function() {
        throw 42;
    }, null, badArrayLike);
} catch (_) {
    if (_ !== isCallableMarker) reflectApply = null;
}
else reflectApply = null;
var constructorRegex = /^\s*class\b/;
var isES6ClassFn = function isES6ClassFunction(value) {
    try {
        var fnStr = fnToStr.call(value);
        return constructorRegex.test(fnStr);
    } catch (e) {
        return false; // not a function
    }
};
var tryFunctionObject = function tryFunctionToStr(value) {
    try {
        if (isES6ClassFn(value)) return false;
        fnToStr.call(value);
        return true;
    } catch (e) {
        return false;
    }
};
var toStr = Object.prototype.toString;
var objectClass = "[object Object]";
var fnClass = "[object Function]";
var genClass = "[object GeneratorFunction]";
var ddaClass = "[object HTMLAllCollection]"; // IE 11
var ddaClass2 = "[object HTML document.all class]";
var ddaClass3 = "[object HTMLCollection]"; // IE 9-10
var hasToStringTag = typeof Symbol === "function" && !!Symbol.toStringTag; // better: use `has-tostringtag`
var isIE68 = !(0 in [
    , 
]); // eslint-disable-line no-sparse-arrays, comma-spacing
var isDDA = function isDocumentDotAll() {
    return false;
};
if (typeof document === "object") {
    // Firefox 3 canonicalizes DDA to undefined when it's not accessed directly
    var all = document.all;
    if (toStr.call(all) === toStr.call(document.all)) isDDA = function isDocumentDotAll(value) {
        /* globals document: false */ // in IE 6-8, typeof document.all is "object" and it's truthy
        if ((isIE68 || !value) && (typeof value === "undefined" || typeof value === "object")) try {
            var str = toStr.call(value);
            return (str === ddaClass || str === ddaClass2 || str === ddaClass3 // opera 12.16
             || str === objectClass // IE 6-8
            ) && value("") == null; // eslint-disable-line eqeqeq
        } catch (e) {}
        return false;
    };
}
module.exports = reflectApply ? function isCallable(value) {
    if (isDDA(value)) return true;
    if (!value) return false;
    if (typeof value !== "function" && typeof value !== "object") return false;
    try {
        reflectApply(value, null, badArrayLike);
    } catch (e) {
        if (e !== isCallableMarker) return false;
    }
    return !isES6ClassFn(value) && tryFunctionObject(value);
} : function isCallable(value) {
    if (isDDA(value)) return true;
    if (!value) return false;
    if (typeof value !== "function" && typeof value !== "object") return false;
    if (hasToStringTag) return tryFunctionObject(value);
    if (isES6ClassFn(value)) return false;
    var strClass = toStr.call(value);
    if (strClass !== fnClass && strClass !== genClass && !/^\[object HTML/.test(strClass)) return false;
    return tryFunctionObject(value);
};

},{}],"8em50":[function(require,module,exports) {
var global = arguments[3];
"use strict";
var possibleNames = [
    "BigInt64Array",
    "BigUint64Array",
    "Float32Array",
    "Float64Array",
    "Int16Array",
    "Int32Array",
    "Int8Array",
    "Uint16Array",
    "Uint32Array",
    "Uint8Array",
    "Uint8ClampedArray"
];
var g = typeof globalThis === "undefined" ? global : globalThis;
module.exports = function availableTypedArrays() {
    var out = [];
    for(var i = 0; i < possibleNames.length; i++)if (typeof g[possibleNames[i]] === "function") out[out.length] = possibleNames[i];
    return out;
};

},{}],"iGdut":[function(require,module,exports) {
"use strict";
var GetIntrinsic = require("693e651525841e04");
var $gOPD = GetIntrinsic("%Object.getOwnPropertyDescriptor%", true);
if ($gOPD) try {
    $gOPD([], "length");
} catch (e) {
    // IE 8 has a broken gOPD
    $gOPD = null;
}
module.exports = $gOPD;

},{"693e651525841e04":"fLGpS"}],"87p22":[function(require,module,exports) {
"use strict";
var whichTypedArray = require("ccf73e5f240c2b8");
module.exports = function isTypedArray(value) {
    return !!whichTypedArray(value);
};

},{"ccf73e5f240c2b8":"lwBGC"}],"2LoeM":[function(require,module,exports) {
module.exports = function isBuffer(arg) {
    return arg && typeof arg === "object" && typeof arg.copy === "function" && typeof arg.fill === "function" && typeof arg.readUInt8 === "function";
};

},{}],"l3bOz":[function(require,module,exports) {
if (typeof Object.create === "function") // implementation from standard node.js 'util' module
module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
                value: ctor,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
    }
};
else // old school shim for old browsers
module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
};

},{}],"4CZbl":[function(require,module,exports) {
// Currently in sync with Node.js lib/internal/assert/assertion_error.js
// https://github.com/nodejs/node/commit/0817840f775032169ddd70c85ac059f18ffcc81c
var process = require("228da2c254a5e871");
"use strict";
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
            return Object.getOwnPropertyDescriptor(source, sym).enumerable;
        }));
        ownKeys.forEach(function(key) {
            _defineProperty(target, key, source[key]);
        });
    }
    return target;
}
function _defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _possibleConstructorReturn(self, call) {
    if (call && (_typeof(call) === "object" || typeof call === "function")) return call;
    return _assertThisInitialized(self);
}
function _assertThisInitialized(self) {
    if (self === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return self;
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) throw new TypeError("Super expression must either be null or a function");
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
}
function _wrapNativeSuper(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;
    _wrapNativeSuper = function _wrapNativeSuper(Class) {
        if (Class === null || !_isNativeFunction(Class)) return Class;
        if (typeof Class !== "function") throw new TypeError("Super expression must either be null or a function");
        if (typeof _cache !== "undefined") {
            if (_cache.has(Class)) return _cache.get(Class);
            _cache.set(Class, Wrapper);
        }
        function Wrapper() {
            return _construct(Class, arguments, _getPrototypeOf(this).constructor);
        }
        Wrapper.prototype = Object.create(Class.prototype, {
            constructor: {
                value: Wrapper,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        return _setPrototypeOf(Wrapper, Class);
    };
    return _wrapNativeSuper(Class);
}
function isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}
function _construct(Parent, args, Class) {
    if (isNativeReflectConstruct()) _construct = Reflect.construct;
    else _construct = function _construct(Parent, args, Class) {
        var a = [
            null
        ];
        a.push.apply(a, args);
        var Constructor = Function.bind.apply(Parent, a);
        var instance = new Constructor();
        if (Class) _setPrototypeOf(instance, Class.prototype);
        return instance;
    };
    return _construct.apply(null, arguments);
}
function _isNativeFunction(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
}
function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _setPrototypeOf(o, p);
}
function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
}
function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") _typeof = function _typeof(obj) {
        return typeof obj;
    };
    else _typeof = function _typeof(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
    return _typeof(obj);
}
var _require = require("9984e91d63ed614c"), inspect = _require.inspect;
var _require2 = require("1670766d7c5cef96"), ERR_INVALID_ARG_TYPE = _require2.codes.ERR_INVALID_ARG_TYPE; // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
function endsWith(str, search, this_len) {
    if (this_len === undefined || this_len > str.length) this_len = str.length;
    return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat
function repeat(str, count) {
    count = Math.floor(count);
    if (str.length == 0 || count == 0) return "";
    var maxCount = str.length * count;
    count = Math.floor(Math.log(count) / Math.log(2));
    while(count){
        str += str;
        count--;
    }
    str += str.substring(0, maxCount - str.length);
    return str;
}
var blue = "";
var green = "";
var red = "";
var white = "";
var kReadableOperator = {
    deepStrictEqual: "Expected values to be strictly deep-equal:",
    strictEqual: "Expected values to be strictly equal:",
    strictEqualObject: 'Expected "actual" to be reference-equal to "expected":',
    deepEqual: "Expected values to be loosely deep-equal:",
    equal: "Expected values to be loosely equal:",
    notDeepStrictEqual: 'Expected "actual" not to be strictly deep-equal to:',
    notStrictEqual: 'Expected "actual" to be strictly unequal to:',
    notStrictEqualObject: 'Expected "actual" not to be reference-equal to "expected":',
    notDeepEqual: 'Expected "actual" not to be loosely deep-equal to:',
    notEqual: 'Expected "actual" to be loosely unequal to:',
    notIdentical: "Values identical but not reference-equal:"
}; // Comparing short primitives should just show === / !== instead of using the
// diff.
var kMaxShortLength = 10;
function copyError(source) {
    var keys = Object.keys(source);
    var target = Object.create(Object.getPrototypeOf(source));
    keys.forEach(function(key) {
        target[key] = source[key];
    });
    Object.defineProperty(target, "message", {
        value: source.message
    });
    return target;
}
function inspectValue(val) {
    // The util.inspect default values could be changed. This makes sure the
    // error messages contain the necessary information nevertheless.
    return inspect(val, {
        compact: false,
        customInspect: false,
        depth: 1000,
        maxArrayLength: Infinity,
        // Assert compares only enumerable properties (with a few exceptions).
        showHidden: false,
        // Having a long line as error is better than wrapping the line for
        // comparison for now.
        // TODO(BridgeAR): `breakLength` should be limited as soon as soon as we
        // have meta information about the inspected properties (i.e., know where
        // in what line the property starts and ends).
        breakLength: Infinity,
        // Assert does not detect proxies currently.
        showProxy: false,
        sorted: true,
        // Inspect getters as we also check them when comparing entries.
        getters: true
    });
}
function createErrDiff(actual, expected, operator) {
    var other = "";
    var res = "";
    var lastPos = 0;
    var end = "";
    var skipped = false;
    var actualInspected = inspectValue(actual);
    var actualLines = actualInspected.split("\n");
    var expectedLines = inspectValue(expected).split("\n");
    var i = 0;
    var indicator = ""; // In case both values are objects explicitly mark them as not reference equal
    // for the `strictEqual` operator.
    if (operator === "strictEqual" && _typeof(actual) === "object" && _typeof(expected) === "object" && actual !== null && expected !== null) operator = "strictEqualObject";
     // If "actual" and "expected" fit on a single line and they are not strictly
    // equal, check further special handling.
    if (actualLines.length === 1 && expectedLines.length === 1 && actualLines[0] !== expectedLines[0]) {
        var inputLength = actualLines[0].length + expectedLines[0].length; // If the character length of "actual" and "expected" together is less than
        // kMaxShortLength and if neither is an object and at least one of them is
        // not `zero`, use the strict equal comparison to visualize the output.
        if (inputLength <= kMaxShortLength) {
            if ((_typeof(actual) !== "object" || actual === null) && (_typeof(expected) !== "object" || expected === null) && (actual !== 0 || expected !== 0)) // -0 === +0
            return "".concat(kReadableOperator[operator], "\n\n") + "".concat(actualLines[0], " !== ").concat(expectedLines[0], "\n");
        } else if (operator !== "strictEqualObject") {
            // If the stderr is a tty and the input length is lower than the current
            // columns per line, add a mismatch indicator below the output. If it is
            // not a tty, use a default value of 80 characters.
            var maxLength = process.stderr && process.stderr.isTTY ? process.stderr.columns : 80;
            if (inputLength < maxLength) {
                while(actualLines[0][i] === expectedLines[0][i])i++;
                 // Ignore the first characters.
                if (i > 2) {
                    // Add position indicator for the first mismatch in case it is a
                    // single line and the input length is less than the column length.
                    indicator = "\n  ".concat(repeat(" ", i), "^");
                    i = 0;
                }
            }
        }
    } // Remove all ending lines that match (this optimizes the output for
    // readability by reducing the number of total changed lines).
    var a = actualLines[actualLines.length - 1];
    var b = expectedLines[expectedLines.length - 1];
    while(a === b){
        if (i++ < 2) end = "\n  ".concat(a).concat(end);
        else other = a;
        actualLines.pop();
        expectedLines.pop();
        if (actualLines.length === 0 || expectedLines.length === 0) break;
        a = actualLines[actualLines.length - 1];
        b = expectedLines[expectedLines.length - 1];
    }
    var maxLines = Math.max(actualLines.length, expectedLines.length); // Strict equal with identical objects that are not identical by reference.
    // E.g., assert.deepStrictEqual({ a: Symbol() }, { a: Symbol() })
    if (maxLines === 0) {
        // We have to get the result again. The lines were all removed before.
        var _actualLines = actualInspected.split("\n"); // Only remove lines in case it makes sense to collapse those.
        // TODO: Accept env to always show the full error.
        if (_actualLines.length > 30) {
            _actualLines[26] = "".concat(blue, "...").concat(white);
            while(_actualLines.length > 27)_actualLines.pop();
        }
        return "".concat(kReadableOperator.notIdentical, "\n\n").concat(_actualLines.join("\n"), "\n");
    }
    if (i > 3) {
        end = "\n".concat(blue, "...").concat(white).concat(end);
        skipped = true;
    }
    if (other !== "") {
        end = "\n  ".concat(other).concat(end);
        other = "";
    }
    var printedLines = 0;
    var msg = kReadableOperator[operator] + "\n".concat(green, "+ actual").concat(white, " ").concat(red, "- expected").concat(white);
    var skippedMsg = " ".concat(blue, "...").concat(white, " Lines skipped");
    for(i = 0; i < maxLines; i++){
        // Only extra expected lines exist
        var cur = i - lastPos;
        if (actualLines.length < i + 1) {
            // If the last diverging line is more than one line above and the
            // current line is at least line three, add some of the former lines and
            // also add dots to indicate skipped entries.
            if (cur > 1 && i > 2) {
                if (cur > 4) {
                    res += "\n".concat(blue, "...").concat(white);
                    skipped = true;
                } else if (cur > 3) {
                    res += "\n  ".concat(expectedLines[i - 2]);
                    printedLines++;
                }
                res += "\n  ".concat(expectedLines[i - 1]);
                printedLines++;
            } // Mark the current line as the last diverging one.
            lastPos = i; // Add the expected line to the cache.
            other += "\n".concat(red, "-").concat(white, " ").concat(expectedLines[i]);
            printedLines++; // Only extra actual lines exist
        } else if (expectedLines.length < i + 1) {
            // If the last diverging line is more than one line above and the
            // current line is at least line three, add some of the former lines and
            // also add dots to indicate skipped entries.
            if (cur > 1 && i > 2) {
                if (cur > 4) {
                    res += "\n".concat(blue, "...").concat(white);
                    skipped = true;
                } else if (cur > 3) {
                    res += "\n  ".concat(actualLines[i - 2]);
                    printedLines++;
                }
                res += "\n  ".concat(actualLines[i - 1]);
                printedLines++;
            } // Mark the current line as the last diverging one.
            lastPos = i; // Add the actual line to the result.
            res += "\n".concat(green, "+").concat(white, " ").concat(actualLines[i]);
            printedLines++; // Lines diverge
        } else {
            var expectedLine = expectedLines[i];
            var actualLine = actualLines[i]; // If the lines diverge, specifically check for lines that only diverge by
            // a trailing comma. In that case it is actually identical and we should
            // mark it as such.
            var divergingLines = actualLine !== expectedLine && (!endsWith(actualLine, ",") || actualLine.slice(0, -1) !== expectedLine); // If the expected line has a trailing comma but is otherwise identical,
            // add a comma at the end of the actual line. Otherwise the output could
            // look weird as in:
            //
            //   [
            //     1         // No comma at the end!
            // +   2
            //   ]
            //
            if (divergingLines && endsWith(expectedLine, ",") && expectedLine.slice(0, -1) === actualLine) {
                divergingLines = false;
                actualLine += ",";
            }
            if (divergingLines) {
                // If the last diverging line is more than one line above and the
                // current line is at least line three, add some of the former lines and
                // also add dots to indicate skipped entries.
                if (cur > 1 && i > 2) {
                    if (cur > 4) {
                        res += "\n".concat(blue, "...").concat(white);
                        skipped = true;
                    } else if (cur > 3) {
                        res += "\n  ".concat(actualLines[i - 2]);
                        printedLines++;
                    }
                    res += "\n  ".concat(actualLines[i - 1]);
                    printedLines++;
                } // Mark the current line as the last diverging one.
                lastPos = i; // Add the actual line to the result and cache the expected diverging
                // line so consecutive diverging lines show up as +++--- and not +-+-+-.
                res += "\n".concat(green, "+").concat(white, " ").concat(actualLine);
                other += "\n".concat(red, "-").concat(white, " ").concat(expectedLine);
                printedLines += 2; // Lines are identical
            } else {
                // Add all cached information to the result before adding other things
                // and reset the cache.
                res += other;
                other = ""; // If the last diverging line is exactly one line above or if it is the
                // very first line, add the line to the result.
                if (cur === 1 || i === 0) {
                    res += "\n  ".concat(actualLine);
                    printedLines++;
                }
            }
        } // Inspected object to big (Show ~20 rows max)
        if (printedLines > 20 && i < maxLines - 2) return "".concat(msg).concat(skippedMsg, "\n").concat(res, "\n").concat(blue, "...").concat(white).concat(other, "\n") + "".concat(blue, "...").concat(white);
    }
    return "".concat(msg).concat(skipped ? skippedMsg : "", "\n").concat(res).concat(other).concat(end).concat(indicator);
}
var AssertionError = /*#__PURE__*/ function(_Error) {
    _inherits(AssertionError, _Error);
    function AssertionError(options) {
        var _this;
        _classCallCheck(this, AssertionError);
        if (_typeof(options) !== "object" || options === null) throw new ERR_INVALID_ARG_TYPE("options", "Object", options);
        var message = options.message, operator = options.operator, stackStartFn = options.stackStartFn;
        var actual = options.actual, expected = options.expected;
        var limit = Error.stackTraceLimit;
        Error.stackTraceLimit = 0;
        if (message != null) _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, String(message)));
        else {
            if (process.stderr && process.stderr.isTTY) {
                // Reset on each call to make sure we handle dynamically set environment
                // variables correct.
                if (process.stderr && process.stderr.getColorDepth && process.stderr.getColorDepth() !== 1) {
                    blue = "\x1b[34m";
                    green = "\x1b[32m";
                    white = "\x1b[39m";
                    red = "\x1b[31m";
                } else {
                    blue = "";
                    green = "";
                    white = "";
                    red = "";
                }
            } // Prevent the error stack from being visible by duplicating the error
            // in a very close way to the original in case both sides are actually
            // instances of Error.
            if (_typeof(actual) === "object" && actual !== null && _typeof(expected) === "object" && expected !== null && "stack" in actual && actual instanceof Error && "stack" in expected && expected instanceof Error) {
                actual = copyError(actual);
                expected = copyError(expected);
            }
            if (operator === "deepStrictEqual" || operator === "strictEqual") _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, createErrDiff(actual, expected, operator)));
            else if (operator === "notDeepStrictEqual" || operator === "notStrictEqual") {
                // In case the objects are equal but the operator requires unequal, show
                // the first object and say A equals B
                var base = kReadableOperator[operator];
                var res = inspectValue(actual).split("\n"); // In case "actual" is an object, it should not be reference equal.
                if (operator === "notStrictEqual" && _typeof(actual) === "object" && actual !== null) base = kReadableOperator.notStrictEqualObject;
                 // Only remove lines in case it makes sense to collapse those.
                // TODO: Accept env to always show the full error.
                if (res.length > 30) {
                    res[26] = "".concat(blue, "...").concat(white);
                    while(res.length > 27)res.pop();
                } // Only print a single input.
                if (res.length === 1) _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, "".concat(base, " ").concat(res[0])));
                else _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, "".concat(base, "\n\n").concat(res.join("\n"), "\n")));
            } else {
                var _res = inspectValue(actual);
                var other = "";
                var knownOperators = kReadableOperator[operator];
                if (operator === "notDeepEqual" || operator === "notEqual") {
                    _res = "".concat(kReadableOperator[operator], "\n\n").concat(_res);
                    if (_res.length > 1024) _res = "".concat(_res.slice(0, 1021), "...");
                } else {
                    other = "".concat(inspectValue(expected));
                    if (_res.length > 512) _res = "".concat(_res.slice(0, 509), "...");
                    if (other.length > 512) other = "".concat(other.slice(0, 509), "...");
                    if (operator === "deepEqual" || operator === "equal") _res = "".concat(knownOperators, "\n\n").concat(_res, "\n\nshould equal\n\n");
                    else other = " ".concat(operator, " ").concat(other);
                }
                _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, "".concat(_res).concat(other)));
            }
        }
        Error.stackTraceLimit = limit;
        _this.generatedMessage = !message;
        Object.defineProperty(_assertThisInitialized(_this), "name", {
            value: "AssertionError [ERR_ASSERTION]",
            enumerable: false,
            writable: true,
            configurable: true
        });
        _this.code = "ERR_ASSERTION";
        _this.actual = actual;
        _this.expected = expected;
        _this.operator = operator;
        if (Error.captureStackTrace) // eslint-disable-next-line no-restricted-syntax
        Error.captureStackTrace(_assertThisInitialized(_this), stackStartFn);
         // Create error message including the error code in the name.
        _this.stack; // Reset the name.
        _this.name = "AssertionError";
        return _possibleConstructorReturn(_this);
    }
    _createClass(AssertionError, [
        {
            key: "toString",
            value: function toString() {
                return "".concat(this.name, " [").concat(this.code, "]: ").concat(this.message);
            }
        },
        {
            key: inspect.custom,
            value: function value(recurseTimes, ctx) {
                // This limits the `actual` and `expected` property default inspection to
                // the minimum depth. Otherwise those values would be too verbose compared
                // to the actual error message which contains a combined view of these two
                // input values.
                return inspect(this, _objectSpread({}, ctx, {
                    customInspect: false,
                    depth: 0
                }));
            }
        }
    ]);
    return AssertionError;
}(_wrapNativeSuper(Error));
module.exports = AssertionError;

},{"228da2c254a5e871":"gq3cc","9984e91d63ed614c":"hldjw","1670766d7c5cef96":"kqSBO"}],"iA8VU":[function(require,module,exports) {
/**
 * Code refactored from Mozilla Developer Network:
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
 */ "use strict";
function assign(target, firstSource) {
    if (target === undefined || target === null) throw new TypeError("Cannot convert first argument to object");
    var to = Object(target);
    for(var i = 1; i < arguments.length; i++){
        var nextSource = arguments[i];
        if (nextSource === undefined || nextSource === null) continue;
        var keysArray = Object.keys(Object(nextSource));
        for(var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++){
            var nextKey = keysArray[nextIndex];
            var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
            if (desc !== undefined && desc.enumerable) to[nextKey] = nextSource[nextKey];
        }
    }
    return to;
}
function polyfill() {
    if (!Object.assign) Object.defineProperty(Object, "assign", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: assign
    });
}
module.exports = {
    assign: assign,
    polyfill: polyfill
};

},{}],"jinnx":[function(require,module,exports) {
"use strict";
var define = require("7a0bb7df335a6af");
var callBind = require("794ce1103c4a65ba");
var implementation = require("f52a71fcf365d3bd");
var getPolyfill = require("59addbaef079e040");
var shim = require("c0e8b0f7342ba484");
var polyfill = callBind(getPolyfill(), Object);
define(polyfill, {
    getPolyfill: getPolyfill,
    implementation: implementation,
    shim: shim
});
module.exports = polyfill;

},{"7a0bb7df335a6af":"a7y5v","794ce1103c4a65ba":"jcpLY","f52a71fcf365d3bd":"13n4P","59addbaef079e040":"eynqZ","c0e8b0f7342ba484":"ay931"}],"a7y5v":[function(require,module,exports) {
"use strict";
var keys = require("7ff177585d1618f0");
var hasSymbols = typeof Symbol === "function" && typeof Symbol("foo") === "symbol";
var toStr = Object.prototype.toString;
var concat = Array.prototype.concat;
var origDefineProperty = Object.defineProperty;
var isFunction = function(fn) {
    return typeof fn === "function" && toStr.call(fn) === "[object Function]";
};
var hasPropertyDescriptors = require("c52d62086511583f")();
var supportsDescriptors = origDefineProperty && hasPropertyDescriptors;
var defineProperty = function(object, name, value, predicate) {
    if (name in object) {
        if (predicate === true) {
            if (object[name] === value) return;
        } else if (!isFunction(predicate) || !predicate()) return;
    }
    if (supportsDescriptors) origDefineProperty(object, name, {
        configurable: true,
        enumerable: false,
        value: value,
        writable: true
    });
    else object[name] = value; // eslint-disable-line no-param-reassign
};
var defineProperties = function(object, map) {
    var predicates = arguments.length > 2 ? arguments[2] : {};
    var props = keys(map);
    if (hasSymbols) props = concat.call(props, Object.getOwnPropertySymbols(map));
    for(var i = 0; i < props.length; i += 1)defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
};
defineProperties.supportsDescriptors = !!supportsDescriptors;
module.exports = defineProperties;

},{"7ff177585d1618f0":"bsivU","c52d62086511583f":"5Lkyn"}],"bsivU":[function(require,module,exports) {
"use strict";
var slice = Array.prototype.slice;
var isArgs = require("93e8460f624c96f4");
var origKeys = Object.keys;
var keysShim = origKeys ? function keys(o) {
    return origKeys(o);
} : require("344bb0d7b2568e03");
var originalKeys = Object.keys;
keysShim.shim = function shimObjectKeys() {
    if (Object.keys) {
        var keysWorksWithArguments = function() {
            // Safari 5.0 bug
            var args = Object.keys(arguments);
            return args && args.length === arguments.length;
        }(1, 2);
        if (!keysWorksWithArguments) Object.keys = function keys(object) {
            if (isArgs(object)) return originalKeys(slice.call(object));
            return originalKeys(object);
        };
    } else Object.keys = keysShim;
    return Object.keys || keysShim;
};
module.exports = keysShim;

},{"93e8460f624c96f4":"2AZLV","344bb0d7b2568e03":"5daQ9"}],"2AZLV":[function(require,module,exports) {
"use strict";
var toStr = Object.prototype.toString;
module.exports = function isArguments(value) {
    var str = toStr.call(value);
    var isArgs = str === "[object Arguments]";
    if (!isArgs) isArgs = str !== "[object Array]" && value !== null && typeof value === "object" && typeof value.length === "number" && value.length >= 0 && toStr.call(value.callee) === "[object Function]";
    return isArgs;
};

},{}],"5daQ9":[function(require,module,exports) {
"use strict";
var keysShim;
if (!Object.keys) {
    // modified from https://github.com/es-shims/es5-shim
    var has = Object.prototype.hasOwnProperty;
    var toStr = Object.prototype.toString;
    var isArgs = require("b0d8c8b84be91ffd"); // eslint-disable-line global-require
    var isEnumerable = Object.prototype.propertyIsEnumerable;
    var hasDontEnumBug = !isEnumerable.call({
        toString: null
    }, "toString");
    var hasProtoEnumBug = isEnumerable.call(function() {}, "prototype");
    var dontEnums = [
        "toString",
        "toLocaleString",
        "valueOf",
        "hasOwnProperty",
        "isPrototypeOf",
        "propertyIsEnumerable",
        "constructor"
    ];
    var equalsConstructorPrototype = function(o) {
        var ctor = o.constructor;
        return ctor && ctor.prototype === o;
    };
    var excludedKeys = {
        $applicationCache: true,
        $console: true,
        $external: true,
        $frame: true,
        $frameElement: true,
        $frames: true,
        $innerHeight: true,
        $innerWidth: true,
        $onmozfullscreenchange: true,
        $onmozfullscreenerror: true,
        $outerHeight: true,
        $outerWidth: true,
        $pageXOffset: true,
        $pageYOffset: true,
        $parent: true,
        $scrollLeft: true,
        $scrollTop: true,
        $scrollX: true,
        $scrollY: true,
        $self: true,
        $webkitIndexedDB: true,
        $webkitStorageInfo: true,
        $window: true
    };
    var hasAutomationEqualityBug = function() {
        /* global window */ if (typeof window === "undefined") return false;
        for(var k in window)try {
            if (!excludedKeys["$" + k] && has.call(window, k) && window[k] !== null && typeof window[k] === "object") try {
                equalsConstructorPrototype(window[k]);
            } catch (e) {
                return true;
            }
        } catch (e) {
            return true;
        }
        return false;
    }();
    var equalsConstructorPrototypeIfNotBuggy = function(o) {
        /* global window */ if (typeof window === "undefined" || !hasAutomationEqualityBug) return equalsConstructorPrototype(o);
        try {
            return equalsConstructorPrototype(o);
        } catch (e) {
            return false;
        }
    };
    keysShim = function keys(object) {
        var isObject = object !== null && typeof object === "object";
        var isFunction = toStr.call(object) === "[object Function]";
        var isArguments = isArgs(object);
        var isString = isObject && toStr.call(object) === "[object String]";
        var theKeys = [];
        if (!isObject && !isFunction && !isArguments) throw new TypeError("Object.keys called on a non-object");
        var skipProto = hasProtoEnumBug && isFunction;
        if (isString && object.length > 0 && !has.call(object, 0)) for(var i = 0; i < object.length; ++i)theKeys.push(String(i));
        if (isArguments && object.length > 0) for(var j = 0; j < object.length; ++j)theKeys.push(String(j));
        else {
            for(var name in object)if (!(skipProto && name === "prototype") && has.call(object, name)) theKeys.push(String(name));
        }
        if (hasDontEnumBug) {
            var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);
            for(var k = 0; k < dontEnums.length; ++k)if (!(skipConstructor && dontEnums[k] === "constructor") && has.call(object, dontEnums[k])) theKeys.push(dontEnums[k]);
        }
        return theKeys;
    };
}
module.exports = keysShim;

},{"b0d8c8b84be91ffd":"2AZLV"}],"5Lkyn":[function(require,module,exports) {
"use strict";
var GetIntrinsic = require("b0bf8b8435d3abc");
var $defineProperty = GetIntrinsic("%Object.defineProperty%", true);
var hasPropertyDescriptors = function hasPropertyDescriptors() {
    if ($defineProperty) try {
        $defineProperty({}, "a", {
            value: 1
        });
        return true;
    } catch (e) {
        // IE 8 has a broken defineProperty
        return false;
    }
    return false;
};
hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
    // node v0.6 has a bug where array lengths can be Set but not Defined
    if (!hasPropertyDescriptors()) return null;
    try {
        return $defineProperty([], "length", {
            value: 1
        }).length !== 1;
    } catch (e) {
        // In Firefox 4-22, defining length on an array throws an exception.
        return true;
    }
};
module.exports = hasPropertyDescriptors;

},{"b0bf8b8435d3abc":"fLGpS"}],"13n4P":[function(require,module,exports) {
"use strict";
var numberIsNaN = function(value) {
    return value !== value;
};
module.exports = function is(a, b) {
    if (a === 0 && b === 0) return 1 / a === 1 / b;
    if (a === b) return true;
    if (numberIsNaN(a) && numberIsNaN(b)) return true;
    return false;
};

},{}],"eynqZ":[function(require,module,exports) {
"use strict";
var implementation = require("ff80ab827617d6fd");
module.exports = function getPolyfill() {
    return typeof Object.is === "function" ? Object.is : implementation;
};

},{"ff80ab827617d6fd":"13n4P"}],"ay931":[function(require,module,exports) {
"use strict";
var getPolyfill = require("f188d636391a5061");
var define = require("155865cffc557cd");
module.exports = function shimObjectIs() {
    var polyfill = getPolyfill();
    define(Object, {
        is: polyfill
    }, {
        is: function testObjectIs() {
            return Object.is !== polyfill;
        }
    });
    return polyfill;
};

},{"f188d636391a5061":"eynqZ","155865cffc557cd":"a7y5v"}],"11STT":[function(require,module,exports) {
// Currently in sync with Node.js lib/internal/util/comparisons.js
// https://github.com/nodejs/node/commit/112cc7c27551254aa2b17098fb774867f05ed0d9
"use strict";
function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
}
function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance");
}
function _iterableToArrayLimit(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;
    try {
        for(var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
}
function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") _typeof = function _typeof(obj) {
        return typeof obj;
    };
    else _typeof = function _typeof(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
    return _typeof(obj);
}
var regexFlagsSupported = /a/g.flags !== undefined;
var arrayFromSet = function arrayFromSet(set) {
    var array = [];
    set.forEach(function(value) {
        return array.push(value);
    });
    return array;
};
var arrayFromMap = function arrayFromMap(map) {
    var array = [];
    map.forEach(function(value, key) {
        return array.push([
            key,
            value
        ]);
    });
    return array;
};
var objectIs = Object.is ? Object.is : require("3addb16fbdd05c1c");
var objectGetOwnPropertySymbols = Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols : function() {
    return [];
};
var numberIsNaN = Number.isNaN ? Number.isNaN : require("a27e57a3fd2e2e23");
function uncurryThis(f) {
    return f.call.bind(f);
}
var hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);
var propertyIsEnumerable = uncurryThis(Object.prototype.propertyIsEnumerable);
var objectToString = uncurryThis(Object.prototype.toString);
var _require$types = require("4940125679601087").types, isAnyArrayBuffer = _require$types.isAnyArrayBuffer, isArrayBufferView = _require$types.isArrayBufferView, isDate = _require$types.isDate, isMap = _require$types.isMap, isRegExp = _require$types.isRegExp, isSet = _require$types.isSet, isNativeError = _require$types.isNativeError, isBoxedPrimitive = _require$types.isBoxedPrimitive, isNumberObject = _require$types.isNumberObject, isStringObject = _require$types.isStringObject, isBooleanObject = _require$types.isBooleanObject, isBigIntObject = _require$types.isBigIntObject, isSymbolObject = _require$types.isSymbolObject, isFloat32Array = _require$types.isFloat32Array, isFloat64Array = _require$types.isFloat64Array;
function isNonIndex(key) {
    if (key.length === 0 || key.length > 10) return true;
    for(var i = 0; i < key.length; i++){
        var code = key.charCodeAt(i);
        if (code < 48 || code > 57) return true;
    } // The maximum size for an array is 2 ** 32 -1.
    return key.length === 10 && key >= Math.pow(2, 32);
}
function getOwnNonIndexProperties(value) {
    return Object.keys(value).filter(isNonIndex).concat(objectGetOwnPropertySymbols(value).filter(Object.prototype.propertyIsEnumerable.bind(value)));
} // Taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
// original notice:
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */ function compare(a, b) {
    if (a === b) return 0;
    var x = a.length;
    var y = b.length;
    for(var i = 0, len = Math.min(x, y); i < len; ++i)if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
}
var ONLY_ENUMERABLE = undefined;
var kStrict = true;
var kLoose = false;
var kNoIterator = 0;
var kIsArray = 1;
var kIsSet = 2;
var kIsMap = 3; // Check if they have the same source and flags
function areSimilarRegExps(a, b) {
    return regexFlagsSupported ? a.source === b.source && a.flags === b.flags : RegExp.prototype.toString.call(a) === RegExp.prototype.toString.call(b);
}
function areSimilarFloatArrays(a, b) {
    if (a.byteLength !== b.byteLength) return false;
    for(var offset = 0; offset < a.byteLength; offset++){
        if (a[offset] !== b[offset]) return false;
    }
    return true;
}
function areSimilarTypedArrays(a, b) {
    if (a.byteLength !== b.byteLength) return false;
    return compare(new Uint8Array(a.buffer, a.byteOffset, a.byteLength), new Uint8Array(b.buffer, b.byteOffset, b.byteLength)) === 0;
}
function areEqualArrayBuffers(buf1, buf2) {
    return buf1.byteLength === buf2.byteLength && compare(new Uint8Array(buf1), new Uint8Array(buf2)) === 0;
}
function isEqualBoxedPrimitive(val1, val2) {
    if (isNumberObject(val1)) return isNumberObject(val2) && objectIs(Number.prototype.valueOf.call(val1), Number.prototype.valueOf.call(val2));
    if (isStringObject(val1)) return isStringObject(val2) && String.prototype.valueOf.call(val1) === String.prototype.valueOf.call(val2);
    if (isBooleanObject(val1)) return isBooleanObject(val2) && Boolean.prototype.valueOf.call(val1) === Boolean.prototype.valueOf.call(val2);
    if (isBigIntObject(val1)) return isBigIntObject(val2) && BigInt.prototype.valueOf.call(val1) === BigInt.prototype.valueOf.call(val2);
    return isSymbolObject(val2) && Symbol.prototype.valueOf.call(val1) === Symbol.prototype.valueOf.call(val2);
} // Notes: Type tags are historical [[Class]] properties that can be set by
// FunctionTemplate::SetClassName() in C++ or Symbol.toStringTag in JS
// and retrieved using Object.prototype.toString.call(obj) in JS
// See https://tc39.github.io/ecma262/#sec-object.prototype.tostring
// for a list of tags pre-defined in the spec.
// There are some unspecified tags in the wild too (e.g. typed array tags).
// Since tags can be altered, they only serve fast failures
//
// Typed arrays and buffers are checked by comparing the content in their
// underlying ArrayBuffer. This optimization requires that it's
// reasonable to interpret their underlying memory in the same way,
// which is checked by comparing their type tags.
// (e.g. a Uint8Array and a Uint16Array with the same memory content
// could still be different because they will be interpreted differently).
//
// For strict comparison, objects should have
// a) The same built-in type tags
// b) The same prototypes.
function innerDeepEqual(val1, val2, strict, memos) {
    // All identical values are equivalent, as determined by ===.
    if (val1 === val2) {
        if (val1 !== 0) return true;
        return strict ? objectIs(val1, val2) : true;
    } // Check more closely if val1 and val2 are equal.
    if (strict) {
        if (_typeof(val1) !== "object") return typeof val1 === "number" && numberIsNaN(val1) && numberIsNaN(val2);
        if (_typeof(val2) !== "object" || val1 === null || val2 === null) return false;
        if (Object.getPrototypeOf(val1) !== Object.getPrototypeOf(val2)) return false;
    } else {
        if (val1 === null || _typeof(val1) !== "object") {
            if (val2 === null || _typeof(val2) !== "object") // eslint-disable-next-line eqeqeq
            return val1 == val2;
            return false;
        }
        if (val2 === null || _typeof(val2) !== "object") return false;
    }
    var val1Tag = objectToString(val1);
    var val2Tag = objectToString(val2);
    if (val1Tag !== val2Tag) return false;
    if (Array.isArray(val1)) {
        // Check for sparse arrays and general fast path
        if (val1.length !== val2.length) return false;
        var keys1 = getOwnNonIndexProperties(val1, ONLY_ENUMERABLE);
        var keys2 = getOwnNonIndexProperties(val2, ONLY_ENUMERABLE);
        if (keys1.length !== keys2.length) return false;
        return keyCheck(val1, val2, strict, memos, kIsArray, keys1);
    } // [browserify] This triggers on certain types in IE (Map/Set) so we don't
    // wan't to early return out of the rest of the checks. However we can check
    // if the second value is one of these values and the first isn't.
    if (val1Tag === "[object Object]") {
        // return keyCheck(val1, val2, strict, memos, kNoIterator);
        if (!isMap(val1) && isMap(val2) || !isSet(val1) && isSet(val2)) return false;
    }
    if (isDate(val1)) {
        if (!isDate(val2) || Date.prototype.getTime.call(val1) !== Date.prototype.getTime.call(val2)) return false;
    } else if (isRegExp(val1)) {
        if (!isRegExp(val2) || !areSimilarRegExps(val1, val2)) return false;
    } else if (isNativeError(val1) || val1 instanceof Error) {
        // Do not compare the stack as it might differ even though the error itself
        // is otherwise identical.
        if (val1.message !== val2.message || val1.name !== val2.name) return false;
    } else if (isArrayBufferView(val1)) {
        if (!strict && (isFloat32Array(val1) || isFloat64Array(val1))) {
            if (!areSimilarFloatArrays(val1, val2)) return false;
        } else if (!areSimilarTypedArrays(val1, val2)) return false;
         // Buffer.compare returns true, so val1.length === val2.length. If they both
        // only contain numeric keys, we don't need to exam further than checking
        // the symbols.
        var _keys = getOwnNonIndexProperties(val1, ONLY_ENUMERABLE);
        var _keys2 = getOwnNonIndexProperties(val2, ONLY_ENUMERABLE);
        if (_keys.length !== _keys2.length) return false;
        return keyCheck(val1, val2, strict, memos, kNoIterator, _keys);
    } else if (isSet(val1)) {
        if (!isSet(val2) || val1.size !== val2.size) return false;
        return keyCheck(val1, val2, strict, memos, kIsSet);
    } else if (isMap(val1)) {
        if (!isMap(val2) || val1.size !== val2.size) return false;
        return keyCheck(val1, val2, strict, memos, kIsMap);
    } else if (isAnyArrayBuffer(val1)) {
        if (!areEqualArrayBuffers(val1, val2)) return false;
    } else if (isBoxedPrimitive(val1) && !isEqualBoxedPrimitive(val1, val2)) return false;
    return keyCheck(val1, val2, strict, memos, kNoIterator);
}
function getEnumerables(val, keys) {
    return keys.filter(function(k) {
        return propertyIsEnumerable(val, k);
    });
}
function keyCheck(val1, val2, strict, memos, iterationType, aKeys) {
    // For all remaining Object pairs, including Array, objects and Maps,
    // equivalence is determined by having:
    // a) The same number of owned enumerable properties
    // b) The same set of keys/indexes (although not necessarily the same order)
    // c) Equivalent values for every corresponding key/index
    // d) For Sets and Maps, equal contents
    // Note: this accounts for both named and indexed properties on Arrays.
    if (arguments.length === 5) {
        aKeys = Object.keys(val1);
        var bKeys = Object.keys(val2); // The pair must have the same number of owned properties.
        if (aKeys.length !== bKeys.length) return false;
    } // Cheap key test
    var i = 0;
    for(; i < aKeys.length; i++){
        if (!hasOwnProperty(val2, aKeys[i])) return false;
    }
    if (strict && arguments.length === 5) {
        var symbolKeysA = objectGetOwnPropertySymbols(val1);
        if (symbolKeysA.length !== 0) {
            var count = 0;
            for(i = 0; i < symbolKeysA.length; i++){
                var key = symbolKeysA[i];
                if (propertyIsEnumerable(val1, key)) {
                    if (!propertyIsEnumerable(val2, key)) return false;
                    aKeys.push(key);
                    count++;
                } else if (propertyIsEnumerable(val2, key)) return false;
            }
            var symbolKeysB = objectGetOwnPropertySymbols(val2);
            if (symbolKeysA.length !== symbolKeysB.length && getEnumerables(val2, symbolKeysB).length !== count) return false;
        } else {
            var _symbolKeysB = objectGetOwnPropertySymbols(val2);
            if (_symbolKeysB.length !== 0 && getEnumerables(val2, _symbolKeysB).length !== 0) return false;
        }
    }
    if (aKeys.length === 0 && (iterationType === kNoIterator || iterationType === kIsArray && val1.length === 0 || val1.size === 0)) return true;
     // Use memos to handle cycles.
    if (memos === undefined) memos = {
        val1: new Map(),
        val2: new Map(),
        position: 0
    };
    else {
        // We prevent up to two map.has(x) calls by directly retrieving the value
        // and checking for undefined. The map can only contain numbers, so it is
        // safe to check for undefined only.
        var val2MemoA = memos.val1.get(val1);
        if (val2MemoA !== undefined) {
            var val2MemoB = memos.val2.get(val2);
            if (val2MemoB !== undefined) return val2MemoA === val2MemoB;
        }
        memos.position++;
    }
    memos.val1.set(val1, memos.position);
    memos.val2.set(val2, memos.position);
    var areEq = objEquiv(val1, val2, strict, aKeys, memos, iterationType);
    memos.val1.delete(val1);
    memos.val2.delete(val2);
    return areEq;
}
function setHasEqualElement(set, val1, strict, memo) {
    // Go looking.
    var setValues = arrayFromSet(set);
    for(var i = 0; i < setValues.length; i++){
        var val2 = setValues[i];
        if (innerDeepEqual(val1, val2, strict, memo)) {
            // Remove the matching element to make sure we do not check that again.
            set.delete(val2);
            return true;
        }
    }
    return false;
} // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#Loose_equality_using
// Sadly it is not possible to detect corresponding values properly in case the
// type is a string, number, bigint or boolean. The reason is that those values
// can match lots of different string values (e.g., 1n == '+00001').
function findLooseMatchingPrimitives(prim) {
    switch(_typeof(prim)){
        case "undefined":
            return null;
        case "object":
            // Only pass in null as object!
            return undefined;
        case "symbol":
            return false;
        case "string":
            prim = +prim;
        // Loose equal entries exist only if the string is possible to convert to
        // a regular number and not NaN.
        // Fall through
        case "number":
            if (numberIsNaN(prim)) return false;
    }
    return true;
}
function setMightHaveLoosePrim(a, b, prim) {
    var altValue = findLooseMatchingPrimitives(prim);
    if (altValue != null) return altValue;
    return b.has(altValue) && !a.has(altValue);
}
function mapMightHaveLoosePrim(a, b, prim, item, memo) {
    var altValue = findLooseMatchingPrimitives(prim);
    if (altValue != null) return altValue;
    var curB = b.get(altValue);
    if (curB === undefined && !b.has(altValue) || !innerDeepEqual(item, curB, false, memo)) return false;
    return !a.has(altValue) && innerDeepEqual(item, curB, false, memo);
}
function setEquiv(a, b, strict, memo) {
    // This is a lazily initiated Set of entries which have to be compared
    // pairwise.
    var set = null;
    var aValues = arrayFromSet(a);
    for(var i = 0; i < aValues.length; i++){
        var val = aValues[i]; // Note: Checking for the objects first improves the performance for object
        // heavy sets but it is a minor slow down for primitives. As they are fast
        // to check this improves the worst case scenario instead.
        if (_typeof(val) === "object" && val !== null) {
            if (set === null) set = new Set();
             // If the specified value doesn't exist in the second set its an not null
            // object (or non strict only: a not matching primitive) we'll need to go
            // hunting for something thats deep-(strict-)equal to it. To make this
            // O(n log n) complexity we have to copy these values in a new set first.
            set.add(val);
        } else if (!b.has(val)) {
            if (strict) return false; // Fast path to detect missing string, symbol, undefined and null values.
            if (!setMightHaveLoosePrim(a, b, val)) return false;
            if (set === null) set = new Set();
            set.add(val);
        }
    }
    if (set !== null) {
        var bValues = arrayFromSet(b);
        for(var _i = 0; _i < bValues.length; _i++){
            var _val = bValues[_i]; // We have to check if a primitive value is already
            // matching and only if it's not, go hunting for it.
            if (_typeof(_val) === "object" && _val !== null) {
                if (!setHasEqualElement(set, _val, strict, memo)) return false;
            } else if (!strict && !a.has(_val) && !setHasEqualElement(set, _val, strict, memo)) return false;
        }
        return set.size === 0;
    }
    return true;
}
function mapHasEqualEntry(set, map, key1, item1, strict, memo) {
    // To be able to handle cases like:
    //   Map([[{}, 'a'], [{}, 'b']]) vs Map([[{}, 'b'], [{}, 'a']])
    // ... we need to consider *all* matching keys, not just the first we find.
    var setValues = arrayFromSet(set);
    for(var i = 0; i < setValues.length; i++){
        var key2 = setValues[i];
        if (innerDeepEqual(key1, key2, strict, memo) && innerDeepEqual(item1, map.get(key2), strict, memo)) {
            set.delete(key2);
            return true;
        }
    }
    return false;
}
function mapEquiv(a, b, strict, memo) {
    var set = null;
    var aEntries = arrayFromMap(a);
    for(var i = 0; i < aEntries.length; i++){
        var _aEntries$i = _slicedToArray(aEntries[i], 2), key = _aEntries$i[0], item1 = _aEntries$i[1];
        if (_typeof(key) === "object" && key !== null) {
            if (set === null) set = new Set();
            set.add(key);
        } else {
            // By directly retrieving the value we prevent another b.has(key) check in
            // almost all possible cases.
            var item2 = b.get(key);
            if (item2 === undefined && !b.has(key) || !innerDeepEqual(item1, item2, strict, memo)) {
                if (strict) return false; // Fast path to detect missing string, symbol, undefined and null
                // keys.
                if (!mapMightHaveLoosePrim(a, b, key, item1, memo)) return false;
                if (set === null) set = new Set();
                set.add(key);
            }
        }
    }
    if (set !== null) {
        var bEntries = arrayFromMap(b);
        for(var _i2 = 0; _i2 < bEntries.length; _i2++){
            var _bEntries$_i = _slicedToArray(bEntries[_i2], 2), key = _bEntries$_i[0], item = _bEntries$_i[1];
            if (_typeof(key) === "object" && key !== null) {
                if (!mapHasEqualEntry(set, a, key, item, strict, memo)) return false;
            } else if (!strict && (!a.has(key) || !innerDeepEqual(a.get(key), item, false, memo)) && !mapHasEqualEntry(set, a, key, item, false, memo)) return false;
        }
        return set.size === 0;
    }
    return true;
}
function objEquiv(a, b, strict, keys, memos, iterationType) {
    // Sets and maps don't have their entries accessible via normal object
    // properties.
    var i = 0;
    if (iterationType === kIsSet) {
        if (!setEquiv(a, b, strict, memos)) return false;
    } else if (iterationType === kIsMap) {
        if (!mapEquiv(a, b, strict, memos)) return false;
    } else if (iterationType === kIsArray) for(; i < a.length; i++){
        if (hasOwnProperty(a, i)) {
            if (!hasOwnProperty(b, i) || !innerDeepEqual(a[i], b[i], strict, memos)) return false;
        } else if (hasOwnProperty(b, i)) return false;
        else {
            // Array is sparse.
            var keysA = Object.keys(a);
            for(; i < keysA.length; i++){
                var key = keysA[i];
                if (!hasOwnProperty(b, key) || !innerDeepEqual(a[key], b[key], strict, memos)) return false;
            }
            if (keysA.length !== Object.keys(b).length) return false;
            return true;
        }
    }
     // The pair must have equivalent values for every corresponding key.
    // Possibly expensive deep test:
    for(i = 0; i < keys.length; i++){
        var _key = keys[i];
        if (!innerDeepEqual(a[_key], b[_key], strict, memos)) return false;
    }
    return true;
}
function isDeepEqual(val1, val2) {
    return innerDeepEqual(val1, val2, kLoose);
}
function isDeepStrictEqual(val1, val2) {
    return innerDeepEqual(val1, val2, kStrict);
}
module.exports = {
    isDeepEqual: isDeepEqual,
    isDeepStrictEqual: isDeepStrictEqual
};

},{"3addb16fbdd05c1c":"jinnx","a27e57a3fd2e2e23":"965gM","4940125679601087":"hldjw"}],"965gM":[function(require,module,exports) {
"use strict";
var callBind = require("8bc778ead6edc2b");
var define = require("1e9a111647ec40d6");
var implementation = require("db9e8266e38a0a1c");
var getPolyfill = require("37ae20d268339d21");
var shim = require("9fe13ad91d3d9c68");
var polyfill = callBind(getPolyfill(), Number);
/* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */ define(polyfill, {
    getPolyfill: getPolyfill,
    implementation: implementation,
    shim: shim
});
module.exports = polyfill;

},{"8bc778ead6edc2b":"jcpLY","1e9a111647ec40d6":"a7y5v","db9e8266e38a0a1c":"kz3CZ","37ae20d268339d21":"3d6xq","9fe13ad91d3d9c68":"hg0Pt"}],"kz3CZ":[function(require,module,exports) {
"use strict";
/* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */ module.exports = function isNaN(value) {
    return value !== value;
};

},{}],"3d6xq":[function(require,module,exports) {
"use strict";
var implementation = require("e25466f067cfd8fc");
module.exports = function getPolyfill() {
    if (Number.isNaN && Number.isNaN(NaN) && !Number.isNaN("a")) return Number.isNaN;
    return implementation;
};

},{"e25466f067cfd8fc":"kz3CZ"}],"hg0Pt":[function(require,module,exports) {
"use strict";
var define = require("6e613ddb8bace1c6");
var getPolyfill = require("f2ce5ac0488eb372");
/* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */ module.exports = function shimNumberIsNaN() {
    var polyfill = getPolyfill();
    define(Number, {
        isNaN: polyfill
    }, {
        isNaN: function testIsNaN() {
            return Number.isNaN !== polyfill;
        }
    });
    return polyfill;
};

},{"6e613ddb8bace1c6":"a7y5v","f2ce5ac0488eb372":"3d6xq"}],"jO3c2":[function(require,module,exports) {
var r;
module.exports = function rand(len) {
    if (!r) r = new Rand(null);
    return r.generate(len);
};
function Rand(rand) {
    this.rand = rand;
}
module.exports.Rand = Rand;
Rand.prototype.generate = function generate(len) {
    return this._rand(len);
};
// Emulate crypto API using randy
Rand.prototype._rand = function _rand(n) {
    if (this.rand.getBytes) return this.rand.getBytes(n);
    var res = new Uint8Array(n);
    for(var i = 0; i < res.length; i++)res[i] = this.rand.getByte();
    return res;
};
if (typeof self === "object") {
    if (self.crypto && self.crypto.getRandomValues) // Modern browsers
    Rand.prototype._rand = function _rand(n) {
        var arr = new Uint8Array(n);
        self.crypto.getRandomValues(arr);
        return arr;
    };
    else if (self.msCrypto && self.msCrypto.getRandomValues) // IE
    Rand.prototype._rand = function _rand(n) {
        var arr = new Uint8Array(n);
        self.msCrypto.getRandomValues(arr);
        return arr;
    };
    else if (typeof window === "object") // Old junk
    Rand.prototype._rand = function() {
        throw new Error("Not implemented yet");
    };
} else // Node.js or Web worker with no crypto support
try {
    var crypto = require("e8ad0674730919a8");
    if (typeof crypto.randomBytes !== "function") throw new Error("Not supported");
    Rand.prototype._rand = function _rand(n) {
        return crypto.randomBytes(n);
    };
} catch (e) {}

},{"e8ad0674730919a8":"9C0N7"}],"9C0N7":[function(require,module,exports) {
"use strict";

},{}],"dUx6k":[function(require,module,exports) {
var hash = exports;
hash.utils = require("38593959f18bd562");
hash.common = require("31a457752237e8ad");
hash.sha = require("3e37816d2a2fd68d");
hash.ripemd = require("ce5a13b5bd10f171");
hash.hmac = require("c32fbac97a361580");
// Proxy hash functions to the main object
hash.sha1 = hash.sha.sha1;
hash.sha256 = hash.sha.sha256;
hash.sha224 = hash.sha.sha224;
hash.sha384 = hash.sha.sha384;
hash.sha512 = hash.sha.sha512;
hash.ripemd160 = hash.ripemd.ripemd160;

},{"38593959f18bd562":"8fWsM","31a457752237e8ad":"9mOc6","3e37816d2a2fd68d":"kFimU","ce5a13b5bd10f171":"a0aip","c32fbac97a361580":"arwpq"}],"8fWsM":[function(require,module,exports) {
"use strict";
var assert = require("6002b0feade022a4");
var inherits = require("d4826c9d0ff1b1f");
exports.inherits = inherits;
function isSurrogatePair(msg, i) {
    if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) return false;
    if (i < 0 || i + 1 >= msg.length) return false;
    return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
}
function toArray(msg, enc) {
    if (Array.isArray(msg)) return msg.slice();
    if (!msg) return [];
    var res = [];
    if (typeof msg === "string") {
        if (!enc) {
            // Inspired by stringToUtf8ByteArray() in closure-library by Google
            // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
            // Apache License 2.0
            // https://github.com/google/closure-library/blob/master/LICENSE
            var p = 0;
            for(var i = 0; i < msg.length; i++){
                var c = msg.charCodeAt(i);
                if (c < 128) res[p++] = c;
                else if (c < 2048) {
                    res[p++] = c >> 6 | 192;
                    res[p++] = c & 63 | 128;
                } else if (isSurrogatePair(msg, i)) {
                    c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
                    res[p++] = c >> 18 | 240;
                    res[p++] = c >> 12 & 63 | 128;
                    res[p++] = c >> 6 & 63 | 128;
                    res[p++] = c & 63 | 128;
                } else {
                    res[p++] = c >> 12 | 224;
                    res[p++] = c >> 6 & 63 | 128;
                    res[p++] = c & 63 | 128;
                }
            }
        } else if (enc === "hex") {
            msg = msg.replace(/[^a-z0-9]+/ig, "");
            if (msg.length % 2 !== 0) msg = "0" + msg;
            for(i = 0; i < msg.length; i += 2)res.push(parseInt(msg[i] + msg[i + 1], 16));
        }
    } else for(i = 0; i < msg.length; i++)res[i] = msg[i] | 0;
    return res;
}
exports.toArray = toArray;
function toHex(msg) {
    var res = "";
    for(var i = 0; i < msg.length; i++)res += zero2(msg[i].toString(16));
    return res;
}
exports.toHex = toHex;
function htonl(w) {
    var res = w >>> 24 | w >>> 8 & 0xff00 | w << 8 & 0xff0000 | (w & 0xff) << 24;
    return res >>> 0;
}
exports.htonl = htonl;
function toHex32(msg, endian) {
    var res = "";
    for(var i = 0; i < msg.length; i++){
        var w = msg[i];
        if (endian === "little") w = htonl(w);
        res += zero8(w.toString(16));
    }
    return res;
}
exports.toHex32 = toHex32;
function zero2(word) {
    if (word.length === 1) return "0" + word;
    else return word;
}
exports.zero2 = zero2;
function zero8(word) {
    if (word.length === 7) return "0" + word;
    else if (word.length === 6) return "00" + word;
    else if (word.length === 5) return "000" + word;
    else if (word.length === 4) return "0000" + word;
    else if (word.length === 3) return "00000" + word;
    else if (word.length === 2) return "000000" + word;
    else if (word.length === 1) return "0000000" + word;
    else return word;
}
exports.zero8 = zero8;
function join32(msg, start, end, endian) {
    var len = end - start;
    assert(len % 4 === 0);
    var res = new Array(len / 4);
    for(var i = 0, k = start; i < res.length; i++, k += 4){
        var w;
        if (endian === "big") w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];
        else w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];
        res[i] = w >>> 0;
    }
    return res;
}
exports.join32 = join32;
function split32(msg, endian) {
    var res = new Array(msg.length * 4);
    for(var i = 0, k = 0; i < msg.length; i++, k += 4){
        var m = msg[i];
        if (endian === "big") {
            res[k] = m >>> 24;
            res[k + 1] = m >>> 16 & 0xff;
            res[k + 2] = m >>> 8 & 0xff;
            res[k + 3] = m & 0xff;
        } else {
            res[k + 3] = m >>> 24;
            res[k + 2] = m >>> 16 & 0xff;
            res[k + 1] = m >>> 8 & 0xff;
            res[k] = m & 0xff;
        }
    }
    return res;
}
exports.split32 = split32;
function rotr32(w, b) {
    return w >>> b | w << 32 - b;
}
exports.rotr32 = rotr32;
function rotl32(w, b) {
    return w << b | w >>> 32 - b;
}
exports.rotl32 = rotl32;
function sum32(a, b) {
    return a + b >>> 0;
}
exports.sum32 = sum32;
function sum32_3(a, b, c) {
    return a + b + c >>> 0;
}
exports.sum32_3 = sum32_3;
function sum32_4(a, b, c, d) {
    return a + b + c + d >>> 0;
}
exports.sum32_4 = sum32_4;
function sum32_5(a, b, c, d, e) {
    return a + b + c + d + e >>> 0;
}
exports.sum32_5 = sum32_5;
function sum64(buf, pos, ah, al) {
    var bh = buf[pos];
    var bl = buf[pos + 1];
    var lo = al + bl >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    buf[pos] = hi >>> 0;
    buf[pos + 1] = lo;
}
exports.sum64 = sum64;
function sum64_hi(ah, al, bh, bl) {
    var lo = al + bl >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    return hi >>> 0;
}
exports.sum64_hi = sum64_hi;
function sum64_lo(ah, al, bh, bl) {
    var lo = al + bl;
    return lo >>> 0;
}
exports.sum64_lo = sum64_lo;
function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
    var carry = 0;
    var lo = al;
    lo = lo + bl >>> 0;
    carry += lo < al ? 1 : 0;
    lo = lo + cl >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = lo + dl >>> 0;
    carry += lo < dl ? 1 : 0;
    var hi = ah + bh + ch + dh + carry;
    return hi >>> 0;
}
exports.sum64_4_hi = sum64_4_hi;
function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
    var lo = al + bl + cl + dl;
    return lo >>> 0;
}
exports.sum64_4_lo = sum64_4_lo;
function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var carry = 0;
    var lo = al;
    lo = lo + bl >>> 0;
    carry += lo < al ? 1 : 0;
    lo = lo + cl >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = lo + dl >>> 0;
    carry += lo < dl ? 1 : 0;
    lo = lo + el >>> 0;
    carry += lo < el ? 1 : 0;
    var hi = ah + bh + ch + dh + eh + carry;
    return hi >>> 0;
}
exports.sum64_5_hi = sum64_5_hi;
function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var lo = al + bl + cl + dl + el;
    return lo >>> 0;
}
exports.sum64_5_lo = sum64_5_lo;
function rotr64_hi(ah, al, num) {
    var r = al << 32 - num | ah >>> num;
    return r >>> 0;
}
exports.rotr64_hi = rotr64_hi;
function rotr64_lo(ah, al, num) {
    var r = ah << 32 - num | al >>> num;
    return r >>> 0;
}
exports.rotr64_lo = rotr64_lo;
function shr64_hi(ah, al, num) {
    return ah >>> num;
}
exports.shr64_hi = shr64_hi;
function shr64_lo(ah, al, num) {
    var r = ah << 32 - num | al >>> num;
    return r >>> 0;
}
exports.shr64_lo = shr64_lo;

},{"6002b0feade022a4":"9qH0v","d4826c9d0ff1b1f":"l3bOz"}],"9qH0v":[function(require,module,exports) {
module.exports = assert;
function assert(val, msg) {
    if (!val) throw new Error(msg || "Assertion failed");
}
assert.equal = function assertEqual(l, r, msg) {
    if (l != r) throw new Error(msg || "Assertion failed: " + l + " != " + r);
};

},{}],"9mOc6":[function(require,module,exports) {
"use strict";
var utils = require("e9291abdfb47ee4f");
var assert = require("ea8841b701712638");
function BlockHash() {
    this.pending = null;
    this.pendingTotal = 0;
    this.blockSize = this.constructor.blockSize;
    this.outSize = this.constructor.outSize;
    this.hmacStrength = this.constructor.hmacStrength;
    this.padLength = this.constructor.padLength / 8;
    this.endian = "big";
    this._delta8 = this.blockSize / 8;
    this._delta32 = this.blockSize / 32;
}
exports.BlockHash = BlockHash;
BlockHash.prototype.update = function update(msg, enc) {
    // Convert message to array, pad it, and join into 32bit blocks
    msg = utils.toArray(msg, enc);
    if (!this.pending) this.pending = msg;
    else this.pending = this.pending.concat(msg);
    this.pendingTotal += msg.length;
    // Enough data, try updating
    if (this.pending.length >= this._delta8) {
        msg = this.pending;
        // Process pending data in blocks
        var r = msg.length % this._delta8;
        this.pending = msg.slice(msg.length - r, msg.length);
        if (this.pending.length === 0) this.pending = null;
        msg = utils.join32(msg, 0, msg.length - r, this.endian);
        for(var i = 0; i < msg.length; i += this._delta32)this._update(msg, i, i + this._delta32);
    }
    return this;
};
BlockHash.prototype.digest = function digest(enc) {
    this.update(this._pad());
    assert(this.pending === null);
    return this._digest(enc);
};
BlockHash.prototype._pad = function pad() {
    var len = this.pendingTotal;
    var bytes = this._delta8;
    var k = bytes - (len + this.padLength) % bytes;
    var res = new Array(k + this.padLength);
    res[0] = 0x80;
    for(var i = 1; i < k; i++)res[i] = 0;
    // Append length
    len <<= 3;
    if (this.endian === "big") {
        for(var t = 8; t < this.padLength; t++)res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = len >>> 24 & 0xff;
        res[i++] = len >>> 16 & 0xff;
        res[i++] = len >>> 8 & 0xff;
        res[i++] = len & 0xff;
    } else {
        res[i++] = len & 0xff;
        res[i++] = len >>> 8 & 0xff;
        res[i++] = len >>> 16 & 0xff;
        res[i++] = len >>> 24 & 0xff;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        for(t = 8; t < this.padLength; t++)res[i++] = 0;
    }
    return res;
};

},{"e9291abdfb47ee4f":"8fWsM","ea8841b701712638":"9qH0v"}],"kFimU":[function(require,module,exports) {
"use strict";
exports.sha1 = require("3835379564860fd7");
exports.sha224 = require("bb9f72f042233648");
exports.sha256 = require("20a3b0fa42e37dfe");
exports.sha384 = require("ad4827efa7d953c2");
exports.sha512 = require("301292595a944c1d");

},{"3835379564860fd7":"5yKbT","bb9f72f042233648":"bUaub","20a3b0fa42e37dfe":"2hccf","ad4827efa7d953c2":"h85t6","301292595a944c1d":"d18VP"}],"5yKbT":[function(require,module,exports) {
"use strict";
var utils = require("b75f3c1442bf9100");
var common = require("a29e68029e4c48f8");
var shaCommon = require("1be62f90a237cba5");
var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_5 = utils.sum32_5;
var ft_1 = shaCommon.ft_1;
var BlockHash = common.BlockHash;
var sha1_K = [
    0x5A827999,
    0x6ED9EBA1,
    0x8F1BBCDC,
    0xCA62C1D6
];
function SHA1() {
    if (!(this instanceof SHA1)) return new SHA1();
    BlockHash.call(this);
    this.h = [
        0x67452301,
        0xefcdab89,
        0x98badcfe,
        0x10325476,
        0xc3d2e1f0
    ];
    this.W = new Array(80);
}
utils.inherits(SHA1, BlockHash);
module.exports = SHA1;
SHA1.blockSize = 512;
SHA1.outSize = 160;
SHA1.hmacStrength = 80;
SHA1.padLength = 64;
SHA1.prototype._update = function _update(msg, start) {
    var W = this.W;
    for(var i = 0; i < 16; i++)W[i] = msg[start + i];
    for(; i < W.length; i++)W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);
    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];
    for(i = 0; i < W.length; i++){
        var s = ~~(i / 20);
        var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
        e = d;
        d = c;
        c = rotl32(b, 30);
        b = a;
        a = t;
    }
    this.h[0] = sum32(this.h[0], a);
    this.h[1] = sum32(this.h[1], b);
    this.h[2] = sum32(this.h[2], c);
    this.h[3] = sum32(this.h[3], d);
    this.h[4] = sum32(this.h[4], e);
};
SHA1.prototype._digest = function digest(enc) {
    if (enc === "hex") return utils.toHex32(this.h, "big");
    else return utils.split32(this.h, "big");
};

},{"b75f3c1442bf9100":"8fWsM","a29e68029e4c48f8":"9mOc6","1be62f90a237cba5":"9fFc3"}],"9fFc3":[function(require,module,exports) {
"use strict";
var utils = require("f0fb61f828bacd0f");
var rotr32 = utils.rotr32;
function ft_1(s, x, y, z) {
    if (s === 0) return ch32(x, y, z);
    if (s === 1 || s === 3) return p32(x, y, z);
    if (s === 2) return maj32(x, y, z);
}
exports.ft_1 = ft_1;
function ch32(x, y, z) {
    return x & y ^ ~x & z;
}
exports.ch32 = ch32;
function maj32(x, y, z) {
    return x & y ^ x & z ^ y & z;
}
exports.maj32 = maj32;
function p32(x, y, z) {
    return x ^ y ^ z;
}
exports.p32 = p32;
function s0_256(x) {
    return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
}
exports.s0_256 = s0_256;
function s1_256(x) {
    return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
}
exports.s1_256 = s1_256;
function g0_256(x) {
    return rotr32(x, 7) ^ rotr32(x, 18) ^ x >>> 3;
}
exports.g0_256 = g0_256;
function g1_256(x) {
    return rotr32(x, 17) ^ rotr32(x, 19) ^ x >>> 10;
}
exports.g1_256 = g1_256;

},{"f0fb61f828bacd0f":"8fWsM"}],"bUaub":[function(require,module,exports) {
"use strict";
var utils = require("fe5acd040463c159");
var SHA256 = require("fa3503eda3738d05");
function SHA224() {
    if (!(this instanceof SHA224)) return new SHA224();
    SHA256.call(this);
    this.h = [
        0xc1059ed8,
        0x367cd507,
        0x3070dd17,
        0xf70e5939,
        0xffc00b31,
        0x68581511,
        0x64f98fa7,
        0xbefa4fa4
    ];
}
utils.inherits(SHA224, SHA256);
module.exports = SHA224;
SHA224.blockSize = 512;
SHA224.outSize = 224;
SHA224.hmacStrength = 192;
SHA224.padLength = 64;
SHA224.prototype._digest = function digest(enc) {
    // Just truncate output
    if (enc === "hex") return utils.toHex32(this.h.slice(0, 7), "big");
    else return utils.split32(this.h.slice(0, 7), "big");
};

},{"fe5acd040463c159":"8fWsM","fa3503eda3738d05":"2hccf"}],"2hccf":[function(require,module,exports) {
"use strict";
var utils = require("32ad3e510bd41f2a");
var common = require("469ad88ad505772a");
var shaCommon = require("fffa7d1ddf1f0b43");
var assert = require("126369f57b5225ed");
var sum32 = utils.sum32;
var sum32_4 = utils.sum32_4;
var sum32_5 = utils.sum32_5;
var ch32 = shaCommon.ch32;
var maj32 = shaCommon.maj32;
var s0_256 = shaCommon.s0_256;
var s1_256 = shaCommon.s1_256;
var g0_256 = shaCommon.g0_256;
var g1_256 = shaCommon.g1_256;
var BlockHash = common.BlockHash;
var sha256_K = [
    0x428a2f98,
    0x71374491,
    0xb5c0fbcf,
    0xe9b5dba5,
    0x3956c25b,
    0x59f111f1,
    0x923f82a4,
    0xab1c5ed5,
    0xd807aa98,
    0x12835b01,
    0x243185be,
    0x550c7dc3,
    0x72be5d74,
    0x80deb1fe,
    0x9bdc06a7,
    0xc19bf174,
    0xe49b69c1,
    0xefbe4786,
    0x0fc19dc6,
    0x240ca1cc,
    0x2de92c6f,
    0x4a7484aa,
    0x5cb0a9dc,
    0x76f988da,
    0x983e5152,
    0xa831c66d,
    0xb00327c8,
    0xbf597fc7,
    0xc6e00bf3,
    0xd5a79147,
    0x06ca6351,
    0x14292967,
    0x27b70a85,
    0x2e1b2138,
    0x4d2c6dfc,
    0x53380d13,
    0x650a7354,
    0x766a0abb,
    0x81c2c92e,
    0x92722c85,
    0xa2bfe8a1,
    0xa81a664b,
    0xc24b8b70,
    0xc76c51a3,
    0xd192e819,
    0xd6990624,
    0xf40e3585,
    0x106aa070,
    0x19a4c116,
    0x1e376c08,
    0x2748774c,
    0x34b0bcb5,
    0x391c0cb3,
    0x4ed8aa4a,
    0x5b9cca4f,
    0x682e6ff3,
    0x748f82ee,
    0x78a5636f,
    0x84c87814,
    0x8cc70208,
    0x90befffa,
    0xa4506ceb,
    0xbef9a3f7,
    0xc67178f2
];
function SHA256() {
    if (!(this instanceof SHA256)) return new SHA256();
    BlockHash.call(this);
    this.h = [
        0x6a09e667,
        0xbb67ae85,
        0x3c6ef372,
        0xa54ff53a,
        0x510e527f,
        0x9b05688c,
        0x1f83d9ab,
        0x5be0cd19
    ];
    this.k = sha256_K;
    this.W = new Array(64);
}
utils.inherits(SHA256, BlockHash);
module.exports = SHA256;
SHA256.blockSize = 512;
SHA256.outSize = 256;
SHA256.hmacStrength = 192;
SHA256.padLength = 64;
SHA256.prototype._update = function _update(msg, start) {
    var W = this.W;
    for(var i = 0; i < 16; i++)W[i] = msg[start + i];
    for(; i < W.length; i++)W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);
    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];
    var f = this.h[5];
    var g = this.h[6];
    var h = this.h[7];
    assert(this.k.length === W.length);
    for(i = 0; i < W.length; i++){
        var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
        var T2 = sum32(s0_256(a), maj32(a, b, c));
        h = g;
        g = f;
        f = e;
        e = sum32(d, T1);
        d = c;
        c = b;
        b = a;
        a = sum32(T1, T2);
    }
    this.h[0] = sum32(this.h[0], a);
    this.h[1] = sum32(this.h[1], b);
    this.h[2] = sum32(this.h[2], c);
    this.h[3] = sum32(this.h[3], d);
    this.h[4] = sum32(this.h[4], e);
    this.h[5] = sum32(this.h[5], f);
    this.h[6] = sum32(this.h[6], g);
    this.h[7] = sum32(this.h[7], h);
};
SHA256.prototype._digest = function digest(enc) {
    if (enc === "hex") return utils.toHex32(this.h, "big");
    else return utils.split32(this.h, "big");
};

},{"32ad3e510bd41f2a":"8fWsM","469ad88ad505772a":"9mOc6","fffa7d1ddf1f0b43":"9fFc3","126369f57b5225ed":"9qH0v"}],"h85t6":[function(require,module,exports) {
"use strict";
var utils = require("a696ee34c45713da");
var SHA512 = require("fff95253fdaa49ea");
function SHA384() {
    if (!(this instanceof SHA384)) return new SHA384();
    SHA512.call(this);
    this.h = [
        0xcbbb9d5d,
        0xc1059ed8,
        0x629a292a,
        0x367cd507,
        0x9159015a,
        0x3070dd17,
        0x152fecd8,
        0xf70e5939,
        0x67332667,
        0xffc00b31,
        0x8eb44a87,
        0x68581511,
        0xdb0c2e0d,
        0x64f98fa7,
        0x47b5481d,
        0xbefa4fa4
    ];
}
utils.inherits(SHA384, SHA512);
module.exports = SHA384;
SHA384.blockSize = 1024;
SHA384.outSize = 384;
SHA384.hmacStrength = 192;
SHA384.padLength = 128;
SHA384.prototype._digest = function digest(enc) {
    if (enc === "hex") return utils.toHex32(this.h.slice(0, 12), "big");
    else return utils.split32(this.h.slice(0, 12), "big");
};

},{"a696ee34c45713da":"8fWsM","fff95253fdaa49ea":"d18VP"}],"d18VP":[function(require,module,exports) {
"use strict";
var utils = require("7753b1fa702fbb54");
var common = require("81b6970d75627ce1");
var assert = require("f660976cede694e2");
var rotr64_hi = utils.rotr64_hi;
var rotr64_lo = utils.rotr64_lo;
var shr64_hi = utils.shr64_hi;
var shr64_lo = utils.shr64_lo;
var sum64 = utils.sum64;
var sum64_hi = utils.sum64_hi;
var sum64_lo = utils.sum64_lo;
var sum64_4_hi = utils.sum64_4_hi;
var sum64_4_lo = utils.sum64_4_lo;
var sum64_5_hi = utils.sum64_5_hi;
var sum64_5_lo = utils.sum64_5_lo;
var BlockHash = common.BlockHash;
var sha512_K = [
    0x428a2f98,
    0xd728ae22,
    0x71374491,
    0x23ef65cd,
    0xb5c0fbcf,
    0xec4d3b2f,
    0xe9b5dba5,
    0x8189dbbc,
    0x3956c25b,
    0xf348b538,
    0x59f111f1,
    0xb605d019,
    0x923f82a4,
    0xaf194f9b,
    0xab1c5ed5,
    0xda6d8118,
    0xd807aa98,
    0xa3030242,
    0x12835b01,
    0x45706fbe,
    0x243185be,
    0x4ee4b28c,
    0x550c7dc3,
    0xd5ffb4e2,
    0x72be5d74,
    0xf27b896f,
    0x80deb1fe,
    0x3b1696b1,
    0x9bdc06a7,
    0x25c71235,
    0xc19bf174,
    0xcf692694,
    0xe49b69c1,
    0x9ef14ad2,
    0xefbe4786,
    0x384f25e3,
    0x0fc19dc6,
    0x8b8cd5b5,
    0x240ca1cc,
    0x77ac9c65,
    0x2de92c6f,
    0x592b0275,
    0x4a7484aa,
    0x6ea6e483,
    0x5cb0a9dc,
    0xbd41fbd4,
    0x76f988da,
    0x831153b5,
    0x983e5152,
    0xee66dfab,
    0xa831c66d,
    0x2db43210,
    0xb00327c8,
    0x98fb213f,
    0xbf597fc7,
    0xbeef0ee4,
    0xc6e00bf3,
    0x3da88fc2,
    0xd5a79147,
    0x930aa725,
    0x06ca6351,
    0xe003826f,
    0x14292967,
    0x0a0e6e70,
    0x27b70a85,
    0x46d22ffc,
    0x2e1b2138,
    0x5c26c926,
    0x4d2c6dfc,
    0x5ac42aed,
    0x53380d13,
    0x9d95b3df,
    0x650a7354,
    0x8baf63de,
    0x766a0abb,
    0x3c77b2a8,
    0x81c2c92e,
    0x47edaee6,
    0x92722c85,
    0x1482353b,
    0xa2bfe8a1,
    0x4cf10364,
    0xa81a664b,
    0xbc423001,
    0xc24b8b70,
    0xd0f89791,
    0xc76c51a3,
    0x0654be30,
    0xd192e819,
    0xd6ef5218,
    0xd6990624,
    0x5565a910,
    0xf40e3585,
    0x5771202a,
    0x106aa070,
    0x32bbd1b8,
    0x19a4c116,
    0xb8d2d0c8,
    0x1e376c08,
    0x5141ab53,
    0x2748774c,
    0xdf8eeb99,
    0x34b0bcb5,
    0xe19b48a8,
    0x391c0cb3,
    0xc5c95a63,
    0x4ed8aa4a,
    0xe3418acb,
    0x5b9cca4f,
    0x7763e373,
    0x682e6ff3,
    0xd6b2b8a3,
    0x748f82ee,
    0x5defb2fc,
    0x78a5636f,
    0x43172f60,
    0x84c87814,
    0xa1f0ab72,
    0x8cc70208,
    0x1a6439ec,
    0x90befffa,
    0x23631e28,
    0xa4506ceb,
    0xde82bde9,
    0xbef9a3f7,
    0xb2c67915,
    0xc67178f2,
    0xe372532b,
    0xca273ece,
    0xea26619c,
    0xd186b8c7,
    0x21c0c207,
    0xeada7dd6,
    0xcde0eb1e,
    0xf57d4f7f,
    0xee6ed178,
    0x06f067aa,
    0x72176fba,
    0x0a637dc5,
    0xa2c898a6,
    0x113f9804,
    0xbef90dae,
    0x1b710b35,
    0x131c471b,
    0x28db77f5,
    0x23047d84,
    0x32caab7b,
    0x40c72493,
    0x3c9ebe0a,
    0x15c9bebc,
    0x431d67c4,
    0x9c100d4c,
    0x4cc5d4be,
    0xcb3e42b6,
    0x597f299c,
    0xfc657e2a,
    0x5fcb6fab,
    0x3ad6faec,
    0x6c44198c,
    0x4a475817
];
function SHA512() {
    if (!(this instanceof SHA512)) return new SHA512();
    BlockHash.call(this);
    this.h = [
        0x6a09e667,
        0xf3bcc908,
        0xbb67ae85,
        0x84caa73b,
        0x3c6ef372,
        0xfe94f82b,
        0xa54ff53a,
        0x5f1d36f1,
        0x510e527f,
        0xade682d1,
        0x9b05688c,
        0x2b3e6c1f,
        0x1f83d9ab,
        0xfb41bd6b,
        0x5be0cd19,
        0x137e2179
    ];
    this.k = sha512_K;
    this.W = new Array(160);
}
utils.inherits(SHA512, BlockHash);
module.exports = SHA512;
SHA512.blockSize = 1024;
SHA512.outSize = 512;
SHA512.hmacStrength = 192;
SHA512.padLength = 128;
SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
    var W = this.W;
    // 32 x 32bit words
    for(var i = 0; i < 32; i++)W[i] = msg[start + i];
    for(; i < W.length; i += 2){
        var c0_hi = g1_512_hi(W[i - 4], W[i - 3]); // i - 2
        var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
        var c1_hi = W[i - 14]; // i - 7
        var c1_lo = W[i - 13];
        var c2_hi = g0_512_hi(W[i - 30], W[i - 29]); // i - 15
        var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
        var c3_hi = W[i - 32]; // i - 16
        var c3_lo = W[i - 31];
        W[i] = sum64_4_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
        W[i + 1] = sum64_4_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
    }
};
SHA512.prototype._update = function _update(msg, start) {
    this._prepareBlock(msg, start);
    var W = this.W;
    var ah = this.h[0];
    var al = this.h[1];
    var bh = this.h[2];
    var bl = this.h[3];
    var ch = this.h[4];
    var cl = this.h[5];
    var dh = this.h[6];
    var dl = this.h[7];
    var eh = this.h[8];
    var el = this.h[9];
    var fh = this.h[10];
    var fl = this.h[11];
    var gh = this.h[12];
    var gl = this.h[13];
    var hh = this.h[14];
    var hl = this.h[15];
    assert(this.k.length === W.length);
    for(var i = 0; i < W.length; i += 2){
        var c0_hi = hh;
        var c0_lo = hl;
        var c1_hi = s1_512_hi(eh, el);
        var c1_lo = s1_512_lo(eh, el);
        var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
        var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
        var c3_hi = this.k[i];
        var c3_lo = this.k[i + 1];
        var c4_hi = W[i];
        var c4_lo = W[i + 1];
        var T1_hi = sum64_5_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
        var T1_lo = sum64_5_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
        c0_hi = s0_512_hi(ah, al);
        c0_lo = s0_512_lo(ah, al);
        c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
        c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);
        var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
        var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);
        hh = gh;
        hl = gl;
        gh = fh;
        gl = fl;
        fh = eh;
        fl = el;
        eh = sum64_hi(dh, dl, T1_hi, T1_lo);
        el = sum64_lo(dl, dl, T1_hi, T1_lo);
        dh = ch;
        dl = cl;
        ch = bh;
        cl = bl;
        bh = ah;
        bl = al;
        ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
        al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
    }
    sum64(this.h, 0, ah, al);
    sum64(this.h, 2, bh, bl);
    sum64(this.h, 4, ch, cl);
    sum64(this.h, 6, dh, dl);
    sum64(this.h, 8, eh, el);
    sum64(this.h, 10, fh, fl);
    sum64(this.h, 12, gh, gl);
    sum64(this.h, 14, hh, hl);
};
SHA512.prototype._digest = function digest(enc) {
    if (enc === "hex") return utils.toHex32(this.h, "big");
    else return utils.split32(this.h, "big");
};
function ch64_hi(xh, xl, yh, yl, zh) {
    var r = xh & yh ^ ~xh & zh;
    if (r < 0) r += 0x100000000;
    return r;
}
function ch64_lo(xh, xl, yh, yl, zh, zl) {
    var r = xl & yl ^ ~xl & zl;
    if (r < 0) r += 0x100000000;
    return r;
}
function maj64_hi(xh, xl, yh, yl, zh) {
    var r = xh & yh ^ xh & zh ^ yh & zh;
    if (r < 0) r += 0x100000000;
    return r;
}
function maj64_lo(xh, xl, yh, yl, zh, zl) {
    var r = xl & yl ^ xl & zl ^ yl & zl;
    if (r < 0) r += 0x100000000;
    return r;
}
function s0_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 28);
    var c1_hi = rotr64_hi(xl, xh, 2); // 34
    var c2_hi = rotr64_hi(xl, xh, 7); // 39
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 0x100000000;
    return r;
}
function s0_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 28);
    var c1_lo = rotr64_lo(xl, xh, 2); // 34
    var c2_lo = rotr64_lo(xl, xh, 7); // 39
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 0x100000000;
    return r;
}
function s1_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 14);
    var c1_hi = rotr64_hi(xh, xl, 18);
    var c2_hi = rotr64_hi(xl, xh, 9); // 41
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 0x100000000;
    return r;
}
function s1_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 14);
    var c1_lo = rotr64_lo(xh, xl, 18);
    var c2_lo = rotr64_lo(xl, xh, 9); // 41
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 0x100000000;
    return r;
}
function g0_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 1);
    var c1_hi = rotr64_hi(xh, xl, 8);
    var c2_hi = shr64_hi(xh, xl, 7);
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 0x100000000;
    return r;
}
function g0_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 1);
    var c1_lo = rotr64_lo(xh, xl, 8);
    var c2_lo = shr64_lo(xh, xl, 7);
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 0x100000000;
    return r;
}
function g1_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 19);
    var c1_hi = rotr64_hi(xl, xh, 29); // 61
    var c2_hi = shr64_hi(xh, xl, 6);
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 0x100000000;
    return r;
}
function g1_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 19);
    var c1_lo = rotr64_lo(xl, xh, 29); // 61
    var c2_lo = shr64_lo(xh, xl, 6);
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 0x100000000;
    return r;
}

},{"7753b1fa702fbb54":"8fWsM","81b6970d75627ce1":"9mOc6","f660976cede694e2":"9qH0v"}],"a0aip":[function(require,module,exports) {
"use strict";
var utils = require("36495272d446418f");
var common = require("ad8cf0490e28e8d7");
var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_3 = utils.sum32_3;
var sum32_4 = utils.sum32_4;
var BlockHash = common.BlockHash;
function RIPEMD160() {
    if (!(this instanceof RIPEMD160)) return new RIPEMD160();
    BlockHash.call(this);
    this.h = [
        0x67452301,
        0xefcdab89,
        0x98badcfe,
        0x10325476,
        0xc3d2e1f0
    ];
    this.endian = "little";
}
utils.inherits(RIPEMD160, BlockHash);
exports.ripemd160 = RIPEMD160;
RIPEMD160.blockSize = 512;
RIPEMD160.outSize = 160;
RIPEMD160.hmacStrength = 192;
RIPEMD160.padLength = 64;
RIPEMD160.prototype._update = function update(msg, start) {
    var A = this.h[0];
    var B = this.h[1];
    var C = this.h[2];
    var D = this.h[3];
    var E = this.h[4];
    var Ah = A;
    var Bh = B;
    var Ch = C;
    var Dh = D;
    var Eh = E;
    for(var j = 0; j < 80; j++){
        var T = sum32(rotl32(sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)), s[j]), E);
        A = E;
        E = D;
        D = rotl32(C, 10);
        C = B;
        B = T;
        T = sum32(rotl32(sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)), sh[j]), Eh);
        Ah = Eh;
        Eh = Dh;
        Dh = rotl32(Ch, 10);
        Ch = Bh;
        Bh = T;
    }
    T = sum32_3(this.h[1], C, Dh);
    this.h[1] = sum32_3(this.h[2], D, Eh);
    this.h[2] = sum32_3(this.h[3], E, Ah);
    this.h[3] = sum32_3(this.h[4], A, Bh);
    this.h[4] = sum32_3(this.h[0], B, Ch);
    this.h[0] = T;
};
RIPEMD160.prototype._digest = function digest(enc) {
    if (enc === "hex") return utils.toHex32(this.h, "little");
    else return utils.split32(this.h, "little");
};
function f(j, x, y, z) {
    if (j <= 15) return x ^ y ^ z;
    else if (j <= 31) return x & y | ~x & z;
    else if (j <= 47) return (x | ~y) ^ z;
    else if (j <= 63) return x & z | y & ~z;
    else return x ^ (y | ~z);
}
function K(j) {
    if (j <= 15) return 0x00000000;
    else if (j <= 31) return 0x5a827999;
    else if (j <= 47) return 0x6ed9eba1;
    else if (j <= 63) return 0x8f1bbcdc;
    else return 0xa953fd4e;
}
function Kh(j) {
    if (j <= 15) return 0x50a28be6;
    else if (j <= 31) return 0x5c4dd124;
    else if (j <= 47) return 0x6d703ef3;
    else if (j <= 63) return 0x7a6d76e9;
    else return 0x00000000;
}
var r = [
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    7,
    4,
    13,
    1,
    10,
    6,
    15,
    3,
    12,
    0,
    9,
    5,
    2,
    14,
    11,
    8,
    3,
    10,
    14,
    4,
    9,
    15,
    8,
    1,
    2,
    7,
    0,
    6,
    13,
    11,
    5,
    12,
    1,
    9,
    11,
    10,
    0,
    8,
    12,
    4,
    13,
    3,
    7,
    15,
    14,
    5,
    6,
    2,
    4,
    0,
    5,
    9,
    7,
    12,
    2,
    10,
    14,
    1,
    3,
    8,
    11,
    6,
    15,
    13
];
var rh = [
    5,
    14,
    7,
    0,
    9,
    2,
    11,
    4,
    13,
    6,
    15,
    8,
    1,
    10,
    3,
    12,
    6,
    11,
    3,
    7,
    0,
    13,
    5,
    10,
    14,
    15,
    8,
    12,
    4,
    9,
    1,
    2,
    15,
    5,
    1,
    3,
    7,
    14,
    6,
    9,
    11,
    8,
    12,
    2,
    10,
    0,
    4,
    13,
    8,
    6,
    4,
    1,
    3,
    11,
    15,
    0,
    5,
    12,
    2,
    13,
    9,
    7,
    10,
    14,
    12,
    15,
    10,
    4,
    1,
    5,
    8,
    7,
    6,
    2,
    13,
    14,
    0,
    3,
    9,
    11
];
var s = [
    11,
    14,
    15,
    12,
    5,
    8,
    7,
    9,
    11,
    13,
    14,
    15,
    6,
    7,
    9,
    8,
    7,
    6,
    8,
    13,
    11,
    9,
    7,
    15,
    7,
    12,
    15,
    9,
    11,
    7,
    13,
    12,
    11,
    13,
    6,
    7,
    14,
    9,
    13,
    15,
    14,
    8,
    13,
    6,
    5,
    12,
    7,
    5,
    11,
    12,
    14,
    15,
    14,
    15,
    9,
    8,
    9,
    14,
    5,
    6,
    8,
    6,
    5,
    12,
    9,
    15,
    5,
    11,
    6,
    8,
    13,
    12,
    5,
    12,
    13,
    14,
    11,
    8,
    5,
    6
];
var sh = [
    8,
    9,
    9,
    11,
    13,
    15,
    15,
    5,
    7,
    7,
    8,
    11,
    14,
    14,
    12,
    6,
    9,
    13,
    15,
    7,
    12,
    8,
    9,
    11,
    7,
    7,
    12,
    7,
    6,
    15,
    13,
    11,
    9,
    7,
    15,
    11,
    8,
    6,
    6,
    14,
    12,
    13,
    5,
    14,
    13,
    13,
    7,
    5,
    15,
    5,
    8,
    11,
    14,
    14,
    6,
    14,
    6,
    9,
    12,
    9,
    12,
    5,
    15,
    8,
    8,
    5,
    12,
    9,
    12,
    5,
    14,
    6,
    8,
    13,
    6,
    5,
    15,
    13,
    11,
    11
];

},{"36495272d446418f":"8fWsM","ad8cf0490e28e8d7":"9mOc6"}],"arwpq":[function(require,module,exports) {
"use strict";
var utils = require("596c08b6835a6e2d");
var assert = require("be527907d4f06808");
function Hmac(hash, key, enc) {
    if (!(this instanceof Hmac)) return new Hmac(hash, key, enc);
    this.Hash = hash;
    this.blockSize = hash.blockSize / 8;
    this.outSize = hash.outSize / 8;
    this.inner = null;
    this.outer = null;
    this._init(utils.toArray(key, enc));
}
module.exports = Hmac;
Hmac.prototype._init = function init(key) {
    // Shorten key, if needed
    if (key.length > this.blockSize) key = new this.Hash().update(key).digest();
    assert(key.length <= this.blockSize);
    // Add padding to key
    for(var i = key.length; i < this.blockSize; i++)key.push(0);
    for(i = 0; i < key.length; i++)key[i] ^= 0x36;
    this.inner = new this.Hash().update(key);
    // 0x36 ^ 0x5c = 0x6a
    for(i = 0; i < key.length; i++)key[i] ^= 0x6a;
    this.outer = new this.Hash().update(key);
};
Hmac.prototype.update = function update(msg, enc) {
    this.inner.update(msg, enc);
    return this;
};
Hmac.prototype.digest = function digest(enc) {
    this.outer.update(this.inner.digest());
    return this.outer.digest(enc);
};

},{"596c08b6835a6e2d":"8fWsM","be527907d4f06808":"9qH0v"}],"7iEbc":[function(require,module,exports) {
"use strict";
var elliptic = exports;
elliptic.version = require("e6672bc3ba1c9961").version;
elliptic.utils = require("5bc72f89931ad0f5");
elliptic.rand = require("7f90d752a36f35cf");
elliptic.curve = require("d11da69c91421223");
elliptic.curves = require("6845bad4ed92c3e4");
// Protocols
elliptic.ec = require("b5f2e1f615acc4b");
elliptic.eddsa = require("79ae761761517980");

},{"e6672bc3ba1c9961":"dEKBa","5bc72f89931ad0f5":"lL3aS","7f90d752a36f35cf":"jO3c2","d11da69c91421223":"cMiCv","6845bad4ed92c3e4":"iu12a","b5f2e1f615acc4b":"faD8O","79ae761761517980":"aK0DJ"}],"dEKBa":[function(require,module,exports) {
module.exports = JSON.parse('{"name":"elliptic","version":"6.5.4","description":"EC cryptography","main":"lib/elliptic.js","files":["lib"],"scripts":{"lint":"eslint lib test","lint:fix":"npm run lint -- --fix","unit":"istanbul test _mocha --reporter=spec test/index.js","test":"npm run lint && npm run unit","version":"grunt dist && git add dist/"},"repository":{"type":"git","url":"git@github.com:indutny/elliptic"},"keywords":["EC","Elliptic","curve","Cryptography"],"author":"Fedor Indutny <fedor@indutny.com>","license":"MIT","bugs":{"url":"https://github.com/indutny/elliptic/issues"},"homepage":"https://github.com/indutny/elliptic","devDependencies":{"brfs":"^2.0.2","coveralls":"^3.1.0","eslint":"^7.6.0","grunt":"^1.2.1","grunt-browserify":"^5.3.0","grunt-cli":"^1.3.2","grunt-contrib-connect":"^3.0.0","grunt-contrib-copy":"^1.0.0","grunt-contrib-uglify":"^5.0.0","grunt-mocha-istanbul":"^5.0.2","grunt-saucelabs":"^9.0.1","istanbul":"^0.4.5","mocha":"^8.0.1"},"dependencies":{"bn.js":"^4.11.9","brorand":"^1.1.0","hash.js":"^1.0.0","hmac-drbg":"^1.0.1","inherits":"^2.0.4","minimalistic-assert":"^1.0.1","minimalistic-crypto-utils":"^1.0.1"}}');

},{}],"lL3aS":[function(require,module,exports) {
"use strict";
var utils = exports;
var BN = require("f4cbcf6f6eb25ca0");
var minAssert = require("d8ee30463f95a0fd");
var minUtils = require("997429d6bbd82d59");
utils.assert = minAssert;
utils.toArray = minUtils.toArray;
utils.zero2 = minUtils.zero2;
utils.toHex = minUtils.toHex;
utils.encode = minUtils.encode;
// Represent num in a w-NAF form
function getNAF(num, w, bits) {
    var naf = new Array(Math.max(num.bitLength(), bits) + 1);
    naf.fill(0);
    var ws = 1 << w + 1;
    var k = num.clone();
    for(var i = 0; i < naf.length; i++){
        var z;
        var mod = k.andln(ws - 1);
        if (k.isOdd()) {
            if (mod > (ws >> 1) - 1) z = (ws >> 1) - mod;
            else z = mod;
            k.isubn(z);
        } else z = 0;
        naf[i] = z;
        k.iushrn(1);
    }
    return naf;
}
utils.getNAF = getNAF;
// Represent k1, k2 in a Joint Sparse Form
function getJSF(k1, k2) {
    var jsf = [
        [],
        []
    ];
    k1 = k1.clone();
    k2 = k2.clone();
    var d1 = 0;
    var d2 = 0;
    var m8;
    while(k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0){
        // First phase
        var m14 = k1.andln(3) + d1 & 3;
        var m24 = k2.andln(3) + d2 & 3;
        if (m14 === 3) m14 = -1;
        if (m24 === 3) m24 = -1;
        var u1;
        if ((m14 & 1) === 0) u1 = 0;
        else {
            m8 = k1.andln(7) + d1 & 7;
            if ((m8 === 3 || m8 === 5) && m24 === 2) u1 = -m14;
            else u1 = m14;
        }
        jsf[0].push(u1);
        var u2;
        if ((m24 & 1) === 0) u2 = 0;
        else {
            m8 = k2.andln(7) + d2 & 7;
            if ((m8 === 3 || m8 === 5) && m14 === 2) u2 = -m24;
            else u2 = m24;
        }
        jsf[1].push(u2);
        // Second phase
        if (2 * d1 === u1 + 1) d1 = 1 - d1;
        if (2 * d2 === u2 + 1) d2 = 1 - d2;
        k1.iushrn(1);
        k2.iushrn(1);
    }
    return jsf;
}
utils.getJSF = getJSF;
function cachedProperty(obj, name, computer) {
    var key = "_" + name;
    obj.prototype[name] = function cachedProperty() {
        return this[key] !== undefined ? this[key] : this[key] = computer.call(this);
    };
}
utils.cachedProperty = cachedProperty;
function parseBytes(bytes) {
    return typeof bytes === "string" ? utils.toArray(bytes, "hex") : bytes;
}
utils.parseBytes = parseBytes;
function intFromLE(bytes) {
    return new BN(bytes, "hex", "le");
}
utils.intFromLE = intFromLE;

},{"f4cbcf6f6eb25ca0":"ahpDQ","d8ee30463f95a0fd":"9qH0v","997429d6bbd82d59":"102xc"}],"ahpDQ":[function(require,module,exports) {
(function(module1, exports) {
    "use strict";
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || "Assertion failed");
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === "le" || base === "be") {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || "be");
        }
    }
    if (typeof module1 === "object") module1.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") Buffer = window.Buffer;
        else Buffer = require("1cf9b8cfa268aab5").Buffer;
    } catch (e) {}
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === "number") return this._initNumber(number, base, endian);
        if (typeof number === "object") return this._initArray(number, base, endian);
        if (base === "hex") base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === "le") this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 0x4000000) {
            this.words = [
                number & 0x3ffffff
            ];
            this.length = 1;
        } else if (number < 0x10000000000000) {
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff
            ];
            this.length = 2;
        } else {
            assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff,
                1
            ];
            this.length = 3;
        }
        if (endian !== "le") return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === "number");
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === "be") for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === "le") for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this.strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // 'A' - 'F'
        if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else return c - 48 & 0xf;
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 0x3ffffff;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this.strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) r += c - 49 + 0xa;
            else if (c >= 17) r += c - 17 + 0xa;
            else r += c;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        this.strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype.strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    BN.prototype.inspect = function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
    };
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
            out = "";
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 0xffffff).toString(16);
                carry = w >>> 24 - off & 0xffffff;
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = "0" + out;
            if (this.negative !== 0) out = "-" + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = "";
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = "0" + out;
            while(out.length % padding !== 0)out = "0" + out;
            if (this.negative !== 0) out = "-" + out;
            return out;
        }
        assert(false, "Base should be between 2 and 36");
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 0x4000000;
        else if (this.length === 3 && this.words[2] === 0x01) // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + this.words[1] * 0x4000000;
        else if (this.length > 2) assert(false, "Number can only safely store up to 53 bits");
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16);
    };
    BN.prototype.toBuffer = function toBuffer(endian, length) {
        assert(typeof Buffer !== "undefined");
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, "byte array longer than desired length");
        assert(reqLength > 0, "Requested array length <= 0");
        this.strip();
        var littleEndian = endian === "le";
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
            // Assume big-endian
            for(i = 0; i < reqLength - byteLength; i++)res[i] = 0;
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[reqLength - i - 1] = b;
            }
        } else {
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[i] = b;
            }
            for(; i < reqLength; i++)res[i] = 0;
        }
        return res;
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 0x40) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 0x8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 0x02) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 0xf) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 0x3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 0x1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this.strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this.strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this.strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 0x3ffffff;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
        // And remove leading zeroes
        return this.strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this.strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this.strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 0x3ffffff;
        var carry = r / 0x4000000 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 0x4000000 | 0;
                rword = r & 0x3ffffff;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out.strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 0x3ffffff;
                ncarry = ncarry + (r / 0x4000000 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 0x3ffffff;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 0x3ffffff;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out.strip();
    }
    function jumboMulTo(self, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 0x3ffffff;
            if (w < 0x4000000) carry = 0;
            else carry = w / 0x4000000 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 0x1fff;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 0x1fff;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
            carry >>= 26;
            carry += w / 0x4000000 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 0x3ffffff;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if (++i < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this.strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this.strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === "number" && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this.strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) < num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 0x4000000; i++){
            this.words[i] -= 0x4000000;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
        }
        return this.strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 0x3ffffff;
            carry = (w >> 26) - (right / 0x4000000 | 0);
            this.words[i + shift] = w & 0x3ffffff;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 0x3ffffff;
        }
        if (carry === 0) return this.strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;
        return this.strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 0x3ffffff);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q.strip();
        a.strip();
        // Denormalize
        if (mode !== "div" && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== "mod") div = res.div.neg();
            if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== "mod") div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === "div") return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === "mod") return {
                div: null,
                mod: new BN(this.modn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modn = function modn(num) {
        assert(num <= 0x3ffffff);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return acc;
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        assert(num <= 0x3ffffff);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 0x4000000;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        return this.strip();
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while(i-- > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while(j-- > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while(i-- > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while(j-- > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true);
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === "number");
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 0x3ffffff;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this.strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 0x3ffffff, "Number is too big");
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        assert(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is BN v4 instance
        r.strip();
        else // r is BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 0x3d1;
            num.words[i] = lo & 0x3ffffff;
            lo = w * 0x40 + (lo / 0x4000000 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 0x13 + carry;
            var lo = hi & 0x3ffffff;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === "k256") prime = new K256();
        else if (name === "p224") prime = new P224();
        else if (name === "p192") prime = new P192();
        else if (name === "p25519") prime = new P25519();
        else throw new Error("Unknown prime " + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === "string") {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
        } else {
            assert(m.gtn(1), "modulus must be greater than 1");
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, "red works only with positives");
        assert(a.red, "red works only with red numbers");
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, "red works only with positives");
        assert(a.red && a.red === b.red, "red works only with red numbers");
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
    };
    Red.prototype.neg = function neg(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(module, this);

},{"1cf9b8cfa268aab5":"9C0N7"}],"102xc":[function(require,module,exports) {
"use strict";
var utils = exports;
function toArray(msg, enc) {
    if (Array.isArray(msg)) return msg.slice();
    if (!msg) return [];
    var res = [];
    if (typeof msg !== "string") {
        for(var i = 0; i < msg.length; i++)res[i] = msg[i] | 0;
        return res;
    }
    if (enc === "hex") {
        msg = msg.replace(/[^a-z0-9]+/ig, "");
        if (msg.length % 2 !== 0) msg = "0" + msg;
        for(var i = 0; i < msg.length; i += 2)res.push(parseInt(msg[i] + msg[i + 1], 16));
    } else for(var i = 0; i < msg.length; i++){
        var c = msg.charCodeAt(i);
        var hi = c >> 8;
        var lo = c & 0xff;
        if (hi) res.push(hi, lo);
        else res.push(lo);
    }
    return res;
}
utils.toArray = toArray;
function zero2(word) {
    if (word.length === 1) return "0" + word;
    else return word;
}
utils.zero2 = zero2;
function toHex(msg) {
    var res = "";
    for(var i = 0; i < msg.length; i++)res += zero2(msg[i].toString(16));
    return res;
}
utils.toHex = toHex;
utils.encode = function encode(arr, enc) {
    if (enc === "hex") return toHex(arr);
    else return arr;
};

},{}],"cMiCv":[function(require,module,exports) {
"use strict";
var curve = exports;
curve.base = require("59d486bd2037506a");
curve.short = require("eb37617ef6927580");
curve.mont = require("be9c662572da2183");
curve.edwards = require("60763dd06fe64e8d");

},{"59d486bd2037506a":"6HAKX","eb37617ef6927580":"9Dkqc","be9c662572da2183":"5g4ki","60763dd06fe64e8d":"1O3ST"}],"6HAKX":[function(require,module,exports) {
"use strict";
var BN = require("70865a568c61cc60");
var utils = require("fb5111a3810a8235");
var getNAF = utils.getNAF;
var getJSF = utils.getJSF;
var assert = utils.assert;
function BaseCurve(type, conf) {
    this.type = type;
    this.p = new BN(conf.p, 16);
    // Use Montgomery, when there is no fast reduction for the prime
    this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);
    // Useful for many curves
    this.zero = new BN(0).toRed(this.red);
    this.one = new BN(1).toRed(this.red);
    this.two = new BN(2).toRed(this.red);
    // Curve configuration, optional
    this.n = conf.n && new BN(conf.n, 16);
    this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);
    // Temporary arrays
    this._wnafT1 = new Array(4);
    this._wnafT2 = new Array(4);
    this._wnafT3 = new Array(4);
    this._wnafT4 = new Array(4);
    this._bitLength = this.n ? this.n.bitLength() : 0;
    // Generalized Greg Maxwell's trick
    var adjustCount = this.n && this.p.div(this.n);
    if (!adjustCount || adjustCount.cmpn(100) > 0) this.redN = null;
    else {
        this._maxwellTrick = true;
        this.redN = this.n.toRed(this.red);
    }
}
module.exports = BaseCurve;
BaseCurve.prototype.point = function point() {
    throw new Error("Not implemented");
};
BaseCurve.prototype.validate = function validate() {
    throw new Error("Not implemented");
};
BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
    assert(p.precomputed);
    var doubles = p._getDoubles();
    var naf = getNAF(k, 1, this._bitLength);
    var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
    I /= 3;
    // Translate into more windowed form
    var repr = [];
    var j;
    var nafW;
    for(j = 0; j < naf.length; j += doubles.step){
        nafW = 0;
        for(var l = j + doubles.step - 1; l >= j; l--)nafW = (nafW << 1) + naf[l];
        repr.push(nafW);
    }
    var a = this.jpoint(null, null, null);
    var b = this.jpoint(null, null, null);
    for(var i = I; i > 0; i--){
        for(j = 0; j < repr.length; j++){
            nafW = repr[j];
            if (nafW === i) b = b.mixedAdd(doubles.points[j]);
            else if (nafW === -i) b = b.mixedAdd(doubles.points[j].neg());
        }
        a = a.add(b);
    }
    return a.toP();
};
BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
    var w = 4;
    // Precompute window
    var nafPoints = p._getNAFPoints(w);
    w = nafPoints.wnd;
    var wnd = nafPoints.points;
    // Get NAF form
    var naf = getNAF(k, w, this._bitLength);
    // Add `this`*(N+1) for every w-NAF index
    var acc = this.jpoint(null, null, null);
    for(var i = naf.length - 1; i >= 0; i--){
        // Count zeroes
        for(var l = 0; i >= 0 && naf[i] === 0; i--)l++;
        if (i >= 0) l++;
        acc = acc.dblp(l);
        if (i < 0) break;
        var z = naf[i];
        assert(z !== 0);
        if (p.type === "affine") {
            // J +- P
            if (z > 0) acc = acc.mixedAdd(wnd[z - 1 >> 1]);
            else acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());
        } else // J +- J
        if (z > 0) acc = acc.add(wnd[z - 1 >> 1]);
        else acc = acc.add(wnd[-z - 1 >> 1].neg());
    }
    return p.type === "affine" ? acc.toP() : acc;
};
BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {
    var wndWidth = this._wnafT1;
    var wnd = this._wnafT2;
    var naf = this._wnafT3;
    // Fill all arrays
    var max = 0;
    var i;
    var j;
    var p;
    for(i = 0; i < len; i++){
        p = points[i];
        var nafPoints = p._getNAFPoints(defW);
        wndWidth[i] = nafPoints.wnd;
        wnd[i] = nafPoints.points;
    }
    // Comb small window NAFs
    for(i = len - 1; i >= 1; i -= 2){
        var a = i - 1;
        var b = i;
        if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
            naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
            naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
            max = Math.max(naf[a].length, max);
            max = Math.max(naf[b].length, max);
            continue;
        }
        var comb = [
            points[a],
            /* 1 */ null,
            /* 3 */ null,
            /* 5 */ points[b]
        ];
        // Try to avoid Projective points, if possible
        if (points[a].y.cmp(points[b].y) === 0) {
            comb[1] = points[a].add(points[b]);
            comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
            comb[1] = points[a].toJ().mixedAdd(points[b]);
            comb[2] = points[a].add(points[b].neg());
        } else {
            comb[1] = points[a].toJ().mixedAdd(points[b]);
            comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        }
        var index = [
            -3,
            /* -1 -1 */ -1,
            /* -1 0 */ -5,
            /* -1 1 */ -7,
            /* 0 -1 */ 0,
            /* 0 0 */ 7,
            /* 0 1 */ 5,
            /* 1 -1 */ 1,
            /* 1 0 */ 3
        ];
        var jsf = getJSF(coeffs[a], coeffs[b]);
        max = Math.max(jsf[0].length, max);
        naf[a] = new Array(max);
        naf[b] = new Array(max);
        for(j = 0; j < max; j++){
            var ja = jsf[0][j] | 0;
            var jb = jsf[1][j] | 0;
            naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
            naf[b][j] = 0;
            wnd[a] = comb;
        }
    }
    var acc = this.jpoint(null, null, null);
    var tmp = this._wnafT4;
    for(i = max; i >= 0; i--){
        var k = 0;
        while(i >= 0){
            var zero = true;
            for(j = 0; j < len; j++){
                tmp[j] = naf[j][i] | 0;
                if (tmp[j] !== 0) zero = false;
            }
            if (!zero) break;
            k++;
            i--;
        }
        if (i >= 0) k++;
        acc = acc.dblp(k);
        if (i < 0) break;
        for(j = 0; j < len; j++){
            var z = tmp[j];
            p;
            if (z === 0) continue;
            else if (z > 0) p = wnd[j][z - 1 >> 1];
            else if (z < 0) p = wnd[j][-z - 1 >> 1].neg();
            if (p.type === "affine") acc = acc.mixedAdd(p);
            else acc = acc.add(p);
        }
    }
    // Zeroify references
    for(i = 0; i < len; i++)wnd[i] = null;
    if (jacobianResult) return acc;
    else return acc.toP();
};
function BasePoint(curve, type) {
    this.curve = curve;
    this.type = type;
    this.precomputed = null;
}
BaseCurve.BasePoint = BasePoint;
BasePoint.prototype.eq = function eq() {
    throw new Error("Not implemented");
};
BasePoint.prototype.validate = function validate() {
    return this.curve.validate(this);
};
BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
    bytes = utils.toArray(bytes, enc);
    var len = this.p.byteLength();
    // uncompressed, hybrid-odd, hybrid-even
    if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) && bytes.length - 1 === 2 * len) {
        if (bytes[0] === 0x06) assert(bytes[bytes.length - 1] % 2 === 0);
        else if (bytes[0] === 0x07) assert(bytes[bytes.length - 1] % 2 === 1);
        var res = this.point(bytes.slice(1, 1 + len), bytes.slice(1 + len, 1 + 2 * len));
        return res;
    } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) && bytes.length - 1 === len) return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
    throw new Error("Unknown point format");
};
BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
    return this.encode(enc, true);
};
BasePoint.prototype._encode = function _encode(compact) {
    var len = this.curve.p.byteLength();
    var x = this.getX().toArray("be", len);
    if (compact) return [
        this.getY().isEven() ? 0x02 : 0x03
    ].concat(x);
    return [
        0x04
    ].concat(x, this.getY().toArray("be", len));
};
BasePoint.prototype.encode = function encode(enc, compact) {
    return utils.encode(this._encode(compact), enc);
};
BasePoint.prototype.precompute = function precompute(power) {
    if (this.precomputed) return this;
    var precomputed = {
        doubles: null,
        naf: null,
        beta: null
    };
    precomputed.naf = this._getNAFPoints(8);
    precomputed.doubles = this._getDoubles(4, power);
    precomputed.beta = this._getBeta();
    this.precomputed = precomputed;
    return this;
};
BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
    if (!this.precomputed) return false;
    var doubles = this.precomputed.doubles;
    if (!doubles) return false;
    return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};
BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
    if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;
    var doubles = [
        this
    ];
    var acc = this;
    for(var i = 0; i < power; i += step){
        for(var j = 0; j < step; j++)acc = acc.dbl();
        doubles.push(acc);
    }
    return {
        step: step,
        points: doubles
    };
};
BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
    if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;
    var res = [
        this
    ];
    var max = (1 << wnd) - 1;
    var dbl = max === 1 ? null : this.dbl();
    for(var i = 1; i < max; i++)res[i] = res[i - 1].add(dbl);
    return {
        wnd: wnd,
        points: res
    };
};
BasePoint.prototype._getBeta = function _getBeta() {
    return null;
};
BasePoint.prototype.dblp = function dblp(k) {
    var r = this;
    for(var i = 0; i < k; i++)r = r.dbl();
    return r;
};

},{"70865a568c61cc60":"ahpDQ","fb5111a3810a8235":"lL3aS"}],"9Dkqc":[function(require,module,exports) {
"use strict";
var utils = require("89f794ef417dc31c");
var BN = require("c314b0ac30b69c4a");
var inherits = require("6ac4d7c73f24ab9c");
var Base = require("6e622edb7498c94");
var assert = utils.assert;
function ShortCurve(conf) {
    Base.call(this, "short", conf);
    this.a = new BN(conf.a, 16).toRed(this.red);
    this.b = new BN(conf.b, 16).toRed(this.red);
    this.tinv = this.two.redInvm();
    this.zeroA = this.a.fromRed().cmpn(0) === 0;
    this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;
    // If the curve is endomorphic, precalculate beta and lambda
    this.endo = this._getEndomorphism(conf);
    this._endoWnafT1 = new Array(4);
    this._endoWnafT2 = new Array(4);
}
inherits(ShortCurve, Base);
module.exports = ShortCurve;
ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
    // No efficient endomorphism
    if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1) return;
    // Compute beta and lambda, that lambda * P = (beta * Px; Py)
    var beta;
    var lambda;
    if (conf.beta) beta = new BN(conf.beta, 16).toRed(this.red);
    else {
        var betas = this._getEndoRoots(this.p);
        // Choose the smallest beta
        beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
        beta = beta.toRed(this.red);
    }
    if (conf.lambda) lambda = new BN(conf.lambda, 16);
    else {
        // Choose the lambda that is matching selected beta
        var lambdas = this._getEndoRoots(this.n);
        if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) lambda = lambdas[0];
        else {
            lambda = lambdas[1];
            assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
        }
    }
    // Get basis vectors, used for balanced length-two representation
    var basis;
    if (conf.basis) basis = conf.basis.map(function(vec) {
        return {
            a: new BN(vec.a, 16),
            b: new BN(vec.b, 16)
        };
    });
    else basis = this._getEndoBasis(lambda);
    return {
        beta: beta,
        lambda: lambda,
        basis: basis
    };
};
ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
    // Find roots of for x^2 + x + 1 in F
    // Root = (-1 +- Sqrt(-3)) / 2
    //
    var red = num === this.p ? this.red : BN.mont(num);
    var tinv = new BN(2).toRed(red).redInvm();
    var ntinv = tinv.redNeg();
    var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);
    var l1 = ntinv.redAdd(s).fromRed();
    var l2 = ntinv.redSub(s).fromRed();
    return [
        l1,
        l2
    ];
};
ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
    // aprxSqrt >= sqrt(this.n)
    var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));
    // 3.74
    // Run EGCD, until r(L + 1) < aprxSqrt
    var u = lambda;
    var v = this.n.clone();
    var x1 = new BN(1);
    var y1 = new BN(0);
    var x2 = new BN(0);
    var y2 = new BN(1);
    // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
    var a0;
    var b0;
    // First vector
    var a1;
    var b1;
    // Second vector
    var a2;
    var b2;
    var prevR;
    var i = 0;
    var r;
    var x;
    while(u.cmpn(0) !== 0){
        var q = v.div(u);
        r = v.sub(q.mul(u));
        x = x2.sub(q.mul(x1));
        var y = y2.sub(q.mul(y1));
        if (!a1 && r.cmp(aprxSqrt) < 0) {
            a0 = prevR.neg();
            b0 = x1;
            a1 = r.neg();
            b1 = x;
        } else if (a1 && ++i === 2) break;
        prevR = r;
        v = u;
        u = r;
        x2 = x1;
        x1 = x;
        y2 = y1;
        y1 = y;
    }
    a2 = r.neg();
    b2 = x;
    var len1 = a1.sqr().add(b1.sqr());
    var len2 = a2.sqr().add(b2.sqr());
    if (len2.cmp(len1) >= 0) {
        a2 = a0;
        b2 = b0;
    }
    // Normalize signs
    if (a1.negative) {
        a1 = a1.neg();
        b1 = b1.neg();
    }
    if (a2.negative) {
        a2 = a2.neg();
        b2 = b2.neg();
    }
    return [
        {
            a: a1,
            b: b1
        },
        {
            a: a2,
            b: b2
        }
    ];
};
ShortCurve.prototype._endoSplit = function _endoSplit(k) {
    var basis = this.endo.basis;
    var v1 = basis[0];
    var v2 = basis[1];
    var c1 = v2.b.mul(k).divRound(this.n);
    var c2 = v1.b.neg().mul(k).divRound(this.n);
    var p1 = c1.mul(v1.a);
    var p2 = c2.mul(v2.a);
    var q1 = c1.mul(v1.b);
    var q2 = c2.mul(v2.b);
    // Calculate answer
    var k1 = k.sub(p1).sub(p2);
    var k2 = q1.add(q2).neg();
    return {
        k1: k1,
        k2: k2
    };
};
ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
    x = new BN(x, 16);
    if (!x.red) x = x.toRed(this.red);
    var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
    var y = y2.redSqrt();
    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error("invalid point");
    // XXX Is there any way to tell if the number is odd without converting it
    // to non-red form?
    var isOdd = y.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd) y = y.redNeg();
    return this.point(x, y);
};
ShortCurve.prototype.validate = function validate(point) {
    if (point.inf) return true;
    var x = point.x;
    var y = point.y;
    var ax = this.a.redMul(x);
    var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
    return y.redSqr().redISub(rhs).cmpn(0) === 0;
};
ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
    var npoints = this._endoWnafT1;
    var ncoeffs = this._endoWnafT2;
    for(var i = 0; i < points.length; i++){
        var split = this._endoSplit(coeffs[i]);
        var p = points[i];
        var beta = p._getBeta();
        if (split.k1.negative) {
            split.k1.ineg();
            p = p.neg(true);
        }
        if (split.k2.negative) {
            split.k2.ineg();
            beta = beta.neg(true);
        }
        npoints[i * 2] = p;
        npoints[i * 2 + 1] = beta;
        ncoeffs[i * 2] = split.k1;
        ncoeffs[i * 2 + 1] = split.k2;
    }
    var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);
    // Clean-up references to points and coefficients
    for(var j = 0; j < i * 2; j++){
        npoints[j] = null;
        ncoeffs[j] = null;
    }
    return res;
};
function Point(curve, x, y, isRed) {
    Base.BasePoint.call(this, curve, "affine");
    if (x === null && y === null) {
        this.x = null;
        this.y = null;
        this.inf = true;
    } else {
        this.x = new BN(x, 16);
        this.y = new BN(y, 16);
        // Force redgomery representation when loading from JSON
        if (isRed) {
            this.x.forceRed(this.curve.red);
            this.y.forceRed(this.curve.red);
        }
        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
        if (!this.y.red) this.y = this.y.toRed(this.curve.red);
        this.inf = false;
    }
}
inherits(Point, Base.BasePoint);
ShortCurve.prototype.point = function point(x, y, isRed) {
    return new Point(this, x, y, isRed);
};
ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
    return Point.fromJSON(this, obj, red);
};
Point.prototype._getBeta = function _getBeta() {
    if (!this.curve.endo) return;
    var pre = this.precomputed;
    if (pre && pre.beta) return pre.beta;
    var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
    if (pre) {
        var curve = this.curve;
        var endoMul = function(p) {
            return curve.point(p.x.redMul(curve.endo.beta), p.y);
        };
        pre.beta = beta;
        beta.precomputed = {
            beta: null,
            naf: pre.naf && {
                wnd: pre.naf.wnd,
                points: pre.naf.points.map(endoMul)
            },
            doubles: pre.doubles && {
                step: pre.doubles.step,
                points: pre.doubles.points.map(endoMul)
            }
        };
    }
    return beta;
};
Point.prototype.toJSON = function toJSON() {
    if (!this.precomputed) return [
        this.x,
        this.y
    ];
    return [
        this.x,
        this.y,
        this.precomputed && {
            doubles: this.precomputed.doubles && {
                step: this.precomputed.doubles.step,
                points: this.precomputed.doubles.points.slice(1)
            },
            naf: this.precomputed.naf && {
                wnd: this.precomputed.naf.wnd,
                points: this.precomputed.naf.points.slice(1)
            }
        }
    ];
};
Point.fromJSON = function fromJSON(curve, obj, red) {
    if (typeof obj === "string") obj = JSON.parse(obj);
    var res = curve.point(obj[0], obj[1], red);
    if (!obj[2]) return res;
    function obj2point(obj) {
        return curve.point(obj[0], obj[1], red);
    }
    var pre = obj[2];
    res.precomputed = {
        beta: null,
        doubles: pre.doubles && {
            step: pre.doubles.step,
            points: [
                res
            ].concat(pre.doubles.points.map(obj2point))
        },
        naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: [
                res
            ].concat(pre.naf.points.map(obj2point))
        }
    };
    return res;
};
Point.prototype.inspect = function inspect() {
    if (this.isInfinity()) return "<EC Point Infinity>";
    return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
};
Point.prototype.isInfinity = function isInfinity() {
    return this.inf;
};
Point.prototype.add = function add(p) {
    // O + P = P
    if (this.inf) return p;
    // P + O = P
    if (p.inf) return this;
    // P + P = 2P
    if (this.eq(p)) return this.dbl();
    // P + (-P) = O
    if (this.neg().eq(p)) return this.curve.point(null, null);
    // P + Q = O
    if (this.x.cmp(p.x) === 0) return this.curve.point(null, null);
    var c = this.y.redSub(p.y);
    if (c.cmpn(0) !== 0) c = c.redMul(this.x.redSub(p.x).redInvm());
    var nx = c.redSqr().redISub(this.x).redISub(p.x);
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
};
Point.prototype.dbl = function dbl() {
    if (this.inf) return this;
    // 2P = O
    var ys1 = this.y.redAdd(this.y);
    if (ys1.cmpn(0) === 0) return this.curve.point(null, null);
    var a = this.curve.a;
    var x2 = this.x.redSqr();
    var dyinv = ys1.redInvm();
    var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);
    var nx = c.redSqr().redISub(this.x.redAdd(this.x));
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
};
Point.prototype.getX = function getX() {
    return this.x.fromRed();
};
Point.prototype.getY = function getY() {
    return this.y.fromRed();
};
Point.prototype.mul = function mul(k) {
    k = new BN(k, 16);
    if (this.isInfinity()) return this;
    else if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);
    else if (this.curve.endo) return this.curve._endoWnafMulAdd([
        this
    ], [
        k
    ]);
    else return this.curve._wnafMul(this, k);
};
Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
    var points = [
        this,
        p2
    ];
    var coeffs = [
        k1,
        k2
    ];
    if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs);
    else return this.curve._wnafMulAdd(1, points, coeffs, 2);
};
Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
    var points = [
        this,
        p2
    ];
    var coeffs = [
        k1,
        k2
    ];
    if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs, true);
    else return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};
Point.prototype.eq = function eq(p) {
    return this === p || this.inf === p.inf && (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};
Point.prototype.neg = function neg(_precompute) {
    if (this.inf) return this;
    var res = this.curve.point(this.x, this.y.redNeg());
    if (_precompute && this.precomputed) {
        var pre = this.precomputed;
        var negate = function(p) {
            return p.neg();
        };
        res.precomputed = {
            naf: pre.naf && {
                wnd: pre.naf.wnd,
                points: pre.naf.points.map(negate)
            },
            doubles: pre.doubles && {
                step: pre.doubles.step,
                points: pre.doubles.points.map(negate)
            }
        };
    }
    return res;
};
Point.prototype.toJ = function toJ() {
    if (this.inf) return this.curve.jpoint(null, null, null);
    var res = this.curve.jpoint(this.x, this.y, this.curve.one);
    return res;
};
function JPoint(curve, x, y, z) {
    Base.BasePoint.call(this, curve, "jacobian");
    if (x === null && y === null && z === null) {
        this.x = this.curve.one;
        this.y = this.curve.one;
        this.z = new BN(0);
    } else {
        this.x = new BN(x, 16);
        this.y = new BN(y, 16);
        this.z = new BN(z, 16);
    }
    if (!this.x.red) this.x = this.x.toRed(this.curve.red);
    if (!this.y.red) this.y = this.y.toRed(this.curve.red);
    if (!this.z.red) this.z = this.z.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;
}
inherits(JPoint, Base.BasePoint);
ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
    return new JPoint(this, x, y, z);
};
JPoint.prototype.toP = function toP() {
    if (this.isInfinity()) return this.curve.point(null, null);
    var zinv = this.z.redInvm();
    var zinv2 = zinv.redSqr();
    var ax = this.x.redMul(zinv2);
    var ay = this.y.redMul(zinv2).redMul(zinv);
    return this.curve.point(ax, ay);
};
JPoint.prototype.neg = function neg() {
    return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};
JPoint.prototype.add = function add(p) {
    // O + P = P
    if (this.isInfinity()) return p;
    // P + O = P
    if (p.isInfinity()) return this;
    // 12M + 4S + 7A
    var pz2 = p.z.redSqr();
    var z2 = this.z.redSqr();
    var u1 = this.x.redMul(pz2);
    var u2 = p.x.redMul(z2);
    var s1 = this.y.redMul(pz2.redMul(p.z));
    var s2 = p.y.redMul(z2.redMul(this.z));
    var h = u1.redSub(u2);
    var r = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);
        else return this.dbl();
    }
    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);
    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(p.z).redMul(h);
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype.mixedAdd = function mixedAdd(p) {
    // O + P = P
    if (this.isInfinity()) return p.toJ();
    // P + O = P
    if (p.isInfinity()) return this;
    // 8M + 3S + 7A
    var z2 = this.z.redSqr();
    var u1 = this.x;
    var u2 = p.x.redMul(z2);
    var s1 = this.y;
    var s2 = p.y.redMul(z2).redMul(this.z);
    var h = u1.redSub(u2);
    var r = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);
        else return this.dbl();
    }
    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);
    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(h);
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype.dblp = function dblp(pow) {
    if (pow === 0) return this;
    if (this.isInfinity()) return this;
    if (!pow) return this.dbl();
    var i;
    if (this.curve.zeroA || this.curve.threeA) {
        var r = this;
        for(i = 0; i < pow; i++)r = r.dbl();
        return r;
    }
    // 1M + 2S + 1A + N * (4S + 5M + 8A)
    // N = 1 => 6M + 6S + 9A
    var a = this.curve.a;
    var tinv = this.curve.tinv;
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();
    // Reuse results
    var jyd = jy.redAdd(jy);
    for(i = 0; i < pow; i++){
        var jx2 = jx.redSqr();
        var jyd2 = jyd.redSqr();
        var jyd4 = jyd2.redSqr();
        var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
        var t1 = jx.redMul(jyd2);
        var nx = c.redSqr().redISub(t1.redAdd(t1));
        var t2 = t1.redISub(nx);
        var dny = c.redMul(t2);
        dny = dny.redIAdd(dny).redISub(jyd4);
        var nz = jyd.redMul(jz);
        if (i + 1 < pow) jz4 = jz4.redMul(jyd4);
        jx = nx;
        jz = nz;
        jyd = dny;
    }
    return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};
JPoint.prototype.dbl = function dbl() {
    if (this.isInfinity()) return this;
    if (this.curve.zeroA) return this._zeroDbl();
    else if (this.curve.threeA) return this._threeDbl();
    else return this._dbl();
};
JPoint.prototype._zeroDbl = function _zeroDbl() {
    var nx;
    var ny;
    var nz;
    // Z = 1
    if (this.zOne) {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
        //     #doubling-mdbl-2007-bl
        // 1M + 5S + 14A
        // XX = X1^2
        var xx = this.x.redSqr();
        // YY = Y1^2
        var yy = this.y.redSqr();
        // YYYY = YY^2
        var yyyy = yy.redSqr();
        // S = 2 * ((X1 + YY)^2 - XX - YYYY)
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        // M = 3 * XX + a; a = 0
        var m = xx.redAdd(xx).redIAdd(xx);
        // T = M ^ 2 - 2*S
        var t = m.redSqr().redISub(s).redISub(s);
        // 8 * YYYY
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        // X3 = T
        nx = t;
        // Y3 = M * (S - T) - 8 * YYYY
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        // Z3 = 2*Y1
        nz = this.y.redAdd(this.y);
    } else {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
        //     #doubling-dbl-2009-l
        // 2M + 5S + 13A
        // A = X1^2
        var a = this.x.redSqr();
        // B = Y1^2
        var b = this.y.redSqr();
        // C = B^2
        var c = b.redSqr();
        // D = 2 * ((X1 + B)^2 - A - C)
        var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
        d = d.redIAdd(d);
        // E = 3 * A
        var e = a.redAdd(a).redIAdd(a);
        // F = E^2
        var f = e.redSqr();
        // 8 * C
        var c8 = c.redIAdd(c);
        c8 = c8.redIAdd(c8);
        c8 = c8.redIAdd(c8);
        // X3 = F - 2 * D
        nx = f.redISub(d).redISub(d);
        // Y3 = E * (D - X3) - 8 * C
        ny = e.redMul(d.redISub(nx)).redISub(c8);
        // Z3 = 2 * Y1 * Z1
        nz = this.y.redMul(this.z);
        nz = nz.redIAdd(nz);
    }
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype._threeDbl = function _threeDbl() {
    var nx;
    var ny;
    var nz;
    // Z = 1
    if (this.zOne) {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
        //     #doubling-mdbl-2007-bl
        // 1M + 5S + 15A
        // XX = X1^2
        var xx = this.x.redSqr();
        // YY = Y1^2
        var yy = this.y.redSqr();
        // YYYY = YY^2
        var yyyy = yy.redSqr();
        // S = 2 * ((X1 + YY)^2 - XX - YYYY)
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        // M = 3 * XX + a
        var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
        // T = M^2 - 2 * S
        var t = m.redSqr().redISub(s).redISub(s);
        // X3 = T
        nx = t;
        // Y3 = M * (S - T) - 8 * YYYY
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        // Z3 = 2 * Y1
        nz = this.y.redAdd(this.y);
    } else {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
        // 3M + 5S
        // delta = Z1^2
        var delta = this.z.redSqr();
        // gamma = Y1^2
        var gamma = this.y.redSqr();
        // beta = X1 * gamma
        var beta = this.x.redMul(gamma);
        // alpha = 3 * (X1 - delta) * (X1 + delta)
        var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
        alpha = alpha.redAdd(alpha).redIAdd(alpha);
        // X3 = alpha^2 - 8 * beta
        var beta4 = beta.redIAdd(beta);
        beta4 = beta4.redIAdd(beta4);
        var beta8 = beta4.redAdd(beta4);
        nx = alpha.redSqr().redISub(beta8);
        // Z3 = (Y1 + Z1)^2 - gamma - delta
        nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
        // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
        var ggamma8 = gamma.redSqr();
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
    }
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype._dbl = function _dbl() {
    var a = this.curve.a;
    // 4M + 6S + 10A
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();
    var jx2 = jx.redSqr();
    var jy2 = jy.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
    var jxd4 = jx.redAdd(jx);
    jxd4 = jxd4.redIAdd(jxd4);
    var t1 = jxd4.redMul(jy2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var jyd8 = jy2.redSqr();
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    var ny = c.redMul(t2).redISub(jyd8);
    var nz = jy.redAdd(jy).redMul(jz);
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype.trpl = function trpl() {
    if (!this.curve.zeroA) return this.dbl().add(this);
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
    // 5M + 10S + ...
    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // ZZ = Z1^2
    var zz = this.z.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // M = 3 * XX + a * ZZ2; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // MM = M^2
    var mm = m.redSqr();
    // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
    var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    e = e.redIAdd(e);
    e = e.redAdd(e).redIAdd(e);
    e = e.redISub(mm);
    // EE = E^2
    var ee = e.redSqr();
    // T = 16*YYYY
    var t = yyyy.redIAdd(yyyy);
    t = t.redIAdd(t);
    t = t.redIAdd(t);
    t = t.redIAdd(t);
    // U = (M + E)^2 - MM - EE - T
    var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
    // X3 = 4 * (X1 * EE - 4 * YY * U)
    var yyu4 = yy.redMul(u);
    yyu4 = yyu4.redIAdd(yyu4);
    yyu4 = yyu4.redIAdd(yyu4);
    var nx = this.x.redMul(ee).redISub(yyu4);
    nx = nx.redIAdd(nx);
    nx = nx.redIAdd(nx);
    // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
    var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    // Z3 = (Z1 + E)^2 - ZZ - EE
    var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype.mul = function mul(k, kbase) {
    k = new BN(k, kbase);
    return this.curve._wnafMul(this, k);
};
JPoint.prototype.eq = function eq(p) {
    if (p.type === "affine") return this.eq(p.toJ());
    if (this === p) return true;
    // x1 * z2^2 == x2 * z1^2
    var z2 = this.z.redSqr();
    var pz2 = p.z.redSqr();
    if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0) return false;
    // y1 * z2^3 == y2 * z1^3
    var z3 = z2.redMul(this.z);
    var pz3 = pz2.redMul(p.z);
    return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};
JPoint.prototype.eqXToP = function eqXToP(x) {
    var zs = this.z.redSqr();
    var rx = x.toRed(this.curve.red).redMul(zs);
    if (this.x.cmp(rx) === 0) return true;
    var xc = x.clone();
    var t = this.curve.redN.redMul(zs);
    for(;;){
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0) return false;
        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0) return true;
    }
};
JPoint.prototype.inspect = function inspect() {
    if (this.isInfinity()) return "<EC JPoint Infinity>";
    return "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
};
JPoint.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.z.cmpn(0) === 0;
};

},{"89f794ef417dc31c":"lL3aS","c314b0ac30b69c4a":"ahpDQ","6ac4d7c73f24ab9c":"l3bOz","6e622edb7498c94":"6HAKX"}],"5g4ki":[function(require,module,exports) {
"use strict";
var BN = require("ebdf19f04f3ed250");
var inherits = require("cb5bb4841a749f68");
var Base = require("51280941230b3f98");
var utils = require("ea7949a80be00261");
function MontCurve(conf) {
    Base.call(this, "mont", conf);
    this.a = new BN(conf.a, 16).toRed(this.red);
    this.b = new BN(conf.b, 16).toRed(this.red);
    this.i4 = new BN(4).toRed(this.red).redInvm();
    this.two = new BN(2).toRed(this.red);
    this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
inherits(MontCurve, Base);
module.exports = MontCurve;
MontCurve.prototype.validate = function validate(point) {
    var x = point.normalize().x;
    var x2 = x.redSqr();
    var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
    var y = rhs.redSqrt();
    return y.redSqr().cmp(rhs) === 0;
};
function Point(curve, x, z) {
    Base.BasePoint.call(this, curve, "projective");
    if (x === null && z === null) {
        this.x = this.curve.one;
        this.z = this.curve.zero;
    } else {
        this.x = new BN(x, 16);
        this.z = new BN(z, 16);
        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
        if (!this.z.red) this.z = this.z.toRed(this.curve.red);
    }
}
inherits(Point, Base.BasePoint);
MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
    return this.point(utils.toArray(bytes, enc), 1);
};
MontCurve.prototype.point = function point(x, z) {
    return new Point(this, x, z);
};
MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
    return Point.fromJSON(this, obj);
};
Point.prototype.precompute = function precompute() {
// No-op
};
Point.prototype._encode = function _encode() {
    return this.getX().toArray("be", this.curve.p.byteLength());
};
Point.fromJSON = function fromJSON(curve, obj) {
    return new Point(curve, obj[0], obj[1] || curve.one);
};
Point.prototype.inspect = function inspect() {
    if (this.isInfinity()) return "<EC Point Infinity>";
    return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
};
Point.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.z.cmpn(0) === 0;
};
Point.prototype.dbl = function dbl() {
    // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
    // 2M + 2S + 4A
    // A = X1 + Z1
    var a = this.x.redAdd(this.z);
    // AA = A^2
    var aa = a.redSqr();
    // B = X1 - Z1
    var b = this.x.redSub(this.z);
    // BB = B^2
    var bb = b.redSqr();
    // C = AA - BB
    var c = aa.redSub(bb);
    // X3 = AA * BB
    var nx = aa.redMul(bb);
    // Z3 = C * (BB + A24 * C)
    var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
    return this.curve.point(nx, nz);
};
Point.prototype.add = function add() {
    throw new Error("Not supported on Montgomery curve");
};
Point.prototype.diffAdd = function diffAdd(p, diff) {
    // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
    // 4M + 2S + 6A
    // A = X2 + Z2
    var a = this.x.redAdd(this.z);
    // B = X2 - Z2
    var b = this.x.redSub(this.z);
    // C = X3 + Z3
    var c = p.x.redAdd(p.z);
    // D = X3 - Z3
    var d = p.x.redSub(p.z);
    // DA = D * A
    var da = d.redMul(a);
    // CB = C * B
    var cb = c.redMul(b);
    // X5 = Z1 * (DA + CB)^2
    var nx = diff.z.redMul(da.redAdd(cb).redSqr());
    // Z5 = X1 * (DA - CB)^2
    var nz = diff.x.redMul(da.redISub(cb).redSqr());
    return this.curve.point(nx, nz);
};
Point.prototype.mul = function mul(k) {
    var t = k.clone();
    var a = this; // (N / 2) * Q + Q
    var b = this.curve.point(null, null); // (N / 2) * Q
    var c = this; // Q
    for(var bits = []; t.cmpn(0) !== 0; t.iushrn(1))bits.push(t.andln(1));
    for(var i = bits.length - 1; i >= 0; i--)if (bits[i] === 0) {
        // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
        a = a.diffAdd(b, c);
        // N * Q = 2 * ((N / 2) * Q + Q))
        b = b.dbl();
    } else {
        // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
        b = a.diffAdd(b, c);
        // N * Q + Q = 2 * ((N / 2) * Q + Q)
        a = a.dbl();
    }
    return b;
};
Point.prototype.mulAdd = function mulAdd() {
    throw new Error("Not supported on Montgomery curve");
};
Point.prototype.jumlAdd = function jumlAdd() {
    throw new Error("Not supported on Montgomery curve");
};
Point.prototype.eq = function eq(other) {
    return this.getX().cmp(other.getX()) === 0;
};
Point.prototype.normalize = function normalize() {
    this.x = this.x.redMul(this.z.redInvm());
    this.z = this.curve.one;
    return this;
};
Point.prototype.getX = function getX() {
    // Normalize coordinates
    this.normalize();
    return this.x.fromRed();
};

},{"ebdf19f04f3ed250":"ahpDQ","cb5bb4841a749f68":"l3bOz","51280941230b3f98":"6HAKX","ea7949a80be00261":"lL3aS"}],"1O3ST":[function(require,module,exports) {
"use strict";
var utils = require("7bd66a4710450b08");
var BN = require("ccef46dcf03d45c6");
var inherits = require("19937272cbe23c92");
var Base = require("108c8ead5f54502b");
var assert = utils.assert;
function EdwardsCurve(conf) {
    // NOTE: Important as we are creating point in Base.call()
    this.twisted = (conf.a | 0) !== 1;
    this.mOneA = this.twisted && (conf.a | 0) === -1;
    this.extended = this.mOneA;
    Base.call(this, "edwards", conf);
    this.a = new BN(conf.a, 16).umod(this.red.m);
    this.a = this.a.toRed(this.red);
    this.c = new BN(conf.c, 16).toRed(this.red);
    this.c2 = this.c.redSqr();
    this.d = new BN(conf.d, 16).toRed(this.red);
    this.dd = this.d.redAdd(this.d);
    assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
    this.oneC = (conf.c | 0) === 1;
}
inherits(EdwardsCurve, Base);
module.exports = EdwardsCurve;
EdwardsCurve.prototype._mulA = function _mulA(num) {
    if (this.mOneA) return num.redNeg();
    else return this.a.redMul(num);
};
EdwardsCurve.prototype._mulC = function _mulC(num) {
    if (this.oneC) return num;
    else return this.c.redMul(num);
};
// Just for compatibility with Short curve
EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
    return this.point(x, y, z, t);
};
EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
    x = new BN(x, 16);
    if (!x.red) x = x.toRed(this.red);
    var x2 = x.redSqr();
    var rhs = this.c2.redSub(this.a.redMul(x2));
    var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));
    var y2 = rhs.redMul(lhs.redInvm());
    var y = y2.redSqrt();
    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error("invalid point");
    var isOdd = y.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd) y = y.redNeg();
    return this.point(x, y);
};
EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
    y = new BN(y, 16);
    if (!y.red) y = y.toRed(this.red);
    // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
    var y2 = y.redSqr();
    var lhs = y2.redSub(this.c2);
    var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
    var x2 = lhs.redMul(rhs.redInvm());
    if (x2.cmp(this.zero) === 0) {
        if (odd) throw new Error("invalid point");
        else return this.point(this.zero, y);
    }
    var x = x2.redSqrt();
    if (x.redSqr().redSub(x2).cmp(this.zero) !== 0) throw new Error("invalid point");
    if (x.fromRed().isOdd() !== odd) x = x.redNeg();
    return this.point(x, y);
};
EdwardsCurve.prototype.validate = function validate(point) {
    if (point.isInfinity()) return true;
    // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
    point.normalize();
    var x2 = point.x.redSqr();
    var y2 = point.y.redSqr();
    var lhs = x2.redMul(this.a).redAdd(y2);
    var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));
    return lhs.cmp(rhs) === 0;
};
function Point(curve, x, y, z, t) {
    Base.BasePoint.call(this, curve, "projective");
    if (x === null && y === null && z === null) {
        this.x = this.curve.zero;
        this.y = this.curve.one;
        this.z = this.curve.one;
        this.t = this.curve.zero;
        this.zOne = true;
    } else {
        this.x = new BN(x, 16);
        this.y = new BN(y, 16);
        this.z = z ? new BN(z, 16) : this.curve.one;
        this.t = t && new BN(t, 16);
        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
        if (!this.y.red) this.y = this.y.toRed(this.curve.red);
        if (!this.z.red) this.z = this.z.toRed(this.curve.red);
        if (this.t && !this.t.red) this.t = this.t.toRed(this.curve.red);
        this.zOne = this.z === this.curve.one;
        // Use extended coordinates
        if (this.curve.extended && !this.t) {
            this.t = this.x.redMul(this.y);
            if (!this.zOne) this.t = this.t.redMul(this.z.redInvm());
        }
    }
}
inherits(Point, Base.BasePoint);
EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
    return Point.fromJSON(this, obj);
};
EdwardsCurve.prototype.point = function point(x, y, z, t) {
    return new Point(this, x, y, z, t);
};
Point.fromJSON = function fromJSON(curve, obj) {
    return new Point(curve, obj[0], obj[1], obj[2]);
};
Point.prototype.inspect = function inspect() {
    if (this.isInfinity()) return "<EC Point Infinity>";
    return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
};
Point.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.x.cmpn(0) === 0 && (this.y.cmp(this.z) === 0 || this.zOne && this.y.cmp(this.curve.c) === 0);
};
Point.prototype._extDbl = function _extDbl() {
    // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
    //     #doubling-dbl-2008-hwcd
    // 4M + 4S
    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = 2 * Z1^2
    var c = this.z.redSqr();
    c = c.redIAdd(c);
    // D = a * A
    var d = this.curve._mulA(a);
    // E = (X1 + Y1)^2 - A - B
    var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
    // G = D + B
    var g = d.redAdd(b);
    // F = G - C
    var f = g.redSub(c);
    // H = D - B
    var h = d.redSub(b);
    // X3 = E * F
    var nx = e.redMul(f);
    // Y3 = G * H
    var ny = g.redMul(h);
    // T3 = E * H
    var nt = e.redMul(h);
    // Z3 = F * G
    var nz = f.redMul(g);
    return this.curve.point(nx, ny, nz, nt);
};
Point.prototype._projDbl = function _projDbl() {
    // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
    //     #doubling-dbl-2008-bbjlp
    //     #doubling-dbl-2007-bl
    // and others
    // Generally 3M + 4S or 2M + 4S
    // B = (X1 + Y1)^2
    var b = this.x.redAdd(this.y).redSqr();
    // C = X1^2
    var c = this.x.redSqr();
    // D = Y1^2
    var d = this.y.redSqr();
    var nx;
    var ny;
    var nz;
    var e;
    var h;
    var j;
    if (this.curve.twisted) {
        // E = a * C
        e = this.curve._mulA(c);
        // F = E + D
        var f = e.redAdd(d);
        if (this.zOne) {
            // X3 = (B - C - D) * (F - 2)
            nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
            // Y3 = F * (E - D)
            ny = f.redMul(e.redSub(d));
            // Z3 = F^2 - 2 * F
            nz = f.redSqr().redSub(f).redSub(f);
        } else {
            // H = Z1^2
            h = this.z.redSqr();
            // J = F - 2 * H
            j = f.redSub(h).redISub(h);
            // X3 = (B-C-D)*J
            nx = b.redSub(c).redISub(d).redMul(j);
            // Y3 = F * (E - D)
            ny = f.redMul(e.redSub(d));
            // Z3 = F * J
            nz = f.redMul(j);
        }
    } else {
        // E = C + D
        e = c.redAdd(d);
        // H = (c * Z1)^2
        h = this.curve._mulC(this.z).redSqr();
        // J = E - 2 * H
        j = e.redSub(h).redSub(h);
        // X3 = c * (B - E) * J
        nx = this.curve._mulC(b.redISub(e)).redMul(j);
        // Y3 = c * E * (C - D)
        ny = this.curve._mulC(e).redMul(c.redISub(d));
        // Z3 = E * J
        nz = e.redMul(j);
    }
    return this.curve.point(nx, ny, nz);
};
Point.prototype.dbl = function dbl() {
    if (this.isInfinity()) return this;
    // Double in extended coordinates
    if (this.curve.extended) return this._extDbl();
    else return this._projDbl();
};
Point.prototype._extAdd = function _extAdd(p) {
    // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
    //     #addition-add-2008-hwcd-3
    // 8M
    // A = (Y1 - X1) * (Y2 - X2)
    var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
    // B = (Y1 + X1) * (Y2 + X2)
    var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
    // C = T1 * k * T2
    var c = this.t.redMul(this.curve.dd).redMul(p.t);
    // D = Z1 * 2 * Z2
    var d = this.z.redMul(p.z.redAdd(p.z));
    // E = B - A
    var e = b.redSub(a);
    // F = D - C
    var f = d.redSub(c);
    // G = D + C
    var g = d.redAdd(c);
    // H = B + A
    var h = b.redAdd(a);
    // X3 = E * F
    var nx = e.redMul(f);
    // Y3 = G * H
    var ny = g.redMul(h);
    // T3 = E * H
    var nt = e.redMul(h);
    // Z3 = F * G
    var nz = f.redMul(g);
    return this.curve.point(nx, ny, nz, nt);
};
Point.prototype._projAdd = function _projAdd(p) {
    // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
    //     #addition-add-2008-bbjlp
    //     #addition-add-2007-bl
    // 10M + 1S
    // A = Z1 * Z2
    var a = this.z.redMul(p.z);
    // B = A^2
    var b = a.redSqr();
    // C = X1 * X2
    var c = this.x.redMul(p.x);
    // D = Y1 * Y2
    var d = this.y.redMul(p.y);
    // E = d * C * D
    var e = this.curve.d.redMul(c).redMul(d);
    // F = B - E
    var f = b.redSub(e);
    // G = B + E
    var g = b.redAdd(e);
    // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
    var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
    var nx = a.redMul(f).redMul(tmp);
    var ny;
    var nz;
    if (this.curve.twisted) {
        // Y3 = A * G * (D - a * C)
        ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
        // Z3 = F * G
        nz = f.redMul(g);
    } else {
        // Y3 = A * G * (D - C)
        ny = a.redMul(g).redMul(d.redSub(c));
        // Z3 = c * F * G
        nz = this.curve._mulC(f).redMul(g);
    }
    return this.curve.point(nx, ny, nz);
};
Point.prototype.add = function add(p) {
    if (this.isInfinity()) return p;
    if (p.isInfinity()) return this;
    if (this.curve.extended) return this._extAdd(p);
    else return this._projAdd(p);
};
Point.prototype.mul = function mul(k) {
    if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);
    else return this.curve._wnafMul(this, k);
};
Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
    return this.curve._wnafMulAdd(1, [
        this,
        p
    ], [
        k1,
        k2
    ], 2, false);
};
Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
    return this.curve._wnafMulAdd(1, [
        this,
        p
    ], [
        k1,
        k2
    ], 2, true);
};
Point.prototype.normalize = function normalize() {
    if (this.zOne) return this;
    // Normalize coordinates
    var zi = this.z.redInvm();
    this.x = this.x.redMul(zi);
    this.y = this.y.redMul(zi);
    if (this.t) this.t = this.t.redMul(zi);
    this.z = this.curve.one;
    this.zOne = true;
    return this;
};
Point.prototype.neg = function neg() {
    return this.curve.point(this.x.redNeg(), this.y, this.z, this.t && this.t.redNeg());
};
Point.prototype.getX = function getX() {
    this.normalize();
    return this.x.fromRed();
};
Point.prototype.getY = function getY() {
    this.normalize();
    return this.y.fromRed();
};
Point.prototype.eq = function eq(other) {
    return this === other || this.getX().cmp(other.getX()) === 0 && this.getY().cmp(other.getY()) === 0;
};
Point.prototype.eqXToP = function eqXToP(x) {
    var rx = x.toRed(this.curve.red).redMul(this.z);
    if (this.x.cmp(rx) === 0) return true;
    var xc = x.clone();
    var t = this.curve.redN.redMul(this.z);
    for(;;){
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0) return false;
        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0) return true;
    }
};
// Compatibility with BaseCurve
Point.prototype.toP = Point.prototype.normalize;
Point.prototype.mixedAdd = Point.prototype.add;

},{"7bd66a4710450b08":"lL3aS","ccef46dcf03d45c6":"ahpDQ","19937272cbe23c92":"l3bOz","108c8ead5f54502b":"6HAKX"}],"iu12a":[function(require,module,exports) {
"use strict";
var curves = exports;
var hash = require("1c9db357c0845afa");
var curve = require("47ec78745540f875");
var utils = require("e30b16e4a47a5405");
var assert = utils.assert;
function PresetCurve(options) {
    if (options.type === "short") this.curve = new curve.short(options);
    else if (options.type === "edwards") this.curve = new curve.edwards(options);
    else this.curve = new curve.mont(options);
    this.g = this.curve.g;
    this.n = this.curve.n;
    this.hash = options.hash;
    assert(this.g.validate(), "Invalid curve");
    assert(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
}
curves.PresetCurve = PresetCurve;
function defineCurve(name, options) {
    Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        get: function() {
            var curve = new PresetCurve(options);
            Object.defineProperty(curves, name, {
                configurable: true,
                enumerable: true,
                value: curve
            });
            return curve;
        }
    });
}
defineCurve("p192", {
    type: "short",
    prime: "p192",
    p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
    a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
    b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
    n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
    hash: hash.sha256,
    gRed: false,
    g: [
        "188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012",
        "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"
    ]
});
defineCurve("p224", {
    type: "short",
    prime: "p224",
    p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
    a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
    b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
    n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
    hash: hash.sha256,
    gRed: false,
    g: [
        "b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21",
        "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"
    ]
});
defineCurve("p256", {
    type: "short",
    prime: null,
    p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
    a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
    b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
    n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
    hash: hash.sha256,
    gRed: false,
    g: [
        "6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296",
        "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"
    ]
});
defineCurve("p384", {
    type: "short",
    prime: null,
    p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
    a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
    b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
    n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
    hash: hash.sha384,
    gRed: false,
    g: [
        "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7",
        "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"
    ]
});
defineCurve("p521", {
    type: "short",
    prime: null,
    p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
    a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
    b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
    n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
    hash: hash.sha512,
    gRed: false,
    g: [
        "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66",
        "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"
    ]
});
defineCurve("curve25519", {
    type: "mont",
    prime: "p25519",
    p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
    a: "76d06",
    b: "1",
    n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
    hash: hash.sha256,
    gRed: false,
    g: [
        "9"
    ]
});
defineCurve("ed25519", {
    type: "edwards",
    prime: "p25519",
    p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
    a: "-1",
    c: "1",
    // -121665 * (121666^(-1)) (mod P)
    d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
    n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
    hash: hash.sha256,
    gRed: false,
    g: [
        "216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a",
        // 4/5
        "6666666666666666666666666666666666666666666666666666666666666658"
    ]
});
var pre;
try {
    pre = require("9eada5f7049e7dfd");
} catch (e) {
    pre = undefined;
}
defineCurve("secp256k1", {
    type: "short",
    prime: "k256",
    p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
    a: "0",
    b: "7",
    n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
    h: "1",
    hash: hash.sha256,
    // Precomputed endomorphism
    beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
    lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
    basis: [
        {
            a: "3086d221a7d46bcde86c90e49284eb15",
            b: "-e4437ed6010e88286f547fa90abfe4c3"
        },
        {
            a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
            b: "3086d221a7d46bcde86c90e49284eb15"
        }
    ],
    gRed: false,
    g: [
        "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
        "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",
        pre
    ]
});

},{"1c9db357c0845afa":"dUx6k","47ec78745540f875":"cMiCv","e30b16e4a47a5405":"lL3aS","9eada5f7049e7dfd":"5D4uK"}],"5D4uK":[function(require,module,exports) {
module.exports = {
    doubles: {
        step: 4,
        points: [
            [
                "e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a",
                "f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821"
            ],
            [
                "8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508",
                "11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf"
            ],
            [
                "175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739",
                "d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695"
            ],
            [
                "363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640",
                "4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9"
            ],
            [
                "8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c",
                "4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36"
            ],
            [
                "723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda",
                "96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f"
            ],
            [
                "eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa",
                "5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999"
            ],
            [
                "100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0",
                "cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09"
            ],
            [
                "e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d",
                "9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d"
            ],
            [
                "feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d",
                "e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088"
            ],
            [
                "da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1",
                "9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d"
            ],
            [
                "53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0",
                "5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8"
            ],
            [
                "8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047",
                "10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a"
            ],
            [
                "385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862",
                "283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453"
            ],
            [
                "6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7",
                "7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160"
            ],
            [
                "3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd",
                "56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0"
            ],
            [
                "85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83",
                "7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6"
            ],
            [
                "948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a",
                "53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589"
            ],
            [
                "6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8",
                "bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17"
            ],
            [
                "e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d",
                "4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda"
            ],
            [
                "e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725",
                "7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd"
            ],
            [
                "213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754",
                "4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2"
            ],
            [
                "4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c",
                "17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6"
            ],
            [
                "fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6",
                "6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f"
            ],
            [
                "76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39",
                "c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01"
            ],
            [
                "c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891",
                "893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3"
            ],
            [
                "d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b",
                "febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f"
            ],
            [
                "b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03",
                "2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7"
            ],
            [
                "e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d",
                "eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78"
            ],
            [
                "a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070",
                "7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1"
            ],
            [
                "90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4",
                "e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150"
            ],
            [
                "8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da",
                "662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82"
            ],
            [
                "e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11",
                "1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc"
            ],
            [
                "8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e",
                "efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b"
            ],
            [
                "e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41",
                "2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51"
            ],
            [
                "b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef",
                "67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45"
            ],
            [
                "d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8",
                "db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120"
            ],
            [
                "324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d",
                "648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84"
            ],
            [
                "4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96",
                "35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d"
            ],
            [
                "9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd",
                "ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d"
            ],
            [
                "6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5",
                "9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8"
            ],
            [
                "a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266",
                "40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8"
            ],
            [
                "7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71",
                "34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac"
            ],
            [
                "928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac",
                "c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f"
            ],
            [
                "85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751",
                "1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962"
            ],
            [
                "ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e",
                "493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907"
            ],
            [
                "827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241",
                "c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec"
            ],
            [
                "eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3",
                "be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d"
            ],
            [
                "e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f",
                "4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414"
            ],
            [
                "1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19",
                "aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd"
            ],
            [
                "146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be",
                "b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0"
            ],
            [
                "fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9",
                "6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811"
            ],
            [
                "da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2",
                "8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1"
            ],
            [
                "a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13",
                "7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c"
            ],
            [
                "174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c",
                "ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73"
            ],
            [
                "959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba",
                "2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd"
            ],
            [
                "d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151",
                "e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405"
            ],
            [
                "64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073",
                "d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589"
            ],
            [
                "8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458",
                "38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e"
            ],
            [
                "13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b",
                "69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27"
            ],
            [
                "bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366",
                "d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1"
            ],
            [
                "8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa",
                "40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482"
            ],
            [
                "8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0",
                "620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945"
            ],
            [
                "dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787",
                "7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573"
            ],
            [
                "f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e",
                "ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82"
            ]
        ]
    },
    naf: {
        wnd: 7,
        points: [
            [
                "f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9",
                "388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672"
            ],
            [
                "2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4",
                "d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6"
            ],
            [
                "5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc",
                "6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da"
            ],
            [
                "acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe",
                "cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37"
            ],
            [
                "774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb",
                "d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b"
            ],
            [
                "f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8",
                "ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81"
            ],
            [
                "d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e",
                "581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58"
            ],
            [
                "defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34",
                "4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77"
            ],
            [
                "2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c",
                "85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a"
            ],
            [
                "352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5",
                "321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c"
            ],
            [
                "2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f",
                "2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67"
            ],
            [
                "9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714",
                "73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402"
            ],
            [
                "daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729",
                "a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55"
            ],
            [
                "c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db",
                "2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482"
            ],
            [
                "6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4",
                "e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82"
            ],
            [
                "1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5",
                "b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396"
            ],
            [
                "605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479",
                "2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49"
            ],
            [
                "62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d",
                "80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf"
            ],
            [
                "80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f",
                "1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a"
            ],
            [
                "7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb",
                "d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7"
            ],
            [
                "d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9",
                "eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933"
            ],
            [
                "49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963",
                "758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a"
            ],
            [
                "77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74",
                "958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6"
            ],
            [
                "f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530",
                "e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37"
            ],
            [
                "463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b",
                "5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e"
            ],
            [
                "f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247",
                "cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6"
            ],
            [
                "caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1",
                "cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476"
            ],
            [
                "2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120",
                "4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40"
            ],
            [
                "7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435",
                "91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61"
            ],
            [
                "754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18",
                "673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683"
            ],
            [
                "e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8",
                "59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5"
            ],
            [
                "186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb",
                "3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b"
            ],
            [
                "df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f",
                "55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417"
            ],
            [
                "5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143",
                "efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868"
            ],
            [
                "290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba",
                "e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a"
            ],
            [
                "af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45",
                "f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6"
            ],
            [
                "766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a",
                "744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996"
            ],
            [
                "59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e",
                "c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e"
            ],
            [
                "f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8",
                "e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d"
            ],
            [
                "7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c",
                "30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2"
            ],
            [
                "948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519",
                "e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e"
            ],
            [
                "7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab",
                "100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437"
            ],
            [
                "3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca",
                "ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311"
            ],
            [
                "d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf",
                "8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4"
            ],
            [
                "1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610",
                "68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575"
            ],
            [
                "733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4",
                "f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d"
            ],
            [
                "15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c",
                "d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d"
            ],
            [
                "a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940",
                "edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629"
            ],
            [
                "e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980",
                "a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06"
            ],
            [
                "311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3",
                "66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374"
            ],
            [
                "34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf",
                "9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee"
            ],
            [
                "f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63",
                "4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1"
            ],
            [
                "d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448",
                "fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b"
            ],
            [
                "32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf",
                "5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661"
            ],
            [
                "7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5",
                "8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6"
            ],
            [
                "ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6",
                "8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e"
            ],
            [
                "16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5",
                "5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d"
            ],
            [
                "eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99",
                "f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc"
            ],
            [
                "78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51",
                "f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4"
            ],
            [
                "494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5",
                "42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c"
            ],
            [
                "a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5",
                "204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b"
            ],
            [
                "c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997",
                "4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913"
            ],
            [
                "841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881",
                "73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154"
            ],
            [
                "5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5",
                "39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865"
            ],
            [
                "36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66",
                "d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc"
            ],
            [
                "336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726",
                "ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224"
            ],
            [
                "8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede",
                "6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e"
            ],
            [
                "1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94",
                "60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6"
            ],
            [
                "85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31",
                "3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511"
            ],
            [
                "29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51",
                "b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b"
            ],
            [
                "a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252",
                "ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2"
            ],
            [
                "4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5",
                "cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c"
            ],
            [
                "d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b",
                "6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3"
            ],
            [
                "ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4",
                "322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d"
            ],
            [
                "af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f",
                "6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700"
            ],
            [
                "e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889",
                "2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4"
            ],
            [
                "591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246",
                "b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196"
            ],
            [
                "11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984",
                "998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4"
            ],
            [
                "3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a",
                "b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257"
            ],
            [
                "cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030",
                "bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13"
            ],
            [
                "c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197",
                "6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096"
            ],
            [
                "c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593",
                "c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38"
            ],
            [
                "a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef",
                "21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f"
            ],
            [
                "347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38",
                "60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448"
            ],
            [
                "da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a",
                "49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a"
            ],
            [
                "c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111",
                "5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4"
            ],
            [
                "4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502",
                "7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437"
            ],
            [
                "3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea",
                "be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7"
            ],
            [
                "cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26",
                "8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d"
            ],
            [
                "b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986",
                "39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a"
            ],
            [
                "d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e",
                "62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54"
            ],
            [
                "48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4",
                "25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77"
            ],
            [
                "dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda",
                "ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517"
            ],
            [
                "6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859",
                "cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10"
            ],
            [
                "e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f",
                "f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125"
            ],
            [
                "eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c",
                "6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e"
            ],
            [
                "13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942",
                "fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1"
            ],
            [
                "ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a",
                "1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2"
            ],
            [
                "b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80",
                "5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423"
            ],
            [
                "ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d",
                "438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8"
            ],
            [
                "8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1",
                "cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758"
            ],
            [
                "52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63",
                "c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375"
            ],
            [
                "e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352",
                "6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d"
            ],
            [
                "7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193",
                "ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec"
            ],
            [
                "5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00",
                "9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0"
            ],
            [
                "32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58",
                "ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c"
            ],
            [
                "e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7",
                "d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4"
            ],
            [
                "8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8",
                "c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f"
            ],
            [
                "4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e",
                "67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649"
            ],
            [
                "3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d",
                "cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826"
            ],
            [
                "674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b",
                "299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5"
            ],
            [
                "d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f",
                "f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87"
            ],
            [
                "30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6",
                "462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b"
            ],
            [
                "be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297",
                "62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc"
            ],
            [
                "93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a",
                "7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c"
            ],
            [
                "b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c",
                "ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f"
            ],
            [
                "d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52",
                "4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a"
            ],
            [
                "d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb",
                "bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46"
            ],
            [
                "463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065",
                "bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f"
            ],
            [
                "7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917",
                "603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03"
            ],
            [
                "74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9",
                "cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08"
            ],
            [
                "30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3",
                "553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8"
            ],
            [
                "9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57",
                "712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373"
            ],
            [
                "176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66",
                "ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3"
            ],
            [
                "75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8",
                "9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8"
            ],
            [
                "809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721",
                "9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1"
            ],
            [
                "1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180",
                "4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9"
            ]
        ]
    }
};

},{}],"faD8O":[function(require,module,exports) {
"use strict";
var BN = require("2e69183faf5285a1");
var HmacDRBG = require("b0cb641292e4911d");
var utils = require("eab3e45147b180ba");
var curves = require("a5ce61d26ce01c4c");
var rand = require("f6342f89ac472937");
var assert = utils.assert;
var KeyPair = require("eb5ba559e423f6e9");
var Signature = require("7c5e2c76c574ce41");
function EC(options) {
    if (!(this instanceof EC)) return new EC(options);
    // Shortcut `elliptic.ec(curve-name)`
    if (typeof options === "string") {
        assert(Object.prototype.hasOwnProperty.call(curves, options), "Unknown curve " + options);
        options = curves[options];
    }
    // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
    if (options instanceof curves.PresetCurve) options = {
        curve: options
    };
    this.curve = options.curve.curve;
    this.n = this.curve.n;
    this.nh = this.n.ushrn(1);
    this.g = this.curve.g;
    // Point on curve
    this.g = options.curve.g;
    this.g.precompute(options.curve.n.bitLength() + 1);
    // Hash for function for DRBG
    this.hash = options.hash || options.curve.hash;
}
module.exports = EC;
EC.prototype.keyPair = function keyPair(options) {
    return new KeyPair(this, options);
};
EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
    return KeyPair.fromPrivate(this, priv, enc);
};
EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
    return KeyPair.fromPublic(this, pub, enc);
};
EC.prototype.genKeyPair = function genKeyPair(options) {
    if (!options) options = {};
    // Instantiate Hmac_DRBG
    var drbg = new HmacDRBG({
        hash: this.hash,
        pers: options.pers,
        persEnc: options.persEnc || "utf8",
        entropy: options.entropy || rand(this.hash.hmacStrength),
        entropyEnc: options.entropy && options.entropyEnc || "utf8",
        nonce: this.n.toArray()
    });
    var bytes = this.n.byteLength();
    var ns2 = this.n.sub(new BN(2));
    for(;;){
        var priv = new BN(drbg.generate(bytes));
        if (priv.cmp(ns2) > 0) continue;
        priv.iaddn(1);
        return this.keyFromPrivate(priv);
    }
};
EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
    var delta = msg.byteLength() * 8 - this.n.bitLength();
    if (delta > 0) msg = msg.ushrn(delta);
    if (!truncOnly && msg.cmp(this.n) >= 0) return msg.sub(this.n);
    else return msg;
};
EC.prototype.sign = function sign(msg, key, enc, options) {
    if (typeof enc === "object") {
        options = enc;
        enc = null;
    }
    if (!options) options = {};
    key = this.keyFromPrivate(key, enc);
    msg = this._truncateToN(new BN(msg, 16));
    // Zero-extend key to provide enough entropy
    var bytes = this.n.byteLength();
    var bkey = key.getPrivate().toArray("be", bytes);
    // Zero-extend nonce to have the same byte size as N
    var nonce = msg.toArray("be", bytes);
    // Instantiate Hmac_DRBG
    var drbg = new HmacDRBG({
        hash: this.hash,
        entropy: bkey,
        nonce: nonce,
        pers: options.pers,
        persEnc: options.persEnc || "utf8"
    });
    // Number of bytes to generate
    var ns1 = this.n.sub(new BN(1));
    for(var iter = 0;; iter++){
        var k = options.k ? options.k(iter) : new BN(drbg.generate(this.n.byteLength()));
        k = this._truncateToN(k, true);
        if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0) continue;
        var kp = this.g.mul(k);
        if (kp.isInfinity()) continue;
        var kpX = kp.getX();
        var r = kpX.umod(this.n);
        if (r.cmpn(0) === 0) continue;
        var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
        s = s.umod(this.n);
        if (s.cmpn(0) === 0) continue;
        var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r) !== 0 ? 2 : 0);
        // Use complement of `s`, if it is > `n / 2`
        if (options.canonical && s.cmp(this.nh) > 0) {
            s = this.n.sub(s);
            recoveryParam ^= 1;
        }
        return new Signature({
            r: r,
            s: s,
            recoveryParam: recoveryParam
        });
    }
};
EC.prototype.verify = function verify(msg, signature, key, enc) {
    msg = this._truncateToN(new BN(msg, 16));
    key = this.keyFromPublic(key, enc);
    signature = new Signature(signature, "hex");
    // Perform primitive values validation
    var r = signature.r;
    var s = signature.s;
    if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0) return false;
    if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0) return false;
    // Validate signature
    var sinv = s.invm(this.n);
    var u1 = sinv.mul(msg).umod(this.n);
    var u2 = sinv.mul(r).umod(this.n);
    var p;
    if (!this.curve._maxwellTrick) {
        p = this.g.mulAdd(u1, key.getPublic(), u2);
        if (p.isInfinity()) return false;
        return p.getX().umod(this.n).cmp(r) === 0;
    }
    // NOTE: Greg Maxwell's trick, inspired by:
    // https://git.io/vad3K
    p = this.g.jmulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity()) return false;
    // Compare `p.x` of Jacobian point with `r`,
    // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
    // inverse of `p.z^2`
    return p.eqXToP(r);
};
EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
    assert((3 & j) === j, "The recovery param is more than two bits");
    signature = new Signature(signature, enc);
    var n = this.n;
    var e = new BN(msg);
    var r = signature.r;
    var s = signature.s;
    // A set LSB signifies that the y-coordinate is odd
    var isYOdd = j & 1;
    var isSecondKey = j >> 1;
    if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey) throw new Error("Unable to find sencond key candinate");
    // 1.1. Let x = r + jn.
    if (isSecondKey) r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
    else r = this.curve.pointFromX(r, isYOdd);
    var rInv = signature.r.invm(n);
    var s1 = n.sub(e).mul(rInv).umod(n);
    var s2 = s.mul(rInv).umod(n);
    // 1.6.1 Compute Q = r^-1 (sR -  eG)
    //               Q = r^-1 (sR + -eG)
    return this.g.mulAdd(s1, r, s2);
};
EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
    signature = new Signature(signature, enc);
    if (signature.recoveryParam !== null) return signature.recoveryParam;
    for(var i = 0; i < 4; i++){
        var Qprime;
        try {
            Qprime = this.recoverPubKey(e, signature, i);
        } catch (e) {
            continue;
        }
        if (Qprime.eq(Q)) return i;
    }
    throw new Error("Unable to find valid recovery factor");
};

},{"2e69183faf5285a1":"ahpDQ","b0cb641292e4911d":"k0XNp","eab3e45147b180ba":"lL3aS","a5ce61d26ce01c4c":"iu12a","f6342f89ac472937":"jO3c2","eb5ba559e423f6e9":"lg3iP","7c5e2c76c574ce41":"lq55o"}],"k0XNp":[function(require,module,exports) {
"use strict";
var hash = require("629972fec592198f");
var utils = require("c20531edfb274a2c");
var assert = require("43ff1863ab3fce20");
function HmacDRBG(options) {
    if (!(this instanceof HmacDRBG)) return new HmacDRBG(options);
    this.hash = options.hash;
    this.predResist = !!options.predResist;
    this.outLen = this.hash.outSize;
    this.minEntropy = options.minEntropy || this.hash.hmacStrength;
    this._reseed = null;
    this.reseedInterval = null;
    this.K = null;
    this.V = null;
    var entropy = utils.toArray(options.entropy, options.entropyEnc || "hex");
    var nonce = utils.toArray(options.nonce, options.nonceEnc || "hex");
    var pers = utils.toArray(options.pers, options.persEnc || "hex");
    assert(entropy.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits");
    this._init(entropy, nonce, pers);
}
module.exports = HmacDRBG;
HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
    var seed = entropy.concat(nonce).concat(pers);
    this.K = new Array(this.outLen / 8);
    this.V = new Array(this.outLen / 8);
    for(var i = 0; i < this.V.length; i++){
        this.K[i] = 0x00;
        this.V[i] = 0x01;
    }
    this._update(seed);
    this._reseed = 1;
    this.reseedInterval = 0x1000000000000; // 2^48
};
HmacDRBG.prototype._hmac = function hmac() {
    return new hash.hmac(this.hash, this.K);
};
HmacDRBG.prototype._update = function update(seed) {
    var kmac = this._hmac().update(this.V).update([
        0x00
    ]);
    if (seed) kmac = kmac.update(seed);
    this.K = kmac.digest();
    this.V = this._hmac().update(this.V).digest();
    if (!seed) return;
    this.K = this._hmac().update(this.V).update([
        0x01
    ]).update(seed).digest();
    this.V = this._hmac().update(this.V).digest();
};
HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
    // Optional entropy enc
    if (typeof entropyEnc !== "string") {
        addEnc = add;
        add = entropyEnc;
        entropyEnc = null;
    }
    entropy = utils.toArray(entropy, entropyEnc);
    add = utils.toArray(add, addEnc);
    assert(entropy.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits");
    this._update(entropy.concat(add || []));
    this._reseed = 1;
};
HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
    if (this._reseed > this.reseedInterval) throw new Error("Reseed is required");
    // Optional encoding
    if (typeof enc !== "string") {
        addEnc = add;
        add = enc;
        enc = null;
    }
    // Optional additional data
    if (add) {
        add = utils.toArray(add, addEnc || "hex");
        this._update(add);
    }
    var temp = [];
    while(temp.length < len){
        this.V = this._hmac().update(this.V).digest();
        temp = temp.concat(this.V);
    }
    var res = temp.slice(0, len);
    this._update(add);
    this._reseed++;
    return utils.encode(res, enc);
};

},{"629972fec592198f":"dUx6k","c20531edfb274a2c":"102xc","43ff1863ab3fce20":"9qH0v"}],"lg3iP":[function(require,module,exports) {
"use strict";
var BN = require("55cc33a33cda153d");
var utils = require("bda8b1ff480a7f3");
var assert = utils.assert;
function KeyPair(ec, options) {
    this.ec = ec;
    this.priv = null;
    this.pub = null;
    // KeyPair(ec, { priv: ..., pub: ... })
    if (options.priv) this._importPrivate(options.priv, options.privEnc);
    if (options.pub) this._importPublic(options.pub, options.pubEnc);
}
module.exports = KeyPair;
KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
    if (pub instanceof KeyPair) return pub;
    return new KeyPair(ec, {
        pub: pub,
        pubEnc: enc
    });
};
KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
    if (priv instanceof KeyPair) return priv;
    return new KeyPair(ec, {
        priv: priv,
        privEnc: enc
    });
};
KeyPair.prototype.validate = function validate() {
    var pub = this.getPublic();
    if (pub.isInfinity()) return {
        result: false,
        reason: "Invalid public key"
    };
    if (!pub.validate()) return {
        result: false,
        reason: "Public key is not a point"
    };
    if (!pub.mul(this.ec.curve.n).isInfinity()) return {
        result: false,
        reason: "Public key * N != O"
    };
    return {
        result: true,
        reason: null
    };
};
KeyPair.prototype.getPublic = function getPublic(compact, enc) {
    // compact is optional argument
    if (typeof compact === "string") {
        enc = compact;
        compact = null;
    }
    if (!this.pub) this.pub = this.ec.g.mul(this.priv);
    if (!enc) return this.pub;
    return this.pub.encode(enc, compact);
};
KeyPair.prototype.getPrivate = function getPrivate(enc) {
    if (enc === "hex") return this.priv.toString(16, 2);
    else return this.priv;
};
KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
    this.priv = new BN(key, enc || 16);
    // Ensure that the priv won't be bigger than n, otherwise we may fail
    // in fixed multiplication method
    this.priv = this.priv.umod(this.ec.curve.n);
};
KeyPair.prototype._importPublic = function _importPublic(key, enc) {
    if (key.x || key.y) {
        // Montgomery points only have an `x` coordinate.
        // Weierstrass/Edwards points on the other hand have both `x` and
        // `y` coordinates.
        if (this.ec.curve.type === "mont") assert(key.x, "Need x coordinate");
        else if (this.ec.curve.type === "short" || this.ec.curve.type === "edwards") assert(key.x && key.y, "Need both x and y coordinate");
        this.pub = this.ec.curve.point(key.x, key.y);
        return;
    }
    this.pub = this.ec.curve.decodePoint(key, enc);
};
// ECDH
KeyPair.prototype.derive = function derive(pub) {
    if (!pub.validate()) assert(pub.validate(), "public point not validated");
    return pub.mul(this.priv).getX();
};
// ECDSA
KeyPair.prototype.sign = function sign(msg, enc, options) {
    return this.ec.sign(msg, this, enc, options);
};
KeyPair.prototype.verify = function verify(msg, signature) {
    return this.ec.verify(msg, signature, this);
};
KeyPair.prototype.inspect = function inspect() {
    return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
};

},{"55cc33a33cda153d":"ahpDQ","bda8b1ff480a7f3":"lL3aS"}],"lq55o":[function(require,module,exports) {
"use strict";
var BN = require("a7ae8f0fe39990e7");
var utils = require("5df7da4811374387");
var assert = utils.assert;
function Signature(options, enc) {
    if (options instanceof Signature) return options;
    if (this._importDER(options, enc)) return;
    assert(options.r && options.s, "Signature without r or s");
    this.r = new BN(options.r, 16);
    this.s = new BN(options.s, 16);
    if (options.recoveryParam === undefined) this.recoveryParam = null;
    else this.recoveryParam = options.recoveryParam;
}
module.exports = Signature;
function Position() {
    this.place = 0;
}
function getLength(buf, p) {
    var initial = buf[p.place++];
    if (!(initial & 0x80)) return initial;
    var octetLen = initial & 0xf;
    // Indefinite length or overflow
    if (octetLen === 0 || octetLen > 4) return false;
    var val = 0;
    for(var i = 0, off = p.place; i < octetLen; i++, off++){
        val <<= 8;
        val |= buf[off];
        val >>>= 0;
    }
    // Leading zeroes
    if (val <= 0x7f) return false;
    p.place = off;
    return val;
}
function rmPadding(buf) {
    var i = 0;
    var len = buf.length - 1;
    while(!buf[i] && !(buf[i + 1] & 0x80) && i < len)i++;
    if (i === 0) return buf;
    return buf.slice(i);
}
Signature.prototype._importDER = function _importDER(data, enc) {
    data = utils.toArray(data, enc);
    var p = new Position();
    if (data[p.place++] !== 0x30) return false;
    var len = getLength(data, p);
    if (len === false) return false;
    if (len + p.place !== data.length) return false;
    if (data[p.place++] !== 0x02) return false;
    var rlen = getLength(data, p);
    if (rlen === false) return false;
    var r = data.slice(p.place, rlen + p.place);
    p.place += rlen;
    if (data[p.place++] !== 0x02) return false;
    var slen = getLength(data, p);
    if (slen === false) return false;
    if (data.length !== slen + p.place) return false;
    var s = data.slice(p.place, slen + p.place);
    if (r[0] === 0) {
        if (r[1] & 0x80) r = r.slice(1);
        else // Leading zeroes
        return false;
    }
    if (s[0] === 0) {
        if (s[1] & 0x80) s = s.slice(1);
        else // Leading zeroes
        return false;
    }
    this.r = new BN(r);
    this.s = new BN(s);
    this.recoveryParam = null;
    return true;
};
function constructLength(arr, len) {
    if (len < 0x80) {
        arr.push(len);
        return;
    }
    var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
    arr.push(octets | 0x80);
    while(--octets)arr.push(len >>> (octets << 3) & 0xff);
    arr.push(len);
}
Signature.prototype.toDER = function toDER(enc) {
    var r = this.r.toArray();
    var s = this.s.toArray();
    // Pad values
    if (r[0] & 0x80) r = [
        0
    ].concat(r);
    // Pad values
    if (s[0] & 0x80) s = [
        0
    ].concat(s);
    r = rmPadding(r);
    s = rmPadding(s);
    while(!s[0] && !(s[1] & 0x80))s = s.slice(1);
    var arr = [
        0x02
    ];
    constructLength(arr, r.length);
    arr = arr.concat(r);
    arr.push(0x02);
    constructLength(arr, s.length);
    var backHalf = arr.concat(s);
    var res = [
        0x30
    ];
    constructLength(res, backHalf.length);
    res = res.concat(backHalf);
    return utils.encode(res, enc);
};

},{"a7ae8f0fe39990e7":"ahpDQ","5df7da4811374387":"lL3aS"}],"aK0DJ":[function(require,module,exports) {
"use strict";
var hash = require("50f9bfa8a484d5d8");
var curves = require("68956d27442d6321");
var utils = require("99ec52641eff141d");
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var KeyPair = require("2ad2982d76b37f15");
var Signature = require("76c25a1d63d10c1b");
function EDDSA(curve) {
    assert(curve === "ed25519", "only tested with ed25519 so far");
    if (!(this instanceof EDDSA)) return new EDDSA(curve);
    curve = curves[curve].curve;
    this.curve = curve;
    this.g = curve.g;
    this.g.precompute(curve.n.bitLength() + 1);
    this.pointClass = curve.point().constructor;
    this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
    this.hash = hash.sha512;
}
module.exports = EDDSA;
/**
* @param {Array|String} message - message bytes
* @param {Array|String|KeyPair} secret - secret bytes or a keypair
* @returns {Signature} - signature
*/ EDDSA.prototype.sign = function sign(message, secret) {
    message = parseBytes(message);
    var key = this.keyFromSecret(secret);
    var r = this.hashInt(key.messagePrefix(), message);
    var R = this.g.mul(r);
    var Rencoded = this.encodePoint(R);
    var s_ = this.hashInt(Rencoded, key.pubBytes(), message).mul(key.priv());
    var S = r.add(s_).umod(this.curve.n);
    return this.makeSignature({
        R: R,
        S: S,
        Rencoded: Rencoded
    });
};
/**
* @param {Array} message - message bytes
* @param {Array|String|Signature} sig - sig bytes
* @param {Array|String|Point|KeyPair} pub - public key
* @returns {Boolean} - true if public key matches sig of message
*/ EDDSA.prototype.verify = function verify(message, sig, pub) {
    message = parseBytes(message);
    sig = this.makeSignature(sig);
    var key = this.keyFromPublic(pub);
    var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
    var SG = this.g.mul(sig.S());
    var RplusAh = sig.R().add(key.pub().mul(h));
    return RplusAh.eq(SG);
};
EDDSA.prototype.hashInt = function hashInt() {
    var hash = this.hash();
    for(var i = 0; i < arguments.length; i++)hash.update(arguments[i]);
    return utils.intFromLE(hash.digest()).umod(this.curve.n);
};
EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
    return KeyPair.fromPublic(this, pub);
};
EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
    return KeyPair.fromSecret(this, secret);
};
EDDSA.prototype.makeSignature = function makeSignature(sig) {
    if (sig instanceof Signature) return sig;
    return new Signature(this, sig);
};
/**
* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
*
* EDDSA defines methods for encoding and decoding points and integers. These are
* helper convenience methods, that pass along to utility functions implied
* parameters.
*
*/ EDDSA.prototype.encodePoint = function encodePoint(point) {
    var enc = point.getY().toArray("le", this.encodingLength);
    enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
    return enc;
};
EDDSA.prototype.decodePoint = function decodePoint(bytes) {
    bytes = utils.parseBytes(bytes);
    var lastIx = bytes.length - 1;
    var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & -129);
    var xIsOdd = (bytes[lastIx] & 0x80) !== 0;
    var y = utils.intFromLE(normed);
    return this.curve.pointFromY(y, xIsOdd);
};
EDDSA.prototype.encodeInt = function encodeInt(num) {
    return num.toArray("le", this.encodingLength);
};
EDDSA.prototype.decodeInt = function decodeInt(bytes) {
    return utils.intFromLE(bytes);
};
EDDSA.prototype.isPoint = function isPoint(val) {
    return val instanceof this.pointClass;
};

},{"50f9bfa8a484d5d8":"dUx6k","68956d27442d6321":"iu12a","99ec52641eff141d":"lL3aS","2ad2982d76b37f15":"gH4N5","76c25a1d63d10c1b":"lV1ah"}],"gH4N5":[function(require,module,exports) {
"use strict";
var utils = require("387ffb9c0bf065ab");
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var cachedProperty = utils.cachedProperty;
/**
* @param {EDDSA} eddsa - instance
* @param {Object} params - public/private key parameters
*
* @param {Array<Byte>} [params.secret] - secret seed bytes
* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
*
*/ function KeyPair(eddsa, params) {
    this.eddsa = eddsa;
    this._secret = parseBytes(params.secret);
    if (eddsa.isPoint(params.pub)) this._pub = params.pub;
    else this._pubBytes = parseBytes(params.pub);
}
KeyPair.fromPublic = function fromPublic(eddsa, pub) {
    if (pub instanceof KeyPair) return pub;
    return new KeyPair(eddsa, {
        pub: pub
    });
};
KeyPair.fromSecret = function fromSecret(eddsa, secret) {
    if (secret instanceof KeyPair) return secret;
    return new KeyPair(eddsa, {
        secret: secret
    });
};
KeyPair.prototype.secret = function secret() {
    return this._secret;
};
cachedProperty(KeyPair, "pubBytes", function pubBytes() {
    return this.eddsa.encodePoint(this.pub());
});
cachedProperty(KeyPair, "pub", function pub() {
    if (this._pubBytes) return this.eddsa.decodePoint(this._pubBytes);
    return this.eddsa.g.mul(this.priv());
});
cachedProperty(KeyPair, "privBytes", function privBytes() {
    var eddsa = this.eddsa;
    var hash = this.hash();
    var lastIx = eddsa.encodingLength - 1;
    var a = hash.slice(0, eddsa.encodingLength);
    a[0] &= 248;
    a[lastIx] &= 127;
    a[lastIx] |= 64;
    return a;
});
cachedProperty(KeyPair, "priv", function priv() {
    return this.eddsa.decodeInt(this.privBytes());
});
cachedProperty(KeyPair, "hash", function hash() {
    return this.eddsa.hash().update(this.secret()).digest();
});
cachedProperty(KeyPair, "messagePrefix", function messagePrefix() {
    return this.hash().slice(this.eddsa.encodingLength);
});
KeyPair.prototype.sign = function sign(message) {
    assert(this._secret, "KeyPair can only verify");
    return this.eddsa.sign(message, this);
};
KeyPair.prototype.verify = function verify(message, sig) {
    return this.eddsa.verify(message, sig, this);
};
KeyPair.prototype.getSecret = function getSecret(enc) {
    assert(this._secret, "KeyPair is public only");
    return utils.encode(this.secret(), enc);
};
KeyPair.prototype.getPublic = function getPublic(enc) {
    return utils.encode(this.pubBytes(), enc);
};
module.exports = KeyPair;

},{"387ffb9c0bf065ab":"lL3aS"}],"lV1ah":[function(require,module,exports) {
"use strict";
var BN = require("696e2c87f819d166");
var utils = require("51b94bcac1dcb2b2");
var assert = utils.assert;
var cachedProperty = utils.cachedProperty;
var parseBytes = utils.parseBytes;
/**
* @param {EDDSA} eddsa - eddsa instance
* @param {Array<Bytes>|Object} sig -
* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
*/ function Signature(eddsa, sig) {
    this.eddsa = eddsa;
    if (typeof sig !== "object") sig = parseBytes(sig);
    if (Array.isArray(sig)) sig = {
        R: sig.slice(0, eddsa.encodingLength),
        S: sig.slice(eddsa.encodingLength)
    };
    assert(sig.R && sig.S, "Signature without R or S");
    if (eddsa.isPoint(sig.R)) this._R = sig.R;
    if (sig.S instanceof BN) this._S = sig.S;
    this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
    this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
}
cachedProperty(Signature, "S", function S() {
    return this.eddsa.decodeInt(this.Sencoded());
});
cachedProperty(Signature, "R", function R() {
    return this.eddsa.decodePoint(this.Rencoded());
});
cachedProperty(Signature, "Rencoded", function Rencoded() {
    return this.eddsa.encodePoint(this.R());
});
cachedProperty(Signature, "Sencoded", function Sencoded() {
    return this.eddsa.encodeInt(this.S());
});
Signature.prototype.toBytes = function toBytes() {
    return this.Rencoded().concat(this.Sencoded());
};
Signature.prototype.toHex = function toHex() {
    return utils.encode(this.toBytes(), "hex").toUpperCase();
};
module.exports = Signature;

},{"696e2c87f819d166":"ahpDQ","51b94bcac1dcb2b2":"lL3aS"}],"3Q80F":[function(require,module,exports) {
var Buffer = require("818086c847790a64").Buffer;
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isValidXAddress = exports.decodeXAddress = exports.xAddressToClassicAddress = exports.encodeXAddress = exports.classicAddressToXAddress = exports.isValidClassicAddress = exports.decodeAccountPublic = exports.encodeAccountPublic = exports.decodeNodePublic = exports.encodeNodePublic = exports.decodeAccountID = exports.encodeAccountID = exports.decodeSeed = exports.encodeSeed = exports.codec = void 0;
const assert = __importStar(require("e44fc8891840c67b"));
const xrp_codec_1 = require("b1e224c210f23088");
Object.defineProperty(exports, "codec", {
    enumerable: true,
    get: function() {
        return xrp_codec_1.codec;
    }
});
Object.defineProperty(exports, "encodeSeed", {
    enumerable: true,
    get: function() {
        return xrp_codec_1.encodeSeed;
    }
});
Object.defineProperty(exports, "decodeSeed", {
    enumerable: true,
    get: function() {
        return xrp_codec_1.decodeSeed;
    }
});
Object.defineProperty(exports, "encodeAccountID", {
    enumerable: true,
    get: function() {
        return xrp_codec_1.encodeAccountID;
    }
});
Object.defineProperty(exports, "decodeAccountID", {
    enumerable: true,
    get: function() {
        return xrp_codec_1.decodeAccountID;
    }
});
Object.defineProperty(exports, "encodeNodePublic", {
    enumerable: true,
    get: function() {
        return xrp_codec_1.encodeNodePublic;
    }
});
Object.defineProperty(exports, "decodeNodePublic", {
    enumerable: true,
    get: function() {
        return xrp_codec_1.decodeNodePublic;
    }
});
Object.defineProperty(exports, "encodeAccountPublic", {
    enumerable: true,
    get: function() {
        return xrp_codec_1.encodeAccountPublic;
    }
});
Object.defineProperty(exports, "decodeAccountPublic", {
    enumerable: true,
    get: function() {
        return xrp_codec_1.decodeAccountPublic;
    }
});
Object.defineProperty(exports, "isValidClassicAddress", {
    enumerable: true,
    get: function() {
        return xrp_codec_1.isValidClassicAddress;
    }
});
const PREFIX_BYTES = {
    // 5, 68
    main: Buffer.from([
        0x05,
        0x44
    ]),
    // 4, 147
    test: Buffer.from([
        0x04,
        0x93
    ])
};
const MAX_32_BIT_UNSIGNED_INT = 4294967295;
function classicAddressToXAddress(classicAddress, tag, test) {
    const accountId = (0, xrp_codec_1.decodeAccountID)(classicAddress);
    return encodeXAddress(accountId, tag, test);
}
exports.classicAddressToXAddress = classicAddressToXAddress;
function encodeXAddress(accountId, tag, test) {
    if (accountId.length !== 20) // RIPEMD160 is 160 bits = 20 bytes
    throw new Error("Account ID must be 20 bytes");
    if (tag > MAX_32_BIT_UNSIGNED_INT) throw new Error("Invalid tag");
    const theTag = tag || 0;
    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition -- Passing null is a common js mistake
    const flag = tag === false || tag == null ? 0 : 1;
    /* eslint-disable no-bitwise ---
     * need to use bitwise operations here */ const bytes = Buffer.concat([
        test ? PREFIX_BYTES.test : PREFIX_BYTES.main,
        accountId,
        Buffer.from([
            // 0x00 if no tag, 0x01 if 32-bit tag
            flag,
            // first byte
            theTag & 0xff,
            // second byte
            theTag >> 8 & 0xff,
            // third byte
            theTag >> 16 & 0xff,
            // fourth byte
            theTag >> 24 & 0xff,
            0,
            0,
            0,
            // four zero bytes (reserved for 64-bit tags)
            0
        ])
    ]);
    /* eslint-enable no-bitwise */ return xrp_codec_1.codec.encodeChecked(bytes);
}
exports.encodeXAddress = encodeXAddress;
function xAddressToClassicAddress(xAddress) {
    /* eslint-disable @typescript-eslint/naming-convention --
     * TODO 'test' should be something like 'isTest', do this later
     */ const { accountId, tag, test } = decodeXAddress(xAddress);
    /* eslint-enable @typescript-eslint/naming-convention */ const classicAddress = (0, xrp_codec_1.encodeAccountID)(accountId);
    return {
        classicAddress,
        tag,
        test
    };
}
exports.xAddressToClassicAddress = xAddressToClassicAddress;
function decodeXAddress(xAddress) {
    const decoded = xrp_codec_1.codec.decodeChecked(xAddress);
    /* eslint-disable @typescript-eslint/naming-convention --
     * TODO 'test' should be something like 'isTest', do this later
     */ const test = isBufferForTestAddress(decoded);
    /* eslint-enable @typescript-eslint/naming-convention */ const accountId = decoded.slice(2, 22);
    const tag = tagFromBuffer(decoded);
    return {
        accountId,
        tag,
        test
    };
}
exports.decodeXAddress = decodeXAddress;
function isBufferForTestAddress(buf) {
    const decodedPrefix = buf.slice(0, 2);
    if (PREFIX_BYTES.main.equals(decodedPrefix)) return false;
    if (PREFIX_BYTES.test.equals(decodedPrefix)) return true;
    throw new Error("Invalid X-address: bad prefix");
}
function tagFromBuffer(buf) {
    const flag = buf[22];
    if (flag >= 2) // No support for 64-bit tags at this time
    throw new Error("Unsupported X-address");
    if (flag === 1) // Little-endian to big-endian
    return buf[23] + buf[24] * 0x100 + buf[25] * 0x10000 + buf[26] * 0x1000000;
    assert.strictEqual(flag, 0, "flag must be zero to indicate no tag");
    assert.ok(Buffer.from("0000000000000000", "hex").equals(buf.slice(23, 31)), "remaining bytes must be zero");
    return false;
}
function isValidXAddress(xAddress) {
    try {
        decodeXAddress(xAddress);
    } catch (_error) {
        return false;
    }
    return true;
}
exports.isValidXAddress = isValidXAddress;

},{"818086c847790a64":"6tQNr","e44fc8891840c67b":"hnNl4","b1e224c210f23088":"3EoEo"}],"3EoEo":[function(require,module,exports) {
var Buffer = require("6103ea12299f21d3").Buffer;
"use strict";
/**
 * Codec class
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isValidClassicAddress = exports.decodeAccountPublic = exports.encodeAccountPublic = exports.encodeNodePublic = exports.decodeNodePublic = exports.decodeAddress = exports.decodeAccountID = exports.encodeAddress = exports.encodeAccountID = exports.decodeSeed = exports.encodeSeed = exports.codec = void 0;
const baseCodec = require("7f663dafcedc3c65");
const createHash = require("6bdf8b870967d3c0");
const utils_1 = require("8119d403b74b03f4");
class Codec {
    constructor(options){
        this._sha256 = options.sha256;
        this._alphabet = options.alphabet;
        this._codec = baseCodec(this._alphabet);
    }
    /**
     * Encoder.
     *
     * @param bytes - Buffer of data to encode.
     * @param opts - Options object including the version bytes and the expected length of the data to encode.
     */ encode(bytes, opts) {
        const versions = opts.versions;
        return this._encodeVersioned(bytes, versions, opts.expectedLength);
    }
    /**
     * Decoder.
     *
     * @param base58string - Base58Check-encoded string to decode.
     * @param opts - Options object including the version byte(s) and the expected length of the data after decoding.
     */ /* eslint-disable max-lines-per-function --
     * TODO refactor */ decode(base58string, opts) {
        var _a;
        const versions = opts.versions;
        const types = opts.versionTypes;
        const withoutSum = this.decodeChecked(base58string);
        if (versions.length > 1 && !opts.expectedLength) throw new Error("expectedLength is required because there are >= 2 possible versions");
        const versionLengthGuess = typeof versions[0] === "number" ? 1 : versions[0].length;
        const payloadLength = (_a = opts.expectedLength) !== null && _a !== void 0 ? _a : withoutSum.length - versionLengthGuess;
        const versionBytes = withoutSum.slice(0, -payloadLength);
        const payload = withoutSum.slice(-payloadLength);
        for(let i = 0; i < versions.length; i++){
            /* eslint-disable @typescript-eslint/consistent-type-assertions --
             * TODO refactor */ const version = Array.isArray(versions[i]) ? versions[i] : [
                versions[i]
            ];
            if ((0, utils_1.seqEqual)(versionBytes, version)) return {
                version,
                bytes: payload,
                type: types ? types[i] : null
            };
        /* eslint-enable @typescript-eslint/consistent-type-assertions */ }
        throw new Error("version_invalid: version bytes do not match any of the provided version(s)");
    }
    encodeChecked(buffer) {
        const check = this._sha256(this._sha256(buffer)).slice(0, 4);
        return this._encodeRaw(Buffer.from((0, utils_1.concatArgs)(buffer, check)));
    }
    decodeChecked(base58string) {
        const buffer = this._decodeRaw(base58string);
        if (buffer.length < 5) throw new Error("invalid_input_size: decoded data must have length >= 5");
        if (!this._verifyCheckSum(buffer)) throw new Error("checksum_invalid");
        return buffer.slice(0, -4);
    }
    _encodeVersioned(bytes, versions, expectedLength) {
        if (expectedLength && bytes.length !== expectedLength) throw new Error("unexpected_payload_length: bytes.length does not match expectedLength. Ensure that the bytes are a Buffer.");
        return this.encodeChecked(Buffer.from((0, utils_1.concatArgs)(versions, bytes)));
    }
    _encodeRaw(bytes) {
        return this._codec.encode(bytes);
    }
    /* eslint-enable max-lines-per-function */ _decodeRaw(base58string) {
        return this._codec.decode(base58string);
    }
    _verifyCheckSum(bytes) {
        const computed = this._sha256(this._sha256(bytes.slice(0, -4))).slice(0, 4);
        const checksum = bytes.slice(-4);
        return (0, utils_1.seqEqual)(computed, checksum);
    }
}
/**
 * XRP codec
 */ // base58 encodings: https://xrpl.org/base58-encodings.html
// Account address (20 bytes)
const ACCOUNT_ID = 0;
// Account public key (33 bytes)
const ACCOUNT_PUBLIC_KEY = 0x23;
// 33; Seed value (for secret keys) (16 bytes)
const FAMILY_SEED = 0x21;
// 28; Validation public key (33 bytes)
const NODE_PUBLIC = 0x1c;
// [1, 225, 75]
const ED25519_SEED = [
    0x01,
    0xe1,
    0x4b
];
const codecOptions = {
    sha256 (bytes) {
        return createHash("sha256").update(Buffer.from(bytes)).digest();
    },
    alphabet: "rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz"
};
const codecWithXrpAlphabet = new Codec(codecOptions);
exports.codec = codecWithXrpAlphabet;
// entropy is a Buffer of size 16
// type is 'ed25519' or 'secp256k1'
function encodeSeed(entropy, type) {
    if (entropy.length !== 16) throw new Error("entropy must have length 16");
    const opts = {
        expectedLength: 16,
        // for secp256k1, use `FAMILY_SEED`
        versions: type === "ed25519" ? ED25519_SEED : [
            FAMILY_SEED
        ]
    };
    // prefixes entropy with version bytes
    return codecWithXrpAlphabet.encode(entropy, opts);
}
exports.encodeSeed = encodeSeed;
function decodeSeed(seed, opts = {
    versionTypes: [
        "ed25519",
        "secp256k1"
    ],
    versions: [
        ED25519_SEED,
        FAMILY_SEED
    ],
    expectedLength: 16
}) {
    return codecWithXrpAlphabet.decode(seed, opts);
}
exports.decodeSeed = decodeSeed;
function encodeAccountID(bytes) {
    const opts = {
        versions: [
            ACCOUNT_ID
        ],
        expectedLength: 20
    };
    return codecWithXrpAlphabet.encode(bytes, opts);
}
exports.encodeAccountID = encodeAccountID;
/* eslint-disable import/no-unused-modules ---
 * unclear why this is aliased but we should keep it in case someone else is
 * importing it with the aliased name */ exports.encodeAddress = encodeAccountID;
/* eslint-enable import/no-unused-modules */ function decodeAccountID(accountId) {
    const opts = {
        versions: [
            ACCOUNT_ID
        ],
        expectedLength: 20
    };
    return codecWithXrpAlphabet.decode(accountId, opts).bytes;
}
exports.decodeAccountID = decodeAccountID;
/* eslint-disable import/no-unused-modules ---
 * unclear why this is aliased but we should keep it in case someone else is
 * importing it with the aliased name */ exports.decodeAddress = decodeAccountID;
/* eslint-enable import/no-unused-modules */ function decodeNodePublic(base58string) {
    const opts = {
        versions: [
            NODE_PUBLIC
        ],
        expectedLength: 33
    };
    return codecWithXrpAlphabet.decode(base58string, opts).bytes;
}
exports.decodeNodePublic = decodeNodePublic;
function encodeNodePublic(bytes) {
    const opts = {
        versions: [
            NODE_PUBLIC
        ],
        expectedLength: 33
    };
    return codecWithXrpAlphabet.encode(bytes, opts);
}
exports.encodeNodePublic = encodeNodePublic;
function encodeAccountPublic(bytes) {
    const opts = {
        versions: [
            ACCOUNT_PUBLIC_KEY
        ],
        expectedLength: 33
    };
    return codecWithXrpAlphabet.encode(bytes, opts);
}
exports.encodeAccountPublic = encodeAccountPublic;
function decodeAccountPublic(base58string) {
    const opts = {
        versions: [
            ACCOUNT_PUBLIC_KEY
        ],
        expectedLength: 33
    };
    return codecWithXrpAlphabet.decode(base58string, opts).bytes;
}
exports.decodeAccountPublic = decodeAccountPublic;
function isValidClassicAddress(address) {
    try {
        decodeAccountID(address);
    } catch (_error) {
        return false;
    }
    return true;
}
exports.isValidClassicAddress = isValidClassicAddress;

},{"6103ea12299f21d3":"6tQNr","7f663dafcedc3c65":"7jHMZ","6bdf8b870967d3c0":"cNT98","8119d403b74b03f4":"01T6Z"}],"7jHMZ":[function(require,module,exports) {
"use strict";
// base-x encoding / decoding
// Copyright (c) 2018 base-x contributors
// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)
// Distributed under the MIT software license, see the accompanying
// file LICENSE or http://www.opensource.org/licenses/mit-license.php.
// @ts-ignore
var _Buffer = require("85b264801a1b57da").Buffer;
function base(ALPHABET) {
    if (ALPHABET.length >= 255) throw new TypeError("Alphabet too long");
    var BASE_MAP = new Uint8Array(256);
    for(var j = 0; j < BASE_MAP.length; j++)BASE_MAP[j] = 255;
    for(var i = 0; i < ALPHABET.length; i++){
        var x = ALPHABET.charAt(i);
        var xc = x.charCodeAt(0);
        if (BASE_MAP[xc] !== 255) throw new TypeError(x + " is ambiguous");
        BASE_MAP[xc] = i;
    }
    var BASE = ALPHABET.length;
    var LEADER = ALPHABET.charAt(0);
    var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up
    ;
    var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up
    ;
    function encode(source) {
        if (Array.isArray(source) || source instanceof Uint8Array) source = _Buffer.from(source);
        if (!_Buffer.isBuffer(source)) throw new TypeError("Expected Buffer");
        if (source.length === 0) return "";
        // Skip & count leading zeroes.
        var zeroes = 0;
        var length = 0;
        var pbegin = 0;
        var pend = source.length;
        while(pbegin !== pend && source[pbegin] === 0){
            pbegin++;
            zeroes++;
        }
        // Allocate enough space in big-endian base58 representation.
        var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
        var b58 = new Uint8Array(size);
        // Process the bytes.
        while(pbegin !== pend){
            var carry = source[pbegin];
            // Apply "b58 = b58 * 256 + ch".
            var i = 0;
            for(var it1 = size - 1; (carry !== 0 || i < length) && it1 !== -1; it1--, i++){
                carry += 256 * b58[it1] >>> 0;
                b58[it1] = carry % BASE >>> 0;
                carry = carry / BASE >>> 0;
            }
            if (carry !== 0) throw new Error("Non-zero carry");
            length = i;
            pbegin++;
        }
        // Skip leading zeroes in base58 result.
        var it2 = size - length;
        while(it2 !== size && b58[it2] === 0)it2++;
        // Translate the result into a string.
        var str = LEADER.repeat(zeroes);
        for(; it2 < size; ++it2)str += ALPHABET.charAt(b58[it2]);
        return str;
    }
    function decodeUnsafe(source) {
        if (typeof source !== "string") throw new TypeError("Expected String");
        if (source.length === 0) return _Buffer.alloc(0);
        var psz = 0;
        // Skip and count leading '1's.
        var zeroes = 0;
        var length = 0;
        while(source[psz] === LEADER){
            zeroes++;
            psz++;
        }
        // Allocate enough space in big-endian base256 representation.
        var size = (source.length - psz) * FACTOR + 1 >>> 0 // log(58) / log(256), rounded up.
        ;
        var b256 = new Uint8Array(size);
        // Process the characters.
        while(source[psz]){
            // Decode character
            var carry = BASE_MAP[source.charCodeAt(psz)];
            // Invalid character
            if (carry === 255) return;
            var i = 0;
            for(var it3 = size - 1; (carry !== 0 || i < length) && it3 !== -1; it3--, i++){
                carry += BASE * b256[it3] >>> 0;
                b256[it3] = carry % 256 >>> 0;
                carry = carry / 256 >>> 0;
            }
            if (carry !== 0) throw new Error("Non-zero carry");
            length = i;
            psz++;
        }
        // Skip leading zeroes in b256.
        var it4 = size - length;
        while(it4 !== size && b256[it4] === 0)it4++;
        var vch = _Buffer.allocUnsafe(zeroes + (size - it4));
        vch.fill(0x00, 0, zeroes);
        var j = zeroes;
        while(it4 !== size)vch[j++] = b256[it4++];
        return vch;
    }
    function decode(string) {
        var buffer = decodeUnsafe(string);
        if (buffer) return buffer;
        throw new Error("Non-base" + BASE + " character");
    }
    return {
        encode: encode,
        decodeUnsafe: decodeUnsafe,
        decode: decode
    };
}
module.exports = base;

},{"85b264801a1b57da":"4WLFd"}],"4WLFd":[function(require,module,exports) {
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */ /* eslint-disable node/no-deprecated-api */ var buffer = require("7e0d6ecd698c3ca6");
var Buffer = buffer.Buffer;
// alternative to using Object.keys for old browsers
function copyProps(src, dst) {
    for(var key in src)dst[key] = src[key];
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) module.exports = buffer;
else {
    // Copy properties from require('buffer')
    copyProps(buffer, exports);
    exports.Buffer = SafeBuffer;
}
function SafeBuffer(arg, encodingOrOffset, length) {
    return Buffer(arg, encodingOrOffset, length);
}
SafeBuffer.prototype = Object.create(Buffer.prototype);
// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer);
SafeBuffer.from = function(arg, encodingOrOffset, length) {
    if (typeof arg === "number") throw new TypeError("Argument must not be a number");
    return Buffer(arg, encodingOrOffset, length);
};
SafeBuffer.alloc = function(size, fill, encoding) {
    if (typeof size !== "number") throw new TypeError("Argument must be a number");
    var buf = Buffer(size);
    if (fill !== undefined) {
        if (typeof encoding === "string") buf.fill(fill, encoding);
        else buf.fill(fill);
    } else buf.fill(0);
    return buf;
};
SafeBuffer.allocUnsafe = function(size) {
    if (typeof size !== "number") throw new TypeError("Argument must be a number");
    return Buffer(size);
};
SafeBuffer.allocUnsafeSlow = function(size) {
    if (typeof size !== "number") throw new TypeError("Argument must be a number");
    return buffer.SlowBuffer(size);
};

},{"7e0d6ecd698c3ca6":"6tQNr"}],"cNT98":[function(require,module,exports) {
"use strict";
var inherits = require("45ce174cec337471");
var MD5 = require("4170b0039f3b4aab");
var RIPEMD160 = require("efcc6ede1fda4d98");
var sha = require("65b1a51ddac82548");
var Base = require("ac5a46c0f3b4d769");
function Hash(hash) {
    Base.call(this, "digest");
    this._hash = hash;
}
inherits(Hash, Base);
Hash.prototype._update = function(data) {
    this._hash.update(data);
};
Hash.prototype._final = function() {
    return this._hash.digest();
};
module.exports = function createHash(alg) {
    alg = alg.toLowerCase();
    if (alg === "md5") return new MD5();
    if (alg === "rmd160" || alg === "ripemd160") return new RIPEMD160();
    return new Hash(sha(alg));
};

},{"45ce174cec337471":"l3bOz","4170b0039f3b4aab":"aNvcQ","efcc6ede1fda4d98":"dnWwk","65b1a51ddac82548":"hmy2s","ac5a46c0f3b4d769":"cmRkf"}],"aNvcQ":[function(require,module,exports) {
"use strict";
var inherits = require("634114d48656c754");
var HashBase = require("4b170874b4cb8d4e");
var Buffer = require("72d4e45c6a42a2da").Buffer;
var ARRAY16 = new Array(16);
function MD5() {
    HashBase.call(this, 64);
    // state
    this._a = 0x67452301;
    this._b = 0xefcdab89;
    this._c = 0x98badcfe;
    this._d = 0x10325476;
}
inherits(MD5, HashBase);
MD5.prototype._update = function() {
    var M = ARRAY16;
    for(var i = 0; i < 16; ++i)M[i] = this._block.readInt32LE(i * 4);
    var a = this._a;
    var b = this._b;
    var c = this._c;
    var d = this._d;
    a = fnF(a, b, c, d, M[0], 0xd76aa478, 7);
    d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12);
    c = fnF(c, d, a, b, M[2], 0x242070db, 17);
    b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22);
    a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7);
    d = fnF(d, a, b, c, M[5], 0x4787c62a, 12);
    c = fnF(c, d, a, b, M[6], 0xa8304613, 17);
    b = fnF(b, c, d, a, M[7], 0xfd469501, 22);
    a = fnF(a, b, c, d, M[8], 0x698098d8, 7);
    d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12);
    c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17);
    b = fnF(b, c, d, a, M[11], 0x895cd7be, 22);
    a = fnF(a, b, c, d, M[12], 0x6b901122, 7);
    d = fnF(d, a, b, c, M[13], 0xfd987193, 12);
    c = fnF(c, d, a, b, M[14], 0xa679438e, 17);
    b = fnF(b, c, d, a, M[15], 0x49b40821, 22);
    a = fnG(a, b, c, d, M[1], 0xf61e2562, 5);
    d = fnG(d, a, b, c, M[6], 0xc040b340, 9);
    c = fnG(c, d, a, b, M[11], 0x265e5a51, 14);
    b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20);
    a = fnG(a, b, c, d, M[5], 0xd62f105d, 5);
    d = fnG(d, a, b, c, M[10], 0x02441453, 9);
    c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14);
    b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20);
    a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5);
    d = fnG(d, a, b, c, M[14], 0xc33707d6, 9);
    c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14);
    b = fnG(b, c, d, a, M[8], 0x455a14ed, 20);
    a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5);
    d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9);
    c = fnG(c, d, a, b, M[7], 0x676f02d9, 14);
    b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20);
    a = fnH(a, b, c, d, M[5], 0xfffa3942, 4);
    d = fnH(d, a, b, c, M[8], 0x8771f681, 11);
    c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16);
    b = fnH(b, c, d, a, M[14], 0xfde5380c, 23);
    a = fnH(a, b, c, d, M[1], 0xa4beea44, 4);
    d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11);
    c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16);
    b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23);
    a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4);
    d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11);
    c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16);
    b = fnH(b, c, d, a, M[6], 0x04881d05, 23);
    a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4);
    d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11);
    c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16);
    b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23);
    a = fnI(a, b, c, d, M[0], 0xf4292244, 6);
    d = fnI(d, a, b, c, M[7], 0x432aff97, 10);
    c = fnI(c, d, a, b, M[14], 0xab9423a7, 15);
    b = fnI(b, c, d, a, M[5], 0xfc93a039, 21);
    a = fnI(a, b, c, d, M[12], 0x655b59c3, 6);
    d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10);
    c = fnI(c, d, a, b, M[10], 0xffeff47d, 15);
    b = fnI(b, c, d, a, M[1], 0x85845dd1, 21);
    a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6);
    d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10);
    c = fnI(c, d, a, b, M[6], 0xa3014314, 15);
    b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21);
    a = fnI(a, b, c, d, M[4], 0xf7537e82, 6);
    d = fnI(d, a, b, c, M[11], 0xbd3af235, 10);
    c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15);
    b = fnI(b, c, d, a, M[9], 0xeb86d391, 21);
    this._a = this._a + a | 0;
    this._b = this._b + b | 0;
    this._c = this._c + c | 0;
    this._d = this._d + d | 0;
};
MD5.prototype._digest = function() {
    // create padding and handle blocks
    this._block[this._blockOffset++] = 0x80;
    if (this._blockOffset > 56) {
        this._block.fill(0, this._blockOffset, 64);
        this._update();
        this._blockOffset = 0;
    }
    this._block.fill(0, this._blockOffset, 56);
    this._block.writeUInt32LE(this._length[0], 56);
    this._block.writeUInt32LE(this._length[1], 60);
    this._update();
    // produce result
    var buffer = Buffer.allocUnsafe(16);
    buffer.writeInt32LE(this._a, 0);
    buffer.writeInt32LE(this._b, 4);
    buffer.writeInt32LE(this._c, 8);
    buffer.writeInt32LE(this._d, 12);
    return buffer;
};
function rotl(x, n) {
    return x << n | x >>> 32 - n;
}
function fnF(a, b, c, d, m, k, s) {
    return rotl(a + (b & c | ~b & d) + m + k | 0, s) + b | 0;
}
function fnG(a, b, c, d, m, k, s) {
    return rotl(a + (b & d | c & ~d) + m + k | 0, s) + b | 0;
}
function fnH(a, b, c, d, m, k, s) {
    return rotl(a + (b ^ c ^ d) + m + k | 0, s) + b | 0;
}
function fnI(a, b, c, d, m, k, s) {
    return rotl(a + (c ^ (b | ~d)) + m + k | 0, s) + b | 0;
}
module.exports = MD5;

},{"634114d48656c754":"l3bOz","4b170874b4cb8d4e":"7woL6","72d4e45c6a42a2da":"4WLFd"}],"7woL6":[function(require,module,exports) {
"use strict";
var Buffer = require("27eaec8a721206a5").Buffer;
var Transform = require("c5aab47d8f1d340a").Transform;
var inherits = require("91e9fa68d440541e");
function throwIfNotStringOrBuffer(val, prefix) {
    if (!Buffer.isBuffer(val) && typeof val !== "string") throw new TypeError(prefix + " must be a string or a buffer");
}
function HashBase(blockSize) {
    Transform.call(this);
    this._block = Buffer.allocUnsafe(blockSize);
    this._blockSize = blockSize;
    this._blockOffset = 0;
    this._length = [
        0,
        0,
        0,
        0
    ];
    this._finalized = false;
}
inherits(HashBase, Transform);
HashBase.prototype._transform = function(chunk, encoding, callback) {
    var error = null;
    try {
        this.update(chunk, encoding);
    } catch (err) {
        error = err;
    }
    callback(error);
};
HashBase.prototype._flush = function(callback) {
    var error = null;
    try {
        this.push(this.digest());
    } catch (err) {
        error = err;
    }
    callback(error);
};
HashBase.prototype.update = function(data, encoding) {
    throwIfNotStringOrBuffer(data, "Data");
    if (this._finalized) throw new Error("Digest already called");
    if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding);
    // consume data
    var block = this._block;
    var offset = 0;
    while(this._blockOffset + data.length - offset >= this._blockSize){
        for(var i = this._blockOffset; i < this._blockSize;)block[i++] = data[offset++];
        this._update();
        this._blockOffset = 0;
    }
    while(offset < data.length)block[this._blockOffset++] = data[offset++];
    // update length
    for(var j = 0, carry = data.length * 8; carry > 0; ++j){
        this._length[j] += carry;
        carry = this._length[j] / 0x0100000000 | 0;
        if (carry > 0) this._length[j] -= 0x0100000000 * carry;
    }
    return this;
};
HashBase.prototype._update = function() {
    throw new Error("_update is not implemented");
};
HashBase.prototype.digest = function(encoding) {
    if (this._finalized) throw new Error("Digest already called");
    this._finalized = true;
    var digest = this._digest();
    if (encoding !== undefined) digest = digest.toString(encoding);
    // reset state
    this._block.fill(0);
    this._blockOffset = 0;
    for(var i = 0; i < 4; ++i)this._length[i] = 0;
    return digest;
};
HashBase.prototype._digest = function() {
    throw new Error("_digest is not implemented");
};
module.exports = HashBase;

},{"27eaec8a721206a5":"4WLFd","c5aab47d8f1d340a":"hLd4M","91e9fa68d440541e":"l3bOz"}],"hLd4M":[function(require,module,exports) {
exports = module.exports = require("68bb3bdae87803ec");
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = require("74167f79b688eaf7");
exports.Duplex = require("84600f6783428a47");
exports.Transform = require("23bee5f697448a0");
exports.PassThrough = require("e0ec4b8e438dbbd");
exports.finished = require("6cc0f9af7147cdbc");
exports.pipeline = require("f90db22d01d3c3d1");

},{"68bb3bdae87803ec":"fdlsB","74167f79b688eaf7":"dvVZS","84600f6783428a47":"e7R9x","23bee5f697448a0":"lXi5u","e0ec4b8e438dbbd":"9wa6Y","6cc0f9af7147cdbc":"4KjsE","f90db22d01d3c3d1":"9oBZJ"}],"fdlsB":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
var global = arguments[3];
var process = require("896ff8d56553f7a");
"use strict";
module.exports = Readable;
/*<replacement>*/ var Duplex;
/*</replacement>*/ Readable.ReadableState = ReadableState;
/*<replacement>*/ var EE = require("16782d660ac22e0c").EventEmitter;
var EElistenerCount = function EElistenerCount(emitter, type) {
    return emitter.listeners(type).length;
};
/*</replacement>*/ /*<replacement>*/ var Stream = require("9a34f23fa53f83f7");
/*</replacement>*/ var Buffer = require("fb95ecaa88342eae").Buffer;
var OurUint8Array = (typeof global !== "undefined" ? global : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {};
function _uint8ArrayToBuffer(chunk) {
    return Buffer.from(chunk);
}
function _isUint8Array(obj) {
    return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*<replacement>*/ var debugUtil = require("a4a723b7297c7152");
var debug;
if (debugUtil && debugUtil.debuglog) debug = debugUtil.debuglog("stream");
else debug = function debug() {};
/*</replacement>*/ var BufferList = require("7a14cc1689b8c63e");
var destroyImpl = require("efa8155386cc4283");
var _require = require("994c984d08c7bbf2"), getHighWaterMark = _require.getHighWaterMark;
var _require$codes = require("8de60461b822641b").codes, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
// Lazy loaded to improve the startup performance.
var StringDecoder;
var createReadableStreamAsyncIterator;
var from;
require("19affa8ce41f090d")(Readable, Stream);
var errorOrDestroy = destroyImpl.errorOrDestroy;
var kProxyEvents = [
    "error",
    "close",
    "destroy",
    "pause",
    "resume"
];
function prependListener(emitter, event, fn) {
    // Sadly this is not cacheable as some libraries bundle their own
    // event emitter implementation with them.
    if (typeof emitter.prependListener === "function") return emitter.prependListener(event, fn);
    // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);
    else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);
    else emitter._events[event] = [
        fn,
        emitter._events[event]
    ];
}
function ReadableState(options, stream, isDuplex) {
    Duplex = Duplex || require("f1c95f846e94e4eb");
    options = options || {};
    // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream.
    // These options can be provided separately as readableXXX and writableXXX.
    if (typeof isDuplex !== "boolean") isDuplex = stream instanceof Duplex;
    // object stream flag. Used to make read(n) ignore n and to
    // make all the buffer merging and length checks go away
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;
    // the point at which it stops calling _read() to fill the buffer
    // Note: 0 is a valid value, means "don't call _read preemptively ever"
    this.highWaterMark = getHighWaterMark(this, options, "readableHighWaterMark", isDuplex);
    // A linked list is used to store data chunks instead of an array because the
    // linked list can remove elements from the beginning faster than
    // array.shift()
    this.buffer = new BufferList();
    this.length = 0;
    this.pipes = null;
    this.pipesCount = 0;
    this.flowing = null;
    this.ended = false;
    this.endEmitted = false;
    this.reading = false;
    // a flag to be able to tell if the event 'readable'/'data' is emitted
    // immediately, or on a later tick.  We set this to true at first, because
    // any actions that shouldn't happen until "later" should generally also
    // not happen before the first read call.
    this.sync = true;
    // whenever we return null, then we set a flag to say
    // that we're awaiting a 'readable' event emission.
    this.needReadable = false;
    this.emittedReadable = false;
    this.readableListening = false;
    this.resumeScheduled = false;
    this.paused = true;
    // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false;
    // Should .destroy() be called after 'end' (and potentially 'finish')
    this.autoDestroy = !!options.autoDestroy;
    // has it been destroyed
    this.destroyed = false;
    // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || "utf8";
    // the number of writers that are awaiting a drain event in .pipe()s
    this.awaitDrain = 0;
    // if true, a maybeReadMore has been scheduled
    this.readingMore = false;
    this.decoder = null;
    this.encoding = null;
    if (options.encoding) {
        if (!StringDecoder) StringDecoder = require("6392acd10886f115").StringDecoder;
        this.decoder = new StringDecoder(options.encoding);
        this.encoding = options.encoding;
    }
}
function Readable(options) {
    Duplex = Duplex || require("f1c95f846e94e4eb");
    if (!(this instanceof Readable)) return new Readable(options);
    // Checking for a Stream.Duplex instance is faster here instead of inside
    // the ReadableState constructor, at least with V8 6.5
    var isDuplex = this instanceof Duplex;
    this._readableState = new ReadableState(options, this, isDuplex);
    // legacy
    this.readable = true;
    if (options) {
        if (typeof options.read === "function") this._read = options.read;
        if (typeof options.destroy === "function") this._destroy = options.destroy;
    }
    Stream.call(this);
}
Object.defineProperty(Readable.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._readableState === undefined) return false;
        return this._readableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._readableState) return;
        // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
    }
});
Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function(err, cb) {
    cb(err);
};
// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function(chunk, encoding) {
    var state = this._readableState;
    var skipChunkCheck;
    if (!state.objectMode) {
        if (typeof chunk === "string") {
            encoding = encoding || state.defaultEncoding;
            if (encoding !== state.encoding) {
                chunk = Buffer.from(chunk, encoding);
                encoding = "";
            }
            skipChunkCheck = true;
        }
    } else skipChunkCheck = true;
    return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};
// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function(chunk) {
    return readableAddChunk(this, chunk, null, true, false);
};
function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
    debug("readableAddChunk", chunk);
    var state = stream._readableState;
    if (chunk === null) {
        state.reading = false;
        onEofChunk(stream, state);
    } else {
        var er;
        if (!skipChunkCheck) er = chunkInvalid(state, chunk);
        if (er) errorOrDestroy(stream, er);
        else if (state.objectMode || chunk && chunk.length > 0) {
            if (typeof chunk !== "string" && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) chunk = _uint8ArrayToBuffer(chunk);
            if (addToFront) {
                if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
                else addChunk(stream, state, chunk, true);
            } else if (state.ended) errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
            else if (state.destroyed) return false;
            else {
                state.reading = false;
                if (state.decoder && !encoding) {
                    chunk = state.decoder.write(chunk);
                    if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);
                    else maybeReadMore(stream, state);
                } else addChunk(stream, state, chunk, false);
            }
        } else if (!addToFront) {
            state.reading = false;
            maybeReadMore(stream, state);
        }
    }
    // We can push more data if we are below the highWaterMark.
    // Also, if we have no data yet, we can stand some more bytes.
    // This is to work around cases where hwm=0, such as the repl.
    return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}
function addChunk(stream, state, chunk, addToFront) {
    if (state.flowing && state.length === 0 && !state.sync) {
        state.awaitDrain = 0;
        stream.emit("data", chunk);
    } else {
        // update the buffer info.
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront) state.buffer.unshift(chunk);
        else state.buffer.push(chunk);
        if (state.needReadable) emitReadable(stream);
    }
    maybeReadMore(stream, state);
}
function chunkInvalid(state, chunk) {
    var er;
    if (!_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== undefined && !state.objectMode) er = new ERR_INVALID_ARG_TYPE("chunk", [
        "string",
        "Buffer",
        "Uint8Array"
    ], chunk);
    return er;
}
Readable.prototype.isPaused = function() {
    return this._readableState.flowing === false;
};
// backwards compatibility.
Readable.prototype.setEncoding = function(enc) {
    if (!StringDecoder) StringDecoder = require("6392acd10886f115").StringDecoder;
    var decoder = new StringDecoder(enc);
    this._readableState.decoder = decoder;
    // If setEncoding(null), decoder.encoding equals utf8
    this._readableState.encoding = this._readableState.decoder.encoding;
    // Iterate over current buffer to convert already stored Buffers:
    var p = this._readableState.buffer.head;
    var content = "";
    while(p !== null){
        content += decoder.write(p.data);
        p = p.next;
    }
    this._readableState.buffer.clear();
    if (content !== "") this._readableState.buffer.push(content);
    this._readableState.length = content.length;
    return this;
};
// Don't raise the hwm > 1GB
var MAX_HWM = 0x40000000;
function computeNewHighWaterMark(n) {
    if (n >= MAX_HWM) // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = MAX_HWM;
    else {
        // Get the next highest power of 2 to prevent increasing hwm excessively in
        // tiny amounts
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
    }
    return n;
}
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
    if (n <= 0 || state.length === 0 && state.ended) return 0;
    if (state.objectMode) return 1;
    if (n !== n) {
        // Only flow one buffer at a time
        if (state.flowing && state.length) return state.buffer.head.data.length;
        else return state.length;
    }
    // If we're asking for more than the current hwm, then raise the hwm.
    if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
    if (n <= state.length) return n;
    // Don't have enough
    if (!state.ended) {
        state.needReadable = true;
        return 0;
    }
    return state.length;
}
// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function(n) {
    debug("read", n);
    n = parseInt(n, 10);
    var state = this._readableState;
    var nOrig = n;
    if (n !== 0) state.emittedReadable = false;
    // if we're doing read(0) to trigger a readable event, but we
    // already have a bunch of data in the buffer, then just trigger
    // the 'readable' event and move on.
    if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
        debug("read: emitReadable", state.length, state.ended);
        if (state.length === 0 && state.ended) endReadable(this);
        else emitReadable(this);
        return null;
    }
    n = howMuchToRead(n, state);
    // if we've ended, and we're now clear, then finish it up.
    if (n === 0 && state.ended) {
        if (state.length === 0) endReadable(this);
        return null;
    }
    // All the actual chunk generation logic needs to be
    // *below* the call to _read.  The reason is that in certain
    // synthetic stream cases, such as passthrough streams, _read
    // may be a completely synchronous operation which may change
    // the state of the read buffer, providing enough data when
    // before there was *not* enough.
    //
    // So, the steps are:
    // 1. Figure out what the state of things will be after we do
    // a read from the buffer.
    //
    // 2. If that resulting state will trigger a _read, then call _read.
    // Note that this may be asynchronous, or synchronous.  Yes, it is
    // deeply ugly to write APIs this way, but that still doesn't mean
    // that the Readable class should behave improperly, as streams are
    // designed to be sync/async agnostic.
    // Take note if the _read call is sync or async (ie, if the read call
    // has returned yet), so that we know whether or not it's safe to emit
    // 'readable' etc.
    //
    // 3. Actually pull the requested chunks out of the buffer and return.
    // if we need a readable event, then we need to do some reading.
    var doRead = state.needReadable;
    debug("need readable", doRead);
    // if we currently have less than the highWaterMark, then also read some
    if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        debug("length less than watermark", doRead);
    }
    // however, if we've ended, then there's no point, and if we're already
    // reading, then it's unnecessary.
    if (state.ended || state.reading) {
        doRead = false;
        debug("reading or ended", doRead);
    } else if (doRead) {
        debug("do read");
        state.reading = true;
        state.sync = true;
        // if the length is currently zero, then we *need* a readable event.
        if (state.length === 0) state.needReadable = true;
        // call internal read method
        this._read(state.highWaterMark);
        state.sync = false;
        // If _read pushed data synchronously, then `reading` will be false,
        // and we need to re-evaluate how much data we can return to the user.
        if (!state.reading) n = howMuchToRead(nOrig, state);
    }
    var ret;
    if (n > 0) ret = fromList(n, state);
    else ret = null;
    if (ret === null) {
        state.needReadable = state.length <= state.highWaterMark;
        n = 0;
    } else {
        state.length -= n;
        state.awaitDrain = 0;
    }
    if (state.length === 0) {
        // If we have nothing in the buffer, then we want to know
        // as soon as we *do* get something into the buffer.
        if (!state.ended) state.needReadable = true;
        // If we tried to read() past the EOF, then emit end on the next tick.
        if (nOrig !== n && state.ended) endReadable(this);
    }
    if (ret !== null) this.emit("data", ret);
    return ret;
};
function onEofChunk(stream, state) {
    debug("onEofChunk");
    if (state.ended) return;
    if (state.decoder) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
            state.buffer.push(chunk);
            state.length += state.objectMode ? 1 : chunk.length;
        }
    }
    state.ended = true;
    if (state.sync) // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    emitReadable(stream);
    else {
        // emit 'readable' now to make sure it gets picked up.
        state.needReadable = false;
        if (!state.emittedReadable) {
            state.emittedReadable = true;
            emitReadable_(stream);
        }
    }
}
// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
    var state = stream._readableState;
    debug("emitReadable", state.needReadable, state.emittedReadable);
    state.needReadable = false;
    if (!state.emittedReadable) {
        debug("emitReadable", state.flowing);
        state.emittedReadable = true;
        process.nextTick(emitReadable_, stream);
    }
}
function emitReadable_(stream) {
    var state = stream._readableState;
    debug("emitReadable_", state.destroyed, state.length, state.ended);
    if (!state.destroyed && (state.length || state.ended)) {
        stream.emit("readable");
        state.emittedReadable = false;
    }
    // The stream needs another readable event if
    // 1. It is not flowing, as the flow mechanism will take
    //    care of it.
    // 2. It is not ended.
    // 3. It is below the highWaterMark, so we can schedule
    //    another readable later.
    state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
    flow(stream);
}
// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
    if (!state.readingMore) {
        state.readingMore = true;
        process.nextTick(maybeReadMore_, stream, state);
    }
}
function maybeReadMore_(stream, state) {
    // Attempt to read more data if we should.
    //
    // The conditions for reading more data are (one of):
    // - Not enough data buffered (state.length < state.highWaterMark). The loop
    //   is responsible for filling the buffer with enough data if such data
    //   is available. If highWaterMark is 0 and we are not in the flowing mode
    //   we should _not_ attempt to buffer any extra data. We'll get more data
    //   when the stream consumer calls read() instead.
    // - No data in the buffer, and the stream is in flowing mode. In this mode
    //   the loop below is responsible for ensuring read() is called. Failing to
    //   call read here would abort the flow and there's no other mechanism for
    //   continuing the flow if the stream consumer has just subscribed to the
    //   'data' event.
    //
    // In addition to the above conditions to keep reading data, the following
    // conditions prevent the data from being read:
    // - The stream has ended (state.ended).
    // - There is already a pending 'read' operation (state.reading). This is a
    //   case where the the stream has called the implementation defined _read()
    //   method, but they are processing the call asynchronously and have _not_
    //   called push() with new data. In this case we skip performing more
    //   read()s. The execution ends in this method again after the _read() ends
    //   up calling push() with more data.
    while(!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)){
        var len = state.length;
        debug("maybeReadMore read 0");
        stream.read(0);
        if (len === state.length) break;
    }
    state.readingMore = false;
}
// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function(n) {
    errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED("_read()"));
};
Readable.prototype.pipe = function(dest, pipeOpts) {
    var src = this;
    var state = this._readableState;
    switch(state.pipesCount){
        case 0:
            state.pipes = dest;
            break;
        case 1:
            state.pipes = [
                state.pipes,
                dest
            ];
            break;
        default:
            state.pipes.push(dest);
            break;
    }
    state.pipesCount += 1;
    debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
    var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
    var endFn = doEnd ? onend : unpipe;
    if (state.endEmitted) process.nextTick(endFn);
    else src.once("end", endFn);
    dest.on("unpipe", onunpipe);
    function onunpipe(readable, unpipeInfo) {
        debug("onunpipe");
        if (readable === src) {
            if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                unpipeInfo.hasUnpiped = true;
                cleanup();
            }
        }
    }
    function onend() {
        debug("onend");
        dest.end();
    }
    // when the dest drains, it reduces the awaitDrain counter
    // on the source.  This would be more elegant with a .once()
    // handler in flow(), but adding and removing repeatedly is
    // too slow.
    var ondrain = pipeOnDrain(src);
    dest.on("drain", ondrain);
    var cleanedUp = false;
    function cleanup() {
        debug("cleanup");
        // cleanup event handlers once the pipe is broken
        dest.removeListener("close", onclose);
        dest.removeListener("finish", onfinish);
        dest.removeListener("drain", ondrain);
        dest.removeListener("error", onerror);
        dest.removeListener("unpipe", onunpipe);
        src.removeListener("end", onend);
        src.removeListener("end", unpipe);
        src.removeListener("data", ondata);
        cleanedUp = true;
        // if the reader is waiting for a drain event from this
        // specific writer, then it would cause it to never start
        // flowing again.
        // So, if this is awaiting a drain, then we just call it now.
        // If we don't know, then assume that we are waiting for one.
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
    }
    src.on("data", ondata);
    function ondata(chunk) {
        debug("ondata");
        var ret = dest.write(chunk);
        debug("dest.write", ret);
        if (ret === false) {
            // If the user unpiped during `dest.write()`, it is possible
            // to get stuck in a permanently paused state if that write
            // also returned false.
            // => Check whether `dest` is still a piping destination.
            if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                debug("false write response, pause", state.awaitDrain);
                state.awaitDrain++;
            }
            src.pause();
        }
    }
    // if the dest has an error, then stop piping into it.
    // however, don't suppress the throwing behavior for this.
    function onerror(er) {
        debug("onerror", er);
        unpipe();
        dest.removeListener("error", onerror);
        if (EElistenerCount(dest, "error") === 0) errorOrDestroy(dest, er);
    }
    // Make sure our error handler is attached before userland ones.
    prependListener(dest, "error", onerror);
    // Both close and finish should trigger unpipe, but only once.
    function onclose() {
        dest.removeListener("finish", onfinish);
        unpipe();
    }
    dest.once("close", onclose);
    function onfinish() {
        debug("onfinish");
        dest.removeListener("close", onclose);
        unpipe();
    }
    dest.once("finish", onfinish);
    function unpipe() {
        debug("unpipe");
        src.unpipe(dest);
    }
    // tell the dest that it's being piped to
    dest.emit("pipe", src);
    // start the flow if it hasn't been started already.
    if (!state.flowing) {
        debug("pipe resume");
        src.resume();
    }
    return dest;
};
function pipeOnDrain(src) {
    return function pipeOnDrainFunctionResult() {
        var state = src._readableState;
        debug("pipeOnDrain", state.awaitDrain);
        if (state.awaitDrain) state.awaitDrain--;
        if (state.awaitDrain === 0 && EElistenerCount(src, "data")) {
            state.flowing = true;
            flow(src);
        }
    };
}
Readable.prototype.unpipe = function(dest) {
    var state = this._readableState;
    var unpipeInfo = {
        hasUnpiped: false
    };
    // if we're not piping anywhere, then do nothing.
    if (state.pipesCount === 0) return this;
    // just one destination.  most common case.
    if (state.pipesCount === 1) {
        // passed in one, but it's not the right one.
        if (dest && dest !== state.pipes) return this;
        if (!dest) dest = state.pipes;
        // got a match.
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest) dest.emit("unpipe", this, unpipeInfo);
        return this;
    }
    // slow case. multiple pipe destinations.
    if (!dest) {
        // remove all.
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        for(var i = 0; i < len; i++)dests[i].emit("unpipe", this, {
            hasUnpiped: false
        });
        return this;
    }
    // try to find the right one.
    var index = indexOf(state.pipes, dest);
    if (index === -1) return this;
    state.pipes.splice(index, 1);
    state.pipesCount -= 1;
    if (state.pipesCount === 1) state.pipes = state.pipes[0];
    dest.emit("unpipe", this, unpipeInfo);
    return this;
};
// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function(ev, fn) {
    var res = Stream.prototype.on.call(this, ev, fn);
    var state = this._readableState;
    if (ev === "data") {
        // update readableListening so that resume() may be a no-op
        // a few lines down. This is needed to support once('readable').
        state.readableListening = this.listenerCount("readable") > 0;
        // Try start flowing on next tick if stream isn't explicitly paused
        if (state.flowing !== false) this.resume();
    } else if (ev === "readable") {
        if (!state.endEmitted && !state.readableListening) {
            state.readableListening = state.needReadable = true;
            state.flowing = false;
            state.emittedReadable = false;
            debug("on readable", state.length, state.reading);
            if (state.length) emitReadable(this);
            else if (!state.reading) process.nextTick(nReadingNextTick, this);
        }
    }
    return res;
};
Readable.prototype.addListener = Readable.prototype.on;
Readable.prototype.removeListener = function(ev, fn) {
    var res = Stream.prototype.removeListener.call(this, ev, fn);
    if (ev === "readable") // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
    return res;
};
Readable.prototype.removeAllListeners = function(ev) {
    var res = Stream.prototype.removeAllListeners.apply(this, arguments);
    if (ev === "readable" || ev === undefined) // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
    return res;
};
function updateReadableListening(self1) {
    var state = self1._readableState;
    state.readableListening = self1.listenerCount("readable") > 0;
    if (state.resumeScheduled && !state.paused) // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true;
    else if (self1.listenerCount("data") > 0) self1.resume();
}
function nReadingNextTick(self1) {
    debug("readable nexttick read 0");
    self1.read(0);
}
// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function() {
    var state = this._readableState;
    if (!state.flowing) {
        debug("resume");
        // we flow only if there is no one listening
        // for readable, but we still have to call
        // resume()
        state.flowing = !state.readableListening;
        resume(this, state);
    }
    state.paused = false;
    return this;
};
function resume(stream, state) {
    if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        process.nextTick(resume_, stream, state);
    }
}
function resume_(stream, state) {
    debug("resume", state.reading);
    if (!state.reading) stream.read(0);
    state.resumeScheduled = false;
    stream.emit("resume");
    flow(stream);
    if (state.flowing && !state.reading) stream.read(0);
}
Readable.prototype.pause = function() {
    debug("call pause flowing=%j", this._readableState.flowing);
    if (this._readableState.flowing !== false) {
        debug("pause");
        this._readableState.flowing = false;
        this.emit("pause");
    }
    this._readableState.paused = true;
    return this;
};
function flow(stream) {
    var state = stream._readableState;
    debug("flow", state.flowing);
    while(state.flowing && stream.read() !== null);
}
// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function(stream) {
    var _this = this;
    var state = this._readableState;
    var paused = false;
    stream.on("end", function() {
        debug("wrapped end");
        if (state.decoder && !state.ended) {
            var chunk = state.decoder.end();
            if (chunk && chunk.length) _this.push(chunk);
        }
        _this.push(null);
    });
    stream.on("data", function(chunk) {
        debug("wrapped data");
        if (state.decoder) chunk = state.decoder.write(chunk);
        // don't skip over falsy values in objectMode
        if (state.objectMode && (chunk === null || chunk === undefined)) return;
        else if (!state.objectMode && (!chunk || !chunk.length)) return;
        var ret = _this.push(chunk);
        if (!ret) {
            paused = true;
            stream.pause();
        }
    });
    // proxy all the other methods.
    // important when wrapping filters and duplexes.
    for(var i in stream)if (this[i] === undefined && typeof stream[i] === "function") this[i] = function methodWrap(method) {
        return function methodWrapReturnFunction() {
            return stream[method].apply(stream, arguments);
        };
    }(i);
    // proxy certain important events.
    for(var n = 0; n < kProxyEvents.length; n++)stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
    // when we try to consume some more bytes, simply unpause the
    // underlying stream.
    this._read = function(n) {
        debug("wrapped _read", n);
        if (paused) {
            paused = false;
            stream.resume();
        }
    };
    return this;
};
if (typeof Symbol === "function") Readable.prototype[Symbol.asyncIterator] = function() {
    if (createReadableStreamAsyncIterator === undefined) createReadableStreamAsyncIterator = require("830c56f840811f05");
    return createReadableStreamAsyncIterator(this);
};
Object.defineProperty(Readable.prototype, "readableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.highWaterMark;
    }
});
Object.defineProperty(Readable.prototype, "readableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState && this._readableState.buffer;
    }
});
Object.defineProperty(Readable.prototype, "readableFlowing", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.flowing;
    },
    set: function set(state) {
        if (this._readableState) this._readableState.flowing = state;
    }
});
// exposed for testing purposes only.
Readable._fromList = fromList;
Object.defineProperty(Readable.prototype, "readableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.length;
    }
});
// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
    // nothing buffered
    if (state.length === 0) return null;
    var ret;
    if (state.objectMode) ret = state.buffer.shift();
    else if (!n || n >= state.length) {
        // read it all, truncate the list
        if (state.decoder) ret = state.buffer.join("");
        else if (state.buffer.length === 1) ret = state.buffer.first();
        else ret = state.buffer.concat(state.length);
        state.buffer.clear();
    } else // read part of list
    ret = state.buffer.consume(n, state.decoder);
    return ret;
}
function endReadable(stream) {
    var state = stream._readableState;
    debug("endReadable", state.endEmitted);
    if (!state.endEmitted) {
        state.ended = true;
        process.nextTick(endReadableNT, state, stream);
    }
}
function endReadableNT(state, stream) {
    debug("endReadableNT", state.endEmitted, state.length);
    // Check that we didn't get one last unshift.
    if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit("end");
        if (state.autoDestroy) {
            // In case of duplex streams we need a way to detect
            // if the writable side is ready for autoDestroy as well
            var wState = stream._writableState;
            if (!wState || wState.autoDestroy && wState.finished) stream.destroy();
        }
    }
}
if (typeof Symbol === "function") Readable.from = function(iterable, opts) {
    if (from === undefined) from = require("7451b8c4bf72370");
    return from(Readable, iterable, opts);
};
function indexOf(xs, x) {
    for(var i = 0, l = xs.length; i < l; i++){
        if (xs[i] === x) return i;
    }
    return -1;
}

},{"896ff8d56553f7a":"gq3cc","16782d660ac22e0c":"32fHr","9a34f23fa53f83f7":"9z3W4","fb95ecaa88342eae":"6tQNr","a4a723b7297c7152":"9C0N7","7a14cc1689b8c63e":"7Gh2M","efa8155386cc4283":"9XP5E","994c984d08c7bbf2":"ks1Kj","8de60461b822641b":"5EQW4","19affa8ce41f090d":"l3bOz","f1c95f846e94e4eb":"e7R9x","6392acd10886f115":"9gZvY","830c56f840811f05":"jMXvV","7451b8c4bf72370":"l88sT"}],"32fHr":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
"use strict";
var R = typeof Reflect === "object" ? Reflect : null;
var ReflectApply = R && typeof R.apply === "function" ? R.apply : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
};
var ReflectOwnKeys;
if (R && typeof R.ownKeys === "function") ReflectOwnKeys = R.ownKeys;
else if (Object.getOwnPropertySymbols) ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
};
else ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
};
function ProcessEmitWarning(warning) {
    if (console && console.warn) console.warn(warning);
}
var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
    return value !== value;
};
function EventEmitter() {
    EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;
// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;
EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;
// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;
function checkListener(listener) {
    if (typeof listener !== "function") throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
}
Object.defineProperty(EventEmitter, "defaultMaxListeners", {
    enumerable: true,
    get: function() {
        return defaultMaxListeners;
    },
    set: function(arg) {
        if (typeof arg !== "number" || arg < 0 || NumberIsNaN(arg)) throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + ".");
        defaultMaxListeners = arg;
    }
});
EventEmitter.init = function() {
    if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
        this._events = Object.create(null);
        this._eventsCount = 0;
    }
    this._maxListeners = this._maxListeners || undefined;
};
// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
    if (typeof n !== "number" || n < 0 || NumberIsNaN(n)) throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + ".");
    this._maxListeners = n;
    return this;
};
function _getMaxListeners(that) {
    if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
    return that._maxListeners;
}
EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
    return _getMaxListeners(this);
};
EventEmitter.prototype.emit = function emit(type) {
    var args = [];
    for(var i = 1; i < arguments.length; i++)args.push(arguments[i]);
    var doError = type === "error";
    var events = this._events;
    if (events !== undefined) doError = doError && events.error === undefined;
    else if (!doError) return false;
    // If there is no 'error' event listener then throw.
    if (doError) {
        var er;
        if (args.length > 0) er = args[0];
        if (er instanceof Error) // Note: The comments on the `throw` lines are intentional, they show
        // up in Node's output if this results in an unhandled exception.
        throw er; // Unhandled 'error' event
        // At least give some kind of context to the user
        var err = new Error("Unhandled error." + (er ? " (" + er.message + ")" : ""));
        err.context = er;
        throw err; // Unhandled 'error' event
    }
    var handler = events[type];
    if (handler === undefined) return false;
    if (typeof handler === "function") ReflectApply(handler, this, args);
    else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for(var i = 0; i < len; ++i)ReflectApply(listeners[i], this, args);
    }
    return true;
};
function _addListener(target, type, listener, prepend) {
    var m;
    var events;
    var existing;
    checkListener(listener);
    events = target._events;
    if (events === undefined) {
        events = target._events = Object.create(null);
        target._eventsCount = 0;
    } else {
        // To avoid recursion in the case that type === "newListener"! Before
        // adding it to the listeners, first emit "newListener".
        if (events.newListener !== undefined) {
            target.emit("newListener", type, listener.listener ? listener.listener : listener);
            // Re-assign `events` because a newListener handler could have caused the
            // this._events to be assigned to a new object
            events = target._events;
        }
        existing = events[type];
    }
    if (existing === undefined) {
        // Optimize the case of one listener. Don't need the extra array object.
        existing = events[type] = listener;
        ++target._eventsCount;
    } else {
        if (typeof existing === "function") // Adding the second element, need to change to array.
        existing = events[type] = prepend ? [
            listener,
            existing
        ] : [
            existing,
            listener
        ];
        else if (prepend) existing.unshift(listener);
        else existing.push(listener);
        // Check for listener leak
        m = _getMaxListeners(target);
        if (m > 0 && existing.length > m && !existing.warned) {
            existing.warned = true;
            // No error code for this since it is a Warning
            // eslint-disable-next-line no-restricted-syntax
            var w = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + String(type) + " listeners " + "added. Use emitter.setMaxListeners() to " + "increase limit");
            w.name = "MaxListenersExceededWarning";
            w.emitter = target;
            w.type = type;
            w.count = existing.length;
            ProcessEmitWarning(w);
        }
    }
    return target;
}
EventEmitter.prototype.addListener = function addListener(type, listener) {
    return _addListener(this, type, listener, false);
};
EventEmitter.prototype.on = EventEmitter.prototype.addListener;
EventEmitter.prototype.prependListener = function prependListener(type, listener) {
    return _addListener(this, type, listener, true);
};
function onceWrapper() {
    if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        if (arguments.length === 0) return this.listener.call(this.target);
        return this.listener.apply(this.target, arguments);
    }
}
function _onceWrap(target, type, listener) {
    var state = {
        fired: false,
        wrapFn: undefined,
        target: target,
        type: type,
        listener: listener
    };
    var wrapped = onceWrapper.bind(state);
    wrapped.listener = listener;
    state.wrapFn = wrapped;
    return wrapped;
}
EventEmitter.prototype.once = function once(type, listener) {
    checkListener(listener);
    this.on(type, _onceWrap(this, type, listener));
    return this;
};
EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
    checkListener(listener);
    this.prependListener(type, _onceWrap(this, type, listener));
    return this;
};
// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener = function removeListener(type, listener) {
    var list, events, position, i, originalListener;
    checkListener(listener);
    events = this._events;
    if (events === undefined) return this;
    list = events[type];
    if (list === undefined) return this;
    if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0) this._events = Object.create(null);
        else {
            delete events[type];
            if (events.removeListener) this.emit("removeListener", type, list.listener || listener);
        }
    } else if (typeof list !== "function") {
        position = -1;
        for(i = list.length - 1; i >= 0; i--)if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
        }
        if (position < 0) return this;
        if (position === 0) list.shift();
        else spliceOne(list, position);
        if (list.length === 1) events[type] = list[0];
        if (events.removeListener !== undefined) this.emit("removeListener", type, originalListener || listener);
    }
    return this;
};
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
    var listeners, events, i;
    events = this._events;
    if (events === undefined) return this;
    // not listening for removeListener, no need to emit
    if (events.removeListener === undefined) {
        if (arguments.length === 0) {
            this._events = Object.create(null);
            this._eventsCount = 0;
        } else if (events[type] !== undefined) {
            if (--this._eventsCount === 0) this._events = Object.create(null);
            else delete events[type];
        }
        return this;
    }
    // emit removeListener for all listeners on all events
    if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for(i = 0; i < keys.length; ++i){
            key = keys[i];
            if (key === "removeListener") continue;
            this.removeAllListeners(key);
        }
        this.removeAllListeners("removeListener");
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
    }
    listeners = events[type];
    if (typeof listeners === "function") this.removeListener(type, listeners);
    else if (listeners !== undefined) // LIFO order
    for(i = listeners.length - 1; i >= 0; i--)this.removeListener(type, listeners[i]);
    return this;
};
function _listeners(target, type, unwrap) {
    var events = target._events;
    if (events === undefined) return [];
    var evlistener = events[type];
    if (evlistener === undefined) return [];
    if (typeof evlistener === "function") return unwrap ? [
        evlistener.listener || evlistener
    ] : [
        evlistener
    ];
    return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}
EventEmitter.prototype.listeners = function listeners(type) {
    return _listeners(this, type, true);
};
EventEmitter.prototype.rawListeners = function rawListeners(type) {
    return _listeners(this, type, false);
};
EventEmitter.listenerCount = function(emitter, type) {
    if (typeof emitter.listenerCount === "function") return emitter.listenerCount(type);
    else return listenerCount.call(emitter, type);
};
EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
    var events = this._events;
    if (events !== undefined) {
        var evlistener = events[type];
        if (typeof evlistener === "function") return 1;
        else if (evlistener !== undefined) return evlistener.length;
    }
    return 0;
}
EventEmitter.prototype.eventNames = function eventNames() {
    return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};
function arrayClone(arr, n) {
    var copy = new Array(n);
    for(var i = 0; i < n; ++i)copy[i] = arr[i];
    return copy;
}
function spliceOne(list, index) {
    for(; index + 1 < list.length; index++)list[index] = list[index + 1];
    list.pop();
}
function unwrapListeners(arr) {
    var ret = new Array(arr.length);
    for(var i = 0; i < ret.length; ++i)ret[i] = arr[i].listener || arr[i];
    return ret;
}
function once(emitter, name) {
    return new Promise(function(resolve, reject) {
        function errorListener(err) {
            emitter.removeListener(name, resolver);
            reject(err);
        }
        function resolver() {
            if (typeof emitter.removeListener === "function") emitter.removeListener("error", errorListener);
            resolve([].slice.call(arguments));
        }
        eventTargetAgnosticAddListener(emitter, name, resolver, {
            once: true
        });
        if (name !== "error") addErrorHandlerIfEventEmitter(emitter, errorListener, {
            once: true
        });
    });
}
function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
    if (typeof emitter.on === "function") eventTargetAgnosticAddListener(emitter, "error", handler, flags);
}
function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
    if (typeof emitter.on === "function") {
        if (flags.once) emitter.once(name, listener);
        else emitter.on(name, listener);
    } else if (typeof emitter.addEventListener === "function") // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
        // IE does not have builtin `{ once: true }` support so we
        // have to do it manually.
        if (flags.once) emitter.removeEventListener(name, wrapListener);
        listener(arg);
    });
    else throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
}

},{}],"9z3W4":[function(require,module,exports) {
module.exports = require("ed88fc9aa73f911").EventEmitter;

},{"ed88fc9aa73f911":"32fHr"}],"7Gh2M":[function(require,module,exports) {
"use strict";
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {
            _defineProperty(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _defineProperty(obj, key, value) {
    key = _toPropertyKey(key);
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
        writable: false
    });
    return Constructor;
}
function _toPropertyKey(arg) {
    var key = _toPrimitive(arg, "string");
    return typeof key === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
        var res = prim.call(input, hint || "default");
        if (typeof res !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
}
var _require = require("59f5d0111b7fa075"), Buffer = _require.Buffer;
var _require2 = require("eef6a677577349b8"), inspect = _require2.inspect;
var custom = inspect && inspect.custom || "inspect";
function copyBuffer(src, target, offset) {
    Buffer.prototype.copy.call(src, target, offset);
}
module.exports = /*#__PURE__*/ function() {
    function BufferList() {
        _classCallCheck(this, BufferList);
        this.head = null;
        this.tail = null;
        this.length = 0;
    }
    _createClass(BufferList, [
        {
            key: "push",
            value: function push(v) {
                var entry = {
                    data: v,
                    next: null
                };
                if (this.length > 0) this.tail.next = entry;
                else this.head = entry;
                this.tail = entry;
                ++this.length;
            }
        },
        {
            key: "unshift",
            value: function unshift(v) {
                var entry = {
                    data: v,
                    next: this.head
                };
                if (this.length === 0) this.tail = entry;
                this.head = entry;
                ++this.length;
            }
        },
        {
            key: "shift",
            value: function shift() {
                if (this.length === 0) return;
                var ret = this.head.data;
                if (this.length === 1) this.head = this.tail = null;
                else this.head = this.head.next;
                --this.length;
                return ret;
            }
        },
        {
            key: "clear",
            value: function clear() {
                this.head = this.tail = null;
                this.length = 0;
            }
        },
        {
            key: "join",
            value: function join(s) {
                if (this.length === 0) return "";
                var p = this.head;
                var ret = "" + p.data;
                while(p = p.next)ret += s + p.data;
                return ret;
            }
        },
        {
            key: "concat",
            value: function concat(n) {
                if (this.length === 0) return Buffer.alloc(0);
                var ret = Buffer.allocUnsafe(n >>> 0);
                var p = this.head;
                var i = 0;
                while(p){
                    copyBuffer(p.data, ret, i);
                    i += p.data.length;
                    p = p.next;
                }
                return ret;
            }
        },
        {
            key: "consume",
            value: function consume(n, hasStrings) {
                var ret;
                if (n < this.head.data.length) {
                    // `slice` is the same for buffers and strings.
                    ret = this.head.data.slice(0, n);
                    this.head.data = this.head.data.slice(n);
                } else if (n === this.head.data.length) // First chunk is a perfect match.
                ret = this.shift();
                else // Result spans more than one buffer.
                ret = hasStrings ? this._getString(n) : this._getBuffer(n);
                return ret;
            }
        },
        {
            key: "first",
            value: function first() {
                return this.head.data;
            }
        },
        {
            key: "_getString",
            value: function _getString(n) {
                var p = this.head;
                var c = 1;
                var ret = p.data;
                n -= ret.length;
                while(p = p.next){
                    var str = p.data;
                    var nb = n > str.length ? str.length : n;
                    if (nb === str.length) ret += str;
                    else ret += str.slice(0, n);
                    n -= nb;
                    if (n === 0) {
                        if (nb === str.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = str.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            }
        },
        {
            key: "_getBuffer",
            value: function _getBuffer(n) {
                var ret = Buffer.allocUnsafe(n);
                var p = this.head;
                var c = 1;
                p.data.copy(ret);
                n -= p.data.length;
                while(p = p.next){
                    var buf = p.data;
                    var nb = n > buf.length ? buf.length : n;
                    buf.copy(ret, ret.length - n, 0, nb);
                    n -= nb;
                    if (n === 0) {
                        if (nb === buf.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = buf.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            }
        },
        {
            key: custom,
            value: function value(_, options) {
                return inspect(this, _objectSpread(_objectSpread({}, options), {}, {
                    // Only inspect one level.
                    depth: 0,
                    // It should not recurse.
                    customInspect: false
                }));
            }
        }
    ]);
    return BufferList;
}();

},{"59f5d0111b7fa075":"6tQNr","eef6a677577349b8":"9C0N7"}],"9XP5E":[function(require,module,exports) {
var process = require("4284522496af5dfb");
"use strict";
// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
    var _this = this;
    var readableDestroyed = this._readableState && this._readableState.destroyed;
    var writableDestroyed = this._writableState && this._writableState.destroyed;
    if (readableDestroyed || writableDestroyed) {
        if (cb) cb(err);
        else if (err) {
            if (!this._writableState) process.nextTick(emitErrorNT, this, err);
            else if (!this._writableState.errorEmitted) {
                this._writableState.errorEmitted = true;
                process.nextTick(emitErrorNT, this, err);
            }
        }
        return this;
    }
    // we set destroyed to true before firing error callbacks in order
    // to make it re-entrance safe in case destroy() is called within callbacks
    if (this._readableState) this._readableState.destroyed = true;
    // if this is a duplex stream mark the writable part as destroyed as well
    if (this._writableState) this._writableState.destroyed = true;
    this._destroy(err || null, function(err) {
        if (!cb && err) {
            if (!_this._writableState) process.nextTick(emitErrorAndCloseNT, _this, err);
            else if (!_this._writableState.errorEmitted) {
                _this._writableState.errorEmitted = true;
                process.nextTick(emitErrorAndCloseNT, _this, err);
            } else process.nextTick(emitCloseNT, _this);
        } else if (cb) {
            process.nextTick(emitCloseNT, _this);
            cb(err);
        } else process.nextTick(emitCloseNT, _this);
    });
    return this;
}
function emitErrorAndCloseNT(self, err) {
    emitErrorNT(self, err);
    emitCloseNT(self);
}
function emitCloseNT(self) {
    if (self._writableState && !self._writableState.emitClose) return;
    if (self._readableState && !self._readableState.emitClose) return;
    self.emit("close");
}
function undestroy() {
    if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
    }
    if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finalCalled = false;
        this._writableState.prefinished = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
    }
}
function emitErrorNT(self, err) {
    self.emit("error", err);
}
function errorOrDestroy(stream, err) {
    // We have tests that rely on errors being emitted
    // in the same tick, so changing this is semver major.
    // For now when you opt-in to autoDestroy we allow
    // the error to be emitted nextTick. In a future
    // semver major update we should change the default to this.
    var rState = stream._readableState;
    var wState = stream._writableState;
    if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);
    else stream.emit("error", err);
}
module.exports = {
    destroy: destroy,
    undestroy: undestroy,
    errorOrDestroy: errorOrDestroy
};

},{"4284522496af5dfb":"gq3cc"}],"ks1Kj":[function(require,module,exports) {
"use strict";
var ERR_INVALID_OPT_VALUE = require("4e508d569e2117ef").codes.ERR_INVALID_OPT_VALUE;
function highWaterMarkFrom(options, isDuplex, duplexKey) {
    return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}
function getHighWaterMark(state, options, duplexKey, isDuplex) {
    var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
    if (hwm != null) {
        if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
            var name = isDuplex ? duplexKey : "highWaterMark";
            throw new ERR_INVALID_OPT_VALUE(name, hwm);
        }
        return Math.floor(hwm);
    }
    // Default value
    return state.objectMode ? 16 : 16384;
}
module.exports = {
    getHighWaterMark: getHighWaterMark
};

},{"4e508d569e2117ef":"5EQW4"}],"5EQW4":[function(require,module,exports) {
"use strict";
function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
}
var codes = {};
function createErrorType(code, message, Base) {
    if (!Base) Base = Error;
    function getMessage(arg1, arg2, arg3) {
        if (typeof message === "string") return message;
        else return message(arg1, arg2, arg3);
    }
    var NodeError = /*#__PURE__*/ function(_Base) {
        _inheritsLoose(NodeError, _Base);
        function NodeError(arg1, arg2, arg3) {
            return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
        }
        return NodeError;
    }(Base);
    NodeError.prototype.name = Base.name;
    NodeError.prototype.code = code;
    codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js
function oneOf(expected, thing) {
    if (Array.isArray(expected)) {
        var len = expected.length;
        expected = expected.map(function(i) {
            return String(i);
        });
        if (len > 2) return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(", "), ", or ") + expected[len - 1];
        else if (len === 2) return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
        else return "of ".concat(thing, " ").concat(expected[0]);
    } else return "of ".concat(thing, " ").concat(String(expected));
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith
function startsWith(str, search, pos) {
    return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
function endsWith(str, search, this_len) {
    if (this_len === undefined || this_len > str.length) this_len = str.length;
    return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
function includes(str, search, start) {
    if (typeof start !== "number") start = 0;
    if (start + search.length > str.length) return false;
    else return str.indexOf(search, start) !== -1;
}
createErrorType("ERR_INVALID_OPT_VALUE", function(name, value) {
    return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
createErrorType("ERR_INVALID_ARG_TYPE", function(name, expected, actual) {
    // determiner: 'must be' or 'must not be'
    var determiner;
    if (typeof expected === "string" && startsWith(expected, "not ")) {
        determiner = "must not be";
        expected = expected.replace(/^not /, "");
    } else determiner = "must be";
    var msg;
    if (endsWith(name, " argument")) // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
    else {
        var type = includes(name, ".") ? "property" : "argument";
        msg = 'The "'.concat(name, '" ').concat(type, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
    }
    msg += ". Received type ".concat(typeof actual);
    return msg;
}, TypeError);
createErrorType("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
createErrorType("ERR_METHOD_NOT_IMPLEMENTED", function(name) {
    return "The " + name + " method is not implemented";
});
createErrorType("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
createErrorType("ERR_STREAM_DESTROYED", function(name) {
    return "Cannot call " + name + " after a stream was destroyed";
});
createErrorType("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
createErrorType("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
createErrorType("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
createErrorType("ERR_UNKNOWN_ENCODING", function(arg) {
    return "Unknown encoding: " + arg;
}, TypeError);
createErrorType("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
module.exports.codes = codes;

},{}],"e7R9x":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.
var process = require("2ab1115635c50a9f");
"use strict";
/*<replacement>*/ var objectKeys = Object.keys || function(obj) {
    var keys = [];
    for(var key in obj)keys.push(key);
    return keys;
};
/*</replacement>*/ module.exports = Duplex;
var Readable = require("68a7582259cd5865");
var Writable = require("93d042f8bb80078e");
require("aa7b11ba5bf4defc")(Duplex, Readable);
// Allow the keys array to be GC'ed.
var keys = objectKeys(Writable.prototype);
for(var v = 0; v < keys.length; v++){
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
}
function Duplex(options) {
    if (!(this instanceof Duplex)) return new Duplex(options);
    Readable.call(this, options);
    Writable.call(this, options);
    this.allowHalfOpen = true;
    if (options) {
        if (options.readable === false) this.readable = false;
        if (options.writable === false) this.writable = false;
        if (options.allowHalfOpen === false) {
            this.allowHalfOpen = false;
            this.once("end", onend);
        }
    }
}
Object.defineProperty(Duplex.prototype, "writableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
});
Object.defineProperty(Duplex.prototype, "writableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
Object.defineProperty(Duplex.prototype, "writableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.length;
    }
});
// the no-half-open enforcer
function onend() {
    // If the writable side ended, then we're ok.
    if (this._writableState.ended) return;
    // no more data can be written.
    // But allow more writes to happen in this tick.
    process.nextTick(onEndNT, this);
}
function onEndNT(self) {
    self.end();
}
Object.defineProperty(Duplex.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._readableState === undefined || this._writableState === undefined) return false;
        return this._readableState.destroyed && this._writableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (this._readableState === undefined || this._writableState === undefined) return;
        // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
    }
});

},{"2ab1115635c50a9f":"gq3cc","68a7582259cd5865":"fdlsB","93d042f8bb80078e":"dvVZS","aa7b11ba5bf4defc":"l3bOz"}],"dvVZS":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.
var global = arguments[3];
var process = require("f05a2a5a09d4d8b0");
"use strict";
module.exports = Writable;
/* <replacement> */ function WriteReq(chunk, encoding, cb) {
    this.chunk = chunk;
    this.encoding = encoding;
    this.callback = cb;
    this.next = null;
}
// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
    var _this = this;
    this.next = null;
    this.entry = null;
    this.finish = function() {
        onCorkedFinish(_this, state);
    };
}
/* </replacement> */ /*<replacement>*/ var Duplex;
/*</replacement>*/ Writable.WritableState = WritableState;
/*<replacement>*/ var internalUtil = {
    deprecate: require("dc51171b07b54af1")
};
/*</replacement>*/ /*<replacement>*/ var Stream = require("44a3cc22ec64fcd3");
/*</replacement>*/ var Buffer = require("de8f7fb7ccda8086").Buffer;
var OurUint8Array = (typeof global !== "undefined" ? global : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {};
function _uint8ArrayToBuffer(chunk) {
    return Buffer.from(chunk);
}
function _isUint8Array(obj) {
    return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
var destroyImpl = require("acf48fb5d9dc6204");
var _require = require("9d146cd974da0f53"), getHighWaterMark = _require.getHighWaterMark;
var _require$codes = require("3c574b8881abcf86").codes, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK, ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE, ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED, ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES, ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END, ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
var errorOrDestroy = destroyImpl.errorOrDestroy;
require("10dad555ffe77dde")(Writable, Stream);
function nop() {}
function WritableState(options, stream, isDuplex) {
    Duplex = Duplex || require("c5e7171d6f58d3c0");
    options = options || {};
    // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream,
    // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.
    if (typeof isDuplex !== "boolean") isDuplex = stream instanceof Duplex;
    // object stream flag to indicate whether or not this stream
    // contains buffers or objects.
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;
    // the point at which write() starts returning false
    // Note: 0 is a valid value, means that we always return false if
    // the entire buffer is not flushed immediately on write()
    this.highWaterMark = getHighWaterMark(this, options, "writableHighWaterMark", isDuplex);
    // if _final has been called
    this.finalCalled = false;
    // drain event flag.
    this.needDrain = false;
    // at the start of calling end()
    this.ending = false;
    // when end() has been called, and returned
    this.ended = false;
    // when 'finish' is emitted
    this.finished = false;
    // has it been destroyed
    this.destroyed = false;
    // should we decode strings into buffers before passing to _write?
    // this is here so that some node-core streams can optimize string
    // handling at a lower level.
    var noDecode = options.decodeStrings === false;
    this.decodeStrings = !noDecode;
    // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || "utf8";
    // not an actual buffer we keep track of, but a measurement
    // of how much we're waiting to get pushed to some underlying
    // socket or file.
    this.length = 0;
    // a flag to see when we're in the middle of a write.
    this.writing = false;
    // when true all writes will be buffered until .uncork() call
    this.corked = 0;
    // a flag to be able to tell if the onwrite cb is called immediately,
    // or on a later tick.  We set this to true at first, because any
    // actions that shouldn't happen until "later" should generally also
    // not happen before the first write call.
    this.sync = true;
    // a flag to know if we're processing previously buffered items, which
    // may call the _write() callback in the same tick, so that we don't
    // end up in an overlapped onwrite situation.
    this.bufferProcessing = false;
    // the callback that's passed to _write(chunk,cb)
    this.onwrite = function(er) {
        onwrite(stream, er);
    };
    // the callback that the user supplies to write(chunk,encoding,cb)
    this.writecb = null;
    // the amount that is being written when _write is called.
    this.writelen = 0;
    this.bufferedRequest = null;
    this.lastBufferedRequest = null;
    // number of pending user-supplied write callbacks
    // this must be 0 before 'finish' can be emitted
    this.pendingcb = 0;
    // emit prefinish if the only thing we're waiting for is _write cbs
    // This is relevant for synchronous Transform streams
    this.prefinished = false;
    // True if the error was already emitted and should not be thrown again
    this.errorEmitted = false;
    // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false;
    // Should .destroy() be called after 'finish' (and potentially 'end')
    this.autoDestroy = !!options.autoDestroy;
    // count buffered requests
    this.bufferedRequestCount = 0;
    // allocate the first CorkedRequest, there is always
    // one allocated and free to use, and we maintain at most two
    this.corkedRequestsFree = new CorkedRequest(this);
}
WritableState.prototype.getBuffer = function getBuffer() {
    var current = this.bufferedRequest;
    var out = [];
    while(current){
        out.push(current);
        current = current.next;
    }
    return out;
};
(function() {
    try {
        Object.defineProperty(WritableState.prototype, "buffer", {
            get: internalUtil.deprecate(function writableStateBufferGetter() {
                return this.getBuffer();
            }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
        });
    } catch (_) {}
})();
// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
    realHasInstance = Function.prototype[Symbol.hasInstance];
    Object.defineProperty(Writable, Symbol.hasInstance, {
        value: function value(object) {
            if (realHasInstance.call(this, object)) return true;
            if (this !== Writable) return false;
            return object && object._writableState instanceof WritableState;
        }
    });
} else realHasInstance = function realHasInstance(object) {
    return object instanceof this;
};
function Writable(options) {
    Duplex = Duplex || require("c5e7171d6f58d3c0");
    // Writable ctor is applied to Duplexes, too.
    // `realHasInstance` is necessary because using plain `instanceof`
    // would return false, as no `_writableState` property is attached.
    // Trying to use the custom `instanceof` for Writable here will also break the
    // Node.js LazyTransform implementation, which has a non-trivial getter for
    // `_writableState` that would lead to infinite recursion.
    // Checking for a Stream.Duplex instance is faster here instead of inside
    // the WritableState constructor, at least with V8 6.5
    var isDuplex = this instanceof Duplex;
    if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
    this._writableState = new WritableState(options, this, isDuplex);
    // legacy.
    this.writable = true;
    if (options) {
        if (typeof options.write === "function") this._write = options.write;
        if (typeof options.writev === "function") this._writev = options.writev;
        if (typeof options.destroy === "function") this._destroy = options.destroy;
        if (typeof options.final === "function") this._final = options.final;
    }
    Stream.call(this);
}
// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function() {
    errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
};
function writeAfterEnd(stream, cb) {
    var er = new ERR_STREAM_WRITE_AFTER_END();
    // TODO: defer error events consistently everywhere, not just the cb
    errorOrDestroy(stream, er);
    process.nextTick(cb, er);
}
// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
    var er;
    if (chunk === null) er = new ERR_STREAM_NULL_VALUES();
    else if (typeof chunk !== "string" && !state.objectMode) er = new ERR_INVALID_ARG_TYPE("chunk", [
        "string",
        "Buffer"
    ], chunk);
    if (er) {
        errorOrDestroy(stream, er);
        process.nextTick(cb, er);
        return false;
    }
    return true;
}
Writable.prototype.write = function(chunk, encoding, cb) {
    var state = this._writableState;
    var ret = false;
    var isBuf = !state.objectMode && _isUint8Array(chunk);
    if (isBuf && !Buffer.isBuffer(chunk)) chunk = _uint8ArrayToBuffer(chunk);
    if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
    }
    if (isBuf) encoding = "buffer";
    else if (!encoding) encoding = state.defaultEncoding;
    if (typeof cb !== "function") cb = nop;
    if (state.ending) writeAfterEnd(this, cb);
    else if (isBuf || validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
    }
    return ret;
};
Writable.prototype.cork = function() {
    this._writableState.corked++;
};
Writable.prototype.uncork = function() {
    var state = this._writableState;
    if (state.corked) {
        state.corked--;
        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
    }
};
Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
    // node::ParseEncoding() requires lower case.
    if (typeof encoding === "string") encoding = encoding.toLowerCase();
    if (!([
        "hex",
        "utf8",
        "utf-8",
        "ascii",
        "binary",
        "base64",
        "ucs2",
        "ucs-2",
        "utf16le",
        "utf-16le",
        "raw"
    ].indexOf((encoding + "").toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
    this._writableState.defaultEncoding = encoding;
    return this;
};
Object.defineProperty(Writable.prototype, "writableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
function decodeChunk(state, chunk, encoding) {
    if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") chunk = Buffer.from(chunk, encoding);
    return chunk;
}
Object.defineProperty(Writable.prototype, "writableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
});
// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
    if (!isBuf) {
        var newChunk = decodeChunk(state, chunk, encoding);
        if (chunk !== newChunk) {
            isBuf = true;
            encoding = "buffer";
            chunk = newChunk;
        }
    }
    var len = state.objectMode ? 1 : chunk.length;
    state.length += len;
    var ret = state.length < state.highWaterMark;
    // we must ensure that previous needDrain will not be reset to false.
    if (!ret) state.needDrain = true;
    if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = {
            chunk: chunk,
            encoding: encoding,
            isBuf: isBuf,
            callback: cb,
            next: null
        };
        if (last) last.next = state.lastBufferedRequest;
        else state.bufferedRequest = state.lastBufferedRequest;
        state.bufferedRequestCount += 1;
    } else doWrite(stream, state, false, len, chunk, encoding, cb);
    return ret;
}
function doWrite(stream, state, writev, len, chunk, encoding, cb) {
    state.writelen = len;
    state.writecb = cb;
    state.writing = true;
    state.sync = true;
    if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED("write"));
    else if (writev) stream._writev(chunk, state.onwrite);
    else stream._write(chunk, encoding, state.onwrite);
    state.sync = false;
}
function onwriteError(stream, state, sync, er, cb) {
    --state.pendingcb;
    if (sync) {
        // defer the callback if we are being called synchronously
        // to avoid piling up things on the stack
        process.nextTick(cb, er);
        // this can emit finish, and it will always happen
        // after error
        process.nextTick(finishMaybe, stream, state);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er);
    } else {
        // the caller expect this to happen before if
        // it is async
        cb(er);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er);
        // this can emit finish, but finish must
        // always follow error
        finishMaybe(stream, state);
    }
}
function onwriteStateUpdate(state) {
    state.writing = false;
    state.writecb = null;
    state.length -= state.writelen;
    state.writelen = 0;
}
function onwrite(stream, er) {
    var state = stream._writableState;
    var sync = state.sync;
    var cb = state.writecb;
    if (typeof cb !== "function") throw new ERR_MULTIPLE_CALLBACK();
    onwriteStateUpdate(state);
    if (er) onwriteError(stream, state, sync, er, cb);
    else {
        // Check if we're actually ready to finish, but don't emit yet
        var finished = needFinish(state) || stream.destroyed;
        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(stream, state);
        if (sync) process.nextTick(afterWrite, stream, state, finished, cb);
        else afterWrite(stream, state, finished, cb);
    }
}
function afterWrite(stream, state, finished, cb) {
    if (!finished) onwriteDrain(stream, state);
    state.pendingcb--;
    cb();
    finishMaybe(stream, state);
}
// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
    if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit("drain");
    }
}
// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
    state.bufferProcessing = true;
    var entry = state.bufferedRequest;
    if (stream._writev && entry && entry.next) {
        // Fast case, write everything using _writev()
        var l = state.bufferedRequestCount;
        var buffer = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;
        var count = 0;
        var allBuffers = true;
        while(entry){
            buffer[count] = entry;
            if (!entry.isBuf) allBuffers = false;
            entry = entry.next;
            count += 1;
        }
        buffer.allBuffers = allBuffers;
        doWrite(stream, state, true, state.length, buffer, "", holder.finish);
        // doWrite is almost always async, defer these to save a bit of time
        // as the hot path ends with doWrite
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
            state.corkedRequestsFree = holder.next;
            holder.next = null;
        } else state.corkedRequestsFree = new CorkedRequest(state);
        state.bufferedRequestCount = 0;
    } else {
        // Slow case, write chunks one-by-one
        while(entry){
            var chunk = entry.chunk;
            var encoding = entry.encoding;
            var cb = entry.callback;
            var len = state.objectMode ? 1 : chunk.length;
            doWrite(stream, state, false, len, chunk, encoding, cb);
            entry = entry.next;
            state.bufferedRequestCount--;
            // if we didn't call the onwrite immediately, then
            // it means that we need to wait until it does.
            // also, that means that the chunk and cb are currently
            // being processed, so move the buffer counter past them.
            if (state.writing) break;
        }
        if (entry === null) state.lastBufferedRequest = null;
    }
    state.bufferedRequest = entry;
    state.bufferProcessing = false;
}
Writable.prototype._write = function(chunk, encoding, cb) {
    cb(new ERR_METHOD_NOT_IMPLEMENTED("_write()"));
};
Writable.prototype._writev = null;
Writable.prototype.end = function(chunk, encoding, cb) {
    var state = this._writableState;
    if (typeof chunk === "function") {
        cb = chunk;
        chunk = null;
        encoding = null;
    } else if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
    }
    if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);
    // .end() fully uncorks
    if (state.corked) {
        state.corked = 1;
        this.uncork();
    }
    // ignore unnecessary end() calls.
    if (!state.ending) endWritable(this, state, cb);
    return this;
};
Object.defineProperty(Writable.prototype, "writableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.length;
    }
});
function needFinish(state) {
    return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
    stream._final(function(err) {
        state.pendingcb--;
        if (err) errorOrDestroy(stream, err);
        state.prefinished = true;
        stream.emit("prefinish");
        finishMaybe(stream, state);
    });
}
function prefinish(stream, state) {
    if (!state.prefinished && !state.finalCalled) {
        if (typeof stream._final === "function" && !state.destroyed) {
            state.pendingcb++;
            state.finalCalled = true;
            process.nextTick(callFinal, stream, state);
        } else {
            state.prefinished = true;
            stream.emit("prefinish");
        }
    }
}
function finishMaybe(stream, state) {
    var need = needFinish(state);
    if (need) {
        prefinish(stream, state);
        if (state.pendingcb === 0) {
            state.finished = true;
            stream.emit("finish");
            if (state.autoDestroy) {
                // In case of duplex streams we need a way to detect
                // if the readable side is ready for autoDestroy as well
                var rState = stream._readableState;
                if (!rState || rState.autoDestroy && rState.endEmitted) stream.destroy();
            }
        }
    }
    return need;
}
function endWritable(stream, state, cb) {
    state.ending = true;
    finishMaybe(stream, state);
    if (cb) {
        if (state.finished) process.nextTick(cb);
        else stream.once("finish", cb);
    }
    state.ended = true;
    stream.writable = false;
}
function onCorkedFinish(corkReq, state, err) {
    var entry = corkReq.entry;
    corkReq.entry = null;
    while(entry){
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
    }
    // reuse the free corkReq.
    state.corkedRequestsFree.next = corkReq;
}
Object.defineProperty(Writable.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._writableState === undefined) return false;
        return this._writableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._writableState) return;
        // backward compatibility, the user is explicitly
        // managing destroyed
        this._writableState.destroyed = value;
    }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function(err, cb) {
    cb(err);
};

},{"f05a2a5a09d4d8b0":"gq3cc","dc51171b07b54af1":"aS0tA","44a3cc22ec64fcd3":"9z3W4","de8f7fb7ccda8086":"6tQNr","acf48fb5d9dc6204":"9XP5E","9d146cd974da0f53":"ks1Kj","3c574b8881abcf86":"5EQW4","10dad555ffe77dde":"l3bOz","c5e7171d6f58d3c0":"e7R9x"}],"aS0tA":[function(require,module,exports) {
/**
 * Module exports.
 */ var global = arguments[3];
module.exports = deprecate;
/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */ function deprecate(fn, msg) {
    if (config("noDeprecation")) return fn;
    var warned = false;
    function deprecated() {
        if (!warned) {
            if (config("throwDeprecation")) throw new Error(msg);
            else if (config("traceDeprecation")) console.trace(msg);
            else console.warn(msg);
            warned = true;
        }
        return fn.apply(this, arguments);
    }
    return deprecated;
}
/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */ function config(name) {
    // accessing global.localStorage can trigger a DOMException in sandboxed iframes
    try {
        if (!global.localStorage) return false;
    } catch (_) {
        return false;
    }
    var val = global.localStorage[name];
    if (null == val) return false;
    return String(val).toLowerCase() === "true";
}

},{}],"9gZvY":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
"use strict";
/*<replacement>*/ var Buffer = require("2a29807c689a070a").Buffer;
/*</replacement>*/ var isEncoding = Buffer.isEncoding || function(encoding) {
    encoding = "" + encoding;
    switch(encoding && encoding.toLowerCase()){
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
        case "raw":
            return true;
        default:
            return false;
    }
};
function _normalizeEncoding(enc) {
    if (!enc) return "utf8";
    var retried;
    while(true)switch(enc){
        case "utf8":
        case "utf-8":
            return "utf8";
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return "utf16le";
        case "latin1":
        case "binary":
            return "latin1";
        case "base64":
        case "ascii":
        case "hex":
            return enc;
        default:
            if (retried) return; // undefined
            enc = ("" + enc).toLowerCase();
            retried = true;
    }
}
// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
    var nenc = _normalizeEncoding(enc);
    if (typeof nenc !== "string" && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error("Unknown encoding: " + enc);
    return nenc || enc;
}
// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
    this.encoding = normalizeEncoding(encoding);
    var nb;
    switch(this.encoding){
        case "utf16le":
            this.text = utf16Text;
            this.end = utf16End;
            nb = 4;
            break;
        case "utf8":
            this.fillLast = utf8FillLast;
            nb = 4;
            break;
        case "base64":
            this.text = base64Text;
            this.end = base64End;
            nb = 3;
            break;
        default:
            this.write = simpleWrite;
            this.end = simpleEnd;
            return;
    }
    this.lastNeed = 0;
    this.lastTotal = 0;
    this.lastChar = Buffer.allocUnsafe(nb);
}
StringDecoder.prototype.write = function(buf) {
    if (buf.length === 0) return "";
    var r;
    var i;
    if (this.lastNeed) {
        r = this.fillLast(buf);
        if (r === undefined) return "";
        i = this.lastNeed;
        this.lastNeed = 0;
    } else i = 0;
    if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
    return r || "";
};
StringDecoder.prototype.end = utf8End;
// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;
// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function(buf) {
    if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
    this.lastNeed -= buf.length;
};
// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
    if (byte <= 0x7F) return 0;
    else if (byte >> 5 === 0x06) return 2;
    else if (byte >> 4 === 0x0E) return 3;
    else if (byte >> 3 === 0x1E) return 4;
    return byte >> 6 === 0x02 ? -1 : -2;
}
// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
    var j = buf.length - 1;
    if (j < i) return 0;
    var nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 1;
        return nb;
    }
    if (--j < i || nb === -2) return 0;
    nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 2;
        return nb;
    }
    if (--j < i || nb === -2) return 0;
    nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) {
            if (nb === 2) nb = 0;
            else self.lastNeed = nb - 3;
        }
        return nb;
    }
    return 0;
}
// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
    if ((buf[0] & 0xC0) !== 0x80) {
        self.lastNeed = 0;
        return "�";
    }
    if (self.lastNeed > 1 && buf.length > 1) {
        if ((buf[1] & 0xC0) !== 0x80) {
            self.lastNeed = 1;
            return "�";
        }
        if (self.lastNeed > 2 && buf.length > 2) {
            if ((buf[2] & 0xC0) !== 0x80) {
                self.lastNeed = 2;
                return "�";
            }
        }
    }
}
// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
    var p = this.lastTotal - this.lastNeed;
    var r = utf8CheckExtraBytes(this, buf, p);
    if (r !== undefined) return r;
    if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, p, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, p, 0, buf.length);
    this.lastNeed -= buf.length;
}
// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
    var total = utf8CheckIncomplete(this, buf, i);
    if (!this.lastNeed) return buf.toString("utf8", i);
    this.lastTotal = total;
    var end = buf.length - (total - this.lastNeed);
    buf.copy(this.lastChar, 0, end);
    return buf.toString("utf8", i, end);
}
// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
    var r = buf && buf.length ? this.write(buf) : "";
    if (this.lastNeed) return r + "�";
    return r;
}
// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
    if ((buf.length - i) % 2 === 0) {
        var r = buf.toString("utf16le", i);
        if (r) {
            var c = r.charCodeAt(r.length - 1);
            if (c >= 0xD800 && c <= 0xDBFF) {
                this.lastNeed = 2;
                this.lastTotal = 4;
                this.lastChar[0] = buf[buf.length - 2];
                this.lastChar[1] = buf[buf.length - 1];
                return r.slice(0, -1);
            }
        }
        return r;
    }
    this.lastNeed = 1;
    this.lastTotal = 2;
    this.lastChar[0] = buf[buf.length - 1];
    return buf.toString("utf16le", i, buf.length - 1);
}
// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
    var r = buf && buf.length ? this.write(buf) : "";
    if (this.lastNeed) {
        var end = this.lastTotal - this.lastNeed;
        return r + this.lastChar.toString("utf16le", 0, end);
    }
    return r;
}
function base64Text(buf, i) {
    var n = (buf.length - i) % 3;
    if (n === 0) return buf.toString("base64", i);
    this.lastNeed = 3 - n;
    this.lastTotal = 3;
    if (n === 1) this.lastChar[0] = buf[buf.length - 1];
    else {
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
    }
    return buf.toString("base64", i, buf.length - n);
}
function base64End(buf) {
    var r = buf && buf.length ? this.write(buf) : "";
    if (this.lastNeed) return r + this.lastChar.toString("base64", 0, 3 - this.lastNeed);
    return r;
}
// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
    return buf.toString(this.encoding);
}
function simpleEnd(buf) {
    return buf && buf.length ? this.write(buf) : "";
}

},{"2a29807c689a070a":"4WLFd"}],"jMXvV":[function(require,module,exports) {
var process = require("96b869862a96261a");
"use strict";
var _Object$setPrototypeO;
function _defineProperty(obj, key, value) {
    key = _toPropertyKey(key);
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function _toPropertyKey(arg) {
    var key = _toPrimitive(arg, "string");
    return typeof key === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
        var res = prim.call(input, hint || "default");
        if (typeof res !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
}
var finished = require("745a3cd8f6469ed5");
var kLastResolve = Symbol("lastResolve");
var kLastReject = Symbol("lastReject");
var kError = Symbol("error");
var kEnded = Symbol("ended");
var kLastPromise = Symbol("lastPromise");
var kHandlePromise = Symbol("handlePromise");
var kStream = Symbol("stream");
function createIterResult(value, done) {
    return {
        value: value,
        done: done
    };
}
function readAndResolve(iter) {
    var resolve = iter[kLastResolve];
    if (resolve !== null) {
        var data = iter[kStream].read();
        // we defer if data is null
        // we can be expecting either 'end' or
        // 'error'
        if (data !== null) {
            iter[kLastPromise] = null;
            iter[kLastResolve] = null;
            iter[kLastReject] = null;
            resolve(createIterResult(data, false));
        }
    }
}
function onReadable(iter) {
    // we wait for the next tick, because it might
    // emit an error with process.nextTick
    process.nextTick(readAndResolve, iter);
}
function wrapForNext(lastPromise, iter) {
    return function(resolve, reject) {
        lastPromise.then(function() {
            if (iter[kEnded]) {
                resolve(createIterResult(undefined, true));
                return;
            }
            iter[kHandlePromise](resolve, reject);
        }, reject);
    };
}
var AsyncIteratorPrototype = Object.getPrototypeOf(function() {});
var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
    get stream () {
        return this[kStream];
    },
    next: function next() {
        var _this = this;
        // if we have detected an error in the meanwhile
        // reject straight away
        var error = this[kError];
        if (error !== null) return Promise.reject(error);
        if (this[kEnded]) return Promise.resolve(createIterResult(undefined, true));
        if (this[kStream].destroyed) // We need to defer via nextTick because if .destroy(err) is
        // called, the error will be emitted via nextTick, and
        // we cannot guarantee that there is no error lingering around
        // waiting to be emitted.
        return new Promise(function(resolve, reject) {
            process.nextTick(function() {
                if (_this[kError]) reject(_this[kError]);
                else resolve(createIterResult(undefined, true));
            });
        });
        // if we have multiple next() calls
        // we will wait for the previous Promise to finish
        // this logic is optimized to support for await loops,
        // where next() is only called once at a time
        var lastPromise = this[kLastPromise];
        var promise;
        if (lastPromise) promise = new Promise(wrapForNext(lastPromise, this));
        else {
            // fast path needed to support multiple this.push()
            // without triggering the next() queue
            var data = this[kStream].read();
            if (data !== null) return Promise.resolve(createIterResult(data, false));
            promise = new Promise(this[kHandlePromise]);
        }
        this[kLastPromise] = promise;
        return promise;
    }
}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function() {
    return this;
}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
    var _this2 = this;
    // destroy(err, cb) is a private API
    // we can guarantee we have that here, because we control the
    // Readable class this is attached to
    return new Promise(function(resolve, reject) {
        _this2[kStream].destroy(null, function(err) {
            if (err) {
                reject(err);
                return;
            }
            resolve(createIterResult(undefined, true));
        });
    });
}), _Object$setPrototypeO), AsyncIteratorPrototype);
var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
    var _Object$create;
    var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
        value: stream,
        writable: true
    }), _defineProperty(_Object$create, kLastResolve, {
        value: null,
        writable: true
    }), _defineProperty(_Object$create, kLastReject, {
        value: null,
        writable: true
    }), _defineProperty(_Object$create, kError, {
        value: null,
        writable: true
    }), _defineProperty(_Object$create, kEnded, {
        value: stream._readableState.endEmitted,
        writable: true
    }), _defineProperty(_Object$create, kHandlePromise, {
        value: function value(resolve, reject) {
            var data = iterator[kStream].read();
            if (data) {
                iterator[kLastPromise] = null;
                iterator[kLastResolve] = null;
                iterator[kLastReject] = null;
                resolve(createIterResult(data, false));
            } else {
                iterator[kLastResolve] = resolve;
                iterator[kLastReject] = reject;
            }
        },
        writable: true
    }), _Object$create));
    iterator[kLastPromise] = null;
    finished(stream, function(err) {
        if (err && err.code !== "ERR_STREAM_PREMATURE_CLOSE") {
            var reject = iterator[kLastReject];
            // reject if we are waiting for data in the Promise
            // returned by next() and store the error
            if (reject !== null) {
                iterator[kLastPromise] = null;
                iterator[kLastResolve] = null;
                iterator[kLastReject] = null;
                reject(err);
            }
            iterator[kError] = err;
            return;
        }
        var resolve = iterator[kLastResolve];
        if (resolve !== null) {
            iterator[kLastPromise] = null;
            iterator[kLastResolve] = null;
            iterator[kLastReject] = null;
            resolve(createIterResult(undefined, true));
        }
        iterator[kEnded] = true;
    });
    stream.on("readable", onReadable.bind(null, iterator));
    return iterator;
};
module.exports = createReadableStreamAsyncIterator;

},{"96b869862a96261a":"gq3cc","745a3cd8f6469ed5":"4KjsE"}],"4KjsE":[function(require,module,exports) {
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).
"use strict";
var ERR_STREAM_PREMATURE_CLOSE = require("d35458f585bdd360").codes.ERR_STREAM_PREMATURE_CLOSE;
function once(callback) {
    var called = false;
    return function() {
        if (called) return;
        called = true;
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        callback.apply(this, args);
    };
}
function noop() {}
function isRequest(stream) {
    return stream.setHeader && typeof stream.abort === "function";
}
function eos(stream, opts, callback) {
    if (typeof opts === "function") return eos(stream, null, opts);
    if (!opts) opts = {};
    callback = once(callback || noop);
    var readable = opts.readable || opts.readable !== false && stream.readable;
    var writable = opts.writable || opts.writable !== false && stream.writable;
    var onlegacyfinish = function onlegacyfinish() {
        if (!stream.writable) onfinish();
    };
    var writableEnded = stream._writableState && stream._writableState.finished;
    var onfinish = function onfinish() {
        writable = false;
        writableEnded = true;
        if (!readable) callback.call(stream);
    };
    var readableEnded = stream._readableState && stream._readableState.endEmitted;
    var onend = function onend() {
        readable = false;
        readableEnded = true;
        if (!writable) callback.call(stream);
    };
    var onerror = function onerror(err) {
        callback.call(stream, err);
    };
    var onclose = function onclose() {
        var err;
        if (readable && !readableEnded) {
            if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
        if (writable && !writableEnded) {
            if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
    };
    var onrequest = function onrequest() {
        stream.req.on("finish", onfinish);
    };
    if (isRequest(stream)) {
        stream.on("complete", onfinish);
        stream.on("abort", onclose);
        if (stream.req) onrequest();
        else stream.on("request", onrequest);
    } else if (writable && !stream._writableState) {
        // legacy streams
        stream.on("end", onlegacyfinish);
        stream.on("close", onlegacyfinish);
    }
    stream.on("end", onend);
    stream.on("finish", onfinish);
    if (opts.error !== false) stream.on("error", onerror);
    stream.on("close", onclose);
    return function() {
        stream.removeListener("complete", onfinish);
        stream.removeListener("abort", onclose);
        stream.removeListener("request", onrequest);
        if (stream.req) stream.req.removeListener("finish", onfinish);
        stream.removeListener("end", onlegacyfinish);
        stream.removeListener("close", onlegacyfinish);
        stream.removeListener("finish", onfinish);
        stream.removeListener("end", onend);
        stream.removeListener("error", onerror);
        stream.removeListener("close", onclose);
    };
}
module.exports = eos;

},{"d35458f585bdd360":"5EQW4"}],"l88sT":[function(require,module,exports) {
module.exports = function() {
    throw new Error("Readable.from is not available in the browser");
};

},{}],"lXi5u":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.
"use strict";
module.exports = Transform;
var _require$codes = require("baab47252aa06434").codes, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK, ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING, ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
var Duplex = require("db11ebf938e536ed");
require("82049677fa603d40")(Transform, Duplex);
function afterTransform(er, data) {
    var ts = this._transformState;
    ts.transforming = false;
    var cb = ts.writecb;
    if (cb === null) return this.emit("error", new ERR_MULTIPLE_CALLBACK());
    ts.writechunk = null;
    ts.writecb = null;
    if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);
    cb(er);
    var rs = this._readableState;
    rs.reading = false;
    if (rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
}
function Transform(options) {
    if (!(this instanceof Transform)) return new Transform(options);
    Duplex.call(this, options);
    this._transformState = {
        afterTransform: afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
    };
    // start out asking for a readable event once data is transformed.
    this._readableState.needReadable = true;
    // we have implemented the _read method, and done the other things
    // that Readable wants before the first _read call, so unset the
    // sync guard flag.
    this._readableState.sync = false;
    if (options) {
        if (typeof options.transform === "function") this._transform = options.transform;
        if (typeof options.flush === "function") this._flush = options.flush;
    }
    // When the writable side finishes, then flush out anything remaining.
    this.on("prefinish", prefinish);
}
function prefinish() {
    var _this = this;
    if (typeof this._flush === "function" && !this._readableState.destroyed) this._flush(function(er, data) {
        done(_this, er, data);
    });
    else done(this, null, null);
}
Transform.prototype.push = function(chunk, encoding) {
    this._transformState.needTransform = false;
    return Duplex.prototype.push.call(this, chunk, encoding);
};
// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function(chunk, encoding, cb) {
    cb(new ERR_METHOD_NOT_IMPLEMENTED("_transform()"));
};
Transform.prototype._write = function(chunk, encoding, cb) {
    var ts = this._transformState;
    ts.writecb = cb;
    ts.writechunk = chunk;
    ts.writeencoding = encoding;
    if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
    }
};
// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function(n) {
    var ts = this._transformState;
    if (ts.writechunk !== null && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
    } else // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
};
Transform.prototype._destroy = function(err, cb) {
    Duplex.prototype._destroy.call(this, err, function(err2) {
        cb(err2);
    });
};
function done(stream, er, data) {
    if (er) return stream.emit("error", er);
    if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data);
    // TODO(BridgeAR): Write a test for these two error cases
    // if there's nothing in the write buffer, then that means
    // that nothing more will ever be provided
    if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
    if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
    return stream.push(null);
}

},{"baab47252aa06434":"5EQW4","db11ebf938e536ed":"e7R9x","82049677fa603d40":"l3bOz"}],"9wa6Y":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.
"use strict";
module.exports = PassThrough;
var Transform = require("7ab21291895ec3d2");
require("f24ec1883eef5e9b")(PassThrough, Transform);
function PassThrough(options) {
    if (!(this instanceof PassThrough)) return new PassThrough(options);
    Transform.call(this, options);
}
PassThrough.prototype._transform = function(chunk, encoding, cb) {
    cb(null, chunk);
};

},{"7ab21291895ec3d2":"lXi5u","f24ec1883eef5e9b":"l3bOz"}],"9oBZJ":[function(require,module,exports) {
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).
"use strict";
var eos;
function once(callback) {
    var called = false;
    return function() {
        if (called) return;
        called = true;
        callback.apply(void 0, arguments);
    };
}
var _require$codes = require("6ba21bd580ac7d57").codes, ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS, ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
function noop(err) {
    // Rethrow the error if it exists to avoid swallowing it
    if (err) throw err;
}
function isRequest(stream) {
    return stream.setHeader && typeof stream.abort === "function";
}
function destroyer(stream, reading, writing, callback) {
    callback = once(callback);
    var closed = false;
    stream.on("close", function() {
        closed = true;
    });
    if (eos === undefined) eos = require("dd7fd89dd81b8674");
    eos(stream, {
        readable: reading,
        writable: writing
    }, function(err) {
        if (err) return callback(err);
        closed = true;
        callback();
    });
    var destroyed = false;
    return function(err) {
        if (closed) return;
        if (destroyed) return;
        destroyed = true;
        // request.destroy just do .end - .abort is what we want
        if (isRequest(stream)) return stream.abort();
        if (typeof stream.destroy === "function") return stream.destroy();
        callback(err || new ERR_STREAM_DESTROYED("pipe"));
    };
}
function call(fn) {
    fn();
}
function pipe(from, to) {
    return from.pipe(to);
}
function popCallback(streams) {
    if (!streams.length) return noop;
    if (typeof streams[streams.length - 1] !== "function") return noop;
    return streams.pop();
}
function pipeline() {
    for(var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++)streams[_key] = arguments[_key];
    var callback = popCallback(streams);
    if (Array.isArray(streams[0])) streams = streams[0];
    if (streams.length < 2) throw new ERR_MISSING_ARGS("streams");
    var error;
    var destroys = streams.map(function(stream, i) {
        var reading = i < streams.length - 1;
        var writing = i > 0;
        return destroyer(stream, reading, writing, function(err) {
            if (!error) error = err;
            if (err) destroys.forEach(call);
            if (reading) return;
            destroys.forEach(call);
            callback(error);
        });
    });
    return streams.reduce(pipe);
}
module.exports = pipeline;

},{"6ba21bd580ac7d57":"5EQW4","dd7fd89dd81b8674":"4KjsE"}],"dnWwk":[function(require,module,exports) {
"use strict";
var Buffer = require("c813c8075bcf823e").Buffer;
var inherits = require("84928993e7c3934b");
var HashBase = require("4b3519823770a56d");
var ARRAY16 = new Array(16);
var zl = [
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    7,
    4,
    13,
    1,
    10,
    6,
    15,
    3,
    12,
    0,
    9,
    5,
    2,
    14,
    11,
    8,
    3,
    10,
    14,
    4,
    9,
    15,
    8,
    1,
    2,
    7,
    0,
    6,
    13,
    11,
    5,
    12,
    1,
    9,
    11,
    10,
    0,
    8,
    12,
    4,
    13,
    3,
    7,
    15,
    14,
    5,
    6,
    2,
    4,
    0,
    5,
    9,
    7,
    12,
    2,
    10,
    14,
    1,
    3,
    8,
    11,
    6,
    15,
    13
];
var zr = [
    5,
    14,
    7,
    0,
    9,
    2,
    11,
    4,
    13,
    6,
    15,
    8,
    1,
    10,
    3,
    12,
    6,
    11,
    3,
    7,
    0,
    13,
    5,
    10,
    14,
    15,
    8,
    12,
    4,
    9,
    1,
    2,
    15,
    5,
    1,
    3,
    7,
    14,
    6,
    9,
    11,
    8,
    12,
    2,
    10,
    0,
    4,
    13,
    8,
    6,
    4,
    1,
    3,
    11,
    15,
    0,
    5,
    12,
    2,
    13,
    9,
    7,
    10,
    14,
    12,
    15,
    10,
    4,
    1,
    5,
    8,
    7,
    6,
    2,
    13,
    14,
    0,
    3,
    9,
    11
];
var sl = [
    11,
    14,
    15,
    12,
    5,
    8,
    7,
    9,
    11,
    13,
    14,
    15,
    6,
    7,
    9,
    8,
    7,
    6,
    8,
    13,
    11,
    9,
    7,
    15,
    7,
    12,
    15,
    9,
    11,
    7,
    13,
    12,
    11,
    13,
    6,
    7,
    14,
    9,
    13,
    15,
    14,
    8,
    13,
    6,
    5,
    12,
    7,
    5,
    11,
    12,
    14,
    15,
    14,
    15,
    9,
    8,
    9,
    14,
    5,
    6,
    8,
    6,
    5,
    12,
    9,
    15,
    5,
    11,
    6,
    8,
    13,
    12,
    5,
    12,
    13,
    14,
    11,
    8,
    5,
    6
];
var sr = [
    8,
    9,
    9,
    11,
    13,
    15,
    15,
    5,
    7,
    7,
    8,
    11,
    14,
    14,
    12,
    6,
    9,
    13,
    15,
    7,
    12,
    8,
    9,
    11,
    7,
    7,
    12,
    7,
    6,
    15,
    13,
    11,
    9,
    7,
    15,
    11,
    8,
    6,
    6,
    14,
    12,
    13,
    5,
    14,
    13,
    13,
    7,
    5,
    15,
    5,
    8,
    11,
    14,
    14,
    6,
    14,
    6,
    9,
    12,
    9,
    12,
    5,
    15,
    8,
    8,
    5,
    12,
    9,
    12,
    5,
    14,
    6,
    8,
    13,
    6,
    5,
    15,
    13,
    11,
    11
];
var hl = [
    0x00000000,
    0x5a827999,
    0x6ed9eba1,
    0x8f1bbcdc,
    0xa953fd4e
];
var hr = [
    0x50a28be6,
    0x5c4dd124,
    0x6d703ef3,
    0x7a6d76e9,
    0x00000000
];
function RIPEMD160() {
    HashBase.call(this, 64);
    // state
    this._a = 0x67452301;
    this._b = 0xefcdab89;
    this._c = 0x98badcfe;
    this._d = 0x10325476;
    this._e = 0xc3d2e1f0;
}
inherits(RIPEMD160, HashBase);
RIPEMD160.prototype._update = function() {
    var words = ARRAY16;
    for(var j = 0; j < 16; ++j)words[j] = this._block.readInt32LE(j * 4);
    var al = this._a | 0;
    var bl = this._b | 0;
    var cl = this._c | 0;
    var dl = this._d | 0;
    var el = this._e | 0;
    var ar = this._a | 0;
    var br = this._b | 0;
    var cr = this._c | 0;
    var dr = this._d | 0;
    var er = this._e | 0;
    // computation
    for(var i = 0; i < 80; i += 1){
        var tl;
        var tr;
        if (i < 16) {
            tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i]);
            tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i]);
        } else if (i < 32) {
            tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i]);
            tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i]);
        } else if (i < 48) {
            tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i]);
            tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i]);
        } else if (i < 64) {
            tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i]);
            tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i]);
        } else {
            tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i]);
            tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i]);
        }
        al = el;
        el = dl;
        dl = rotl(cl, 10);
        cl = bl;
        bl = tl;
        ar = er;
        er = dr;
        dr = rotl(cr, 10);
        cr = br;
        br = tr;
    }
    // update state
    var t = this._b + cl + dr | 0;
    this._b = this._c + dl + er | 0;
    this._c = this._d + el + ar | 0;
    this._d = this._e + al + br | 0;
    this._e = this._a + bl + cr | 0;
    this._a = t;
};
RIPEMD160.prototype._digest = function() {
    // create padding and handle blocks
    this._block[this._blockOffset++] = 0x80;
    if (this._blockOffset > 56) {
        this._block.fill(0, this._blockOffset, 64);
        this._update();
        this._blockOffset = 0;
    }
    this._block.fill(0, this._blockOffset, 56);
    this._block.writeUInt32LE(this._length[0], 56);
    this._block.writeUInt32LE(this._length[1], 60);
    this._update();
    // produce result
    var buffer = Buffer.alloc ? Buffer.alloc(20) : new Buffer(20);
    buffer.writeInt32LE(this._a, 0);
    buffer.writeInt32LE(this._b, 4);
    buffer.writeInt32LE(this._c, 8);
    buffer.writeInt32LE(this._d, 12);
    buffer.writeInt32LE(this._e, 16);
    return buffer;
};
function rotl(x, n) {
    return x << n | x >>> 32 - n;
}
function fn1(a, b, c, d, e, m, k, s) {
    return rotl(a + (b ^ c ^ d) + m + k | 0, s) + e | 0;
}
function fn2(a, b, c, d, e, m, k, s) {
    return rotl(a + (b & c | ~b & d) + m + k | 0, s) + e | 0;
}
function fn3(a, b, c, d, e, m, k, s) {
    return rotl(a + ((b | ~c) ^ d) + m + k | 0, s) + e | 0;
}
function fn4(a, b, c, d, e, m, k, s) {
    return rotl(a + (b & d | c & ~d) + m + k | 0, s) + e | 0;
}
function fn5(a, b, c, d, e, m, k, s) {
    return rotl(a + (b ^ (c | ~d)) + m + k | 0, s) + e | 0;
}
module.exports = RIPEMD160;

},{"c813c8075bcf823e":"6tQNr","84928993e7c3934b":"l3bOz","4b3519823770a56d":"7woL6"}],"hmy2s":[function(require,module,exports) {
var exports = module.exports = function SHA(algorithm) {
    algorithm = algorithm.toLowerCase();
    var Algorithm = exports[algorithm];
    if (!Algorithm) throw new Error(algorithm + " is not supported (we accept pull requests)");
    return new Algorithm();
};
exports.sha = require("54c9313943368ce2");
exports.sha1 = require("6e6f42e0b6fe29ef");
exports.sha224 = require("cefe70c6f9f68940");
exports.sha256 = require("3b4e2aa73bc3fef5");
exports.sha384 = require("be7da8b8e5a0fd78");
exports.sha512 = require("25610a4ba83316a4");

},{"54c9313943368ce2":"4d9Ft","6e6f42e0b6fe29ef":"82JNU","cefe70c6f9f68940":"beHVS","3b4e2aa73bc3fef5":"1OF5S","be7da8b8e5a0fd78":"4iFFC","25610a4ba83316a4":"5xOFP"}],"4d9Ft":[function(require,module,exports) {
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */ var inherits = require("55404b425acd1c6f");
var Hash = require("457bc9c7737d761f");
var Buffer = require("44759e57eb2992a").Buffer;
var K = [
    0x5a827999,
    0x6ed9eba1,
    -1894007588,
    -899497514
];
var W = new Array(80);
function Sha() {
    this.init();
    this._w = W;
    Hash.call(this, 64, 56);
}
inherits(Sha, Hash);
Sha.prototype.init = function() {
    this._a = 0x67452301;
    this._b = 0xefcdab89;
    this._c = 0x98badcfe;
    this._d = 0x10325476;
    this._e = 0xc3d2e1f0;
    return this;
};
function rotl5(num) {
    return num << 5 | num >>> 27;
}
function rotl30(num) {
    return num << 30 | num >>> 2;
}
function ft(s, b, c, d) {
    if (s === 0) return b & c | ~b & d;
    if (s === 2) return b & c | b & d | c & d;
    return b ^ c ^ d;
}
Sha.prototype._update = function(M) {
    var W = this._w;
    var a = this._a | 0;
    var b = this._b | 0;
    var c = this._c | 0;
    var d = this._d | 0;
    var e = this._e | 0;
    for(var i = 0; i < 16; ++i)W[i] = M.readInt32BE(i * 4);
    for(; i < 80; ++i)W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
    for(var j = 0; j < 80; ++j){
        var s = ~~(j / 20);
        var t = rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s] | 0;
        e = d;
        d = c;
        c = rotl30(b);
        b = a;
        a = t;
    }
    this._a = a + this._a | 0;
    this._b = b + this._b | 0;
    this._c = c + this._c | 0;
    this._d = d + this._d | 0;
    this._e = e + this._e | 0;
};
Sha.prototype._hash = function() {
    var H = Buffer.allocUnsafe(20);
    H.writeInt32BE(this._a | 0, 0);
    H.writeInt32BE(this._b | 0, 4);
    H.writeInt32BE(this._c | 0, 8);
    H.writeInt32BE(this._d | 0, 12);
    H.writeInt32BE(this._e | 0, 16);
    return H;
};
module.exports = Sha;

},{"55404b425acd1c6f":"l3bOz","457bc9c7737d761f":"6X49L","44759e57eb2992a":"4WLFd"}],"6X49L":[function(require,module,exports) {
var Buffer = require("fe67468afd3c1b91").Buffer;
// prototype class for hash functions
function Hash(blockSize, finalSize) {
    this._block = Buffer.alloc(blockSize);
    this._finalSize = finalSize;
    this._blockSize = blockSize;
    this._len = 0;
}
Hash.prototype.update = function(data, enc) {
    if (typeof data === "string") {
        enc = enc || "utf8";
        data = Buffer.from(data, enc);
    }
    var block = this._block;
    var blockSize = this._blockSize;
    var length = data.length;
    var accum = this._len;
    for(var offset = 0; offset < length;){
        var assigned = accum % blockSize;
        var remainder = Math.min(length - offset, blockSize - assigned);
        for(var i = 0; i < remainder; i++)block[assigned + i] = data[offset + i];
        accum += remainder;
        offset += remainder;
        if (accum % blockSize === 0) this._update(block);
    }
    this._len += length;
    return this;
};
Hash.prototype.digest = function(enc) {
    var rem = this._len % this._blockSize;
    this._block[rem] = 0x80;
    // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
    // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
    this._block.fill(0, rem + 1);
    if (rem >= this._finalSize) {
        this._update(this._block);
        this._block.fill(0);
    }
    var bits = this._len * 8;
    // uint32
    if (bits <= 0xffffffff) this._block.writeUInt32BE(bits, this._blockSize - 4);
    else {
        var lowBits = (bits & 0xffffffff) >>> 0;
        var highBits = (bits - lowBits) / 0x100000000;
        this._block.writeUInt32BE(highBits, this._blockSize - 8);
        this._block.writeUInt32BE(lowBits, this._blockSize - 4);
    }
    this._update(this._block);
    var hash = this._hash();
    return enc ? hash.toString(enc) : hash;
};
Hash.prototype._update = function() {
    throw new Error("_update must be implemented by subclass");
};
module.exports = Hash;

},{"fe67468afd3c1b91":"4WLFd"}],"82JNU":[function(require,module,exports) {
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */ var inherits = require("bf0dcaa2121c06d3");
var Hash = require("788f05b1f9753762");
var Buffer = require("ee7c2a3e649d259f").Buffer;
var K = [
    0x5a827999,
    0x6ed9eba1,
    -1894007588,
    -899497514
];
var W = new Array(80);
function Sha1() {
    this.init();
    this._w = W;
    Hash.call(this, 64, 56);
}
inherits(Sha1, Hash);
Sha1.prototype.init = function() {
    this._a = 0x67452301;
    this._b = 0xefcdab89;
    this._c = 0x98badcfe;
    this._d = 0x10325476;
    this._e = 0xc3d2e1f0;
    return this;
};
function rotl1(num) {
    return num << 1 | num >>> 31;
}
function rotl5(num) {
    return num << 5 | num >>> 27;
}
function rotl30(num) {
    return num << 30 | num >>> 2;
}
function ft(s, b, c, d) {
    if (s === 0) return b & c | ~b & d;
    if (s === 2) return b & c | b & d | c & d;
    return b ^ c ^ d;
}
Sha1.prototype._update = function(M) {
    var W = this._w;
    var a = this._a | 0;
    var b = this._b | 0;
    var c = this._c | 0;
    var d = this._d | 0;
    var e = this._e | 0;
    for(var i = 0; i < 16; ++i)W[i] = M.readInt32BE(i * 4);
    for(; i < 80; ++i)W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]);
    for(var j = 0; j < 80; ++j){
        var s = ~~(j / 20);
        var t = rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s] | 0;
        e = d;
        d = c;
        c = rotl30(b);
        b = a;
        a = t;
    }
    this._a = a + this._a | 0;
    this._b = b + this._b | 0;
    this._c = c + this._c | 0;
    this._d = d + this._d | 0;
    this._e = e + this._e | 0;
};
Sha1.prototype._hash = function() {
    var H = Buffer.allocUnsafe(20);
    H.writeInt32BE(this._a | 0, 0);
    H.writeInt32BE(this._b | 0, 4);
    H.writeInt32BE(this._c | 0, 8);
    H.writeInt32BE(this._d | 0, 12);
    H.writeInt32BE(this._e | 0, 16);
    return H;
};
module.exports = Sha1;

},{"bf0dcaa2121c06d3":"l3bOz","788f05b1f9753762":"6X49L","ee7c2a3e649d259f":"4WLFd"}],"beHVS":[function(require,module,exports) {
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */ var inherits = require("1759318dd61b32af");
var Sha256 = require("5a24a8ff4dc414f6");
var Hash = require("377596dd27739a66");
var Buffer = require("381289f917f16a20").Buffer;
var W = new Array(64);
function Sha224() {
    this.init();
    this._w = W // new Array(64)
    ;
    Hash.call(this, 64, 56);
}
inherits(Sha224, Sha256);
Sha224.prototype.init = function() {
    this._a = 0xc1059ed8;
    this._b = 0x367cd507;
    this._c = 0x3070dd17;
    this._d = 0xf70e5939;
    this._e = 0xffc00b31;
    this._f = 0x68581511;
    this._g = 0x64f98fa7;
    this._h = 0xbefa4fa4;
    return this;
};
Sha224.prototype._hash = function() {
    var H = Buffer.allocUnsafe(28);
    H.writeInt32BE(this._a, 0);
    H.writeInt32BE(this._b, 4);
    H.writeInt32BE(this._c, 8);
    H.writeInt32BE(this._d, 12);
    H.writeInt32BE(this._e, 16);
    H.writeInt32BE(this._f, 20);
    H.writeInt32BE(this._g, 24);
    return H;
};
module.exports = Sha224;

},{"1759318dd61b32af":"l3bOz","5a24a8ff4dc414f6":"1OF5S","377596dd27739a66":"6X49L","381289f917f16a20":"4WLFd"}],"1OF5S":[function(require,module,exports) {
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */ var inherits = require("682a6716eeab42dd");
var Hash = require("f062bd789841a9ce");
var Buffer = require("1d47643a8adb8c1b").Buffer;
var K = [
    0x428A2F98,
    0x71374491,
    0xB5C0FBCF,
    0xE9B5DBA5,
    0x3956C25B,
    0x59F111F1,
    0x923F82A4,
    0xAB1C5ED5,
    0xD807AA98,
    0x12835B01,
    0x243185BE,
    0x550C7DC3,
    0x72BE5D74,
    0x80DEB1FE,
    0x9BDC06A7,
    0xC19BF174,
    0xE49B69C1,
    0xEFBE4786,
    0x0FC19DC6,
    0x240CA1CC,
    0x2DE92C6F,
    0x4A7484AA,
    0x5CB0A9DC,
    0x76F988DA,
    0x983E5152,
    0xA831C66D,
    0xB00327C8,
    0xBF597FC7,
    0xC6E00BF3,
    0xD5A79147,
    0x06CA6351,
    0x14292967,
    0x27B70A85,
    0x2E1B2138,
    0x4D2C6DFC,
    0x53380D13,
    0x650A7354,
    0x766A0ABB,
    0x81C2C92E,
    0x92722C85,
    0xA2BFE8A1,
    0xA81A664B,
    0xC24B8B70,
    0xC76C51A3,
    0xD192E819,
    0xD6990624,
    0xF40E3585,
    0x106AA070,
    0x19A4C116,
    0x1E376C08,
    0x2748774C,
    0x34B0BCB5,
    0x391C0CB3,
    0x4ED8AA4A,
    0x5B9CCA4F,
    0x682E6FF3,
    0x748F82EE,
    0x78A5636F,
    0x84C87814,
    0x8CC70208,
    0x90BEFFFA,
    0xA4506CEB,
    0xBEF9A3F7,
    0xC67178F2
];
var W = new Array(64);
function Sha256() {
    this.init();
    this._w = W // new Array(64)
    ;
    Hash.call(this, 64, 56);
}
inherits(Sha256, Hash);
Sha256.prototype.init = function() {
    this._a = 0x6a09e667;
    this._b = 0xbb67ae85;
    this._c = 0x3c6ef372;
    this._d = 0xa54ff53a;
    this._e = 0x510e527f;
    this._f = 0x9b05688c;
    this._g = 0x1f83d9ab;
    this._h = 0x5be0cd19;
    return this;
};
function ch(x, y, z) {
    return z ^ x & (y ^ z);
}
function maj(x, y, z) {
    return x & y | z & (x | y);
}
function sigma0(x) {
    return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10);
}
function sigma1(x) {
    return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7);
}
function gamma0(x) {
    return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ x >>> 3;
}
function gamma1(x) {
    return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ x >>> 10;
}
Sha256.prototype._update = function(M) {
    var W = this._w;
    var a = this._a | 0;
    var b = this._b | 0;
    var c = this._c | 0;
    var d = this._d | 0;
    var e = this._e | 0;
    var f = this._f | 0;
    var g = this._g | 0;
    var h = this._h | 0;
    for(var i = 0; i < 16; ++i)W[i] = M.readInt32BE(i * 4);
    for(; i < 64; ++i)W[i] = gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16] | 0;
    for(var j = 0; j < 64; ++j){
        var T1 = h + sigma1(e) + ch(e, f, g) + K[j] + W[j] | 0;
        var T2 = sigma0(a) + maj(a, b, c) | 0;
        h = g;
        g = f;
        f = e;
        e = d + T1 | 0;
        d = c;
        c = b;
        b = a;
        a = T1 + T2 | 0;
    }
    this._a = a + this._a | 0;
    this._b = b + this._b | 0;
    this._c = c + this._c | 0;
    this._d = d + this._d | 0;
    this._e = e + this._e | 0;
    this._f = f + this._f | 0;
    this._g = g + this._g | 0;
    this._h = h + this._h | 0;
};
Sha256.prototype._hash = function() {
    var H = Buffer.allocUnsafe(32);
    H.writeInt32BE(this._a, 0);
    H.writeInt32BE(this._b, 4);
    H.writeInt32BE(this._c, 8);
    H.writeInt32BE(this._d, 12);
    H.writeInt32BE(this._e, 16);
    H.writeInt32BE(this._f, 20);
    H.writeInt32BE(this._g, 24);
    H.writeInt32BE(this._h, 28);
    return H;
};
module.exports = Sha256;

},{"682a6716eeab42dd":"l3bOz","f062bd789841a9ce":"6X49L","1d47643a8adb8c1b":"4WLFd"}],"4iFFC":[function(require,module,exports) {
var inherits = require("2a5cbb73fedd61b");
var SHA512 = require("fdb4d0946b31cdb5");
var Hash = require("50aa04d4bd2df0e1");
var Buffer = require("3d3bcc84ec383b74").Buffer;
var W = new Array(160);
function Sha384() {
    this.init();
    this._w = W;
    Hash.call(this, 128, 112);
}
inherits(Sha384, SHA512);
Sha384.prototype.init = function() {
    this._ah = 0xcbbb9d5d;
    this._bh = 0x629a292a;
    this._ch = 0x9159015a;
    this._dh = 0x152fecd8;
    this._eh = 0x67332667;
    this._fh = 0x8eb44a87;
    this._gh = 0xdb0c2e0d;
    this._hh = 0x47b5481d;
    this._al = 0xc1059ed8;
    this._bl = 0x367cd507;
    this._cl = 0x3070dd17;
    this._dl = 0xf70e5939;
    this._el = 0xffc00b31;
    this._fl = 0x68581511;
    this._gl = 0x64f98fa7;
    this._hl = 0xbefa4fa4;
    return this;
};
Sha384.prototype._hash = function() {
    var H = Buffer.allocUnsafe(48);
    function writeInt64BE(h, l, offset) {
        H.writeInt32BE(h, offset);
        H.writeInt32BE(l, offset + 4);
    }
    writeInt64BE(this._ah, this._al, 0);
    writeInt64BE(this._bh, this._bl, 8);
    writeInt64BE(this._ch, this._cl, 16);
    writeInt64BE(this._dh, this._dl, 24);
    writeInt64BE(this._eh, this._el, 32);
    writeInt64BE(this._fh, this._fl, 40);
    return H;
};
module.exports = Sha384;

},{"2a5cbb73fedd61b":"l3bOz","fdb4d0946b31cdb5":"5xOFP","50aa04d4bd2df0e1":"6X49L","3d3bcc84ec383b74":"4WLFd"}],"5xOFP":[function(require,module,exports) {
var inherits = require("8d87c82d5ce5743");
var Hash = require("27d0146c4419ba93");
var Buffer = require("602d9c7256ca6bf7").Buffer;
var K = [
    0x428a2f98,
    0xd728ae22,
    0x71374491,
    0x23ef65cd,
    0xb5c0fbcf,
    0xec4d3b2f,
    0xe9b5dba5,
    0x8189dbbc,
    0x3956c25b,
    0xf348b538,
    0x59f111f1,
    0xb605d019,
    0x923f82a4,
    0xaf194f9b,
    0xab1c5ed5,
    0xda6d8118,
    0xd807aa98,
    0xa3030242,
    0x12835b01,
    0x45706fbe,
    0x243185be,
    0x4ee4b28c,
    0x550c7dc3,
    0xd5ffb4e2,
    0x72be5d74,
    0xf27b896f,
    0x80deb1fe,
    0x3b1696b1,
    0x9bdc06a7,
    0x25c71235,
    0xc19bf174,
    0xcf692694,
    0xe49b69c1,
    0x9ef14ad2,
    0xefbe4786,
    0x384f25e3,
    0x0fc19dc6,
    0x8b8cd5b5,
    0x240ca1cc,
    0x77ac9c65,
    0x2de92c6f,
    0x592b0275,
    0x4a7484aa,
    0x6ea6e483,
    0x5cb0a9dc,
    0xbd41fbd4,
    0x76f988da,
    0x831153b5,
    0x983e5152,
    0xee66dfab,
    0xa831c66d,
    0x2db43210,
    0xb00327c8,
    0x98fb213f,
    0xbf597fc7,
    0xbeef0ee4,
    0xc6e00bf3,
    0x3da88fc2,
    0xd5a79147,
    0x930aa725,
    0x06ca6351,
    0xe003826f,
    0x14292967,
    0x0a0e6e70,
    0x27b70a85,
    0x46d22ffc,
    0x2e1b2138,
    0x5c26c926,
    0x4d2c6dfc,
    0x5ac42aed,
    0x53380d13,
    0x9d95b3df,
    0x650a7354,
    0x8baf63de,
    0x766a0abb,
    0x3c77b2a8,
    0x81c2c92e,
    0x47edaee6,
    0x92722c85,
    0x1482353b,
    0xa2bfe8a1,
    0x4cf10364,
    0xa81a664b,
    0xbc423001,
    0xc24b8b70,
    0xd0f89791,
    0xc76c51a3,
    0x0654be30,
    0xd192e819,
    0xd6ef5218,
    0xd6990624,
    0x5565a910,
    0xf40e3585,
    0x5771202a,
    0x106aa070,
    0x32bbd1b8,
    0x19a4c116,
    0xb8d2d0c8,
    0x1e376c08,
    0x5141ab53,
    0x2748774c,
    0xdf8eeb99,
    0x34b0bcb5,
    0xe19b48a8,
    0x391c0cb3,
    0xc5c95a63,
    0x4ed8aa4a,
    0xe3418acb,
    0x5b9cca4f,
    0x7763e373,
    0x682e6ff3,
    0xd6b2b8a3,
    0x748f82ee,
    0x5defb2fc,
    0x78a5636f,
    0x43172f60,
    0x84c87814,
    0xa1f0ab72,
    0x8cc70208,
    0x1a6439ec,
    0x90befffa,
    0x23631e28,
    0xa4506ceb,
    0xde82bde9,
    0xbef9a3f7,
    0xb2c67915,
    0xc67178f2,
    0xe372532b,
    0xca273ece,
    0xea26619c,
    0xd186b8c7,
    0x21c0c207,
    0xeada7dd6,
    0xcde0eb1e,
    0xf57d4f7f,
    0xee6ed178,
    0x06f067aa,
    0x72176fba,
    0x0a637dc5,
    0xa2c898a6,
    0x113f9804,
    0xbef90dae,
    0x1b710b35,
    0x131c471b,
    0x28db77f5,
    0x23047d84,
    0x32caab7b,
    0x40c72493,
    0x3c9ebe0a,
    0x15c9bebc,
    0x431d67c4,
    0x9c100d4c,
    0x4cc5d4be,
    0xcb3e42b6,
    0x597f299c,
    0xfc657e2a,
    0x5fcb6fab,
    0x3ad6faec,
    0x6c44198c,
    0x4a475817
];
var W = new Array(160);
function Sha512() {
    this.init();
    this._w = W;
    Hash.call(this, 128, 112);
}
inherits(Sha512, Hash);
Sha512.prototype.init = function() {
    this._ah = 0x6a09e667;
    this._bh = 0xbb67ae85;
    this._ch = 0x3c6ef372;
    this._dh = 0xa54ff53a;
    this._eh = 0x510e527f;
    this._fh = 0x9b05688c;
    this._gh = 0x1f83d9ab;
    this._hh = 0x5be0cd19;
    this._al = 0xf3bcc908;
    this._bl = 0x84caa73b;
    this._cl = 0xfe94f82b;
    this._dl = 0x5f1d36f1;
    this._el = 0xade682d1;
    this._fl = 0x2b3e6c1f;
    this._gl = 0xfb41bd6b;
    this._hl = 0x137e2179;
    return this;
};
function Ch(x, y, z) {
    return z ^ x & (y ^ z);
}
function maj(x, y, z) {
    return x & y | z & (x | y);
}
function sigma0(x, xl) {
    return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25);
}
function sigma1(x, xl) {
    return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23);
}
function Gamma0(x, xl) {
    return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ x >>> 7;
}
function Gamma0l(x, xl) {
    return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25);
}
function Gamma1(x, xl) {
    return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ x >>> 6;
}
function Gamma1l(x, xl) {
    return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26);
}
function getCarry(a, b) {
    return a >>> 0 < b >>> 0 ? 1 : 0;
}
Sha512.prototype._update = function(M) {
    var W = this._w;
    var ah = this._ah | 0;
    var bh = this._bh | 0;
    var ch = this._ch | 0;
    var dh = this._dh | 0;
    var eh = this._eh | 0;
    var fh = this._fh | 0;
    var gh = this._gh | 0;
    var hh = this._hh | 0;
    var al = this._al | 0;
    var bl = this._bl | 0;
    var cl = this._cl | 0;
    var dl = this._dl | 0;
    var el = this._el | 0;
    var fl = this._fl | 0;
    var gl = this._gl | 0;
    var hl = this._hl | 0;
    for(var i = 0; i < 32; i += 2){
        W[i] = M.readInt32BE(i * 4);
        W[i + 1] = M.readInt32BE(i * 4 + 4);
    }
    for(; i < 160; i += 2){
        var xh = W[i - 30];
        var xl = W[i - 30 + 1];
        var gamma0 = Gamma0(xh, xl);
        var gamma0l = Gamma0l(xl, xh);
        xh = W[i - 4];
        xl = W[i - 4 + 1];
        var gamma1 = Gamma1(xh, xl);
        var gamma1l = Gamma1l(xl, xh);
        // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
        var Wi7h = W[i - 14];
        var Wi7l = W[i - 14 + 1];
        var Wi16h = W[i - 32];
        var Wi16l = W[i - 32 + 1];
        var Wil = gamma0l + Wi7l | 0;
        var Wih = gamma0 + Wi7h + getCarry(Wil, gamma0l) | 0;
        Wil = Wil + gamma1l | 0;
        Wih = Wih + gamma1 + getCarry(Wil, gamma1l) | 0;
        Wil = Wil + Wi16l | 0;
        Wih = Wih + Wi16h + getCarry(Wil, Wi16l) | 0;
        W[i] = Wih;
        W[i + 1] = Wil;
    }
    for(var j = 0; j < 160; j += 2){
        Wih = W[j];
        Wil = W[j + 1];
        var majh = maj(ah, bh, ch);
        var majl = maj(al, bl, cl);
        var sigma0h = sigma0(ah, al);
        var sigma0l = sigma0(al, ah);
        var sigma1h = sigma1(eh, el);
        var sigma1l = sigma1(el, eh);
        // t1 = h + sigma1 + ch + K[j] + W[j]
        var Kih = K[j];
        var Kil = K[j + 1];
        var chh = Ch(eh, fh, gh);
        var chl = Ch(el, fl, gl);
        var t1l = hl + sigma1l | 0;
        var t1h = hh + sigma1h + getCarry(t1l, hl) | 0;
        t1l = t1l + chl | 0;
        t1h = t1h + chh + getCarry(t1l, chl) | 0;
        t1l = t1l + Kil | 0;
        t1h = t1h + Kih + getCarry(t1l, Kil) | 0;
        t1l = t1l + Wil | 0;
        t1h = t1h + Wih + getCarry(t1l, Wil) | 0;
        // t2 = sigma0 + maj
        var t2l = sigma0l + majl | 0;
        var t2h = sigma0h + majh + getCarry(t2l, sigma0l) | 0;
        hh = gh;
        hl = gl;
        gh = fh;
        gl = fl;
        fh = eh;
        fl = el;
        el = dl + t1l | 0;
        eh = dh + t1h + getCarry(el, dl) | 0;
        dh = ch;
        dl = cl;
        ch = bh;
        cl = bl;
        bh = ah;
        bl = al;
        al = t1l + t2l | 0;
        ah = t1h + t2h + getCarry(al, t1l) | 0;
    }
    this._al = this._al + al | 0;
    this._bl = this._bl + bl | 0;
    this._cl = this._cl + cl | 0;
    this._dl = this._dl + dl | 0;
    this._el = this._el + el | 0;
    this._fl = this._fl + fl | 0;
    this._gl = this._gl + gl | 0;
    this._hl = this._hl + hl | 0;
    this._ah = this._ah + ah + getCarry(this._al, al) | 0;
    this._bh = this._bh + bh + getCarry(this._bl, bl) | 0;
    this._ch = this._ch + ch + getCarry(this._cl, cl) | 0;
    this._dh = this._dh + dh + getCarry(this._dl, dl) | 0;
    this._eh = this._eh + eh + getCarry(this._el, el) | 0;
    this._fh = this._fh + fh + getCarry(this._fl, fl) | 0;
    this._gh = this._gh + gh + getCarry(this._gl, gl) | 0;
    this._hh = this._hh + hh + getCarry(this._hl, hl) | 0;
};
Sha512.prototype._hash = function() {
    var H = Buffer.allocUnsafe(64);
    function writeInt64BE(h, l, offset) {
        H.writeInt32BE(h, offset);
        H.writeInt32BE(l, offset + 4);
    }
    writeInt64BE(this._ah, this._al, 0);
    writeInt64BE(this._bh, this._bl, 8);
    writeInt64BE(this._ch, this._cl, 16);
    writeInt64BE(this._dh, this._dl, 24);
    writeInt64BE(this._eh, this._el, 32);
    writeInt64BE(this._fh, this._fl, 40);
    writeInt64BE(this._gh, this._gl, 48);
    writeInt64BE(this._hh, this._hl, 56);
    return H;
};
module.exports = Sha512;

},{"8d87c82d5ce5743":"l3bOz","27d0146c4419ba93":"6X49L","602d9c7256ca6bf7":"4WLFd"}],"cmRkf":[function(require,module,exports) {
var Buffer = require("631f7eb12d35b579").Buffer;
var Transform = require("5b378a2a05398c5").Transform;
var StringDecoder = require("d42da7de127e1c4b").StringDecoder;
var inherits = require("7a0f2f27fe0a389b");
function CipherBase(hashMode) {
    Transform.call(this);
    this.hashMode = typeof hashMode === "string";
    if (this.hashMode) this[hashMode] = this._finalOrDigest;
    else this.final = this._finalOrDigest;
    if (this._final) {
        this.__final = this._final;
        this._final = null;
    }
    this._decoder = null;
    this._encoding = null;
}
inherits(CipherBase, Transform);
CipherBase.prototype.update = function(data, inputEnc, outputEnc) {
    if (typeof data === "string") data = Buffer.from(data, inputEnc);
    var outData = this._update(data);
    if (this.hashMode) return this;
    if (outputEnc) outData = this._toString(outData, outputEnc);
    return outData;
};
CipherBase.prototype.setAutoPadding = function() {};
CipherBase.prototype.getAuthTag = function() {
    throw new Error("trying to get auth tag in unsupported state");
};
CipherBase.prototype.setAuthTag = function() {
    throw new Error("trying to set auth tag in unsupported state");
};
CipherBase.prototype.setAAD = function() {
    throw new Error("trying to set aad in unsupported state");
};
CipherBase.prototype._transform = function(data, _, next) {
    var err;
    try {
        if (this.hashMode) this._update(data);
        else this.push(this._update(data));
    } catch (e) {
        err = e;
    } finally{
        next(err);
    }
};
CipherBase.prototype._flush = function(done) {
    var err;
    try {
        this.push(this.__final());
    } catch (e) {
        err = e;
    }
    done(err);
};
CipherBase.prototype._finalOrDigest = function(outputEnc) {
    var outData = this.__final() || Buffer.alloc(0);
    if (outputEnc) outData = this._toString(outData, outputEnc, true);
    return outData;
};
CipherBase.prototype._toString = function(value, enc, fin) {
    if (!this._decoder) {
        this._decoder = new StringDecoder(enc);
        this._encoding = enc;
    }
    if (this._encoding !== enc) throw new Error("can't switch encodings");
    var out = this._decoder.write(value);
    if (fin) out += this._decoder.end();
    return out;
};
module.exports = CipherBase;

},{"631f7eb12d35b579":"4WLFd","5b378a2a05398c5":"bJO1t","d42da7de127e1c4b":"9gZvY","7a0f2f27fe0a389b":"l3bOz"}],"bJO1t":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
module.exports = Stream;
var EE = require("96b62835346f84f0").EventEmitter;
var inherits = require("4a6ee9586f51c38d");
inherits(Stream, EE);
Stream.Readable = require("e6206e1f4d20abc7");
Stream.Writable = require("a3f1405f37e1dfb1");
Stream.Duplex = require("6691a72c5fc222fd");
Stream.Transform = require("43a905ce7ec6ac9e");
Stream.PassThrough = require("dd715550d7783885");
Stream.finished = require("d90a3520974ec96e");
Stream.pipeline = require("eb2779cfd287c5c9");
// Backwards-compat with node 0.4.x
Stream.Stream = Stream;
// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.
function Stream() {
    EE.call(this);
}
Stream.prototype.pipe = function(dest, options) {
    var source = this;
    function ondata(chunk) {
        if (dest.writable) {
            if (false === dest.write(chunk) && source.pause) source.pause();
        }
    }
    source.on("data", ondata);
    function ondrain() {
        if (source.readable && source.resume) source.resume();
    }
    dest.on("drain", ondrain);
    // If the 'end' option is not supplied, dest.end() will be called when
    // source gets the 'end' or 'close' events.  Only dest.end() once.
    if (!dest._isStdio && (!options || options.end !== false)) {
        source.on("end", onend);
        source.on("close", onclose);
    }
    var didOnEnd = false;
    function onend() {
        if (didOnEnd) return;
        didOnEnd = true;
        dest.end();
    }
    function onclose() {
        if (didOnEnd) return;
        didOnEnd = true;
        if (typeof dest.destroy === "function") dest.destroy();
    }
    // don't leave dangling pipes when there are errors.
    function onerror(er) {
        cleanup();
        if (EE.listenerCount(this, "error") === 0) throw er; // Unhandled stream error in pipe.
    }
    source.on("error", onerror);
    dest.on("error", onerror);
    // remove all the event listeners that were added.
    function cleanup() {
        source.removeListener("data", ondata);
        dest.removeListener("drain", ondrain);
        source.removeListener("end", onend);
        source.removeListener("close", onclose);
        source.removeListener("error", onerror);
        dest.removeListener("error", onerror);
        source.removeListener("end", cleanup);
        source.removeListener("close", cleanup);
        dest.removeListener("close", cleanup);
    }
    source.on("end", cleanup);
    source.on("close", cleanup);
    dest.on("close", cleanup);
    dest.emit("pipe", source);
    // Allow for unix-like usage: A.pipe(B).pipe(C)
    return dest;
};

},{"96b62835346f84f0":"32fHr","4a6ee9586f51c38d":"l3bOz","e6206e1f4d20abc7":"fdlsB","a3f1405f37e1dfb1":"dvVZS","6691a72c5fc222fd":"e7R9x","43a905ce7ec6ac9e":"lXi5u","dd715550d7783885":"9wa6Y","d90a3520974ec96e":"4KjsE","eb2779cfd287c5c9":"9oBZJ"}],"01T6Z":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.concatArgs = exports.seqEqual = void 0;
/**
 * Check whether two sequences (e.g. Arrays of numbers) are equal.
 *
 * @param arr1 - One of the arrays to compare.
 * @param arr2 - The other array to compare.
 */ function seqEqual(arr1, arr2) {
    if (arr1.length !== arr2.length) return false;
    for(let i = 0; i < arr1.length; i++){
        if (arr1[i] !== arr2[i]) return false;
    }
    return true;
}
exports.seqEqual = seqEqual;
/**
 * Check whether a value is a sequence (e.g. Array of numbers).
 *
 * @param val - The value to check.
 */ function isSequence(val) {
    return typeof val !== "number";
}
/**
 * Concatenate all `arguments` into a single array. Each argument can be either
 * a single element or a sequence, which has a `length` property and supports
 * element retrieval via sequence[ix].
 *
 * > concatArgs(1, [2, 3], Buffer.from([4,5]), new Uint8Array([6, 7]));
 * [1,2,3,4,5,6,7]
 *
 * @param args - Concatenate of these args into a single array.
 * @returns Array of concatenated arguments
 */ function concatArgs(...args) {
    const ret = [];
    args.forEach((arg)=>{
        if (isSequence(arg)) for (const j of arg)ret.push(j);
        else ret.push(arg);
    });
    return ret;
}
exports.concatArgs = concatArgs;

},{}],"51Jyu":[function(require,module,exports) {
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.accountPublicFromPublicGenerator = exports.derivePrivateKey = void 0;
const elliptic = __importStar(require("9415ec96b7d73001"));
const Sha512_1 = __importDefault(require("9e033d5cb3774824"));
const secp256k1 = elliptic.ec("secp256k1");
function deriveScalar(bytes, discrim) {
    const order = secp256k1.curve.n;
    for(let i = 0; i <= 0xffffffff; i++){
        // We hash the bytes to find a 256 bit number, looping until we are sure it
        // is less than the order of the curve.
        const hasher = new Sha512_1.default().add(bytes);
        // If the optional discriminator index was passed in, update the hash.
        if (discrim !== undefined) hasher.addU32(discrim);
        hasher.addU32(i);
        const key = hasher.first256BN();
        /* istanbul ignore else */ if (key.cmpn(0) > 0 && key.cmp(order) < 0) return key;
    }
    // This error is practically impossible to reach.
    // The order of the curve describes the (finite) amount of points on the curve
    // https://github.com/indutny/elliptic/blob/master/lib/elliptic/curves.js#L182
    // How often will an (essentially) random number generated by Sha512 be larger than that?
    // There's 2^32 chances (the for loop) to get a number smaller than the order,
    // and it's rare that you'll even get past the first loop iteration.
    // Note that in TypeScript we actually need the throw, otherwise the function signature would be BN | undefined
    //
    /* istanbul ignore next */ throw new Error("impossible unicorn ;)");
}
/**
 * @param seed - Bytes.
 * @param [opts] - Object.
 * @param [opts.accountIndex=0] - The account number to generate.
 * @param [opts.validator=false] - Generate root key-pair,
 *                                              as used by validators.
 * @returns {bn.js} 256 bit scalar value.
 *
 */ function derivePrivateKey(seed, opts = {}) {
    const root = opts.validator;
    const order = secp256k1.curve.n;
    // This private generator represents the `root` private key, and is what's
    // used by validators for signing when a keypair is generated from a seed.
    const privateGen = deriveScalar(seed);
    if (root) // As returned by validation_create for a given seed
    return privateGen;
    const publicGen = secp256k1.g.mul(privateGen);
    // A seed can generate many keypairs as a function of the seed and a uint32.
    // Almost everyone just uses the first account, `0`.
    const accountIndex = opts.accountIndex || 0;
    return deriveScalar(publicGen.encodeCompressed(), accountIndex).add(privateGen).mod(order);
}
exports.derivePrivateKey = derivePrivateKey;
function accountPublicFromPublicGenerator(publicGenBytes) {
    const rootPubPoint = secp256k1.curve.decodePoint(publicGenBytes);
    const scalar = deriveScalar(publicGenBytes, 0);
    const point = secp256k1.g.mul(scalar);
    const offset = rootPubPoint.add(point);
    return offset.encodeCompressed();
}
exports.accountPublicFromPublicGenerator = accountPublicFromPublicGenerator;

},{"9415ec96b7d73001":"7iEbc","9e033d5cb3774824":"cAvgk"}],"cAvgk":[function(require,module,exports) {
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
/* eslint-disable no-bitwise --
 * lots of bitwise operators necessary for this */ const hashjs = __importStar(require("350597644a61411d"));
const BigNum = require("e13a5eac3b97e0aa");
class Sha512 {
    constructor(){
        this.hash = hashjs.sha512();
    }
    add(bytes) {
        this.hash.update(bytes);
        return this;
    }
    addU32(i) {
        return this.add([
            i >>> 24 & 0xff,
            i >>> 16 & 0xff,
            i >>> 8 & 0xff,
            i & 0xff
        ]);
    }
    finish() {
        return this.hash.digest();
    }
    first256() {
        return this.finish().slice(0, 32);
    }
    first256BN() {
        return new BigNum(this.first256());
    }
}
exports.default = Sha512;

},{"350597644a61411d":"dUx6k","e13a5eac3b97e0aa":"502eP"}],"502eP":[function(require,module,exports) {
(function(module1, exports) {
    "use strict";
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || "Assertion failed");
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === "le" || base === "be") {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || "be");
        }
    }
    if (typeof module1 === "object") module1.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") Buffer = window.Buffer;
        else Buffer = require("bd440367abe2ded7").Buffer;
    } catch (e) {}
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === "number") return this._initNumber(number, base, endian);
        if (typeof number === "object") return this._initArray(number, base, endian);
        if (base === "hex") base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === "le") this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 0x4000000) {
            this.words = [
                number & 0x3ffffff
            ];
            this.length = 1;
        } else if (number < 0x10000000000000) {
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff
            ];
            this.length = 2;
        } else {
            assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff,
                1
            ];
            this.length = 3;
        }
        if (endian !== "le") return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === "number");
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === "be") for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === "le") for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this._strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // '0' - '9'
        if (c >= 48 && c <= 57) return c - 48;
        else if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else assert(false, "Invalid character in " + string);
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 0x3ffffff;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this._strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var b = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) b = c - 49 + 0xa;
            else if (c >= 17) b = c - 17 + 0xa;
            else b = c;
            assert(c >= 0 && b < mul, "Invalid character");
            r += b;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        this._strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    function move(dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
    }
    BN.prototype._move = function _move(dest) {
        move(dest, this);
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype._strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    // Check Symbol.for because not everywhere where Symbol defined
    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
    if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") try {
        BN.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect;
    } catch (e) {
        BN.prototype.inspect = inspect;
    }
    else BN.prototype.inspect = inspect;
    function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
    }
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
            out = "";
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 0xffffff).toString(16);
                carry = w >>> 24 - off & 0xffffff;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = "0" + out;
            if (this.negative !== 0) out = "-" + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = "";
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modrn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = "0" + out;
            while(out.length % padding !== 0)out = "0" + out;
            if (this.negative !== 0) out = "-" + out;
            return out;
        }
        assert(false, "Base should be between 2 and 36");
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 0x4000000;
        else if (this.length === 3 && this.words[2] === 0x01) // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + this.words[1] * 0x4000000;
        else if (this.length > 2) assert(false, "Number can only safely store up to 53 bits");
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16, 2);
    };
    if (Buffer) BN.prototype.toBuffer = function toBuffer(endian, length) {
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    var allocate = function allocate(ArrayType, size) {
        if (ArrayType.allocUnsafe) return ArrayType.allocUnsafe(size);
        return new ArrayType(size);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        this._strip();
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, "byte array longer than desired length");
        assert(reqLength > 0, "Requested array length <= 0");
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === "le" ? "LE" : "BE";
        this["_toArrayLike" + postfix](res, byteLength);
        return res;
    };
    BN.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
        var position = 0;
        var carry = 0;
        for(var i = 0, shift = 0; i < this.length; i++){
            var word = this.words[i] << shift | carry;
            res[position++] = word & 0xff;
            if (position < res.length) res[position++] = word >> 8 & 0xff;
            if (position < res.length) res[position++] = word >> 16 & 0xff;
            if (shift === 6) {
                if (position < res.length) res[position++] = word >> 24 & 0xff;
                carry = 0;
                shift = 0;
            } else {
                carry = word >>> 24;
                shift += 2;
            }
        }
        if (position < res.length) {
            res[position++] = carry;
            while(position < res.length)res[position++] = 0;
        }
    };
    BN.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
        var position = res.length - 1;
        var carry = 0;
        for(var i = 0, shift = 0; i < this.length; i++){
            var word = this.words[i] << shift | carry;
            res[position--] = word & 0xff;
            if (position >= 0) res[position--] = word >> 8 & 0xff;
            if (position >= 0) res[position--] = word >> 16 & 0xff;
            if (shift === 6) {
                if (position >= 0) res[position--] = word >> 24 & 0xff;
                carry = 0;
                shift = 0;
            } else {
                carry = word >>> 24;
                shift += 2;
            }
        }
        if (position >= 0) {
            res[position--] = carry;
            while(position >= 0)res[position--] = 0;
        }
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 0x40) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 0x8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 0x02) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 0xf) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 0x3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 0x1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = num.words[off] >>> wbit & 0x01;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this._strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this._strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this._strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 0x3ffffff;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
        // And remove leading zeroes
        return this._strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this._strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this._strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 0x3ffffff;
        var carry = r / 0x4000000 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 0x4000000 | 0;
                rword = r & 0x3ffffff;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out._strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 0x3ffffff;
                ncarry = ncarry + (r / 0x4000000 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 0x3ffffff;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 0x3ffffff;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out._strip();
    }
    function jumboMulTo(self, num, out) {
        // Temporary disable, see https://github.com/indutny/bn.js/issues/211
        // var fftm = new FFTM();
        // return fftm.mulp(self, num, out);
        return bigMulTo(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 0x3ffffff;
            if (w < 0x4000000) carry = 0;
            else carry = w / 0x4000000 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 0x1fff;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 0x1fff;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out._strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(typeof num === "number");
        assert(num < 0x4000000);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
            carry >>= 26;
            carry += w / 0x4000000 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 0x3ffffff;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return isNegNum ? this.ineg() : this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if (++i < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this._strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this._strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === "number" && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this._strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) <= num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 0x4000000; i++){
            this.words[i] -= 0x4000000;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
        }
        return this._strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 0x3ffffff;
            carry = (w >> 26) - (right / 0x4000000 | 0);
            this.words[i + shift] = w & 0x3ffffff;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 0x3ffffff;
        }
        if (carry === 0) return this._strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;
        return this._strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 0x3ffffff);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q._strip();
        a._strip();
        // Denormalize
        if (mode !== "div" && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== "mod") div = res.div.neg();
            if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== "mod") div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === "div") return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === "mod") return {
                div: null,
                mod: new BN(this.modrn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modrn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(num <= 0x3ffffff);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return isNegNum ? -acc : acc;
    };
    // WARNING: DEPRECATED
    BN.prototype.modn = function modn(num) {
        return this.modrn(num);
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(num <= 0x3ffffff);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 0x4000000;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        this._strip();
        return isNegNum ? this.ineg() : this;
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while(i-- > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while(j-- > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while(i-- > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while(j-- > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true);
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === "number");
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 0x3ffffff;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this._strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 0x3ffffff, "Number is too big");
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        assert(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is a BN v4 instance
        r.strip();
        else // r is a BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 0x3d1;
            num.words[i] = lo & 0x3ffffff;
            lo = w * 0x40 + (lo / 0x4000000 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 0x13 + carry;
            var lo = hi & 0x3ffffff;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === "k256") prime = new K256();
        else if (name === "p224") prime = new P224();
        else if (name === "p192") prime = new P192();
        else if (name === "p25519") prime = new P25519();
        else throw new Error("Unknown prime " + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === "string") {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
        } else {
            assert(m.gtn(1), "modulus must be greater than 1");
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, "red works only with positives");
        assert(a.red, "red works only with red numbers");
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, "red works only with positives");
        assert(a.red && a.red === b.red, "red works only with red numbers");
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        move(a, a.umod(this.m)._forceRed(this));
        return a;
    };
    Red.prototype.neg = function neg(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(module, this);

},{"bd440367abe2ded7":"9C0N7"}],"kt3F2":[function(require,module,exports) {
var Buffer = require("95de8b9835d087d6").Buffer;
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.computePublicKeyHash = exports.hexToBytes = exports.bytesToHex = void 0;
const assert = __importStar(require("c19a14db43d3b62a"));
const hashjs = __importStar(require("6909381f7309737d"));
const BN = require("77f5d9222c076bdb");
function bytesToHex(a) {
    return Array.from(a, (byteValue)=>{
        const hex = byteValue.toString(16).toUpperCase();
        return hex.length > 1 ? hex : `0${hex}`;
    }).join("");
}
exports.bytesToHex = bytesToHex;
function hexToBytes(a) {
    assert.ok(a.length % 2 === 0);
    // Special-case length zero to return [].
    // BN.toArray intentionally returns [0] rather than [] for length zero,
    // which may make sense for BigNum data, but not for byte strings.
    return a.length === 0 ? [] : new BN(a, 16).toArray(null, a.length / 2);
}
exports.hexToBytes = hexToBytes;
function computePublicKeyHash(publicKeyBytes) {
    const hash256 = hashjs.sha256().update(publicKeyBytes).digest();
    const hash160 = hashjs.ripemd160().update(hash256).digest();
    return Buffer.from(hash160);
}
exports.computePublicKeyHash = computePublicKeyHash;

},{"95de8b9835d087d6":"6tQNr","c19a14db43d3b62a":"hnNl4","6909381f7309737d":"dUx6k","77f5d9222c076bdb":"502eP"}],"dR2CP":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.blake2b = void 0;
const _blake2_js_1 = require("543bd867b377e601");
const _u64_js_1 = require("7d885222a9901ee6");
const utils_js_1 = require("de52f0d17331202");
// Same as SHA-512 but LE
// prettier-ignore
const IV = new Uint32Array([
    0xf3bcc908,
    0x6a09e667,
    0x84caa73b,
    0xbb67ae85,
    0xfe94f82b,
    0x3c6ef372,
    0x5f1d36f1,
    0xa54ff53a,
    0xade682d1,
    0x510e527f,
    0x2b3e6c1f,
    0x9b05688c,
    0xfb41bd6b,
    0x1f83d9ab,
    0x137e2179,
    0x5be0cd19
]);
// Temporary buffer
const BUF = new Uint32Array(32);
// Mixing function G splitted in two halfs
function G1(a, b, c, d, msg, x) {
    // NOTE: V is LE here
    const Xl = msg[x], Xh = msg[x + 1]; // prettier-ignore
    let Al = BUF[2 * a], Ah = BUF[2 * a + 1]; // prettier-ignore
    let Bl = BUF[2 * b], Bh = BUF[2 * b + 1]; // prettier-ignore
    let Cl = BUF[2 * c], Ch = BUF[2 * c + 1]; // prettier-ignore
    let Dl = BUF[2 * d], Dh = BUF[2 * d + 1]; // prettier-ignore
    // v[a] = (v[a] + v[b] + x) | 0;
    let ll = _u64_js_1.default.add3L(Al, Bl, Xl);
    Ah = _u64_js_1.default.add3H(ll, Ah, Bh, Xh);
    Al = ll | 0;
    // v[d] = rotr(v[d] ^ v[a], 32)
    ({ Dh, Dl } = {
        Dh: Dh ^ Ah,
        Dl: Dl ^ Al
    });
    ({ Dh, Dl } = {
        Dh: _u64_js_1.default.rotr32H(Dh, Dl),
        Dl: _u64_js_1.default.rotr32L(Dh, Dl)
    });
    // v[c] = (v[c] + v[d]) | 0;
    ({ h: Ch, l: Cl } = _u64_js_1.default.add(Ch, Cl, Dh, Dl));
    // v[b] = rotr(v[b] ^ v[c], 24)
    ({ Bh, Bl } = {
        Bh: Bh ^ Ch,
        Bl: Bl ^ Cl
    });
    ({ Bh, Bl } = {
        Bh: _u64_js_1.default.rotrSH(Bh, Bl, 24),
        Bl: _u64_js_1.default.rotrSL(Bh, Bl, 24)
    });
    BUF[2 * a] = Al, BUF[2 * a + 1] = Ah;
    BUF[2 * b] = Bl, BUF[2 * b + 1] = Bh;
    BUF[2 * c] = Cl, BUF[2 * c + 1] = Ch;
    BUF[2 * d] = Dl, BUF[2 * d + 1] = Dh;
}
function G2(a, b, c, d, msg, x) {
    // NOTE: V is LE here
    const Xl = msg[x], Xh = msg[x + 1]; // prettier-ignore
    let Al = BUF[2 * a], Ah = BUF[2 * a + 1]; // prettier-ignore
    let Bl = BUF[2 * b], Bh = BUF[2 * b + 1]; // prettier-ignore
    let Cl = BUF[2 * c], Ch = BUF[2 * c + 1]; // prettier-ignore
    let Dl = BUF[2 * d], Dh = BUF[2 * d + 1]; // prettier-ignore
    // v[a] = (v[a] + v[b] + x) | 0;
    let ll = _u64_js_1.default.add3L(Al, Bl, Xl);
    Ah = _u64_js_1.default.add3H(ll, Ah, Bh, Xh);
    Al = ll | 0;
    // v[d] = rotr(v[d] ^ v[a], 16)
    ({ Dh, Dl } = {
        Dh: Dh ^ Ah,
        Dl: Dl ^ Al
    });
    ({ Dh, Dl } = {
        Dh: _u64_js_1.default.rotrSH(Dh, Dl, 16),
        Dl: _u64_js_1.default.rotrSL(Dh, Dl, 16)
    });
    // v[c] = (v[c] + v[d]) | 0;
    ({ h: Ch, l: Cl } = _u64_js_1.default.add(Ch, Cl, Dh, Dl));
    // v[b] = rotr(v[b] ^ v[c], 63)
    ({ Bh, Bl } = {
        Bh: Bh ^ Ch,
        Bl: Bl ^ Cl
    });
    ({ Bh, Bl } = {
        Bh: _u64_js_1.default.rotrBH(Bh, Bl, 63),
        Bl: _u64_js_1.default.rotrBL(Bh, Bl, 63)
    });
    BUF[2 * a] = Al, BUF[2 * a + 1] = Ah;
    BUF[2 * b] = Bl, BUF[2 * b + 1] = Bh;
    BUF[2 * c] = Cl, BUF[2 * c + 1] = Ch;
    BUF[2 * d] = Dl, BUF[2 * d + 1] = Dh;
}
class BLAKE2b extends _blake2_js_1.BLAKE2 {
    constructor(opts = {}){
        super(128, opts.dkLen === undefined ? 64 : opts.dkLen, opts, 64, 16, 16);
        // Same as SHA-512, but LE
        this.v0l = IV[0] | 0;
        this.v0h = IV[1] | 0;
        this.v1l = IV[2] | 0;
        this.v1h = IV[3] | 0;
        this.v2l = IV[4] | 0;
        this.v2h = IV[5] | 0;
        this.v3l = IV[6] | 0;
        this.v3h = IV[7] | 0;
        this.v4l = IV[8] | 0;
        this.v4h = IV[9] | 0;
        this.v5l = IV[10] | 0;
        this.v5h = IV[11] | 0;
        this.v6l = IV[12] | 0;
        this.v6h = IV[13] | 0;
        this.v7l = IV[14] | 0;
        this.v7h = IV[15] | 0;
        const keyLength = opts.key ? opts.key.length : 0;
        this.v0l ^= this.outputLen | keyLength << 8 | 16842752;
        if (opts.salt) {
            const salt = (0, utils_js_1.u32)((0, utils_js_1.toBytes)(opts.salt));
            this.v4l ^= salt[0];
            this.v4h ^= salt[1];
            this.v5l ^= salt[2];
            this.v5h ^= salt[3];
        }
        if (opts.personalization) {
            const pers = (0, utils_js_1.u32)((0, utils_js_1.toBytes)(opts.personalization));
            this.v6l ^= pers[0];
            this.v6h ^= pers[1];
            this.v7l ^= pers[2];
            this.v7h ^= pers[3];
        }
        if (opts.key) {
            // Pad to blockLen and update
            const tmp = new Uint8Array(this.blockLen);
            tmp.set((0, utils_js_1.toBytes)(opts.key));
            this.update(tmp);
        }
    }
    // prettier-ignore
    get() {
        let { v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h } = this;
        return [
            v0l,
            v0h,
            v1l,
            v1h,
            v2l,
            v2h,
            v3l,
            v3h,
            v4l,
            v4h,
            v5l,
            v5h,
            v6l,
            v6h,
            v7l,
            v7h
        ];
    }
    // prettier-ignore
    set(v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h) {
        this.v0l = v0l | 0;
        this.v0h = v0h | 0;
        this.v1l = v1l | 0;
        this.v1h = v1h | 0;
        this.v2l = v2l | 0;
        this.v2h = v2h | 0;
        this.v3l = v3l | 0;
        this.v3h = v3h | 0;
        this.v4l = v4l | 0;
        this.v4h = v4h | 0;
        this.v5l = v5l | 0;
        this.v5h = v5h | 0;
        this.v6l = v6l | 0;
        this.v6h = v6h | 0;
        this.v7l = v7l | 0;
        this.v7h = v7h | 0;
    }
    compress(msg, offset, isLast) {
        this.get().forEach((v, i)=>BUF[i] = v); // First half from state.
        BUF.set(IV, 16); // Second half from IV.
        let { h, l } = _u64_js_1.default.fromBig(BigInt(this.length));
        BUF[24] = IV[8] ^ l; // Low word of the offset.
        BUF[25] = IV[9] ^ h; // High word.
        // Invert all bits for last block
        if (isLast) {
            BUF[28] = ~BUF[28];
            BUF[29] = ~BUF[29];
        }
        let j = 0;
        const s = _blake2_js_1.SIGMA;
        for(let i = 0; i < 12; i++){
            G1(0, 4, 8, 12, msg, offset + 2 * s[j++]);
            G2(0, 4, 8, 12, msg, offset + 2 * s[j++]);
            G1(1, 5, 9, 13, msg, offset + 2 * s[j++]);
            G2(1, 5, 9, 13, msg, offset + 2 * s[j++]);
            G1(2, 6, 10, 14, msg, offset + 2 * s[j++]);
            G2(2, 6, 10, 14, msg, offset + 2 * s[j++]);
            G1(3, 7, 11, 15, msg, offset + 2 * s[j++]);
            G2(3, 7, 11, 15, msg, offset + 2 * s[j++]);
            G1(0, 5, 10, 15, msg, offset + 2 * s[j++]);
            G2(0, 5, 10, 15, msg, offset + 2 * s[j++]);
            G1(1, 6, 11, 12, msg, offset + 2 * s[j++]);
            G2(1, 6, 11, 12, msg, offset + 2 * s[j++]);
            G1(2, 7, 8, 13, msg, offset + 2 * s[j++]);
            G2(2, 7, 8, 13, msg, offset + 2 * s[j++]);
            G1(3, 4, 9, 14, msg, offset + 2 * s[j++]);
            G2(3, 4, 9, 14, msg, offset + 2 * s[j++]);
        }
        this.v0l ^= BUF[0] ^ BUF[16];
        this.v0h ^= BUF[1] ^ BUF[17];
        this.v1l ^= BUF[2] ^ BUF[18];
        this.v1h ^= BUF[3] ^ BUF[19];
        this.v2l ^= BUF[4] ^ BUF[20];
        this.v2h ^= BUF[5] ^ BUF[21];
        this.v3l ^= BUF[6] ^ BUF[22];
        this.v3h ^= BUF[7] ^ BUF[23];
        this.v4l ^= BUF[8] ^ BUF[24];
        this.v4h ^= BUF[9] ^ BUF[25];
        this.v5l ^= BUF[10] ^ BUF[26];
        this.v5h ^= BUF[11] ^ BUF[27];
        this.v6l ^= BUF[12] ^ BUF[28];
        this.v6h ^= BUF[13] ^ BUF[29];
        this.v7l ^= BUF[14] ^ BUF[30];
        this.v7h ^= BUF[15] ^ BUF[31];
        BUF.fill(0);
    }
    destroy() {
        this.destroyed = true;
        this.buffer32.fill(0);
        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
}
/**
 * BLAKE2b - optimized for 64-bit platforms. JS doesn't have uint64, so it's slower than BLAKE2s.
 * @param msg - message that would be hashed
 * @param opts - dkLen, key, salt, personalization
 */ exports.blake2b = (0, utils_js_1.wrapConstructorWithOpts)((opts)=>new BLAKE2b(opts));

},{"543bd867b377e601":"g6Yl3","7d885222a9901ee6":"26uEn","de52f0d17331202":"1jA8a"}],"lXkpJ":[function(require,module,exports) {
module.exports = JSON.parse('{"name":"@onekeyfe/hd-core","version":"0.3.23-alpha.1","description":"> TODO: description","author":"OneKey","homepage":"https://github.com/OneKeyHQ/hardware-js-sdk#readme","license":"ISC","main":"dist/index.js","types":"dist/index.d.ts","repository":{"type":"git","url":"git+https://github.com/OneKeyHQ/hardware-js-sdk.git"},"publishConfig":{"access":"public"},"scripts":{"dev":"rimraf dist && rollup -c ../../build/rollup.config.js -w","build":"rimraf dist && rollup -c ../../build/rollup.config.js","lint":"eslint .","lint:fix":"eslint . --fix","test":"jest"},"bugs":{"url":"https://github.com/OneKeyHQ/hardware-js-sdk/issues"},"dependencies":{"@onekeyfe/hd-shared":"^0.3.23-alpha.1","@onekeyfe/hd-transport":"^0.3.23-alpha.1","axios":"^0.27.2","bignumber.js":"^9.0.2","bytebuffer":"^5.0.1","jszip":"^3.10.1","parse-uri":"^1.0.7","semver":"^7.3.7"},"peerDependencies":{"@noble/hashes":"^1.1.3","ripple-keypairs":"^1.1.4"},"devDependencies":{"@noble/hashes":"^1.1.3","@types/parse-uri":"^1.0.0","@types/semver":"^7.3.9","ripple-keypairs":"^1.1.4"},"gitHead":"97bd94a154107b9c2593ca65a635acf3636ffb14"}');

},{}],"aGoic":[function(require,module,exports) {
"use strict";
var transport = require("ad0e7daa7fc88a6b");
var hdShared = require("f52442efa67589fc");
var axios = require("cb87e08bc328a6aa");
function _interopDefaultLegacy(e) {
    return e && typeof e === "object" && "default" in e ? e : {
        "default": e
    };
}
var transport__default = /*#__PURE__*/ _interopDefaultLegacy(transport);
var axios__default = /*#__PURE__*/ _interopDefaultLegacy(axios);
/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function contentType(body) {
    if (typeof body === "string") return "text/plain";
    return "application/json";
}
function wrapBody(body) {
    if (typeof body === "string") return body;
    return JSON.stringify(body);
}
function parseResult(text) {
    try {
        const result = JSON.parse(text);
        if (typeof result !== "object") throw new Error("Invalid response");
        return result;
    } catch (e) {
        return text;
    }
}
function request(options) {
    var _a;
    return __awaiter(this, void 0, void 0, function*() {
        const fetchOptions = {
            url: options.url,
            method: options.method,
            data: wrapBody(options.body),
            withCredentials: false,
            headers: {
                "Content-Type": contentType(options.body == null ? "" : options.body)
            },
            timeout: (_a = options.timeout) !== null && _a !== void 0 ? _a : undefined,
            transformResponse: (data)=>data
        };
        const res = yield axios__default["default"].request(fetchOptions);
        if (+res.status === 200) return parseResult(res.data);
        const resJson = parseResult(res.data);
        if (typeof resJson === "object" && resJson != null && resJson.error != null) throw new hdShared.HardwareError({
            errorCode: hdShared.HardwareErrorCode.NetworkError,
            message: resJson.error
        });
        else throw new hdShared.HardwareError({
            errorCode: hdShared.HardwareErrorCode.NetworkError,
            message: res.data
        });
    });
}
axios__default["default"].interceptors.request.use((config)=>{
    var _a, _b;
    if (typeof window !== "undefined") return config;
    if ((_a = config.url) === null || _a === void 0 ? void 0 : _a.startsWith("http://localhost:21320")) {
        if (!((_b = config === null || config === void 0 ? void 0 : config.headers) === null || _b === void 0 ? void 0 : _b.Origin)) {
            console.log("set node request origin");
            config.headers = Object.assign(Object.assign({}, config.headers), {
                Origin: "https://jssdk.onekey.so"
            });
        }
    }
    return config;
});
const DEFAULT_URL = "http://localhost:21320";
const { check, buildOne, receiveOne, parseConfigure } = transport__default["default"];
class HttpTransport {
    constructor(url){
        this.configured = false;
        this.stopped = false;
        this.url = url == null ? DEFAULT_URL : url;
    }
    _post(options) {
        if (this.stopped) return Promise.reject(hdShared.ERRORS.TypedError("Transport stopped."));
        return request(Object.assign(Object.assign({}, options), {
            method: "POST",
            url: this.url + options.url
        }));
    }
    init(logger) {
        return __awaiter(this, void 0, void 0, function*() {
            this.Log = logger;
            const bridgeVersion = yield this._silentInit();
            return bridgeVersion;
        });
    }
    _silentInit() {
        return __awaiter(this, void 0, void 0, function*() {
            const infoS = yield request({
                url: this.url,
                method: "POST",
                timeout: 3000
            });
            const info = check.info(infoS);
            return info.version;
        });
    }
    configure(signedData) {
        const messages = parseConfigure(signedData);
        this.configured = true;
        this._messages = messages;
    }
    listen(old) {
        return __awaiter(this, void 0, void 0, function*() {
            if (old === null) throw hdShared.ERRORS.TypedError("Http-Transport does not support listen without previous.");
            const devicesS = yield this._post({
                url: "/listen",
                body: old
            });
            const devices = check.devices(devicesS);
            return devices;
        });
    }
    enumerate() {
        return __awaiter(this, void 0, void 0, function*() {
            const devicesS = yield this._post({
                url: "/enumerate"
            });
            const devices = check.devices(devicesS);
            return devices;
        });
    }
    _acquireMixed(input) {
        const previousStr = input.previous == null ? "null" : input.previous;
        const url = `/acquire/${input.path}/${previousStr}`;
        return this._post({
            url
        });
    }
    acquire(input) {
        return __awaiter(this, void 0, void 0, function*() {
            const acquireS = yield this._acquireMixed(input);
            return check.acquire(acquireS);
        });
    }
    release(session, onclose) {
        return __awaiter(this, void 0, void 0, function*() {
            const res = this._post({
                url: `/release/${session}`
            });
            if (onclose) return;
            yield res;
        });
    }
    call(session, name, data) {
        return __awaiter(this, void 0, void 0, function*() {
            if (this._messages == null) throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.TransportNotConfigured);
            const messages = this._messages;
            this.Log.debug("call-", " name: ", name, " data: ", data);
            const o = buildOne(messages, name, data);
            const outData = o.toString("hex");
            const resData = yield this._post({
                url: `/call/${session}`,
                body: outData,
                timeout: name === "Initialize" ? 10000 : undefined
            });
            if (typeof resData !== "string") throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.NetworkError, "Returning data is not string.");
            const jsonData = receiveOne(messages, resData);
            return check.call(jsonData);
        });
    }
    post(session, name, data) {
        return __awaiter(this, void 0, void 0, function*() {
            if (this._messages == null) throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.TransportNotConfigured);
            const messages = this._messages;
            const outData = buildOne(messages, name, data).toString("hex");
            yield this._post({
                url: `/post/${session}`,
                body: outData
            });
        });
    }
    read(session) {
        return __awaiter(this, void 0, void 0, function*() {
            if (this._messages == null) throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.TransportNotConfigured);
            const messages = this._messages;
            const resData = yield this._post({
                url: `/read/${session}`
            });
            if (typeof resData !== "string") throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.NetworkError, "Returning data is not string.");
            const jsonData = receiveOne(messages, resData);
            return check.call(jsonData);
        });
    }
    requestDevice() {
        return Promise.reject();
    }
    stop() {
        this.stopped = true;
    }
    cancel() {
        this.Log.debug("canceled");
    }
}
module.exports = HttpTransport;

},{"ad0e7daa7fc88a6b":"eqGp2","f52442efa67589fc":"avzkU","cb87e08bc328a6aa":"gIwns"}],"3DGXq":[function(require,module,exports) {
var Buffer = require("dad6c97be877ab17").Buffer;
"use strict";
var transport = require("59e873ffda85129c");
var hdShared = require("65131b70b363ef76");
var ByteBuffer = require("d4c1efed2c3c57e5");
function _interopDefaultLegacy(e) {
    return e && typeof e === "object" && "default" in e ? e : {
        "default": e
    };
}
var transport__default = /*#__PURE__*/ _interopDefaultLegacy(transport);
var ByteBuffer__default = /*#__PURE__*/ _interopDefaultLegacy(ByteBuffer);
/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
const { parseConfigure, buildEncodeBuffers, decodeProtocol, receiveOne, check } = transport__default["default"];
const ONEKEY_FILTER = [
    {
        vendorId: 0x1209,
        productId: 0x53c0
    },
    {
        vendorId: 0x1209,
        productId: 0x53c1
    }
];
const CONFIGURATION_ID = 1;
const INTERFACE_ID = 0;
const ENDPOINT_ID = 1;
const PACKET_SIZE = 64;
const HEADER_LENGTH = 6;
class WebUsbTransport {
    constructor(){
        this.stopped = false;
        this.configured = false;
        this._lastDevices = [];
        this.configurationId = CONFIGURATION_ID;
        this.endpointId = ENDPOINT_ID;
        this.interfaceId = INTERFACE_ID;
    }
    init(logger) {
        this.Log = logger;
        const { usb } = navigator;
        if (!usb) throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.RuntimeError, "WebUSB is not supported by current browsers");
        this.usb = usb;
    }
    configure(signedData) {
        const messages = parseConfigure(signedData);
        this.configured = true;
        this._messages = messages;
    }
    enumerate() {
        return __awaiter(this, void 0, void 0, function*() {
            const list = yield this._getDeviceList();
            return list;
        });
    }
    _getDeviceList() {
        return __awaiter(this, void 0, void 0, function*() {
            if (!this.usb) return [];
            const devices = yield this.usb.getDevices();
            const onekeyDevices = devices.filter((dev)=>{
                const isOneKey = ONEKEY_FILTER.some((desc)=>dev.vendorId === desc.vendorId && dev.productId === desc.productId);
                const hasSerialNumber = typeof dev.serialNumber === "string" && dev.serialNumber.length > 0;
                return isOneKey && hasSerialNumber;
            });
            this._lastDevices = onekeyDevices.map((device)=>({
                    path: device.serialNumber,
                    device
                }));
            return this._lastDevices;
        });
    }
    acquire(input) {
        var _a;
        return __awaiter(this, void 0, void 0, function*() {
            if (!input.path) return;
            try {
                yield this.connect((_a = input.path) !== null && _a !== void 0 ? _a : "", true);
                return yield Promise.resolve(input.path);
            } catch (e) {
                this.Log.debug("acquire error: ", e);
                throw e;
            }
        });
    }
    _findDevice(path) {
        const device = this._lastDevices.find((d)=>d.path === path);
        if (device == null) throw new Error("Action was interrupted.");
        return device.device;
    }
    connect(path, first) {
        return __awaiter(this, void 0, void 0, function*() {
            for(let i = 0; i < 5; i++){
                if (i > 0) yield new Promise((resolve)=>setTimeout(()=>resolve(undefined), i * 200));
                try {
                    return yield this._connectIn(path, first);
                } catch (e) {
                    if (i === 4) throw e;
                }
            }
        });
    }
    _connectIn(path, first) {
        return __awaiter(this, void 0, void 0, function*() {
            const device = yield this._findDevice(path);
            yield device.open();
            if (first) {
                yield device.selectConfiguration(this.configurationId);
                try {
                    yield device.reset();
                } catch (error) {}
            }
            yield device.claimInterface(this.interfaceId);
        });
    }
    call(path, name, data) {
        return __awaiter(this, void 0, void 0, function*() {
            if (this._messages == null) throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.TransportNotConfigured);
            const device = yield this._findDevice(path);
            if (!device) throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.DeviceNotFound);
            const messages = this._messages;
            this.Log.debug("call-", " name: ", name, " data: ", data);
            const encodeBuffers = buildEncodeBuffers(messages, name, data);
            for (const buffer of encodeBuffers){
                const newArray = new Uint8Array(PACKET_SIZE);
                newArray[0] = 63;
                newArray.set(new Uint8Array(buffer), 1);
                if (!device.opened) yield this.connect(path, false);
                yield device.transferOut(this.endpointId, newArray);
            }
            const resData = yield this._receive(path);
            if (typeof resData !== "string") throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.NetworkError, "Returning data is not string.");
            const jsonData = receiveOne(messages, resData);
            return check.call(jsonData);
        });
    }
    _receive(path) {
        var _a;
        return __awaiter(this, void 0, void 0, function*() {
            const device = yield this._findDevice(path);
            if (!device.opened) yield this.connect(path, false);
            const firstPacket = yield device.transferIn(this.endpointId, PACKET_SIZE);
            const firstData = (_a = firstPacket.data) === null || _a === void 0 ? void 0 : _a.buffer.slice(1);
            const { length, typeId, restBuffer } = decodeProtocol.decodeChunked(firstData);
            const lengthWithHeader = Number(length + HEADER_LENGTH);
            const decoded = new ByteBuffer__default["default"](lengthWithHeader);
            decoded.writeUint16(typeId);
            decoded.writeUint32(length);
            if (length) decoded.append(restBuffer);
            while(decoded.offset < lengthWithHeader){
                const res = yield device.transferIn(this.endpointId, PACKET_SIZE);
                if (!res.data) throw new Error("no data");
                if (res.data.byteLength === 0) console.warn("empty data");
                const buffer = res.data.buffer.slice(1);
                if (lengthWithHeader - decoded.offset >= PACKET_SIZE) decoded.append(buffer);
                else decoded.append(buffer.slice(0, lengthWithHeader - decoded.offset));
            }
            decoded.reset();
            const result = decoded.toBuffer();
            return Buffer.from(result).toString("hex");
        });
    }
    release(path) {
        return __awaiter(this, void 0, void 0, function*() {
            const device = yield this._findDevice(path);
            yield device.releaseInterface(this.interfaceId);
            yield device.close();
        });
    }
    requestDevice() {
        return __awaiter(this, void 0, void 0, function*() {
            if (!this.usb) return;
            try {
                const device = yield this.usb.requestDevice({
                    filters: ONEKEY_FILTER
                });
                return device;
            } catch (e) {
                this.Log.debug("requestDevice error: ", e);
            }
        });
    }
}
module.exports = WebUsbTransport;

},{"dad6c97be877ab17":"6tQNr","59e873ffda85129c":"eqGp2","65131b70b363ef76":"avzkU","d4c1efed2c3c57e5":"j5ACk"}],"dQk5R":[function(require,module,exports) {
"use strict";
var hdShared = require("4289e3364cadbb71");
var transport = require("eb91847f85fe8181");
function _interopDefaultLegacy(e) {
    return e && typeof e === "object" && "default" in e ? e : {
        "default": e
    };
}
var transport__default = /*#__PURE__*/ _interopDefaultLegacy(transport);
/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
const { check, buildBuffers, receiveOne, parseConfigure } = transport__default["default"];
class LowlevelTransport {
    constructor(){
        this.configured = false;
        this.plugin = {};
    }
    init(logger, emitter, plugin) {
        this.Log = logger;
        this.emitter = emitter;
        this.plugin = plugin;
        this.plugin.init();
    }
    configure(signedData) {
        const messages = parseConfigure(signedData);
        this.configured = true;
        this._messages = messages;
    }
    listen() {}
    enumerate() {
        return this.plugin.enumerate();
    }
    acquire(input) {
        var _a;
        return __awaiter(this, void 0, void 0, function*() {
            try {
                yield this.plugin.connect(input.uuid);
            } catch (error) {
                this.Log.debug("lowlelvel transport connect error: ", error);
                throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.LowlevelTrasnportConnectError, (_a = error.message) !== null && _a !== void 0 ? _a : error);
            }
        });
    }
    release(uuid) {
        return __awaiter(this, void 0, void 0, function*() {
            try {
                yield this.plugin.disconnect(uuid);
                return true;
            } catch (error) {
                this.Log.debug("lowlelvel transport disconnect error: ", error);
                return false;
            }
        });
    }
    call(uuid, name, data) {
        return __awaiter(this, void 0, void 0, function*() {
            if (this._messages === null || !this._messages) throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.TransportNotConfigured);
            const messages = this._messages;
            this.Log.debug("lowlevel-transport", "call-", " name: ", name, " data: ", data);
            const buffers = buildBuffers(messages, name, data);
            for (const o of buffers){
                const outData = o.toString("hex");
                this.Log.debug("send hex strting: ", outData);
                try {
                    yield this.plugin.send(uuid, outData);
                } catch (e) {
                    this.Log.debug("lowlevel transport send error: ", e);
                    throw hdShared.ERRORS.TypedError(hdShared.HardwareErrorCode.BleWriteCharacteristicError, e.reason);
                }
            }
            try {
                const response = yield this.plugin.receive();
                if (typeof response !== "string") throw new Error("Returning data is not string");
                this.Log.debug("receive data: ", response);
                const jsonData = receiveOne(messages, response);
                return check.call(jsonData);
            } catch (e) {
                this.Log.error("lowlevel call error: ", e);
                throw e;
            }
        });
    }
    cancel() {
        this.Log.debug("lowlevel-transport", "cancel");
    }
}
module.exports = LowlevelTransport;

},{"4289e3364cadbb71":"avzkU","eb91847f85fe8181":"eqGp2"}],"j7FRh":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, "__esModule", {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === "default" || key === "__esModule" || dest.hasOwnProperty(key)) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}]},["3loJC","jvaAX"], "jvaAX", "parcelRequire2d1f")

